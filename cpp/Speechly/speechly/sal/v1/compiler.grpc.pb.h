// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/sal/v1/compiler.proto
#ifndef GRPC_speechly_2fsal_2fv1_2fcompiler_2eproto__INCLUDED
#define GRPC_speechly_2fsal_2fv1_2fcompiler_2eproto__INCLUDED

#include "speechly/sal/v1/compiler.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace speechly {
namespace sal {
namespace v1 {

// The Speechly Compiler API is used for validating and compiling Speechly Annotation Language source files.
//
// The service requires a Speechly API token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
//
// The token acts as a proxy for the user who has generated it,
// i.e. all operations are performed with that user as a subject.
class Compiler final {
 public:
  static constexpr char const* service_full_name() {
    return "speechly.sal.v1.Compiler";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Compiles the SAL source and returns compiled templates and / or any compilation errors and warnings.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::sal::v1::CompileRequest>> Compile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::sal::v1::CompileRequest>>(CompileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::CompileRequest>> AsyncCompile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::CompileRequest>>(AsyncCompileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::CompileRequest>> PrepareAsyncCompile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::CompileRequest>>(PrepareAsyncCompileRaw(context, response, cq));
    }
    // Validates the SAL source and returns compilation notices / warnings and errors, if any.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::sal::v1::AppSource>> Validate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::sal::v1::AppSource>>(ValidateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::AppSource>> AsyncValidate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::AppSource>>(AsyncValidateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::AppSource>> PrepareAsyncValidate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::AppSource>>(PrepareAsyncValidateRaw(context, response, cq));
    }
    // Extracts raw, not compiled SAL templates from the SAL source.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>> ExtractSALSources(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>>(ExtractSALSourcesRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>> AsyncExtractSALSources(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>>(AsyncExtractSALSourcesRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>> PrepareAsyncExtractSALSources(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>>(PrepareAsyncExtractSALSourcesRaw(context, cq));
    }
    // Converts an input configuration (e.g. Alexa) to SAL format
    std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::sal::v1::ConvertRequest>> Convert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::sal::v1::ConvertRequest>>(ConvertRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::ConvertRequest>> AsyncConvert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::ConvertRequest>>(AsyncConvertRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::ConvertRequest>> PrepareAsyncConvert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::ConvertRequest>>(PrepareAsyncConvertRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Compiles the SAL source and returns compiled templates and / or any compilation errors and warnings.
      virtual void Compile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::CompileRequest>* reactor) = 0;
      // Validates the SAL source and returns compilation notices / warnings and errors, if any.
      virtual void Validate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::AppSource>* reactor) = 0;
      // Extracts raw, not compiled SAL templates from the SAL source.
      virtual void ExtractSALSources(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::speechly::sal::v1::AppSource,::speechly::sal::v1::ExtractSALSourcesResult>* reactor) = 0;
      // Converts an input configuration (e.g. Alexa) to SAL format
      virtual void Convert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::ConvertRequest>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::speechly::sal::v1::CompileRequest>* CompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::CompileRequest>* AsyncCompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::CompileRequest>* PrepareAsyncCompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::speechly::sal::v1::AppSource>* ValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::AppSource>* AsyncValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::AppSource>* PrepareAsyncValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* ExtractSALSourcesRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* AsyncExtractSALSourcesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* PrepareAsyncExtractSALSourcesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::speechly::sal::v1::ConvertRequest>* ConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::ConvertRequest>* AsyncConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::sal::v1::ConvertRequest>* PrepareAsyncConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::speechly::sal::v1::CompileRequest>> Compile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::speechly::sal::v1::CompileRequest>>(CompileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>> AsyncCompile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>>(AsyncCompileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>> PrepareAsyncCompile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>>(PrepareAsyncCompileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::speechly::sal::v1::AppSource>> Validate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::speechly::sal::v1::AppSource>>(ValidateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>> AsyncValidate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>>(AsyncValidateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>> PrepareAsyncValidate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>>(PrepareAsyncValidateRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>> ExtractSALSources(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>>(ExtractSALSourcesRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>> AsyncExtractSALSources(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>>(AsyncExtractSALSourcesRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>> PrepareAsyncExtractSALSources(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>>(PrepareAsyncExtractSALSourcesRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::speechly::sal::v1::ConvertRequest>> Convert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::speechly::sal::v1::ConvertRequest>>(ConvertRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>> AsyncConvert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>>(AsyncConvertRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>> PrepareAsyncConvert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>>(PrepareAsyncConvertRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Compile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::CompileRequest>* reactor) override;
      void Validate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::AppSource>* reactor) override;
      void ExtractSALSources(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::speechly::sal::v1::AppSource,::speechly::sal::v1::ExtractSALSourcesResult>* reactor) override;
      void Convert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::ConvertRequest>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::speechly::sal::v1::CompileRequest>* CompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response) override;
    ::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>* AsyncCompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>* PrepareAsyncCompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::speechly::sal::v1::AppSource>* ValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response) override;
    ::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>* AsyncValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>* PrepareAsyncValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* ExtractSALSourcesRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* AsyncExtractSALSourcesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* PrepareAsyncExtractSALSourcesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::speechly::sal::v1::ConvertRequest>* ConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response) override;
    ::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>* AsyncConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>* PrepareAsyncConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Compile_;
    const ::grpc::internal::RpcMethod rpcmethod_Validate_;
    const ::grpc::internal::RpcMethod rpcmethod_ExtractSALSources_;
    const ::grpc::internal::RpcMethod rpcmethod_Convert_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Compiles the SAL source and returns compiled templates and / or any compilation errors and warnings.
    virtual ::grpc::Status Compile(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::sal::v1::CompileRequest>* reader, ::speechly::sal::v1::CompileResult* response);
    // Validates the SAL source and returns compilation notices / warnings and errors, if any.
    virtual ::grpc::Status Validate(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::sal::v1::AppSource>* reader, ::speechly::sal::v1::ValidateResult* response);
    // Extracts raw, not compiled SAL templates from the SAL source.
    virtual ::grpc::Status ExtractSALSources(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* stream);
    // Converts an input configuration (e.g. Alexa) to SAL format
    virtual ::grpc::Status Convert(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::sal::v1::ConvertRequest>* reader, ::speechly::sal::v1::ConvertResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Compile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::CompileRequest>* /*reader*/, ::speechly::sal::v1::CompileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::speechly::sal::v1::CompileResult, ::speechly::sal::v1::CompileRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Validate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::AppSource>* /*reader*/, ::speechly::sal::v1::ValidateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::speechly::sal::v1::ValidateResult, ::speechly::sal::v1::AppSource>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExtractSALSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExtractSALSources() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ExtractSALSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractSALSources(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtractSALSources(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Convert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Convert() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Convert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Convert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::ConvertRequest>* /*reader*/, ::speechly::sal::v1::ConvertResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvert(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::speechly::sal::v1::ConvertResult, ::speechly::sal::v1::ConvertRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Compile<WithAsyncMethod_Validate<WithAsyncMethod_ExtractSALSources<WithAsyncMethod_Convert<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Compile() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::speechly::sal::v1::CompileRequest, ::speechly::sal::v1::CompileResult>(
          [this] { return this->Compile(); }));
    }
    ~ExperimentalWithCallbackMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::CompileRequest>* /*reader*/, ::speechly::sal::v1::CompileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::speechly::sal::v1::CompileRequest, ::speechly::sal::v1::CompileResult>* Compile() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::speechly::sal::v1::CompileRequest, ::speechly::sal::v1::CompileResult>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Validate() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ValidateResult>(
          [this] { return this->Validate(); }));
    }
    ~ExperimentalWithCallbackMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::AppSource>* /*reader*/, ::speechly::sal::v1::ValidateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ValidateResult>* Validate() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ValidateResult>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExtractSALSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExtractSALSources() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackBidiHandler< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>(
          [this] { return this->ExtractSALSources(); }));
    }
    ~ExperimentalWithCallbackMethod_ExtractSALSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractSALSources(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* ExtractSALSources() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Convert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Convert() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::speechly::sal::v1::ConvertRequest, ::speechly::sal::v1::ConvertResult>(
          [this] { return this->Convert(); }));
    }
    ~ExperimentalWithCallbackMethod_Convert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Convert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::ConvertRequest>* /*reader*/, ::speechly::sal::v1::ConvertResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::speechly::sal::v1::ConvertRequest, ::speechly::sal::v1::ConvertResult>* Convert() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::speechly::sal::v1::ConvertRequest, ::speechly::sal::v1::ConvertResult>;}
  };
  typedef ExperimentalWithCallbackMethod_Compile<ExperimentalWithCallbackMethod_Validate<ExperimentalWithCallbackMethod_ExtractSALSources<ExperimentalWithCallbackMethod_Convert<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Compile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::CompileRequest>* /*reader*/, ::speechly::sal::v1::CompileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Validate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::AppSource>* /*reader*/, ::speechly::sal::v1::ValidateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExtractSALSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExtractSALSources() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ExtractSALSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractSALSources(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Convert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Convert() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Convert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Convert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::ConvertRequest>* /*reader*/, ::speechly::sal::v1::ConvertResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Compile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::CompileRequest>* /*reader*/, ::speechly::sal::v1::CompileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Validate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::AppSource>* /*reader*/, ::speechly::sal::v1::ValidateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExtractSALSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExtractSALSources() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ExtractSALSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractSALSources(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtractSALSources(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Convert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Convert() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Convert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Convert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::ConvertRequest>* /*reader*/, ::speechly::sal::v1::ConvertResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvert(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Compile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Compile(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::CompileRequest>* /*reader*/, ::speechly::sal::v1::CompileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Compile() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Validate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Validate(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::AppSource>* /*reader*/, ::speechly::sal::v1::ValidateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Validate() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExtractSALSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExtractSALSources() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ExtractSALSources(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ExtractSALSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractSALSources(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ExtractSALSources() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Convert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Convert() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Convert(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Convert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Convert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::sal::v1::ConvertRequest>* /*reader*/, ::speechly::sal::v1::ConvertResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Convert() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace v1
}  // namespace sal
}  // namespace speechly


#endif  // GRPC_speechly_2fsal_2fv1_2fcompiler_2eproto__INCLUDED
