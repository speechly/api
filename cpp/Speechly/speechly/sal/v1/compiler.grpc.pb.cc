// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/sal/v1/compiler.proto

#include "speechly/sal/v1/compiler.pb.h"
#include "speechly/sal/v1/compiler.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace speechly {
namespace sal {
namespace v1 {

static const char* Compiler_method_names[] = {
  "/speechly.sal.v1.Compiler/Compile",
  "/speechly.sal.v1.Compiler/Validate",
  "/speechly.sal.v1.Compiler/ExtractSALSources",
  "/speechly.sal.v1.Compiler/Convert",
};

std::unique_ptr< Compiler::Stub> Compiler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Compiler::Stub> stub(new Compiler::Stub(channel));
  return stub;
}

Compiler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Compile_(Compiler_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Validate_(Compiler_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ExtractSALSources_(Compiler_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Convert_(Compiler_method_names[3], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::speechly::sal::v1::CompileRequest>* Compiler::Stub::CompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::speechly::sal::v1::CompileRequest>::Create(channel_.get(), rpcmethod_Compile_, context, response);
}

void Compiler::Stub::experimental_async::Compile(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::CompileRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::speechly::sal::v1::CompileRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Compile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>* Compiler::Stub::AsyncCompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::sal::v1::CompileRequest>::Create(channel_.get(), cq, rpcmethod_Compile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::speechly::sal::v1::CompileRequest>* Compiler::Stub::PrepareAsyncCompileRaw(::grpc::ClientContext* context, ::speechly::sal::v1::CompileResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::sal::v1::CompileRequest>::Create(channel_.get(), cq, rpcmethod_Compile_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::speechly::sal::v1::AppSource>* Compiler::Stub::ValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::speechly::sal::v1::AppSource>::Create(channel_.get(), rpcmethod_Validate_, context, response);
}

void Compiler::Stub::experimental_async::Validate(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::AppSource>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::speechly::sal::v1::AppSource>::Create(stub_->channel_.get(), stub_->rpcmethod_Validate_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>* Compiler::Stub::AsyncValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::sal::v1::AppSource>::Create(channel_.get(), cq, rpcmethod_Validate_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::speechly::sal::v1::AppSource>* Compiler::Stub::PrepareAsyncValidateRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ValidateResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::sal::v1::AppSource>::Create(channel_.get(), cq, rpcmethod_Validate_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* Compiler::Stub::ExtractSALSourcesRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>::Create(channel_.get(), rpcmethod_ExtractSALSources_, context);
}

void Compiler::Stub::experimental_async::ExtractSALSources(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::speechly::sal::v1::AppSource,::speechly::sal::v1::ExtractSALSourcesResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::speechly::sal::v1::AppSource,::speechly::sal::v1::ExtractSALSourcesResult>::Create(stub_->channel_.get(), stub_->rpcmethod_ExtractSALSources_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* Compiler::Stub::AsyncExtractSALSourcesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>::Create(channel_.get(), cq, rpcmethod_ExtractSALSources_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>* Compiler::Stub::PrepareAsyncExtractSALSourcesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>::Create(channel_.get(), cq, rpcmethod_ExtractSALSources_, context, false, nullptr);
}

::grpc::ClientWriter< ::speechly::sal::v1::ConvertRequest>* Compiler::Stub::ConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::speechly::sal::v1::ConvertRequest>::Create(channel_.get(), rpcmethod_Convert_, context, response);
}

void Compiler::Stub::experimental_async::Convert(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::experimental::ClientWriteReactor< ::speechly::sal::v1::ConvertRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::speechly::sal::v1::ConvertRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Convert_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>* Compiler::Stub::AsyncConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::sal::v1::ConvertRequest>::Create(channel_.get(), cq, rpcmethod_Convert_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::speechly::sal::v1::ConvertRequest>* Compiler::Stub::PrepareAsyncConvertRaw(::grpc::ClientContext* context, ::speechly::sal::v1::ConvertResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::sal::v1::ConvertRequest>::Create(channel_.get(), cq, rpcmethod_Convert_, context, response, false, nullptr);
}

Compiler::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Compiler_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Compiler::Service, ::speechly::sal::v1::CompileRequest, ::speechly::sal::v1::CompileResult>(
          std::mem_fn(&Compiler::Service::Compile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Compiler_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Compiler::Service, ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ValidateResult>(
          std::mem_fn(&Compiler::Service::Validate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Compiler_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Compiler::Service, ::speechly::sal::v1::AppSource, ::speechly::sal::v1::ExtractSALSourcesResult>(
          std::mem_fn(&Compiler::Service::ExtractSALSources), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Compiler_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Compiler::Service, ::speechly::sal::v1::ConvertRequest, ::speechly::sal::v1::ConvertResult>(
          std::mem_fn(&Compiler::Service::Convert), this)));
}

Compiler::Service::~Service() {
}

::grpc::Status Compiler::Service::Compile(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::sal::v1::CompileRequest>* reader, ::speechly::sal::v1::CompileResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Compiler::Service::Validate(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::sal::v1::AppSource>* reader, ::speechly::sal::v1::ValidateResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Compiler::Service::ExtractSALSources(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechly::sal::v1::ExtractSALSourcesResult, ::speechly::sal::v1::AppSource>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Compiler::Service::Convert(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::sal::v1::ConvertRequest>* reader, ::speechly::sal::v1::ConvertResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speechly
}  // namespace sal
}  // namespace v1

