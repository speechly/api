// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/sal/v1/compiler.proto

#include "speechly/sal/v1/compiler.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fsal_2fv1_2fcompiler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fsal_2fv1_2fcompiler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto;
namespace speechly {
namespace sal {
namespace v1 {
class AppSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppSource> _instance;
} _AppSource_default_instance_;
class CompileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompileRequest> _instance;
} _CompileRequest_default_instance_;
class CompileResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompileResult> _instance;
} _CompileResult_default_instance_;
class ValidateResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateResult> _instance;
} _ValidateResult_default_instance_;
class LineReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineReference> _instance;
} _LineReference_default_instance_;
class ExtractSALSourcesResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtractSALSourcesResult> _instance;
} _ExtractSALSourcesResult_default_instance_;
}  // namespace v1
}  // namespace sal
}  // namespace speechly
static void InitDefaultsscc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::sal::v1::_AppSource_default_instance_;
    new (ptr) ::speechly::sal::v1::AppSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::sal::v1::AppSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto}, {}};

static void InitDefaultsscc_info_CompileRequest_speechly_2fsal_2fv1_2fcompiler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::sal::v1::_CompileRequest_default_instance_;
    new (ptr) ::speechly::sal::v1::CompileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::sal::v1::CompileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompileRequest_speechly_2fsal_2fv1_2fcompiler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CompileRequest_speechly_2fsal_2fv1_2fcompiler_2eproto}, {
      &scc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto.base,}};

static void InitDefaultsscc_info_CompileResult_speechly_2fsal_2fv1_2fcompiler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::sal::v1::_CompileResult_default_instance_;
    new (ptr) ::speechly::sal::v1::CompileResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::sal::v1::CompileResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompileResult_speechly_2fsal_2fv1_2fcompiler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CompileResult_speechly_2fsal_2fv1_2fcompiler_2eproto}, {
      &scc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto.base,}};

static void InitDefaultsscc_info_ExtractSALSourcesResult_speechly_2fsal_2fv1_2fcompiler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::sal::v1::_ExtractSALSourcesResult_default_instance_;
    new (ptr) ::speechly::sal::v1::ExtractSALSourcesResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::sal::v1::ExtractSALSourcesResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtractSALSourcesResult_speechly_2fsal_2fv1_2fcompiler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExtractSALSourcesResult_speechly_2fsal_2fv1_2fcompiler_2eproto}, {}};

static void InitDefaultsscc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::sal::v1::_LineReference_default_instance_;
    new (ptr) ::speechly::sal::v1::LineReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::sal::v1::LineReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto}, {}};

static void InitDefaultsscc_info_ValidateResult_speechly_2fsal_2fv1_2fcompiler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::sal::v1::_ValidateResult_default_instance_;
    new (ptr) ::speechly::sal::v1::ValidateResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::sal::v1::ValidateResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidateResult_speechly_2fsal_2fv1_2fcompiler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidateResult_speechly_2fsal_2fv1_2fcompiler_2eproto}, {
      &scc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, language_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, data_chunk_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, app_source_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, batch_size_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, random_seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, result_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, templates_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ValidateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ValidateResult, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, line_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, column_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, file_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, level_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ExtractSALSourcesResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ExtractSALSourcesResult, data_chunk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::sal::v1::AppSource)},
  { 9, -1, sizeof(::speechly::sal::v1::CompileRequest)},
  { 17, -1, sizeof(::speechly::sal::v1::CompileResult)},
  { 25, -1, sizeof(::speechly::sal::v1::ValidateResult)},
  { 31, -1, sizeof(::speechly::sal::v1::LineReference)},
  { 41, -1, sizeof(::speechly::sal::v1::ExtractSALSourcesResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_AppSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_CompileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_CompileResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_ValidateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_LineReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_ExtractSALSourcesResult_default_instance_),
};

const char descriptor_table_protodef_speechly_2fsal_2fv1_2fcompiler_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036speechly/sal/v1/compiler.proto\022\017speech"
  "ly.sal.v1\"\331\001\n\tAppSource\022\016\n\006app_id\030\001 \001(\t\022"
  "\020\n\010language\030\002 \001(\t\022\022\n\ndata_chunk\030\003 \001(\014\022<\n"
  "\014content_type\030\004 \001(\0162&.speechly.sal.v1.Ap"
  "pSource.ContentType\"X\n\013ContentType\022\034\n\030CO"
  "NTENT_TYPE_UNSPECIFIED\020\000\022\025\n\021CONTENT_TYPE"
  "_YAML\020\001\022\024\n\020CONTENT_TYPE_TAR\020\002\"i\n\016Compile"
  "Request\022.\n\napp_source\030\001 \001(\0132\032.speechly.s"
  "al.v1.AppSource\022\022\n\nbatch_size\030\002 \001(\005\022\023\n\013r"
  "andom_seed\030\003 \001(\005\"\324\001\n\rCompileResult\0225\n\006re"
  "sult\030\001 \001(\0162%.speechly.sal.v1.CompileResu"
  "lt.Result\022\021\n\ttemplates\030\002 \003(\t\0220\n\010messages"
  "\030\003 \003(\0132\036.speechly.sal.v1.LineReference\"G"
  "\n\006Result\022\023\n\017COMPILE_SUCCESS\020\000\022\023\n\017COMPILE"
  "_FAILURE\020\001\022\023\n\017COMPILE_WARNING\020\002\"B\n\016Valid"
  "ateResult\0220\n\010messages\030\001 \003(\0132\036.speechly.s"
  "al.v1.LineReference\"\276\001\n\rLineReference\022\014\n"
  "\004line\030\001 \001(\004\022\016\n\006column\030\002 \001(\r\022\014\n\004file\030\003 \001("
  "\t\0223\n\005level\030\004 \001(\0162$.speechly.sal.v1.LineR"
  "eference.Level\022\017\n\007message\030\005 \001(\t\";\n\005Level"
  "\022\016\n\nLEVEL_NOTE\020\000\022\021\n\rLEVEL_WARNING\020\001\022\017\n\013L"
  "EVEL_ERROR\020\002\"-\n\027ExtractSALSourcesResult\022"
  "\022\n\ndata_chunk\030\001 \001(\0142\202\002\n\010Compiler\022L\n\007Comp"
  "ile\022\037.speechly.sal.v1.CompileRequest\032\036.s"
  "peechly.sal.v1.CompileResult(\001\022I\n\010Valida"
  "te\022\032.speechly.sal.v1.AppSource\032\037.speechl"
  "y.sal.v1.ValidateResult(\001\022]\n\021ExtractSALS"
  "ources\022\032.speechly.sal.v1.AppSource\032(.spe"
  "echly.sal.v1.ExtractSALSourcesResult(\0010\001"
  "Bk\n\027com.speechly.api.sal.v1B\rCompilerPro"
  "toP\001Z\025speechly/sal/v1;salv1\242\002\003SSX\252\002\017Spee"
  "chly.Sal.V1\312\002\017Speechly\\Sal\\V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_sccs[6] = {
  &scc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto.base,
  &scc_info_CompileRequest_speechly_2fsal_2fv1_2fcompiler_2eproto.base,
  &scc_info_CompileResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base,
  &scc_info_ExtractSALSourcesResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base,
  &scc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto.base,
  &scc_info_ValidateResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once;
static bool descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto = {
  &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_initialized, descriptor_table_protodef_speechly_2fsal_2fv1_2fcompiler_2eproto, "speechly/sal/v1/compiler.proto", 1277,
  &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once, descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_sccs, descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto::offsets,
  file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto, 6, file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto, file_level_service_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_speechly_2fsal_2fv1_2fcompiler_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto), true);
namespace speechly {
namespace sal {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppSource_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[0];
}
bool AppSource_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppSource_ContentType AppSource::CONTENT_TYPE_UNSPECIFIED;
constexpr AppSource_ContentType AppSource::CONTENT_TYPE_YAML;
constexpr AppSource_ContentType AppSource::CONTENT_TYPE_TAR;
constexpr AppSource_ContentType AppSource::ContentType_MIN;
constexpr AppSource_ContentType AppSource::ContentType_MAX;
constexpr int AppSource::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompileResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[1];
}
bool CompileResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CompileResult_Result CompileResult::COMPILE_SUCCESS;
constexpr CompileResult_Result CompileResult::COMPILE_FAILURE;
constexpr CompileResult_Result CompileResult::COMPILE_WARNING;
constexpr CompileResult_Result CompileResult::Result_MIN;
constexpr CompileResult_Result CompileResult::Result_MAX;
constexpr int CompileResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineReference_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[2];
}
bool LineReference_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LineReference_Level LineReference::LEVEL_NOTE;
constexpr LineReference_Level LineReference::LEVEL_WARNING;
constexpr LineReference_Level LineReference::LEVEL_ERROR;
constexpr LineReference_Level LineReference::Level_MIN;
constexpr LineReference_Level LineReference::Level_MAX;
constexpr int LineReference::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AppSource::InitAsDefaultInstance() {
}
class AppSource::_Internal {
 public:
};

AppSource::AppSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.sal.v1.AppSource)
}
AppSource::AppSource(const AppSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.AppSource)
}

void AppSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
}

AppSource::~AppSource() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.AppSource)
  SharedDtor();
}

void AppSource::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppSource& AppSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppSource_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  return *internal_default_instance();
}


void AppSource::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.AppSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
  _internal_metadata_.Clear();
}

const char* AppSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.AppSource.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.AppSource.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.sal.v1.AppSource.ContentType content_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::speechly::sal::v1::AppSource_ContentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.AppSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.AppSource.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.AppSource.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // bytes data_chunk = 3;
  if (this->data_chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data_chunk(), target);
  }

  // .speechly.sal.v1.AppSource.ContentType content_type = 4;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.AppSource)
  return target;
}

size_t AppSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.AppSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // bytes data_chunk = 3;
  if (this->data_chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  // .speechly.sal.v1.AppSource.ContentType content_type = 4;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.sal.v1.AppSource)
  GOOGLE_DCHECK_NE(&from, this);
  const AppSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.sal.v1.AppSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.sal.v1.AppSource)
    MergeFrom(*source);
  }
}

void AppSource::MergeFrom(const AppSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.AppSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.data_chunk().size() > 0) {

    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
}

void AppSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.sal.v1.AppSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSource::CopyFrom(const AppSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.AppSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSource::IsInitialized() const {
  return true;
}

void AppSource::InternalSwap(AppSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_chunk_.Swap(&other->data_chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompileRequest::InitAsDefaultInstance() {
  ::speechly::sal::v1::_CompileRequest_default_instance_._instance.get_mutable()->app_source_ = const_cast< ::speechly::sal::v1::AppSource*>(
      ::speechly::sal::v1::AppSource::internal_default_instance());
}
class CompileRequest::_Internal {
 public:
  static const ::speechly::sal::v1::AppSource& app_source(const CompileRequest* msg);
};

const ::speechly::sal::v1::AppSource&
CompileRequest::_Internal::app_source(const CompileRequest* msg) {
  return *msg->app_source_;
}
CompileRequest::CompileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.sal.v1.CompileRequest)
}
CompileRequest::CompileRequest(const CompileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_app_source()) {
    app_source_ = new ::speechly::sal::v1::AppSource(*from.app_source_);
  } else {
    app_source_ = nullptr;
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(random_seed_));
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.CompileRequest)
}

void CompileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompileRequest_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  ::memset(&app_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_seed_) -
      reinterpret_cast<char*>(&app_source_)) + sizeof(random_seed_));
}

CompileRequest::~CompileRequest() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.CompileRequest)
  SharedDtor();
}

void CompileRequest::SharedDtor() {
  if (this != internal_default_instance()) delete app_source_;
}

void CompileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompileRequest& CompileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompileRequest_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  return *internal_default_instance();
}


void CompileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.CompileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && app_source_ != nullptr) {
    delete app_source_;
  }
  app_source_ = nullptr;
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_seed_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(random_seed_));
  _internal_metadata_.Clear();
}

const char* CompileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.sal.v1.AppSource app_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 random_seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.CompileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.sal.v1.AppSource app_source = 1;
  if (this->has_app_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app_source(this), target, stream);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_batch_size(), target);
  }

  // int32 random_seed = 3;
  if (this->random_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_random_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.CompileRequest)
  return target;
}

size_t CompileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.CompileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.sal.v1.AppSource app_source = 1;
  if (this->has_app_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_source_);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  // int32 random_seed = 3;
  if (this->random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_random_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.sal.v1.CompileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.sal.v1.CompileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.sal.v1.CompileRequest)
    MergeFrom(*source);
  }
}

void CompileRequest::MergeFrom(const CompileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.CompileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app_source()) {
    _internal_mutable_app_source()->::speechly::sal::v1::AppSource::MergeFrom(from._internal_app_source());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
  if (from.random_seed() != 0) {
    _internal_set_random_seed(from._internal_random_seed());
  }
}

void CompileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.sal.v1.CompileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompileRequest::CopyFrom(const CompileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.CompileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileRequest::IsInitialized() const {
  return true;
}

void CompileRequest::InternalSwap(CompileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(app_source_, other->app_source_);
  swap(batch_size_, other->batch_size_);
  swap(random_seed_, other->random_seed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompileResult::InitAsDefaultInstance() {
}
class CompileResult::_Internal {
 public:
};

CompileResult::CompileResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.sal.v1.CompileResult)
}
CompileResult::CompileResult(const CompileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      templates_(from.templates_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.CompileResult)
}

void CompileResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompileResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  result_ = 0;
}

CompileResult::~CompileResult() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.CompileResult)
  SharedDtor();
}

void CompileResult::SharedDtor() {
}

void CompileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompileResult& CompileResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompileResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  return *internal_default_instance();
}


void CompileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.CompileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_.Clear();
  messages_.Clear();
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* CompileResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.sal.v1.CompileResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::speechly::sal::v1::CompileResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // repeated string templates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_templates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.CompileResult.templates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .speechly.sal.v1.LineReference messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompileResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.CompileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.sal.v1.CompileResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated string templates = 2;
  for (int i = 0, n = this->_internal_templates_size(); i < n; i++) {
    const auto& s = this->_internal_templates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.CompileResult.templates");
    target = stream->WriteString(2, s, target);
  }

  // repeated .speechly.sal.v1.LineReference messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.CompileResult)
  return target;
}

size_t CompileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.CompileResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string templates = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(templates_.size());
  for (int i = 0, n = templates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      templates_.Get(i));
  }

  // repeated .speechly.sal.v1.LineReference messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .speechly.sal.v1.CompileResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompileResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.sal.v1.CompileResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CompileResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompileResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.sal.v1.CompileResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.sal.v1.CompileResult)
    MergeFrom(*source);
  }
}

void CompileResult::MergeFrom(const CompileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.CompileResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  templates_.MergeFrom(from.templates_);
  messages_.MergeFrom(from.messages_);
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CompileResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.sal.v1.CompileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompileResult::CopyFrom(const CompileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.CompileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileResult::IsInitialized() const {
  return true;
}

void CompileResult::InternalSwap(CompileResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  templates_.InternalSwap(&other->templates_);
  messages_.InternalSwap(&other->messages_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidateResult::InitAsDefaultInstance() {
}
class ValidateResult::_Internal {
 public:
};

ValidateResult::ValidateResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.sal.v1.ValidateResult)
}
ValidateResult::ValidateResult(const ValidateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.ValidateResult)
}

void ValidateResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
}

ValidateResult::~ValidateResult() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.ValidateResult)
  SharedDtor();
}

void ValidateResult::SharedDtor() {
}

void ValidateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateResult& ValidateResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  return *internal_default_instance();
}


void ValidateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.ValidateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear();
}

const char* ValidateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speechly.sal.v1.LineReference messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.ValidateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.sal.v1.LineReference messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.ValidateResult)
  return target;
}

size_t ValidateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.ValidateResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.sal.v1.LineReference messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.sal.v1.ValidateResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.sal.v1.ValidateResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.sal.v1.ValidateResult)
    MergeFrom(*source);
  }
}

void ValidateResult::MergeFrom(const ValidateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.ValidateResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void ValidateResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.sal.v1.ValidateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateResult::CopyFrom(const ValidateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.ValidateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateResult::IsInitialized() const {
  return true;
}

void ValidateResult::InternalSwap(ValidateResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LineReference::InitAsDefaultInstance() {
}
class LineReference::_Internal {
 public:
};

LineReference::LineReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.sal.v1.LineReference)
}
LineReference::LineReference(const LineReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&line_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.LineReference)
}

void LineReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&line_)) + sizeof(level_));
}

LineReference::~LineReference() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.LineReference)
  SharedDtor();
}

void LineReference::SharedDtor() {
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LineReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineReference& LineReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineReference_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  return *internal_default_instance();
}


void LineReference::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.LineReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&line_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* LineReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.LineReference.file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.sal.v1.LineReference.Level level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::speechly::sal::v1::LineReference_Level>(val));
        } else goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.LineReference.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.LineReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 line = 1;
  if (this->line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_line(), target);
  }

  // uint32 column = 2;
  if (this->column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column(), target);
  }

  // string file = 3;
  if (this->file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.LineReference.file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file(), target);
  }

  // .speechly.sal.v1.LineReference.Level level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_level(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.LineReference.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.LineReference)
  return target;
}

size_t LineReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.LineReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file = 3;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint64 line = 1;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_line());
  }

  // uint32 column = 2;
  if (this->column() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  // .speechly.sal.v1.LineReference.Level level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.sal.v1.LineReference)
  GOOGLE_DCHECK_NE(&from, this);
  const LineReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LineReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.sal.v1.LineReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.sal.v1.LineReference)
    MergeFrom(*source);
  }
}

void LineReference::MergeFrom(const LineReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.LineReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from.column() != 0) {
    _internal_set_column(from._internal_column());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LineReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.sal.v1.LineReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineReference::CopyFrom(const LineReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.LineReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineReference::IsInitialized() const {
  return true;
}

void LineReference::InternalSwap(LineReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(line_, other->line_);
  swap(column_, other->column_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtractSALSourcesResult::InitAsDefaultInstance() {
}
class ExtractSALSourcesResult::_Internal {
 public:
};

ExtractSALSourcesResult::ExtractSALSourcesResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.sal.v1.ExtractSALSourcesResult)
}
ExtractSALSourcesResult::ExtractSALSourcesResult(const ExtractSALSourcesResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.ExtractSALSourcesResult)
}

void ExtractSALSourcesResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtractSALSourcesResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExtractSALSourcesResult::~ExtractSALSourcesResult() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.ExtractSALSourcesResult)
  SharedDtor();
}

void ExtractSALSourcesResult::SharedDtor() {
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtractSALSourcesResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtractSALSourcesResult& ExtractSALSourcesResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtractSALSourcesResult_speechly_2fsal_2fv1_2fcompiler_2eproto.base);
  return *internal_default_instance();
}


void ExtractSALSourcesResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.ExtractSALSourcesResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ExtractSALSourcesResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtractSALSourcesResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.ExtractSALSourcesResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (this->data_chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.ExtractSALSourcesResult)
  return target;
}

size_t ExtractSALSourcesResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.ExtractSALSourcesResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (this->data_chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtractSALSourcesResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.sal.v1.ExtractSALSourcesResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtractSALSourcesResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtractSALSourcesResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.sal.v1.ExtractSALSourcesResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.sal.v1.ExtractSALSourcesResult)
    MergeFrom(*source);
  }
}

void ExtractSALSourcesResult::MergeFrom(const ExtractSALSourcesResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.ExtractSALSourcesResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_chunk().size() > 0) {

    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
}

void ExtractSALSourcesResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.sal.v1.ExtractSALSourcesResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractSALSourcesResult::CopyFrom(const ExtractSALSourcesResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.ExtractSALSourcesResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractSALSourcesResult::IsInitialized() const {
  return true;
}

void ExtractSALSourcesResult::InternalSwap(ExtractSALSourcesResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_chunk_.Swap(&other->data_chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractSALSourcesResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sal
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::AppSource* Arena::CreateMaybeMessage< ::speechly::sal::v1::AppSource >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::sal::v1::AppSource >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::CompileRequest* Arena::CreateMaybeMessage< ::speechly::sal::v1::CompileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::sal::v1::CompileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::CompileResult* Arena::CreateMaybeMessage< ::speechly::sal::v1::CompileResult >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::sal::v1::CompileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::ValidateResult* Arena::CreateMaybeMessage< ::speechly::sal::v1::ValidateResult >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::sal::v1::ValidateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::LineReference* Arena::CreateMaybeMessage< ::speechly::sal::v1::LineReference >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::sal::v1::LineReference >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::ExtractSALSourcesResult* Arena::CreateMaybeMessage< ::speechly::sal::v1::ExtractSALSourcesResult >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::sal::v1::ExtractSALSourcesResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
