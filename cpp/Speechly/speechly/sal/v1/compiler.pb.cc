// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/sal/v1/compiler.proto

#include "speechly/sal/v1/compiler.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace sal {
namespace v1 {
constexpr AppSource::AppSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(0)
{}
struct AppSourceDefaultTypeInternal {
  constexpr AppSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSourceDefaultTypeInternal() {}
  union {
    AppSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSourceDefaultTypeInternal _AppSource_default_instance_;
constexpr CompileRequest::CompileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_source_(nullptr)
  , batch_size_(0)
  , random_seed_(0){}
struct CompileRequestDefaultTypeInternal {
  constexpr CompileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompileRequestDefaultTypeInternal() {}
  union {
    CompileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompileRequestDefaultTypeInternal _CompileRequest_default_instance_;
constexpr CompileResult::CompileResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : templates_()
  , messages_()
  , result_(0)
{}
struct CompileResultDefaultTypeInternal {
  constexpr CompileResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompileResultDefaultTypeInternal() {}
  union {
    CompileResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompileResultDefaultTypeInternal _CompileResult_default_instance_;
constexpr ConvertRequest::ConvertRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_format_(0)
{}
struct ConvertRequestDefaultTypeInternal {
  constexpr ConvertRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConvertRequestDefaultTypeInternal() {}
  union {
    ConvertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConvertRequestDefaultTypeInternal _ConvertRequest_default_instance_;
constexpr ConvertResult::ConvertResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : warnings_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(nullptr)
  , status_(0)
{}
struct ConvertResultDefaultTypeInternal {
  constexpr ConvertResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConvertResultDefaultTypeInternal() {}
  union {
    ConvertResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConvertResultDefaultTypeInternal _ConvertResult_default_instance_;
constexpr ValidateResult::ValidateResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct ValidateResultDefaultTypeInternal {
  constexpr ValidateResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateResultDefaultTypeInternal() {}
  union {
    ValidateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateResultDefaultTypeInternal _ValidateResult_default_instance_;
constexpr LineReference::LineReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_(uint64_t{0u})
  , column_(0u)
  , level_(0)
{}
struct LineReferenceDefaultTypeInternal {
  constexpr LineReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineReferenceDefaultTypeInternal() {}
  union {
    LineReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineReferenceDefaultTypeInternal _LineReference_default_instance_;
constexpr ExtractSALSourcesResult::ExtractSALSourcesResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExtractSALSourcesResultDefaultTypeInternal {
  constexpr ExtractSALSourcesResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtractSALSourcesResultDefaultTypeInternal() {}
  union {
    ExtractSALSourcesResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtractSALSourcesResultDefaultTypeInternal _ExtractSALSourcesResult_default_instance_;
}  // namespace v1
}  // namespace sal
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, language_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, data_chunk_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::AppSource, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, app_source_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, batch_size_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileRequest, random_seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, result_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, templates_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::CompileResult, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertRequest, input_format_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertRequest, language_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertRequest, data_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertResult, status_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertResult, warnings_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ConvertResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ValidateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ValidateResult, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, line_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, column_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, file_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, level_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::LineReference, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ExtractSALSourcesResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::ExtractSALSourcesResult, data_chunk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::sal::v1::AppSource)},
  { 9, -1, sizeof(::speechly::sal::v1::CompileRequest)},
  { 17, -1, sizeof(::speechly::sal::v1::CompileResult)},
  { 25, -1, sizeof(::speechly::sal::v1::ConvertRequest)},
  { 33, -1, sizeof(::speechly::sal::v1::ConvertResult)},
  { 41, -1, sizeof(::speechly::sal::v1::ValidateResult)},
  { 47, -1, sizeof(::speechly::sal::v1::LineReference)},
  { 57, -1, sizeof(::speechly::sal::v1::ExtractSALSourcesResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_AppSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_CompileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_CompileResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_ConvertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_ConvertResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_ValidateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_LineReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_ExtractSALSourcesResult_default_instance_),
};

const char descriptor_table_protodef_speechly_2fsal_2fv1_2fcompiler_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036speechly/sal/v1/compiler.proto\022\017speech"
  "ly.sal.v1\"\331\001\n\tAppSource\022\016\n\006app_id\030\001 \001(\t\022"
  "\020\n\010language\030\002 \001(\t\022\022\n\ndata_chunk\030\003 \001(\014\022<\n"
  "\014content_type\030\004 \001(\0162&.speechly.sal.v1.Ap"
  "pSource.ContentType\"X\n\013ContentType\022\034\n\030CO"
  "NTENT_TYPE_UNSPECIFIED\020\000\022\025\n\021CONTENT_TYPE"
  "_YAML\020\001\022\024\n\020CONTENT_TYPE_TAR\020\002\"i\n\016Compile"
  "Request\022.\n\napp_source\030\001 \001(\0132\032.speechly.s"
  "al.v1.AppSource\022\022\n\nbatch_size\030\002 \001(\005\022\023\n\013r"
  "andom_seed\030\003 \001(\005\"\324\001\n\rCompileResult\0225\n\006re"
  "sult\030\001 \001(\0162%.speechly.sal.v1.CompileResu"
  "lt.Result\022\021\n\ttemplates\030\002 \003(\t\0220\n\010messages"
  "\030\003 \003(\0132\036.speechly.sal.v1.LineReference\"G"
  "\n\006Result\022\023\n\017COMPILE_SUCCESS\020\000\022\023\n\017COMPILE"
  "_FAILURE\020\001\022\023\n\017COMPILE_WARNING\020\002\"\256\001\n\016Conv"
  "ertRequest\022A\n\014input_format\030\001 \001(\0162+.speec"
  "hly.sal.v1.ConvertRequest.InputFormat\022\020\n"
  "\010language\030\002 \001(\t\022\022\n\ndata_chunk\030\003 \001(\014\"3\n\013I"
  "nputFormat\022\022\n\016FORMAT_UNKNOWN\020\000\022\020\n\014FORMAT"
  "_ALEXA\020\001\"\315\001\n\rConvertResult\0225\n\006status\030\001 \001"
  "(\0162%.speechly.sal.v1.ConvertResult.Statu"
  "s\022\020\n\010warnings\030\002 \001(\t\022*\n\006result\030\003 \001(\0132\032.sp"
  "eechly.sal.v1.AppSource\"G\n\006Status\022\023\n\017CON"
  "VERT_SUCCESS\020\000\022\024\n\020CONVERT_WARNINGS\020\001\022\022\n\016"
  "CONVERT_FAILED\020\002\"B\n\016ValidateResult\0220\n\010me"
  "ssages\030\001 \003(\0132\036.speechly.sal.v1.LineRefer"
  "ence\"\276\001\n\rLineReference\022\014\n\004line\030\001 \001(\004\022\016\n\006"
  "column\030\002 \001(\r\022\014\n\004file\030\003 \001(\t\0223\n\005level\030\004 \001("
  "\0162$.speechly.sal.v1.LineReference.Level\022"
  "\017\n\007message\030\005 \001(\t\";\n\005Level\022\016\n\nLEVEL_NOTE\020"
  "\000\022\021\n\rLEVEL_WARNING\020\001\022\017\n\013LEVEL_ERROR\020\002\"-\n"
  "\027ExtractSALSourcesResult\022\022\n\ndata_chunk\030\001"
  " \001(\0142\320\002\n\010Compiler\022L\n\007Compile\022\037.speechly."
  "sal.v1.CompileRequest\032\036.speechly.sal.v1."
  "CompileResult(\001\022I\n\010Validate\022\032.speechly.s"
  "al.v1.AppSource\032\037.speechly.sal.v1.Valida"
  "teResult(\001\022]\n\021ExtractSALSources\022\032.speech"
  "ly.sal.v1.AppSource\032(.speechly.sal.v1.Ex"
  "tractSALSourcesResult(\0010\001\022L\n\007Convert\022\037.s"
  "peechly.sal.v1.ConvertRequest\032\036.speechly"
  ".sal.v1.ConvertResult(\001Bg\n\023com.speechly."
  "sal.v1B\rCompilerProtoP\001Z\025speechly/sal/v1"
  ";salv1\242\002\003SSX\252\002\017Speechly.Sal.V1\312\002\017Speechl"
  "y\\Sal\\V1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto = {
  false, false, 1736, descriptor_table_protodef_speechly_2fsal_2fv1_2fcompiler_2eproto, "speechly/sal/v1/compiler.proto", 
  &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto::offsets,
  file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto, file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto, file_level_service_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter() {
  return &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fsal_2fv1_2fcompiler_2eproto(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
namespace speechly {
namespace sal {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppSource_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[0];
}
bool AppSource_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppSource_ContentType AppSource::CONTENT_TYPE_UNSPECIFIED;
constexpr AppSource_ContentType AppSource::CONTENT_TYPE_YAML;
constexpr AppSource_ContentType AppSource::CONTENT_TYPE_TAR;
constexpr AppSource_ContentType AppSource::ContentType_MIN;
constexpr AppSource_ContentType AppSource::ContentType_MAX;
constexpr int AppSource::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompileResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[1];
}
bool CompileResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CompileResult_Result CompileResult::COMPILE_SUCCESS;
constexpr CompileResult_Result CompileResult::COMPILE_FAILURE;
constexpr CompileResult_Result CompileResult::COMPILE_WARNING;
constexpr CompileResult_Result CompileResult::Result_MIN;
constexpr CompileResult_Result CompileResult::Result_MAX;
constexpr int CompileResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvertRequest_InputFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[2];
}
bool ConvertRequest_InputFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConvertRequest_InputFormat ConvertRequest::FORMAT_UNKNOWN;
constexpr ConvertRequest_InputFormat ConvertRequest::FORMAT_ALEXA;
constexpr ConvertRequest_InputFormat ConvertRequest::InputFormat_MIN;
constexpr ConvertRequest_InputFormat ConvertRequest::InputFormat_MAX;
constexpr int ConvertRequest::InputFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvertResult_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[3];
}
bool ConvertResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConvertResult_Status ConvertResult::CONVERT_SUCCESS;
constexpr ConvertResult_Status ConvertResult::CONVERT_WARNINGS;
constexpr ConvertResult_Status ConvertResult::CONVERT_FAILED;
constexpr ConvertResult_Status ConvertResult::Status_MIN;
constexpr ConvertResult_Status ConvertResult::Status_MAX;
constexpr int ConvertResult::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineReference_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto);
  return file_level_enum_descriptors_speechly_2fsal_2fv1_2fcompiler_2eproto[4];
}
bool LineReference_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LineReference_Level LineReference::LEVEL_NOTE;
constexpr LineReference_Level LineReference::LEVEL_WARNING;
constexpr LineReference_Level LineReference::LEVEL_ERROR;
constexpr LineReference_Level LineReference::Level_MIN;
constexpr LineReference_Level LineReference::Level_MAX;
constexpr int LineReference::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AppSource::_Internal {
 public:
};

AppSource::AppSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.AppSource)
}
AppSource::AppSource(const AppSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_chunk(), 
      GetArenaForAllocation());
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.AppSource)
}

inline void AppSource::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_type_ = 0;
}

AppSource::~AppSource() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.AppSource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppSource::ArenaDtor(void* object) {
  AppSource* _this = reinterpret_cast< AppSource* >(object);
  (void)_this;
}
void AppSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSource::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.AppSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  language_.ClearToEmpty();
  data_chunk_.ClearToEmpty();
  content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.AppSource.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.AppSource.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.sal.v1.AppSource.ContentType content_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::speechly::sal::v1::AppSource_ContentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.AppSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.AppSource.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.AppSource.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // bytes data_chunk = 3;
  if (!this->_internal_data_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data_chunk(), target);
  }

  // .speechly.sal.v1.AppSource.ContentType content_type = 4;
  if (this->_internal_content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.AppSource)
  return target;
}

size_t AppSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.AppSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // bytes data_chunk = 3;
  if (!this->_internal_data_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  // .speechly.sal.v1.AppSource.ContentType content_type = 4;
  if (this->_internal_content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppSource::GetClassData() const { return &_class_data_; }

void AppSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppSource *>(to)->MergeFrom(
      static_cast<const AppSource &>(from));
}


void AppSource::MergeFrom(const AppSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.AppSource)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (!from._internal_data_chunk().empty()) {
    _internal_set_data_chunk(from._internal_data_chunk());
  }
  if (from._internal_content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppSource::CopyFrom(const AppSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.AppSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSource::IsInitialized() const {
  return true;
}

void AppSource::InternalSwap(AppSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, GetArenaForAllocation(),
      &other->language_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_chunk_, GetArenaForAllocation(),
      &other->data_chunk_, other->GetArenaForAllocation()
  );
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[0]);
}

// ===================================================================

class CompileRequest::_Internal {
 public:
  static const ::speechly::sal::v1::AppSource& app_source(const CompileRequest* msg);
};

const ::speechly::sal::v1::AppSource&
CompileRequest::_Internal::app_source(const CompileRequest* msg) {
  return *msg->app_source_;
}
CompileRequest::CompileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.CompileRequest)
}
CompileRequest::CompileRequest(const CompileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app_source()) {
    app_source_ = new ::speechly::sal::v1::AppSource(*from.app_source_);
  } else {
    app_source_ = nullptr;
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(random_seed_));
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.CompileRequest)
}

inline void CompileRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&app_source_)) + sizeof(random_seed_));
}

CompileRequest::~CompileRequest() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.CompileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete app_source_;
}

void CompileRequest::ArenaDtor(void* object) {
  CompileRequest* _this = reinterpret_cast< CompileRequest* >(object);
  (void)_this;
}
void CompileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.CompileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && app_source_ != nullptr) {
    delete app_source_;
  }
  app_source_ = nullptr;
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_seed_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(random_seed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.sal.v1.AppSource app_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 random_seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.CompileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.sal.v1.AppSource app_source = 1;
  if (this->_internal_has_app_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app_source(this), target, stream);
  }

  // int32 batch_size = 2;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_batch_size(), target);
  }

  // int32 random_seed = 3;
  if (this->_internal_random_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_random_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.CompileRequest)
  return target;
}

size_t CompileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.CompileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.sal.v1.AppSource app_source = 1;
  if (this->_internal_has_app_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_source_);
  }

  // int32 batch_size = 2;
  if (this->_internal_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  // int32 random_seed = 3;
  if (this->_internal_random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_random_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileRequest::GetClassData() const { return &_class_data_; }

void CompileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CompileRequest *>(to)->MergeFrom(
      static_cast<const CompileRequest &>(from));
}


void CompileRequest::MergeFrom(const CompileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.CompileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_source()) {
    _internal_mutable_app_source()->::speechly::sal::v1::AppSource::MergeFrom(from._internal_app_source());
  }
  if (from._internal_batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_random_seed() != 0) {
    _internal_set_random_seed(from._internal_random_seed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileRequest::CopyFrom(const CompileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.CompileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileRequest::IsInitialized() const {
  return true;
}

void CompileRequest::InternalSwap(CompileRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompileRequest, random_seed_)
      + sizeof(CompileRequest::random_seed_)
      - PROTOBUF_FIELD_OFFSET(CompileRequest, app_source_)>(
          reinterpret_cast<char*>(&app_source_),
          reinterpret_cast<char*>(&other->app_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[1]);
}

// ===================================================================

class CompileResult::_Internal {
 public:
};

CompileResult::CompileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  templates_(arena),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.CompileResult)
}
CompileResult::CompileResult(const CompileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      templates_(from.templates_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.CompileResult)
}

inline void CompileResult::SharedCtor() {
result_ = 0;
}

CompileResult::~CompileResult() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.CompileResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompileResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompileResult::ArenaDtor(void* object) {
  CompileResult* _this = reinterpret_cast< CompileResult* >(object);
  (void)_this;
}
void CompileResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.CompileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_.Clear();
  messages_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.sal.v1.CompileResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::speechly::sal::v1::CompileResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // repeated string templates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_templates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.CompileResult.templates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .speechly.sal.v1.LineReference messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompileResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.CompileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.sal.v1.CompileResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated string templates = 2;
  for (int i = 0, n = this->_internal_templates_size(); i < n; i++) {
    const auto& s = this->_internal_templates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.CompileResult.templates");
    target = stream->WriteString(2, s, target);
  }

  // repeated .speechly.sal.v1.LineReference messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.CompileResult)
  return target;
}

size_t CompileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.CompileResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string templates = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(templates_.size());
  for (int i = 0, n = templates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      templates_.Get(i));
  }

  // repeated .speechly.sal.v1.LineReference messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .speechly.sal.v1.CompileResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompileResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileResult::GetClassData() const { return &_class_data_; }

void CompileResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CompileResult *>(to)->MergeFrom(
      static_cast<const CompileResult &>(from));
}


void CompileResult::MergeFrom(const CompileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.CompileResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  templates_.MergeFrom(from.templates_);
  messages_.MergeFrom(from.messages_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileResult::CopyFrom(const CompileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.CompileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileResult::IsInitialized() const {
  return true;
}

void CompileResult::InternalSwap(CompileResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  templates_.InternalSwap(&other->templates_);
  messages_.InternalSwap(&other->messages_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[2]);
}

// ===================================================================

class ConvertRequest::_Internal {
 public:
};

ConvertRequest::ConvertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.ConvertRequest)
}
ConvertRequest::ConvertRequest(const ConvertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_chunk(), 
      GetArenaForAllocation());
  }
  input_format_ = from.input_format_;
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.ConvertRequest)
}

inline void ConvertRequest::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
input_format_ = 0;
}

ConvertRequest::~ConvertRequest() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.ConvertRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConvertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConvertRequest::ArenaDtor(void* object) {
  ConvertRequest* _this = reinterpret_cast< ConvertRequest* >(object);
  (void)_this;
}
void ConvertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConvertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConvertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.ConvertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_.ClearToEmpty();
  data_chunk_.ClearToEmpty();
  input_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.sal.v1.ConvertRequest.InputFormat input_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input_format(static_cast<::speechly::sal::v1::ConvertRequest_InputFormat>(val));
        } else goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.ConvertRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.ConvertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.sal.v1.ConvertRequest.InputFormat input_format = 1;
  if (this->_internal_input_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_input_format(), target);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.ConvertRequest.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // bytes data_chunk = 3;
  if (!this->_internal_data_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.ConvertRequest)
  return target;
}

size_t ConvertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.ConvertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // bytes data_chunk = 3;
  if (!this->_internal_data_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  // .speechly.sal.v1.ConvertRequest.InputFormat input_format = 1;
  if (this->_internal_input_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConvertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvertRequest::GetClassData() const { return &_class_data_; }

void ConvertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConvertRequest *>(to)->MergeFrom(
      static_cast<const ConvertRequest &>(from));
}


void ConvertRequest::MergeFrom(const ConvertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.ConvertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (!from._internal_data_chunk().empty()) {
    _internal_set_data_chunk(from._internal_data_chunk());
  }
  if (from._internal_input_format() != 0) {
    _internal_set_input_format(from._internal_input_format());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvertRequest::CopyFrom(const ConvertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.ConvertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertRequest::IsInitialized() const {
  return true;
}

void ConvertRequest::InternalSwap(ConvertRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, GetArenaForAllocation(),
      &other->language_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_chunk_, GetArenaForAllocation(),
      &other->data_chunk_, other->GetArenaForAllocation()
  );
  swap(input_format_, other->input_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[3]);
}

// ===================================================================

class ConvertResult::_Internal {
 public:
  static const ::speechly::sal::v1::AppSource& result(const ConvertResult* msg);
};

const ::speechly::sal::v1::AppSource&
ConvertResult::_Internal::result(const ConvertResult* msg) {
  return *msg->result_;
}
ConvertResult::ConvertResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.ConvertResult)
}
ConvertResult::ConvertResult(const ConvertResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  warnings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_warnings().empty()) {
    warnings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_warnings(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::speechly::sal::v1::AppSource(*from.result_);
  } else {
    result_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.ConvertResult)
}

inline void ConvertResult::SharedCtor() {
warnings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&result_)) + sizeof(status_));
}

ConvertResult::~ConvertResult() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.ConvertResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConvertResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  warnings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void ConvertResult::ArenaDtor(void* object) {
  ConvertResult* _this = reinterpret_cast< ConvertResult* >(object);
  (void)_this;
}
void ConvertResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConvertResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConvertResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.ConvertResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warnings_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvertResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.sal.v1.ConvertResult.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::speechly::sal::v1::ConvertResult_Status>(val));
        } else goto handle_unusual;
        continue;
      // string warnings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_warnings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.ConvertResult.warnings"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.sal.v1.AppSource result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvertResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.ConvertResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.sal.v1.ConvertResult.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string warnings = 2;
  if (!this->_internal_warnings().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_warnings().data(), static_cast<int>(this->_internal_warnings().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.ConvertResult.warnings");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_warnings(), target);
  }

  // .speechly.sal.v1.AppSource result = 3;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.ConvertResult)
  return target;
}

size_t ConvertResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.ConvertResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string warnings = 2;
  if (!this->_internal_warnings().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_warnings());
  }

  // .speechly.sal.v1.AppSource result = 3;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .speechly.sal.v1.ConvertResult.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvertResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConvertResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvertResult::GetClassData() const { return &_class_data_; }

void ConvertResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConvertResult *>(to)->MergeFrom(
      static_cast<const ConvertResult &>(from));
}


void ConvertResult::MergeFrom(const ConvertResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.ConvertResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_warnings().empty()) {
    _internal_set_warnings(from._internal_warnings());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::speechly::sal::v1::AppSource::MergeFrom(from._internal_result());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvertResult::CopyFrom(const ConvertResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.ConvertResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertResult::IsInitialized() const {
  return true;
}

void ConvertResult::InternalSwap(ConvertResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &warnings_, GetArenaForAllocation(),
      &other->warnings_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvertResult, status_)
      + sizeof(ConvertResult::status_)
      - PROTOBUF_FIELD_OFFSET(ConvertResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[4]);
}

// ===================================================================

class ValidateResult::_Internal {
 public:
};

ValidateResult::ValidateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.ValidateResult)
}
ValidateResult::ValidateResult(const ValidateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.ValidateResult)
}

inline void ValidateResult::SharedCtor() {
}

ValidateResult::~ValidateResult() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.ValidateResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValidateResult::ArenaDtor(void* object) {
  ValidateResult* _this = reinterpret_cast< ValidateResult* >(object);
  (void)_this;
}
void ValidateResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.ValidateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.sal.v1.LineReference messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.ValidateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.sal.v1.LineReference messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.ValidateResult)
  return target;
}

size_t ValidateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.ValidateResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.sal.v1.LineReference messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateResult::GetClassData() const { return &_class_data_; }

void ValidateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ValidateResult *>(to)->MergeFrom(
      static_cast<const ValidateResult &>(from));
}


void ValidateResult::MergeFrom(const ValidateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.ValidateResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateResult::CopyFrom(const ValidateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.ValidateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateResult::IsInitialized() const {
  return true;
}

void ValidateResult::InternalSwap(ValidateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[5]);
}

// ===================================================================

class LineReference::_Internal {
 public:
};

LineReference::LineReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.LineReference)
}
LineReference::LineReference(const LineReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&line_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.LineReference)
}

inline void LineReference::SharedCtor() {
file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&line_)) + sizeof(level_));
}

LineReference::~LineReference() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.LineReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LineReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LineReference::ArenaDtor(void* object) {
  LineReference* _this = reinterpret_cast< LineReference* >(object);
  (void)_this;
}
void LineReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LineReference::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.LineReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmpty();
  message_.ClearToEmpty();
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&line_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.LineReference.file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.sal.v1.LineReference.Level level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::speechly::sal::v1::LineReference_Level>(val));
        } else goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.LineReference.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.LineReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 line = 1;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_line(), target);
  }

  // uint32 column = 2;
  if (this->_internal_column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column(), target);
  }

  // string file = 3;
  if (!this->_internal_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.LineReference.file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file(), target);
  }

  // .speechly.sal.v1.LineReference.Level level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_level(), target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.LineReference.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.LineReference)
  return target;
}

size_t LineReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.LineReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file = 3;
  if (!this->_internal_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint64 line = 1;
  if (this->_internal_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_line());
  }

  // uint32 column = 2;
  if (this->_internal_column() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  // .speechly.sal.v1.LineReference.Level level = 4;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LineReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineReference::GetClassData() const { return &_class_data_; }

void LineReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LineReference *>(to)->MergeFrom(
      static_cast<const LineReference &>(from));
}


void LineReference::MergeFrom(const LineReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.LineReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file().empty()) {
    _internal_set_file(from._internal_file());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from._internal_column() != 0) {
    _internal_set_column(from._internal_column());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineReference::CopyFrom(const LineReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.LineReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineReference::IsInitialized() const {
  return true;
}

void LineReference::InternalSwap(LineReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_, GetArenaForAllocation(),
      &other->file_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineReference, level_)
      + sizeof(LineReference::level_)
      - PROTOBUF_FIELD_OFFSET(LineReference, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[6]);
}

// ===================================================================

class ExtractSALSourcesResult::_Internal {
 public:
};

ExtractSALSourcesResult::ExtractSALSourcesResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.ExtractSALSourcesResult)
}
ExtractSALSourcesResult::ExtractSALSourcesResult(const ExtractSALSourcesResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_chunk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.ExtractSALSourcesResult)
}

inline void ExtractSALSourcesResult::SharedCtor() {
data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExtractSALSourcesResult::~ExtractSALSourcesResult() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.ExtractSALSourcesResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExtractSALSourcesResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtractSALSourcesResult::ArenaDtor(void* object) {
  ExtractSALSourcesResult* _this = reinterpret_cast< ExtractSALSourcesResult* >(object);
  (void)_this;
}
void ExtractSALSourcesResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtractSALSourcesResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtractSALSourcesResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.ExtractSALSourcesResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtractSALSourcesResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtractSALSourcesResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.ExtractSALSourcesResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (!this->_internal_data_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.ExtractSALSourcesResult)
  return target;
}

size_t ExtractSALSourcesResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.ExtractSALSourcesResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (!this->_internal_data_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtractSALSourcesResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtractSALSourcesResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtractSALSourcesResult::GetClassData() const { return &_class_data_; }

void ExtractSALSourcesResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExtractSALSourcesResult *>(to)->MergeFrom(
      static_cast<const ExtractSALSourcesResult &>(from));
}


void ExtractSALSourcesResult::MergeFrom(const ExtractSALSourcesResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.ExtractSALSourcesResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_chunk().empty()) {
    _internal_set_data_chunk(from._internal_data_chunk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtractSALSourcesResult::CopyFrom(const ExtractSALSourcesResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.ExtractSALSourcesResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractSALSourcesResult::IsInitialized() const {
  return true;
}

void ExtractSALSourcesResult::InternalSwap(ExtractSALSourcesResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_chunk_, GetArenaForAllocation(),
      &other->data_chunk_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractSALSourcesResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fcompiler_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sal
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::AppSource* Arena::CreateMaybeMessage< ::speechly::sal::v1::AppSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::AppSource >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::CompileRequest* Arena::CreateMaybeMessage< ::speechly::sal::v1::CompileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::CompileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::CompileResult* Arena::CreateMaybeMessage< ::speechly::sal::v1::CompileResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::CompileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::ConvertRequest* Arena::CreateMaybeMessage< ::speechly::sal::v1::ConvertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::ConvertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::ConvertResult* Arena::CreateMaybeMessage< ::speechly::sal::v1::ConvertResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::ConvertResult >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::ValidateResult* Arena::CreateMaybeMessage< ::speechly::sal::v1::ValidateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::ValidateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::LineReference* Arena::CreateMaybeMessage< ::speechly::sal::v1::LineReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::LineReference >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::ExtractSALSourcesResult* Arena::CreateMaybeMessage< ::speechly::sal::v1::ExtractSALSourcesResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::ExtractSALSourcesResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
