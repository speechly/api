// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/sal/v1/evaluator_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto;
namespace speechly {
namespace sal {
namespace v1 {
class EvalTextsRequest;
struct EvalTextsRequestDefaultTypeInternal;
extern EvalTextsRequestDefaultTypeInternal _EvalTextsRequest_default_instance_;
class EvalTextsRequest_EvaluationPair;
struct EvalTextsRequest_EvaluationPairDefaultTypeInternal;
extern EvalTextsRequest_EvaluationPairDefaultTypeInternal _EvalTextsRequest_EvaluationPair_default_instance_;
class EvalTextsResponse;
struct EvalTextsResponseDefaultTypeInternal;
extern EvalTextsResponseDefaultTypeInternal _EvalTextsResponse_default_instance_;
class TextsRequest;
struct TextsRequestDefaultTypeInternal;
extern TextsRequestDefaultTypeInternal _TextsRequest_default_instance_;
class TextsResponse;
struct TextsResponseDefaultTypeInternal;
extern TextsResponseDefaultTypeInternal _TextsResponse_default_instance_;
}  // namespace v1
}  // namespace sal
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::sal::v1::EvalTextsRequest* Arena::CreateMaybeMessage<::speechly::sal::v1::EvalTextsRequest>(Arena*);
template<> ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* Arena::CreateMaybeMessage<::speechly::sal::v1::EvalTextsRequest_EvaluationPair>(Arena*);
template<> ::speechly::sal::v1::EvalTextsResponse* Arena::CreateMaybeMessage<::speechly::sal::v1::EvalTextsResponse>(Arena*);
template<> ::speechly::sal::v1::TextsRequest* Arena::CreateMaybeMessage<::speechly::sal::v1::TextsRequest>(Arena*);
template<> ::speechly::sal::v1::TextsResponse* Arena::CreateMaybeMessage<::speechly::sal::v1::TextsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace sal {
namespace v1 {

// ===================================================================

class TextsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.TextsRequest) */ {
 public:
  inline TextsRequest() : TextsRequest(nullptr) {}
  ~TextsRequest() override;
  explicit constexpr TextsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextsRequest(const TextsRequest& from);
  TextsRequest(TextsRequest&& from) noexcept
    : TextsRequest() {
    *this = ::std::move(from);
  }

  inline TextsRequest& operator=(const TextsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextsRequest& operator=(TextsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextsRequest* internal_default_instance() {
    return reinterpret_cast<const TextsRequest*>(
               &_TextsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextsRequest& a, TextsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextsRequest* New() const final {
    return new TextsRequest();
  }

  TextsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.TextsRequest";
  }
  protected:
  explicit TextsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextsFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
  };
  // repeated string texts = 3;
  int texts_size() const;
  private:
  int _internal_texts_size() const;
  public:
  void clear_texts();
  const std::string& texts(int index) const;
  std::string* mutable_texts(int index);
  void set_texts(int index, const std::string& value);
  void set_texts(int index, std::string&& value);
  void set_texts(int index, const char* value);
  void set_texts(int index, const char* value, size_t size);
  std::string* add_texts();
  void add_texts(const std::string& value);
  void add_texts(std::string&& value);
  void add_texts(const char* value);
  void add_texts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& texts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_texts();
  private:
  const std::string& _internal_texts(int index) const;
  std::string* _internal_add_texts();
  public:

  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.TextsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> texts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto;
};
// -------------------------------------------------------------------

class TextsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.TextsResponse) */ {
 public:
  inline TextsResponse() : TextsResponse(nullptr) {}
  ~TextsResponse() override;
  explicit constexpr TextsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextsResponse(const TextsResponse& from);
  TextsResponse(TextsResponse&& from) noexcept
    : TextsResponse() {
    *this = ::std::move(from);
  }

  inline TextsResponse& operator=(const TextsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextsResponse& operator=(TextsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextsResponse* internal_default_instance() {
    return reinterpret_cast<const TextsResponse*>(
               &_TextsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextsResponse& a, TextsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextsResponse* New() const final {
    return new TextsResponse();
  }

  TextsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.TextsResponse";
  }
  protected:
  explicit TextsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotatedTextsFieldNumber = 2,
  };
  // repeated string annotated_texts = 2;
  int annotated_texts_size() const;
  private:
  int _internal_annotated_texts_size() const;
  public:
  void clear_annotated_texts();
  const std::string& annotated_texts(int index) const;
  std::string* mutable_annotated_texts(int index);
  void set_annotated_texts(int index, const std::string& value);
  void set_annotated_texts(int index, std::string&& value);
  void set_annotated_texts(int index, const char* value);
  void set_annotated_texts(int index, const char* value, size_t size);
  std::string* add_annotated_texts();
  void add_annotated_texts(const std::string& value);
  void add_annotated_texts(std::string&& value);
  void add_annotated_texts(const char* value);
  void add_annotated_texts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotated_texts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotated_texts();
  private:
  const std::string& _internal_annotated_texts(int index) const;
  std::string* _internal_add_annotated_texts();
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.TextsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotated_texts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto;
};
// -------------------------------------------------------------------

class EvalTextsRequest_EvaluationPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.EvalTextsRequest.EvaluationPair) */ {
 public:
  inline EvalTextsRequest_EvaluationPair() : EvalTextsRequest_EvaluationPair(nullptr) {}
  ~EvalTextsRequest_EvaluationPair() override;
  explicit constexpr EvalTextsRequest_EvaluationPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvalTextsRequest_EvaluationPair(const EvalTextsRequest_EvaluationPair& from);
  EvalTextsRequest_EvaluationPair(EvalTextsRequest_EvaluationPair&& from) noexcept
    : EvalTextsRequest_EvaluationPair() {
    *this = ::std::move(from);
  }

  inline EvalTextsRequest_EvaluationPair& operator=(const EvalTextsRequest_EvaluationPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalTextsRequest_EvaluationPair& operator=(EvalTextsRequest_EvaluationPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvalTextsRequest_EvaluationPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvalTextsRequest_EvaluationPair* internal_default_instance() {
    return reinterpret_cast<const EvalTextsRequest_EvaluationPair*>(
               &_EvalTextsRequest_EvaluationPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EvalTextsRequest_EvaluationPair& a, EvalTextsRequest_EvaluationPair& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalTextsRequest_EvaluationPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalTextsRequest_EvaluationPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalTextsRequest_EvaluationPair* New() const final {
    return new EvalTextsRequest_EvaluationPair();
  }

  EvalTextsRequest_EvaluationPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalTextsRequest_EvaluationPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvalTextsRequest_EvaluationPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EvalTextsRequest_EvaluationPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalTextsRequest_EvaluationPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.EvalTextsRequest.EvaluationPair";
  }
  protected:
  explicit EvalTextsRequest_EvaluationPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kGroundTruthTextFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string ground_truth_text = 2;
  void clear_ground_truth_text();
  const std::string& ground_truth_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ground_truth_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ground_truth_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_ground_truth_text();
  void set_allocated_ground_truth_text(std::string* ground_truth_text);
  private:
  const std::string& _internal_ground_truth_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ground_truth_text(const std::string& value);
  std::string* _internal_mutable_ground_truth_text();
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ground_truth_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto;
};
// -------------------------------------------------------------------

class EvalTextsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.EvalTextsRequest) */ {
 public:
  inline EvalTextsRequest() : EvalTextsRequest(nullptr) {}
  ~EvalTextsRequest() override;
  explicit constexpr EvalTextsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvalTextsRequest(const EvalTextsRequest& from);
  EvalTextsRequest(EvalTextsRequest&& from) noexcept
    : EvalTextsRequest() {
    *this = ::std::move(from);
  }

  inline EvalTextsRequest& operator=(const EvalTextsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalTextsRequest& operator=(EvalTextsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvalTextsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvalTextsRequest* internal_default_instance() {
    return reinterpret_cast<const EvalTextsRequest*>(
               &_EvalTextsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EvalTextsRequest& a, EvalTextsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalTextsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalTextsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalTextsRequest* New() const final {
    return new EvalTextsRequest();
  }

  EvalTextsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalTextsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvalTextsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EvalTextsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalTextsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.EvalTextsRequest";
  }
  protected:
  explicit EvalTextsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EvalTextsRequest_EvaluationPair EvaluationPair;

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
  };
  // repeated .speechly.sal.v1.EvalTextsRequest.EvaluationPair pairs = 3;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::EvalTextsRequest_EvaluationPair >*
      mutable_pairs();
  private:
  const ::speechly::sal::v1::EvalTextsRequest_EvaluationPair& _internal_pairs(int index) const;
  ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* _internal_add_pairs();
  public:
  const ::speechly::sal::v1::EvalTextsRequest_EvaluationPair& pairs(int index) const;
  ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::EvalTextsRequest_EvaluationPair >&
      pairs() const;

  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.EvalTextsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::EvalTextsRequest_EvaluationPair > pairs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto;
};
// -------------------------------------------------------------------

class EvalTextsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.EvalTextsResponse) */ {
 public:
  inline EvalTextsResponse() : EvalTextsResponse(nullptr) {}
  ~EvalTextsResponse() override;
  explicit constexpr EvalTextsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvalTextsResponse(const EvalTextsResponse& from);
  EvalTextsResponse(EvalTextsResponse&& from) noexcept
    : EvalTextsResponse() {
    *this = ::std::move(from);
  }

  inline EvalTextsResponse& operator=(const EvalTextsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalTextsResponse& operator=(EvalTextsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvalTextsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvalTextsResponse* internal_default_instance() {
    return reinterpret_cast<const EvalTextsResponse*>(
               &_EvalTextsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EvalTextsResponse& a, EvalTextsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalTextsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalTextsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalTextsResponse* New() const final {
    return new EvalTextsResponse();
  }

  EvalTextsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalTextsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvalTextsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EvalTextsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalTextsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.EvalTextsResponse";
  }
  protected:
  explicit EvalTextsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 1,
  };
  // string report = 1;
  void clear_report();
  const std::string& report() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report();
  PROTOBUF_MUST_USE_RESULT std::string* release_report();
  void set_allocated_report(std::string* report);
  private:
  const std::string& _internal_report() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report(const std::string& value);
  std::string* _internal_mutable_report();
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.EvalTextsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextsRequest

// string app_id = 1;
inline void TextsRequest::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& TextsRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.TextsRequest.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextsRequest::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.TextsRequest.app_id)
}
inline std::string* TextsRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.TextsRequest.app_id)
  return _s;
}
inline const std::string& TextsRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void TextsRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TextsRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TextsRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.TextsRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TextsRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.TextsRequest.app_id)
}

// string language_code = 2;
inline void TextsRequest::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& TextsRequest::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.TextsRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextsRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.TextsRequest.language_code)
}
inline std::string* TextsRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.TextsRequest.language_code)
  return _s;
}
inline const std::string& TextsRequest::_internal_language_code() const {
  return language_code_.Get();
}
inline void TextsRequest::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TextsRequest::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TextsRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.TextsRequest.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TextsRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.TextsRequest.language_code)
}

// repeated string texts = 3;
inline int TextsRequest::_internal_texts_size() const {
  return texts_.size();
}
inline int TextsRequest::texts_size() const {
  return _internal_texts_size();
}
inline void TextsRequest::clear_texts() {
  texts_.Clear();
}
inline std::string* TextsRequest::add_texts() {
  std::string* _s = _internal_add_texts();
  // @@protoc_insertion_point(field_add_mutable:speechly.sal.v1.TextsRequest.texts)
  return _s;
}
inline const std::string& TextsRequest::_internal_texts(int index) const {
  return texts_.Get(index);
}
inline const std::string& TextsRequest::texts(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.TextsRequest.texts)
  return _internal_texts(index);
}
inline std::string* TextsRequest::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.TextsRequest.texts)
  return texts_.Mutable(index);
}
inline void TextsRequest::set_texts(int index, const std::string& value) {
  texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.TextsRequest.texts)
}
inline void TextsRequest::set_texts(int index, std::string&& value) {
  texts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.sal.v1.TextsRequest.texts)
}
inline void TextsRequest::set_texts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.sal.v1.TextsRequest.texts)
}
inline void TextsRequest::set_texts(int index, const char* value, size_t size) {
  texts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.sal.v1.TextsRequest.texts)
}
inline std::string* TextsRequest::_internal_add_texts() {
  return texts_.Add();
}
inline void TextsRequest::add_texts(const std::string& value) {
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.sal.v1.TextsRequest.texts)
}
inline void TextsRequest::add_texts(std::string&& value) {
  texts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.sal.v1.TextsRequest.texts)
}
inline void TextsRequest::add_texts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.sal.v1.TextsRequest.texts)
}
inline void TextsRequest::add_texts(const char* value, size_t size) {
  texts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.sal.v1.TextsRequest.texts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TextsRequest::texts() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.TextsRequest.texts)
  return texts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TextsRequest::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.TextsRequest.texts)
  return &texts_;
}

// -------------------------------------------------------------------

// TextsResponse

// repeated string annotated_texts = 2;
inline int TextsResponse::_internal_annotated_texts_size() const {
  return annotated_texts_.size();
}
inline int TextsResponse::annotated_texts_size() const {
  return _internal_annotated_texts_size();
}
inline void TextsResponse::clear_annotated_texts() {
  annotated_texts_.Clear();
}
inline std::string* TextsResponse::add_annotated_texts() {
  std::string* _s = _internal_add_annotated_texts();
  // @@protoc_insertion_point(field_add_mutable:speechly.sal.v1.TextsResponse.annotated_texts)
  return _s;
}
inline const std::string& TextsResponse::_internal_annotated_texts(int index) const {
  return annotated_texts_.Get(index);
}
inline const std::string& TextsResponse::annotated_texts(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.TextsResponse.annotated_texts)
  return _internal_annotated_texts(index);
}
inline std::string* TextsResponse::mutable_annotated_texts(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.TextsResponse.annotated_texts)
  return annotated_texts_.Mutable(index);
}
inline void TextsResponse::set_annotated_texts(int index, const std::string& value) {
  annotated_texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline void TextsResponse::set_annotated_texts(int index, std::string&& value) {
  annotated_texts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline void TextsResponse::set_annotated_texts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotated_texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline void TextsResponse::set_annotated_texts(int index, const char* value, size_t size) {
  annotated_texts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline std::string* TextsResponse::_internal_add_annotated_texts() {
  return annotated_texts_.Add();
}
inline void TextsResponse::add_annotated_texts(const std::string& value) {
  annotated_texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline void TextsResponse::add_annotated_texts(std::string&& value) {
  annotated_texts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline void TextsResponse::add_annotated_texts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotated_texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline void TextsResponse::add_annotated_texts(const char* value, size_t size) {
  annotated_texts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.sal.v1.TextsResponse.annotated_texts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TextsResponse::annotated_texts() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.TextsResponse.annotated_texts)
  return annotated_texts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TextsResponse::mutable_annotated_texts() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.TextsResponse.annotated_texts)
  return &annotated_texts_;
}

// -------------------------------------------------------------------

// EvalTextsRequest_EvaluationPair

// string text = 1;
inline void EvalTextsRequest_EvaluationPair::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& EvalTextsRequest_EvaluationPair::text() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.EvalTextsRequest.EvaluationPair.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EvalTextsRequest_EvaluationPair::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.EvalTextsRequest.EvaluationPair.text)
}
inline std::string* EvalTextsRequest_EvaluationPair::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.EvalTextsRequest.EvaluationPair.text)
  return _s;
}
inline const std::string& EvalTextsRequest_EvaluationPair::_internal_text() const {
  return text_.Get();
}
inline void EvalTextsRequest_EvaluationPair::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest_EvaluationPair::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest_EvaluationPair::release_text() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.EvalTextsRequest.EvaluationPair.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EvalTextsRequest_EvaluationPair::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.EvalTextsRequest.EvaluationPair.text)
}

// string ground_truth_text = 2;
inline void EvalTextsRequest_EvaluationPair::clear_ground_truth_text() {
  ground_truth_text_.ClearToEmpty();
}
inline const std::string& EvalTextsRequest_EvaluationPair::ground_truth_text() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.EvalTextsRequest.EvaluationPair.ground_truth_text)
  return _internal_ground_truth_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EvalTextsRequest_EvaluationPair::set_ground_truth_text(ArgT0&& arg0, ArgT... args) {
 
 ground_truth_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.EvalTextsRequest.EvaluationPair.ground_truth_text)
}
inline std::string* EvalTextsRequest_EvaluationPair::mutable_ground_truth_text() {
  std::string* _s = _internal_mutable_ground_truth_text();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.EvalTextsRequest.EvaluationPair.ground_truth_text)
  return _s;
}
inline const std::string& EvalTextsRequest_EvaluationPair::_internal_ground_truth_text() const {
  return ground_truth_text_.Get();
}
inline void EvalTextsRequest_EvaluationPair::_internal_set_ground_truth_text(const std::string& value) {
  
  ground_truth_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest_EvaluationPair::_internal_mutable_ground_truth_text() {
  
  return ground_truth_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest_EvaluationPair::release_ground_truth_text() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.EvalTextsRequest.EvaluationPair.ground_truth_text)
  return ground_truth_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EvalTextsRequest_EvaluationPair::set_allocated_ground_truth_text(std::string* ground_truth_text) {
  if (ground_truth_text != nullptr) {
    
  } else {
    
  }
  ground_truth_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ground_truth_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.EvalTextsRequest.EvaluationPair.ground_truth_text)
}

// -------------------------------------------------------------------

// EvalTextsRequest

// string app_id = 1;
inline void EvalTextsRequest::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& EvalTextsRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.EvalTextsRequest.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EvalTextsRequest::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.EvalTextsRequest.app_id)
}
inline std::string* EvalTextsRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.EvalTextsRequest.app_id)
  return _s;
}
inline const std::string& EvalTextsRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void EvalTextsRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.EvalTextsRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EvalTextsRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.EvalTextsRequest.app_id)
}

// string language_code = 2;
inline void EvalTextsRequest::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& EvalTextsRequest::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.EvalTextsRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EvalTextsRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.EvalTextsRequest.language_code)
}
inline std::string* EvalTextsRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.EvalTextsRequest.language_code)
  return _s;
}
inline const std::string& EvalTextsRequest::_internal_language_code() const {
  return language_code_.Get();
}
inline void EvalTextsRequest::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EvalTextsRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.EvalTextsRequest.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EvalTextsRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.EvalTextsRequest.language_code)
}

// repeated .speechly.sal.v1.EvalTextsRequest.EvaluationPair pairs = 3;
inline int EvalTextsRequest::_internal_pairs_size() const {
  return pairs_.size();
}
inline int EvalTextsRequest::pairs_size() const {
  return _internal_pairs_size();
}
inline void EvalTextsRequest::clear_pairs() {
  pairs_.Clear();
}
inline ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* EvalTextsRequest::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.EvalTextsRequest.pairs)
  return pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::EvalTextsRequest_EvaluationPair >*
EvalTextsRequest::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.EvalTextsRequest.pairs)
  return &pairs_;
}
inline const ::speechly::sal::v1::EvalTextsRequest_EvaluationPair& EvalTextsRequest::_internal_pairs(int index) const {
  return pairs_.Get(index);
}
inline const ::speechly::sal::v1::EvalTextsRequest_EvaluationPair& EvalTextsRequest::pairs(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.EvalTextsRequest.pairs)
  return _internal_pairs(index);
}
inline ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* EvalTextsRequest::_internal_add_pairs() {
  return pairs_.Add();
}
inline ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* EvalTextsRequest::add_pairs() {
  ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* _add = _internal_add_pairs();
  // @@protoc_insertion_point(field_add:speechly.sal.v1.EvalTextsRequest.pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::EvalTextsRequest_EvaluationPair >&
EvalTextsRequest::pairs() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.EvalTextsRequest.pairs)
  return pairs_;
}

// -------------------------------------------------------------------

// EvalTextsResponse

// string report = 1;
inline void EvalTextsResponse::clear_report() {
  report_.ClearToEmpty();
}
inline const std::string& EvalTextsResponse::report() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.EvalTextsResponse.report)
  return _internal_report();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EvalTextsResponse::set_report(ArgT0&& arg0, ArgT... args) {
 
 report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.EvalTextsResponse.report)
}
inline std::string* EvalTextsResponse::mutable_report() {
  std::string* _s = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.EvalTextsResponse.report)
  return _s;
}
inline const std::string& EvalTextsResponse::_internal_report() const {
  return report_.Get();
}
inline void EvalTextsResponse::_internal_set_report(const std::string& value) {
  
  report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EvalTextsResponse::_internal_mutable_report() {
  
  return report_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EvalTextsResponse::release_report() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.EvalTextsResponse.report)
  return report_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EvalTextsResponse::set_allocated_report(std::string* report) {
  if (report != nullptr) {
    
  } else {
    
  }
  report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.EvalTextsResponse.report)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace sal
}  // namespace speechly

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto
