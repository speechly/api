// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/sal/v1/evaluator_api.proto

#include "speechly/sal/v1/evaluator_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace sal {
namespace v1 {
constexpr TextsRequest::TextsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : texts_()
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TextsRequestDefaultTypeInternal {
  constexpr TextsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextsRequestDefaultTypeInternal() {}
  union {
    TextsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextsRequestDefaultTypeInternal _TextsRequest_default_instance_;
constexpr TextsResponse::TextsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotated_texts_(){}
struct TextsResponseDefaultTypeInternal {
  constexpr TextsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextsResponseDefaultTypeInternal() {}
  union {
    TextsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextsResponseDefaultTypeInternal _TextsResponse_default_instance_;
constexpr EvalTextsRequest_EvaluationPair::EvalTextsRequest_EvaluationPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ground_truth_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EvalTextsRequest_EvaluationPairDefaultTypeInternal {
  constexpr EvalTextsRequest_EvaluationPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvalTextsRequest_EvaluationPairDefaultTypeInternal() {}
  union {
    EvalTextsRequest_EvaluationPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvalTextsRequest_EvaluationPairDefaultTypeInternal _EvalTextsRequest_EvaluationPair_default_instance_;
constexpr EvalTextsRequest::EvalTextsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pairs_()
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EvalTextsRequestDefaultTypeInternal {
  constexpr EvalTextsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvalTextsRequestDefaultTypeInternal() {}
  union {
    EvalTextsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvalTextsRequestDefaultTypeInternal _EvalTextsRequest_default_instance_;
constexpr EvalTextsResponse::EvalTextsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EvalTextsResponseDefaultTypeInternal {
  constexpr EvalTextsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvalTextsResponseDefaultTypeInternal() {}
  union {
    EvalTextsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvalTextsResponseDefaultTypeInternal _EvalTextsResponse_default_instance_;
}  // namespace v1
}  // namespace sal
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::TextsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::TextsRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::TextsRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::TextsRequest, texts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::TextsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::TextsResponse, annotated_texts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsRequest_EvaluationPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsRequest_EvaluationPair, text_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsRequest_EvaluationPair, ground_truth_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsRequest, pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::sal::v1::EvalTextsResponse, report_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::sal::v1::TextsRequest)},
  { 8, -1, sizeof(::speechly::sal::v1::TextsResponse)},
  { 14, -1, sizeof(::speechly::sal::v1::EvalTextsRequest_EvaluationPair)},
  { 21, -1, sizeof(::speechly::sal::v1::EvalTextsRequest)},
  { 29, -1, sizeof(::speechly::sal::v1::EvalTextsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_TextsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_TextsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_EvalTextsRequest_EvaluationPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_EvalTextsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::sal::v1::_EvalTextsResponse_default_instance_),
};

const char descriptor_table_protodef_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#speechly/sal/v1/evaluator_api.proto\022\017s"
  "peechly.sal.v1\"D\n\014TextsRequest\022\016\n\006app_id"
  "\030\001 \001(\t\022\025\n\rlanguage_code\030\002 \001(\t\022\r\n\005texts\030\003"
  " \003(\t\"(\n\rTextsResponse\022\027\n\017annotated_texts"
  "\030\002 \003(\t\"\265\001\n\020EvalTextsRequest\022\016\n\006app_id\030\001 "
  "\001(\t\022\025\n\rlanguage_code\030\002 \001(\t\022\?\n\005pairs\030\003 \003("
  "\01320.speechly.sal.v1.EvalTextsRequest.Eva"
  "luationPair\0329\n\016EvaluationPair\022\014\n\004text\030\001 "
  "\001(\t\022\031\n\021ground_truth_text\030\002 \001(\t\"#\n\021EvalTe"
  "xtsResponse\022\016\n\006report\030\001 \001(\t2\252\001\n\014Evaluato"
  "rAPI\022F\n\005Texts\022\035.speechly.sal.v1.TextsReq"
  "uest\032\036.speechly.sal.v1.TextsResponse\022R\n\t"
  "EvalTexts\022!.speechly.sal.v1.EvalTextsReq"
  "uest\032\".speechly.sal.v1.EvalTextsResponse"
  "Bk\n\023com.speechly.sal.v1B\021EvaluatorApiPro"
  "toP\001Z\025speechly/sal/v1;salv1\242\002\003SSX\252\002\017Spee"
  "chly.Sal.V1\312\002\017Speechly\\Sal\\V1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto = {
  false, false, 677, descriptor_table_protodef_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto, "speechly/sal/v1/evaluator_api.proto", 
  &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto, file_level_enum_descriptors_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto, file_level_service_descriptors_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto(&descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto);
namespace speechly {
namespace sal {
namespace v1 {

// ===================================================================

class TextsRequest::_Internal {
 public:
};

TextsRequest::TextsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  texts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.TextsRequest)
}
TextsRequest::TextsRequest(const TextsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      texts_(from.texts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.TextsRequest)
}

inline void TextsRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextsRequest::~TextsRequest() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.TextsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextsRequest::ArenaDtor(void* object) {
  TextsRequest* _this = reinterpret_cast< TextsRequest* >(object);
  (void)_this;
}
void TextsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.TextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  texts_.Clear();
  app_id_.ClearToEmpty();
  language_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.TextsRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.TextsRequest.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string texts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_texts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.TextsRequest.texts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.TextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.TextsRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string language_code = 2;
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.TextsRequest.language_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_code(), target);
  }

  // repeated string texts = 3;
  for (int i = 0, n = this->_internal_texts_size(); i < n; i++) {
    const auto& s = this->_internal_texts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.TextsRequest.texts");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.TextsRequest)
  return target;
}

size_t TextsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.TextsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string texts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(texts_.size());
  for (int i = 0, n = texts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      texts_.Get(i));
  }

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string language_code = 2;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextsRequest::GetClassData() const { return &_class_data_; }

void TextsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TextsRequest *>(to)->MergeFrom(
      static_cast<const TextsRequest &>(from));
}


void TextsRequest::MergeFrom(const TextsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.TextsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  texts_.MergeFrom(from.texts_);
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextsRequest::CopyFrom(const TextsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.TextsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextsRequest::IsInitialized() const {
  return true;
}

void TextsRequest::InternalSwap(TextsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  texts_.InternalSwap(&other->texts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, GetArenaForAllocation(),
      &other->language_code_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TextsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto[0]);
}

// ===================================================================

class TextsResponse::_Internal {
 public:
};

TextsResponse::TextsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotated_texts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.TextsResponse)
}
TextsResponse::TextsResponse(const TextsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotated_texts_(from.annotated_texts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.TextsResponse)
}

inline void TextsResponse::SharedCtor() {
}

TextsResponse::~TextsResponse() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.TextsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TextsResponse::ArenaDtor(void* object) {
  TextsResponse* _this = reinterpret_cast< TextsResponse* >(object);
  (void)_this;
}
void TextsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.TextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotated_texts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string annotated_texts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotated_texts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.TextsResponse.annotated_texts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.TextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string annotated_texts = 2;
  for (int i = 0, n = this->_internal_annotated_texts_size(); i < n; i++) {
    const auto& s = this->_internal_annotated_texts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.TextsResponse.annotated_texts");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.TextsResponse)
  return target;
}

size_t TextsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.TextsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotated_texts = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotated_texts_.size());
  for (int i = 0, n = annotated_texts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotated_texts_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextsResponse::GetClassData() const { return &_class_data_; }

void TextsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TextsResponse *>(to)->MergeFrom(
      static_cast<const TextsResponse &>(from));
}


void TextsResponse::MergeFrom(const TextsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.TextsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotated_texts_.MergeFrom(from.annotated_texts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextsResponse::CopyFrom(const TextsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.TextsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextsResponse::IsInitialized() const {
  return true;
}

void TextsResponse::InternalSwap(TextsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotated_texts_.InternalSwap(&other->annotated_texts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto[1]);
}

// ===================================================================

class EvalTextsRequest_EvaluationPair::_Internal {
 public:
};

EvalTextsRequest_EvaluationPair::EvalTextsRequest_EvaluationPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
}
EvalTextsRequest_EvaluationPair::EvalTextsRequest_EvaluationPair(const EvalTextsRequest_EvaluationPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  ground_truth_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ground_truth_text().empty()) {
    ground_truth_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ground_truth_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
}

inline void EvalTextsRequest_EvaluationPair::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ground_truth_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EvalTextsRequest_EvaluationPair::~EvalTextsRequest_EvaluationPair() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EvalTextsRequest_EvaluationPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ground_truth_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EvalTextsRequest_EvaluationPair::ArenaDtor(void* object) {
  EvalTextsRequest_EvaluationPair* _this = reinterpret_cast< EvalTextsRequest_EvaluationPair* >(object);
  (void)_this;
}
void EvalTextsRequest_EvaluationPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalTextsRequest_EvaluationPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvalTextsRequest_EvaluationPair::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  ground_truth_text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalTextsRequest_EvaluationPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.EvalTextsRequest.EvaluationPair.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ground_truth_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ground_truth_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.EvalTextsRequest.EvaluationPair.ground_truth_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalTextsRequest_EvaluationPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.EvalTextsRequest.EvaluationPair.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // string ground_truth_text = 2;
  if (!this->_internal_ground_truth_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ground_truth_text().data(), static_cast<int>(this->_internal_ground_truth_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.EvalTextsRequest.EvaluationPair.ground_truth_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ground_truth_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
  return target;
}

size_t EvalTextsRequest_EvaluationPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string ground_truth_text = 2;
  if (!this->_internal_ground_truth_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ground_truth_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalTextsRequest_EvaluationPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EvalTextsRequest_EvaluationPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalTextsRequest_EvaluationPair::GetClassData() const { return &_class_data_; }

void EvalTextsRequest_EvaluationPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EvalTextsRequest_EvaluationPair *>(to)->MergeFrom(
      static_cast<const EvalTextsRequest_EvaluationPair &>(from));
}


void EvalTextsRequest_EvaluationPair::MergeFrom(const EvalTextsRequest_EvaluationPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_ground_truth_text().empty()) {
    _internal_set_ground_truth_text(from._internal_ground_truth_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalTextsRequest_EvaluationPair::CopyFrom(const EvalTextsRequest_EvaluationPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.EvalTextsRequest.EvaluationPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalTextsRequest_EvaluationPair::IsInitialized() const {
  return true;
}

void EvalTextsRequest_EvaluationPair::InternalSwap(EvalTextsRequest_EvaluationPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, GetArenaForAllocation(),
      &other->text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ground_truth_text_, GetArenaForAllocation(),
      &other->ground_truth_text_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalTextsRequest_EvaluationPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto[2]);
}

// ===================================================================

class EvalTextsRequest::_Internal {
 public:
};

EvalTextsRequest::EvalTextsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pairs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.EvalTextsRequest)
}
EvalTextsRequest::EvalTextsRequest(const EvalTextsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.EvalTextsRequest)
}

inline void EvalTextsRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EvalTextsRequest::~EvalTextsRequest() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.EvalTextsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EvalTextsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EvalTextsRequest::ArenaDtor(void* object) {
  EvalTextsRequest* _this = reinterpret_cast< EvalTextsRequest* >(object);
  (void)_this;
}
void EvalTextsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalTextsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvalTextsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.EvalTextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  app_id_.ClearToEmpty();
  language_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalTextsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.EvalTextsRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.EvalTextsRequest.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.sal.v1.EvalTextsRequest.EvaluationPair pairs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalTextsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.EvalTextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.EvalTextsRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string language_code = 2;
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.EvalTextsRequest.language_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_code(), target);
  }

  // repeated .speechly.sal.v1.EvalTextsRequest.EvaluationPair pairs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.EvalTextsRequest)
  return target;
}

size_t EvalTextsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.EvalTextsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.sal.v1.EvalTextsRequest.EvaluationPair pairs = 3;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string language_code = 2;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalTextsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EvalTextsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalTextsRequest::GetClassData() const { return &_class_data_; }

void EvalTextsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EvalTextsRequest *>(to)->MergeFrom(
      static_cast<const EvalTextsRequest &>(from));
}


void EvalTextsRequest::MergeFrom(const EvalTextsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.EvalTextsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalTextsRequest::CopyFrom(const EvalTextsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.EvalTextsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalTextsRequest::IsInitialized() const {
  return true;
}

void EvalTextsRequest::InternalSwap(EvalTextsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pairs_.InternalSwap(&other->pairs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, GetArenaForAllocation(),
      &other->language_code_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalTextsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto[3]);
}

// ===================================================================

class EvalTextsResponse::_Internal {
 public:
};

EvalTextsResponse::EvalTextsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.sal.v1.EvalTextsResponse)
}
EvalTextsResponse::EvalTextsResponse(const EvalTextsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report().empty()) {
    report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.sal.v1.EvalTextsResponse)
}

inline void EvalTextsResponse::SharedCtor() {
report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EvalTextsResponse::~EvalTextsResponse() {
  // @@protoc_insertion_point(destructor:speechly.sal.v1.EvalTextsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EvalTextsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EvalTextsResponse::ArenaDtor(void* object) {
  EvalTextsResponse* _this = reinterpret_cast< EvalTextsResponse* >(object);
  (void)_this;
}
void EvalTextsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalTextsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvalTextsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.sal.v1.EvalTextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalTextsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.sal.v1.EvalTextsResponse.report"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalTextsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.sal.v1.EvalTextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string report = 1;
  if (!this->_internal_report().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report().data(), static_cast<int>(this->_internal_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.sal.v1.EvalTextsResponse.report");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_report(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.sal.v1.EvalTextsResponse)
  return target;
}

size_t EvalTextsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.sal.v1.EvalTextsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string report = 1;
  if (!this->_internal_report().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalTextsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EvalTextsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalTextsResponse::GetClassData() const { return &_class_data_; }

void EvalTextsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EvalTextsResponse *>(to)->MergeFrom(
      static_cast<const EvalTextsResponse &>(from));
}


void EvalTextsResponse::MergeFrom(const EvalTextsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.sal.v1.EvalTextsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_report().empty()) {
    _internal_set_report(from._internal_report());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalTextsResponse::CopyFrom(const EvalTextsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.sal.v1.EvalTextsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalTextsResponse::IsInitialized() const {
  return true;
}

void EvalTextsResponse::InternalSwap(EvalTextsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &report_, GetArenaForAllocation(),
      &other->report_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalTextsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_getter, &descriptor_table_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto_once,
      file_level_metadata_speechly_2fsal_2fv1_2fevaluator_5fapi_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sal
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::TextsRequest* Arena::CreateMaybeMessage< ::speechly::sal::v1::TextsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::TextsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::TextsResponse* Arena::CreateMaybeMessage< ::speechly::sal::v1::TextsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::TextsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::EvalTextsRequest_EvaluationPair* Arena::CreateMaybeMessage< ::speechly::sal::v1::EvalTextsRequest_EvaluationPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::EvalTextsRequest_EvaluationPair >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::EvalTextsRequest* Arena::CreateMaybeMessage< ::speechly::sal::v1::EvalTextsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::EvalTextsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::sal::v1::EvalTextsResponse* Arena::CreateMaybeMessage< ::speechly::sal::v1::EvalTextsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::sal::v1::EvalTextsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
