// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/sal/v1/compiler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fcompiler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fcompiler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fsal_2fv1_2fcompiler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto;
namespace speechly {
namespace sal {
namespace v1 {
class AppSource;
struct AppSourceDefaultTypeInternal;
extern AppSourceDefaultTypeInternal _AppSource_default_instance_;
class CompileRequest;
struct CompileRequestDefaultTypeInternal;
extern CompileRequestDefaultTypeInternal _CompileRequest_default_instance_;
class CompileResult;
struct CompileResultDefaultTypeInternal;
extern CompileResultDefaultTypeInternal _CompileResult_default_instance_;
class ExtractSALSourcesResult;
struct ExtractSALSourcesResultDefaultTypeInternal;
extern ExtractSALSourcesResultDefaultTypeInternal _ExtractSALSourcesResult_default_instance_;
class LineReference;
struct LineReferenceDefaultTypeInternal;
extern LineReferenceDefaultTypeInternal _LineReference_default_instance_;
class ValidateResult;
struct ValidateResultDefaultTypeInternal;
extern ValidateResultDefaultTypeInternal _ValidateResult_default_instance_;
}  // namespace v1
}  // namespace sal
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::sal::v1::AppSource* Arena::CreateMaybeMessage<::speechly::sal::v1::AppSource>(Arena*);
template<> ::speechly::sal::v1::CompileRequest* Arena::CreateMaybeMessage<::speechly::sal::v1::CompileRequest>(Arena*);
template<> ::speechly::sal::v1::CompileResult* Arena::CreateMaybeMessage<::speechly::sal::v1::CompileResult>(Arena*);
template<> ::speechly::sal::v1::ExtractSALSourcesResult* Arena::CreateMaybeMessage<::speechly::sal::v1::ExtractSALSourcesResult>(Arena*);
template<> ::speechly::sal::v1::LineReference* Arena::CreateMaybeMessage<::speechly::sal::v1::LineReference>(Arena*);
template<> ::speechly::sal::v1::ValidateResult* Arena::CreateMaybeMessage<::speechly::sal::v1::ValidateResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace sal {
namespace v1 {

enum AppSource_ContentType : int {
  AppSource_ContentType_CONTENT_TYPE_UNSPECIFIED = 0,
  AppSource_ContentType_CONTENT_TYPE_YAML = 1,
  AppSource_ContentType_CONTENT_TYPE_TAR = 2,
  AppSource_ContentType_AppSource_ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AppSource_ContentType_AppSource_ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AppSource_ContentType_IsValid(int value);
constexpr AppSource_ContentType AppSource_ContentType_ContentType_MIN = AppSource_ContentType_CONTENT_TYPE_UNSPECIFIED;
constexpr AppSource_ContentType AppSource_ContentType_ContentType_MAX = AppSource_ContentType_CONTENT_TYPE_TAR;
constexpr int AppSource_ContentType_ContentType_ARRAYSIZE = AppSource_ContentType_ContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppSource_ContentType_descriptor();
template<typename T>
inline const std::string& AppSource_ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppSource_ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppSource_ContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AppSource_ContentType_descriptor(), enum_t_value);
}
inline bool AppSource_ContentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppSource_ContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AppSource_ContentType>(
    AppSource_ContentType_descriptor(), name, value);
}
enum CompileResult_Result : int {
  CompileResult_Result_COMPILE_SUCCESS = 0,
  CompileResult_Result_COMPILE_FAILURE = 1,
  CompileResult_Result_COMPILE_WARNING = 2,
  CompileResult_Result_CompileResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompileResult_Result_CompileResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompileResult_Result_IsValid(int value);
constexpr CompileResult_Result CompileResult_Result_Result_MIN = CompileResult_Result_COMPILE_SUCCESS;
constexpr CompileResult_Result CompileResult_Result_Result_MAX = CompileResult_Result_COMPILE_WARNING;
constexpr int CompileResult_Result_Result_ARRAYSIZE = CompileResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompileResult_Result_descriptor();
template<typename T>
inline const std::string& CompileResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompileResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompileResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompileResult_Result_descriptor(), enum_t_value);
}
inline bool CompileResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompileResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompileResult_Result>(
    CompileResult_Result_descriptor(), name, value);
}
enum LineReference_Level : int {
  LineReference_Level_LEVEL_NOTE = 0,
  LineReference_Level_LEVEL_WARNING = 1,
  LineReference_Level_LEVEL_ERROR = 2,
  LineReference_Level_LineReference_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LineReference_Level_LineReference_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LineReference_Level_IsValid(int value);
constexpr LineReference_Level LineReference_Level_Level_MIN = LineReference_Level_LEVEL_NOTE;
constexpr LineReference_Level LineReference_Level_Level_MAX = LineReference_Level_LEVEL_ERROR;
constexpr int LineReference_Level_Level_ARRAYSIZE = LineReference_Level_Level_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineReference_Level_descriptor();
template<typename T>
inline const std::string& LineReference_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineReference_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineReference_Level_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LineReference_Level_descriptor(), enum_t_value);
}
inline bool LineReference_Level_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LineReference_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LineReference_Level>(
    LineReference_Level_descriptor(), name, value);
}
// ===================================================================

class AppSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.AppSource) */ {
 public:
  inline AppSource() : AppSource(nullptr) {}
  ~AppSource() override;
  explicit constexpr AppSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppSource(const AppSource& from);
  AppSource(AppSource&& from) noexcept
    : AppSource() {
    *this = ::std::move(from);
  }

  inline AppSource& operator=(const AppSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSource& operator=(AppSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppSource* internal_default_instance() {
    return reinterpret_cast<const AppSource*>(
               &_AppSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppSource& a, AppSource& b) {
    a.Swap(&b);
  }
  inline void Swap(AppSource* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppSource* New() const final {
    return new AppSource();
  }

  AppSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppSource& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.AppSource";
  }
  protected:
  explicit AppSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppSource_ContentType ContentType;
  static constexpr ContentType CONTENT_TYPE_UNSPECIFIED =
    AppSource_ContentType_CONTENT_TYPE_UNSPECIFIED;
  static constexpr ContentType CONTENT_TYPE_YAML =
    AppSource_ContentType_CONTENT_TYPE_YAML;
  static constexpr ContentType CONTENT_TYPE_TAR =
    AppSource_ContentType_CONTENT_TYPE_TAR;
  static inline bool ContentType_IsValid(int value) {
    return AppSource_ContentType_IsValid(value);
  }
  static constexpr ContentType ContentType_MIN =
    AppSource_ContentType_ContentType_MIN;
  static constexpr ContentType ContentType_MAX =
    AppSource_ContentType_ContentType_MAX;
  static constexpr int ContentType_ARRAYSIZE =
    AppSource_ContentType_ContentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ContentType_descriptor() {
    return AppSource_ContentType_descriptor();
  }
  template<typename T>
  static inline const std::string& ContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentType_Name.");
    return AppSource_ContentType_Name(enum_t_value);
  }
  static inline bool ContentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ContentType* value) {
    return AppSource_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kLanguageFieldNumber = 2,
    kDataChunkFieldNumber = 3,
    kContentTypeFieldNumber = 4,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_MUST_USE_RESULT std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // bytes data_chunk = 3;
  void clear_data_chunk();
  const std::string& data_chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_chunk();
  PROTOBUF_MUST_USE_RESULT std::string* release_data_chunk();
  void set_allocated_data_chunk(std::string* data_chunk);
  private:
  const std::string& _internal_data_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_chunk(const std::string& value);
  std::string* _internal_mutable_data_chunk();
  public:

  // .speechly.sal.v1.AppSource.ContentType content_type = 4;
  void clear_content_type();
  ::speechly::sal::v1::AppSource_ContentType content_type() const;
  void set_content_type(::speechly::sal::v1::AppSource_ContentType value);
  private:
  ::speechly::sal::v1::AppSource_ContentType _internal_content_type() const;
  void _internal_set_content_type(::speechly::sal::v1::AppSource_ContentType value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.AppSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_chunk_;
  int content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class CompileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.CompileRequest) */ {
 public:
  inline CompileRequest() : CompileRequest(nullptr) {}
  ~CompileRequest() override;
  explicit constexpr CompileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileRequest(const CompileRequest& from);
  CompileRequest(CompileRequest&& from) noexcept
    : CompileRequest() {
    *this = ::std::move(from);
  }

  inline CompileRequest& operator=(const CompileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileRequest& operator=(CompileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileRequest* internal_default_instance() {
    return reinterpret_cast<const CompileRequest*>(
               &_CompileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompileRequest& a, CompileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileRequest* New() const final {
    return new CompileRequest();
  }

  CompileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.CompileRequest";
  }
  protected:
  explicit CompileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSourceFieldNumber = 1,
    kBatchSizeFieldNumber = 2,
    kRandomSeedFieldNumber = 3,
  };
  // .speechly.sal.v1.AppSource app_source = 1;
  bool has_app_source() const;
  private:
  bool _internal_has_app_source() const;
  public:
  void clear_app_source();
  const ::speechly::sal::v1::AppSource& app_source() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::sal::v1::AppSource* release_app_source();
  ::speechly::sal::v1::AppSource* mutable_app_source();
  void set_allocated_app_source(::speechly::sal::v1::AppSource* app_source);
  private:
  const ::speechly::sal::v1::AppSource& _internal_app_source() const;
  ::speechly::sal::v1::AppSource* _internal_mutable_app_source();
  public:
  void unsafe_arena_set_allocated_app_source(
      ::speechly::sal::v1::AppSource* app_source);
  ::speechly::sal::v1::AppSource* unsafe_arena_release_app_source();

  // int32 batch_size = 2;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 random_seed = 3;
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.CompileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::speechly::sal::v1::AppSource* app_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class CompileResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.CompileResult) */ {
 public:
  inline CompileResult() : CompileResult(nullptr) {}
  ~CompileResult() override;
  explicit constexpr CompileResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileResult(const CompileResult& from);
  CompileResult(CompileResult&& from) noexcept
    : CompileResult() {
    *this = ::std::move(from);
  }

  inline CompileResult& operator=(const CompileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResult& operator=(CompileResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileResult* internal_default_instance() {
    return reinterpret_cast<const CompileResult*>(
               &_CompileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompileResult& a, CompileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileResult* New() const final {
    return new CompileResult();
  }

  CompileResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompileResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.CompileResult";
  }
  protected:
  explicit CompileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CompileResult_Result Result;
  static constexpr Result COMPILE_SUCCESS =
    CompileResult_Result_COMPILE_SUCCESS;
  static constexpr Result COMPILE_FAILURE =
    CompileResult_Result_COMPILE_FAILURE;
  static constexpr Result COMPILE_WARNING =
    CompileResult_Result_COMPILE_WARNING;
  static inline bool Result_IsValid(int value) {
    return CompileResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CompileResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CompileResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CompileResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CompileResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CompileResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CompileResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTemplatesFieldNumber = 2,
    kMessagesFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated string templates = 2;
  int templates_size() const;
  private:
  int _internal_templates_size() const;
  public:
  void clear_templates();
  const std::string& templates(int index) const;
  std::string* mutable_templates(int index);
  void set_templates(int index, const std::string& value);
  void set_templates(int index, std::string&& value);
  void set_templates(int index, const char* value);
  void set_templates(int index, const char* value, size_t size);
  std::string* add_templates();
  void add_templates(const std::string& value);
  void add_templates(std::string&& value);
  void add_templates(const char* value);
  void add_templates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& templates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_templates();
  private:
  const std::string& _internal_templates(int index) const;
  std::string* _internal_add_templates();
  public:

  // repeated .speechly.sal.v1.LineReference messages = 3;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::speechly::sal::v1::LineReference* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
      mutable_messages();
  private:
  const ::speechly::sal::v1::LineReference& _internal_messages(int index) const;
  ::speechly::sal::v1::LineReference* _internal_add_messages();
  public:
  const ::speechly::sal::v1::LineReference& messages(int index) const;
  ::speechly::sal::v1::LineReference* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
      messages() const;

  // .speechly.sal.v1.CompileResult.Result result = 1;
  void clear_result();
  ::speechly::sal::v1::CompileResult_Result result() const;
  void set_result(::speechly::sal::v1::CompileResult_Result value);
  private:
  ::speechly::sal::v1::CompileResult_Result _internal_result() const;
  void _internal_set_result(::speechly::sal::v1::CompileResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.CompileResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> templates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference > messages_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class ValidateResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.ValidateResult) */ {
 public:
  inline ValidateResult() : ValidateResult(nullptr) {}
  ~ValidateResult() override;
  explicit constexpr ValidateResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateResult(const ValidateResult& from);
  ValidateResult(ValidateResult&& from) noexcept
    : ValidateResult() {
    *this = ::std::move(from);
  }

  inline ValidateResult& operator=(const ValidateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateResult& operator=(ValidateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateResult* internal_default_instance() {
    return reinterpret_cast<const ValidateResult*>(
               &_ValidateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValidateResult& a, ValidateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateResult* New() const final {
    return new ValidateResult();
  }

  ValidateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.ValidateResult";
  }
  protected:
  explicit ValidateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .speechly.sal.v1.LineReference messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::speechly::sal::v1::LineReference* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
      mutable_messages();
  private:
  const ::speechly::sal::v1::LineReference& _internal_messages(int index) const;
  ::speechly::sal::v1::LineReference* _internal_add_messages();
  public:
  const ::speechly::sal::v1::LineReference& messages(int index) const;
  ::speechly::sal::v1::LineReference* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
      messages() const;

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.ValidateResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class LineReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.LineReference) */ {
 public:
  inline LineReference() : LineReference(nullptr) {}
  ~LineReference() override;
  explicit constexpr LineReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineReference(const LineReference& from);
  LineReference(LineReference&& from) noexcept
    : LineReference() {
    *this = ::std::move(from);
  }

  inline LineReference& operator=(const LineReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineReference& operator=(LineReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineReference* internal_default_instance() {
    return reinterpret_cast<const LineReference*>(
               &_LineReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LineReference& a, LineReference& b) {
    a.Swap(&b);
  }
  inline void Swap(LineReference* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineReference* New() const final {
    return new LineReference();
  }

  LineReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LineReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LineReference& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.LineReference";
  }
  protected:
  explicit LineReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LineReference_Level Level;
  static constexpr Level LEVEL_NOTE =
    LineReference_Level_LEVEL_NOTE;
  static constexpr Level LEVEL_WARNING =
    LineReference_Level_LEVEL_WARNING;
  static constexpr Level LEVEL_ERROR =
    LineReference_Level_LEVEL_ERROR;
  static inline bool Level_IsValid(int value) {
    return LineReference_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    LineReference_Level_Level_MIN;
  static constexpr Level Level_MAX =
    LineReference_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    LineReference_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Level_descriptor() {
    return LineReference_Level_descriptor();
  }
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return LineReference_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Level* value) {
    return LineReference_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 3,
    kMessageFieldNumber = 5,
    kLineFieldNumber = 1,
    kColumnFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // string file = 3;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint64 line = 1;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::uint64 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 column = 2;
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .speechly.sal.v1.LineReference.Level level = 4;
  void clear_level();
  ::speechly::sal::v1::LineReference_Level level() const;
  void set_level(::speechly::sal::v1::LineReference_Level value);
  private:
  ::speechly::sal::v1::LineReference_Level _internal_level() const;
  void _internal_set_level(::speechly::sal::v1::LineReference_Level value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.LineReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 line_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  int level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class ExtractSALSourcesResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.ExtractSALSourcesResult) */ {
 public:
  inline ExtractSALSourcesResult() : ExtractSALSourcesResult(nullptr) {}
  ~ExtractSALSourcesResult() override;
  explicit constexpr ExtractSALSourcesResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractSALSourcesResult(const ExtractSALSourcesResult& from);
  ExtractSALSourcesResult(ExtractSALSourcesResult&& from) noexcept
    : ExtractSALSourcesResult() {
    *this = ::std::move(from);
  }

  inline ExtractSALSourcesResult& operator=(const ExtractSALSourcesResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractSALSourcesResult& operator=(ExtractSALSourcesResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractSALSourcesResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractSALSourcesResult* internal_default_instance() {
    return reinterpret_cast<const ExtractSALSourcesResult*>(
               &_ExtractSALSourcesResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExtractSALSourcesResult& a, ExtractSALSourcesResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractSALSourcesResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractSALSourcesResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtractSALSourcesResult* New() const final {
    return new ExtractSALSourcesResult();
  }

  ExtractSALSourcesResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtractSALSourcesResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractSALSourcesResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractSALSourcesResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractSALSourcesResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.sal.v1.ExtractSALSourcesResult";
  }
  protected:
  explicit ExtractSALSourcesResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataChunkFieldNumber = 1,
  };
  // bytes data_chunk = 1;
  void clear_data_chunk();
  const std::string& data_chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_chunk();
  PROTOBUF_MUST_USE_RESULT std::string* release_data_chunk();
  void set_allocated_data_chunk(std::string* data_chunk);
  private:
  const std::string& _internal_data_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_chunk(const std::string& value);
  std::string* _internal_mutable_data_chunk();
  public:

  // @@protoc_insertion_point(class_scope:speechly.sal.v1.ExtractSALSourcesResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppSource

// string app_id = 1;
inline void AppSource::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& AppSource::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSource::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.app_id)
}
inline std::string* AppSource::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.AppSource.app_id)
  return _s;
}
inline const std::string& AppSource::_internal_app_id() const {
  return app_id_.Get();
}
inline void AppSource::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppSource::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppSource::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.AppSource.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppSource::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.AppSource.app_id)
}

// string language = 2;
inline void AppSource::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& AppSource::language() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSource::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.language)
}
inline std::string* AppSource::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.AppSource.language)
  return _s;
}
inline const std::string& AppSource::_internal_language() const {
  return language_.Get();
}
inline void AppSource::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppSource::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppSource::release_language() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.AppSource.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppSource::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.AppSource.language)
}

// bytes data_chunk = 3;
inline void AppSource::clear_data_chunk() {
  data_chunk_.ClearToEmpty();
}
inline const std::string& AppSource::data_chunk() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.data_chunk)
  return _internal_data_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSource::set_data_chunk(ArgT0&& arg0, ArgT... args) {
 
 data_chunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.data_chunk)
}
inline std::string* AppSource::mutable_data_chunk() {
  std::string* _s = _internal_mutable_data_chunk();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.AppSource.data_chunk)
  return _s;
}
inline const std::string& AppSource::_internal_data_chunk() const {
  return data_chunk_.Get();
}
inline void AppSource::_internal_set_data_chunk(const std::string& value) {
  
  data_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppSource::_internal_mutable_data_chunk() {
  
  return data_chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppSource::release_data_chunk() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.AppSource.data_chunk)
  return data_chunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppSource::set_allocated_data_chunk(std::string* data_chunk) {
  if (data_chunk != nullptr) {
    
  } else {
    
  }
  data_chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_chunk,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.AppSource.data_chunk)
}

// .speechly.sal.v1.AppSource.ContentType content_type = 4;
inline void AppSource::clear_content_type() {
  content_type_ = 0;
}
inline ::speechly::sal::v1::AppSource_ContentType AppSource::_internal_content_type() const {
  return static_cast< ::speechly::sal::v1::AppSource_ContentType >(content_type_);
}
inline ::speechly::sal::v1::AppSource_ContentType AppSource::content_type() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.content_type)
  return _internal_content_type();
}
inline void AppSource::_internal_set_content_type(::speechly::sal::v1::AppSource_ContentType value) {
  
  content_type_ = value;
}
inline void AppSource::set_content_type(::speechly::sal::v1::AppSource_ContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.content_type)
}

// -------------------------------------------------------------------

// CompileRequest

// .speechly.sal.v1.AppSource app_source = 1;
inline bool CompileRequest::_internal_has_app_source() const {
  return this != internal_default_instance() && app_source_ != nullptr;
}
inline bool CompileRequest::has_app_source() const {
  return _internal_has_app_source();
}
inline void CompileRequest::clear_app_source() {
  if (GetArenaForAllocation() == nullptr && app_source_ != nullptr) {
    delete app_source_;
  }
  app_source_ = nullptr;
}
inline const ::speechly::sal::v1::AppSource& CompileRequest::_internal_app_source() const {
  const ::speechly::sal::v1::AppSource* p = app_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::sal::v1::AppSource&>(
      ::speechly::sal::v1::_AppSource_default_instance_);
}
inline const ::speechly::sal::v1::AppSource& CompileRequest::app_source() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileRequest.app_source)
  return _internal_app_source();
}
inline void CompileRequest::unsafe_arena_set_allocated_app_source(
    ::speechly::sal::v1::AppSource* app_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_source_);
  }
  app_source_ = app_source;
  if (app_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.sal.v1.CompileRequest.app_source)
}
inline ::speechly::sal::v1::AppSource* CompileRequest::release_app_source() {
  
  ::speechly::sal::v1::AppSource* temp = app_source_;
  app_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::speechly::sal::v1::AppSource* CompileRequest::unsafe_arena_release_app_source() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.CompileRequest.app_source)
  
  ::speechly::sal::v1::AppSource* temp = app_source_;
  app_source_ = nullptr;
  return temp;
}
inline ::speechly::sal::v1::AppSource* CompileRequest::_internal_mutable_app_source() {
  
  if (app_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::sal::v1::AppSource>(GetArenaForAllocation());
    app_source_ = p;
  }
  return app_source_;
}
inline ::speechly::sal::v1::AppSource* CompileRequest::mutable_app_source() {
  ::speechly::sal::v1::AppSource* _msg = _internal_mutable_app_source();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.CompileRequest.app_source)
  return _msg;
}
inline void CompileRequest::set_allocated_app_source(::speechly::sal::v1::AppSource* app_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_source_;
  }
  if (app_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::sal::v1::AppSource>::GetOwningArena(app_source);
    if (message_arena != submessage_arena) {
      app_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_source, submessage_arena);
    }
    
  } else {
    
  }
  app_source_ = app_source;
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.CompileRequest.app_source)
}

// int32 batch_size = 2;
inline void CompileRequest::clear_batch_size() {
  batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompileRequest::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompileRequest::batch_size() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileRequest.batch_size)
  return _internal_batch_size();
}
inline void CompileRequest::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_size_ = value;
}
inline void CompileRequest::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileRequest.batch_size)
}

// int32 random_seed = 3;
inline void CompileRequest::clear_random_seed() {
  random_seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompileRequest::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompileRequest::random_seed() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileRequest.random_seed)
  return _internal_random_seed();
}
inline void CompileRequest::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  random_seed_ = value;
}
inline void CompileRequest::set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileRequest.random_seed)
}

// -------------------------------------------------------------------

// CompileResult

// .speechly.sal.v1.CompileResult.Result result = 1;
inline void CompileResult::clear_result() {
  result_ = 0;
}
inline ::speechly::sal::v1::CompileResult_Result CompileResult::_internal_result() const {
  return static_cast< ::speechly::sal::v1::CompileResult_Result >(result_);
}
inline ::speechly::sal::v1::CompileResult_Result CompileResult::result() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileResult.result)
  return _internal_result();
}
inline void CompileResult::_internal_set_result(::speechly::sal::v1::CompileResult_Result value) {
  
  result_ = value;
}
inline void CompileResult::set_result(::speechly::sal::v1::CompileResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileResult.result)
}

// repeated string templates = 2;
inline int CompileResult::_internal_templates_size() const {
  return templates_.size();
}
inline int CompileResult::templates_size() const {
  return _internal_templates_size();
}
inline void CompileResult::clear_templates() {
  templates_.Clear();
}
inline std::string* CompileResult::add_templates() {
  std::string* _s = _internal_add_templates();
  // @@protoc_insertion_point(field_add_mutable:speechly.sal.v1.CompileResult.templates)
  return _s;
}
inline const std::string& CompileResult::_internal_templates(int index) const {
  return templates_.Get(index);
}
inline const std::string& CompileResult::templates(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileResult.templates)
  return _internal_templates(index);
}
inline std::string* CompileResult::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.CompileResult.templates)
  return templates_.Mutable(index);
}
inline void CompileResult::set_templates(int index, const std::string& value) {
  templates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::set_templates(int index, std::string&& value) {
  templates_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::set_templates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  templates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::set_templates(int index, const char* value, size_t size) {
  templates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.sal.v1.CompileResult.templates)
}
inline std::string* CompileResult::_internal_add_templates() {
  return templates_.Add();
}
inline void CompileResult::add_templates(const std::string& value) {
  templates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(std::string&& value) {
  templates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  templates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(const char* value, size_t size) {
  templates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.sal.v1.CompileResult.templates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompileResult::templates() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.CompileResult.templates)
  return templates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompileResult::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.CompileResult.templates)
  return &templates_;
}

// repeated .speechly.sal.v1.LineReference messages = 3;
inline int CompileResult::_internal_messages_size() const {
  return messages_.size();
}
inline int CompileResult::messages_size() const {
  return _internal_messages_size();
}
inline void CompileResult::clear_messages() {
  messages_.Clear();
}
inline ::speechly::sal::v1::LineReference* CompileResult::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.CompileResult.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
CompileResult::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.CompileResult.messages)
  return &messages_;
}
inline const ::speechly::sal::v1::LineReference& CompileResult::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::speechly::sal::v1::LineReference& CompileResult::messages(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileResult.messages)
  return _internal_messages(index);
}
inline ::speechly::sal::v1::LineReference* CompileResult::_internal_add_messages() {
  return messages_.Add();
}
inline ::speechly::sal::v1::LineReference* CompileResult::add_messages() {
  ::speechly::sal::v1::LineReference* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:speechly.sal.v1.CompileResult.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
CompileResult::messages() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.CompileResult.messages)
  return messages_;
}

// -------------------------------------------------------------------

// ValidateResult

// repeated .speechly.sal.v1.LineReference messages = 1;
inline int ValidateResult::_internal_messages_size() const {
  return messages_.size();
}
inline int ValidateResult::messages_size() const {
  return _internal_messages_size();
}
inline void ValidateResult::clear_messages() {
  messages_.Clear();
}
inline ::speechly::sal::v1::LineReference* ValidateResult::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ValidateResult.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
ValidateResult::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.ValidateResult.messages)
  return &messages_;
}
inline const ::speechly::sal::v1::LineReference& ValidateResult::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::speechly::sal::v1::LineReference& ValidateResult::messages(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ValidateResult.messages)
  return _internal_messages(index);
}
inline ::speechly::sal::v1::LineReference* ValidateResult::_internal_add_messages() {
  return messages_.Add();
}
inline ::speechly::sal::v1::LineReference* ValidateResult::add_messages() {
  ::speechly::sal::v1::LineReference* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:speechly.sal.v1.ValidateResult.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
ValidateResult::messages() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.ValidateResult.messages)
  return messages_;
}

// -------------------------------------------------------------------

// LineReference

// uint64 line = 1;
inline void LineReference::clear_line() {
  line_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LineReference::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LineReference::line() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.line)
  return _internal_line();
}
inline void LineReference::_internal_set_line(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  line_ = value;
}
inline void LineReference::set_line(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.line)
}

// uint32 column = 2;
inline void LineReference::clear_column() {
  column_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LineReference::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LineReference::column() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.column)
  return _internal_column();
}
inline void LineReference::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_ = value;
}
inline void LineReference::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.column)
}

// string file = 3;
inline void LineReference::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& LineReference::file() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LineReference::set_file(ArgT0&& arg0, ArgT... args) {
 
 file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.file)
}
inline std::string* LineReference::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.LineReference.file)
  return _s;
}
inline const std::string& LineReference::_internal_file() const {
  return file_.Get();
}
inline void LineReference::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LineReference::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LineReference::release_file() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.LineReference.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LineReference::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.LineReference.file)
}

// .speechly.sal.v1.LineReference.Level level = 4;
inline void LineReference::clear_level() {
  level_ = 0;
}
inline ::speechly::sal::v1::LineReference_Level LineReference::_internal_level() const {
  return static_cast< ::speechly::sal::v1::LineReference_Level >(level_);
}
inline ::speechly::sal::v1::LineReference_Level LineReference::level() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.level)
  return _internal_level();
}
inline void LineReference::_internal_set_level(::speechly::sal::v1::LineReference_Level value) {
  
  level_ = value;
}
inline void LineReference::set_level(::speechly::sal::v1::LineReference_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.level)
}

// string message = 5;
inline void LineReference::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LineReference::message() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LineReference::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.message)
}
inline std::string* LineReference::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.LineReference.message)
  return _s;
}
inline const std::string& LineReference::_internal_message() const {
  return message_.Get();
}
inline void LineReference::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LineReference::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LineReference::release_message() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.LineReference.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LineReference::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.LineReference.message)
}

// -------------------------------------------------------------------

// ExtractSALSourcesResult

// bytes data_chunk = 1;
inline void ExtractSALSourcesResult::clear_data_chunk() {
  data_chunk_.ClearToEmpty();
}
inline const std::string& ExtractSALSourcesResult::data_chunk() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
  return _internal_data_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractSALSourcesResult::set_data_chunk(ArgT0&& arg0, ArgT... args) {
 
 data_chunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
}
inline std::string* ExtractSALSourcesResult::mutable_data_chunk() {
  std::string* _s = _internal_mutable_data_chunk();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
  return _s;
}
inline const std::string& ExtractSALSourcesResult::_internal_data_chunk() const {
  return data_chunk_.Get();
}
inline void ExtractSALSourcesResult::_internal_set_data_chunk(const std::string& value) {
  
  data_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractSALSourcesResult::_internal_mutable_data_chunk() {
  
  return data_chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractSALSourcesResult::release_data_chunk() {
  // @@protoc_insertion_point(field_release:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
  return data_chunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractSALSourcesResult::set_allocated_data_chunk(std::string* data_chunk) {
  if (data_chunk != nullptr) {
    
  } else {
    
  }
  data_chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_chunk,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace sal
}  // namespace speechly

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::speechly::sal::v1::AppSource_ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::sal::v1::AppSource_ContentType>() {
  return ::speechly::sal::v1::AppSource_ContentType_descriptor();
}
template <> struct is_proto_enum< ::speechly::sal::v1::CompileResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::sal::v1::CompileResult_Result>() {
  return ::speechly::sal::v1::CompileResult_Result_descriptor();
}
template <> struct is_proto_enum< ::speechly::sal::v1::LineReference_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::sal::v1::LineReference_Level>() {
  return ::speechly::sal::v1::LineReference_Level_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fcompiler_2eproto
