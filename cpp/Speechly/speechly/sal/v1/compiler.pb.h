// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/sal/v1/compiler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fcompiler_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fcompiler_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fsal_2fv1_2fcompiler_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fsal_2fv1_2fcompiler_2eproto;
namespace speechly {
namespace sal {
namespace v1 {
class AppSource;
struct AppSourceDefaultTypeInternal;
extern AppSourceDefaultTypeInternal _AppSource_default_instance_;
class CompileRequest;
struct CompileRequestDefaultTypeInternal;
extern CompileRequestDefaultTypeInternal _CompileRequest_default_instance_;
class CompileResult;
struct CompileResultDefaultTypeInternal;
extern CompileResultDefaultTypeInternal _CompileResult_default_instance_;
class ConvertRequest;
struct ConvertRequestDefaultTypeInternal;
extern ConvertRequestDefaultTypeInternal _ConvertRequest_default_instance_;
class ConvertResult;
struct ConvertResultDefaultTypeInternal;
extern ConvertResultDefaultTypeInternal _ConvertResult_default_instance_;
class ExtractSALSourcesResult;
struct ExtractSALSourcesResultDefaultTypeInternal;
extern ExtractSALSourcesResultDefaultTypeInternal _ExtractSALSourcesResult_default_instance_;
class LineReference;
struct LineReferenceDefaultTypeInternal;
extern LineReferenceDefaultTypeInternal _LineReference_default_instance_;
class ValidateResult;
struct ValidateResultDefaultTypeInternal;
extern ValidateResultDefaultTypeInternal _ValidateResult_default_instance_;
}  // namespace v1
}  // namespace sal
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace sal {
namespace v1 {
enum AppSource_ContentType : int {
  AppSource_ContentType_CONTENT_TYPE_UNSPECIFIED = 0,
  AppSource_ContentType_CONTENT_TYPE_YAML = 1,
  AppSource_ContentType_CONTENT_TYPE_TAR = 2,
  AppSource_ContentType_AppSource_ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AppSource_ContentType_AppSource_ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AppSource_ContentType_IsValid(int value);
constexpr AppSource_ContentType AppSource_ContentType_ContentType_MIN = static_cast<AppSource_ContentType>(0);
constexpr AppSource_ContentType AppSource_ContentType_ContentType_MAX = static_cast<AppSource_ContentType>(2);
constexpr int AppSource_ContentType_ContentType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AppSource_ContentType_descriptor();
template <typename T>
const std::string& AppSource_ContentType_Name(T value) {
  static_assert(std::is_same<T, AppSource_ContentType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ContentType_Name().");
  return AppSource_ContentType_Name(static_cast<AppSource_ContentType>(value));
}
template <>
inline const std::string& AppSource_ContentType_Name(AppSource_ContentType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AppSource_ContentType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AppSource_ContentType_Parse(absl::string_view name, AppSource_ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AppSource_ContentType>(
      AppSource_ContentType_descriptor(), name, value);
}
enum CompileResult_Result : int {
  CompileResult_Result_COMPILE_SUCCESS = 0,
  CompileResult_Result_COMPILE_FAILURE = 1,
  CompileResult_Result_COMPILE_WARNING = 2,
  CompileResult_Result_CompileResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CompileResult_Result_CompileResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CompileResult_Result_IsValid(int value);
constexpr CompileResult_Result CompileResult_Result_Result_MIN = static_cast<CompileResult_Result>(0);
constexpr CompileResult_Result CompileResult_Result_Result_MAX = static_cast<CompileResult_Result>(2);
constexpr int CompileResult_Result_Result_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CompileResult_Result_descriptor();
template <typename T>
const std::string& CompileResult_Result_Name(T value) {
  static_assert(std::is_same<T, CompileResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return CompileResult_Result_Name(static_cast<CompileResult_Result>(value));
}
template <>
inline const std::string& CompileResult_Result_Name(CompileResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CompileResult_Result_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CompileResult_Result_Parse(absl::string_view name, CompileResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompileResult_Result>(
      CompileResult_Result_descriptor(), name, value);
}
enum ConvertRequest_InputFormat : int {
  ConvertRequest_InputFormat_FORMAT_UNKNOWN = 0,
  ConvertRequest_InputFormat_FORMAT_ALEXA = 1,
  ConvertRequest_InputFormat_ConvertRequest_InputFormat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConvertRequest_InputFormat_ConvertRequest_InputFormat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConvertRequest_InputFormat_IsValid(int value);
constexpr ConvertRequest_InputFormat ConvertRequest_InputFormat_InputFormat_MIN = static_cast<ConvertRequest_InputFormat>(0);
constexpr ConvertRequest_InputFormat ConvertRequest_InputFormat_InputFormat_MAX = static_cast<ConvertRequest_InputFormat>(1);
constexpr int ConvertRequest_InputFormat_InputFormat_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ConvertRequest_InputFormat_descriptor();
template <typename T>
const std::string& ConvertRequest_InputFormat_Name(T value) {
  static_assert(std::is_same<T, ConvertRequest_InputFormat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InputFormat_Name().");
  return ConvertRequest_InputFormat_Name(static_cast<ConvertRequest_InputFormat>(value));
}
template <>
inline const std::string& ConvertRequest_InputFormat_Name(ConvertRequest_InputFormat value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConvertRequest_InputFormat_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ConvertRequest_InputFormat_Parse(absl::string_view name, ConvertRequest_InputFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvertRequest_InputFormat>(
      ConvertRequest_InputFormat_descriptor(), name, value);
}
enum ConvertResult_Status : int {
  ConvertResult_Status_CONVERT_SUCCESS = 0,
  ConvertResult_Status_CONVERT_WARNINGS = 1,
  ConvertResult_Status_CONVERT_FAILED = 2,
  ConvertResult_Status_ConvertResult_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConvertResult_Status_ConvertResult_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConvertResult_Status_IsValid(int value);
constexpr ConvertResult_Status ConvertResult_Status_Status_MIN = static_cast<ConvertResult_Status>(0);
constexpr ConvertResult_Status ConvertResult_Status_Status_MAX = static_cast<ConvertResult_Status>(2);
constexpr int ConvertResult_Status_Status_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ConvertResult_Status_descriptor();
template <typename T>
const std::string& ConvertResult_Status_Name(T value) {
  static_assert(std::is_same<T, ConvertResult_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return ConvertResult_Status_Name(static_cast<ConvertResult_Status>(value));
}
template <>
inline const std::string& ConvertResult_Status_Name(ConvertResult_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConvertResult_Status_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ConvertResult_Status_Parse(absl::string_view name, ConvertResult_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvertResult_Status>(
      ConvertResult_Status_descriptor(), name, value);
}
enum LineReference_Level : int {
  LineReference_Level_LEVEL_NOTE = 0,
  LineReference_Level_LEVEL_WARNING = 1,
  LineReference_Level_LEVEL_ERROR = 2,
  LineReference_Level_LineReference_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LineReference_Level_LineReference_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LineReference_Level_IsValid(int value);
constexpr LineReference_Level LineReference_Level_Level_MIN = static_cast<LineReference_Level>(0);
constexpr LineReference_Level LineReference_Level_Level_MAX = static_cast<LineReference_Level>(2);
constexpr int LineReference_Level_Level_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LineReference_Level_descriptor();
template <typename T>
const std::string& LineReference_Level_Name(T value) {
  static_assert(std::is_same<T, LineReference_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return LineReference_Level_Name(static_cast<LineReference_Level>(value));
}
template <>
inline const std::string& LineReference_Level_Name(LineReference_Level value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LineReference_Level_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LineReference_Level_Parse(absl::string_view name, LineReference_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LineReference_Level>(
      LineReference_Level_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AppSource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.AppSource) */ {
 public:
  inline AppSource() : AppSource(nullptr) {}
  ~AppSource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AppSource(::google::protobuf::internal::ConstantInitialized);

  AppSource(const AppSource& from);
  AppSource(AppSource&& from) noexcept
    : AppSource() {
    *this = ::std::move(from);
  }

  inline AppSource& operator=(const AppSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSource& operator=(AppSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppSource* internal_default_instance() {
    return reinterpret_cast<const AppSource*>(
               &_AppSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppSource& a, AppSource& b) {
    a.Swap(&b);
  }
  inline void Swap(AppSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppSource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppSource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppSource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AppSource& from) {
    AppSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppSource* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.AppSource";
  }
  protected:
  explicit AppSource(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ContentType = AppSource_ContentType;
  static constexpr ContentType CONTENT_TYPE_UNSPECIFIED = AppSource_ContentType_CONTENT_TYPE_UNSPECIFIED;
  static constexpr ContentType CONTENT_TYPE_YAML = AppSource_ContentType_CONTENT_TYPE_YAML;
  static constexpr ContentType CONTENT_TYPE_TAR = AppSource_ContentType_CONTENT_TYPE_TAR;
  static inline bool ContentType_IsValid(int value) {
    return AppSource_ContentType_IsValid(value);
  }
  static constexpr ContentType ContentType_MIN = AppSource_ContentType_ContentType_MIN;
  static constexpr ContentType ContentType_MAX = AppSource_ContentType_ContentType_MAX;
  static constexpr int ContentType_ARRAYSIZE = AppSource_ContentType_ContentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ContentType_descriptor() {
    return AppSource_ContentType_descriptor();
  }
  template <typename T>
  static inline const std::string& ContentType_Name(T value) {
    return AppSource_ContentType_Name(value);
  }
  static inline bool ContentType_Parse(absl::string_view name, ContentType* value) {
    return AppSource_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kLanguageFieldNumber = 2,
    kDataChunkFieldNumber = 3,
    kContentTypeFieldNumber = 4,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string language = 2;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* ptr);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // bytes data_chunk = 3;
  void clear_data_chunk() ;
  const std::string& data_chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_data_chunk();
  PROTOBUF_NODISCARD std::string* release_data_chunk();
  void set_allocated_data_chunk(std::string* ptr);

  private:
  const std::string& _internal_data_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_chunk(
      const std::string& value);
  std::string* _internal_mutable_data_chunk();

  public:
  // .speechly.sal.v1.AppSource.ContentType content_type = 4;
  void clear_content_type() ;
  ::speechly::sal::v1::AppSource_ContentType content_type() const;
  void set_content_type(::speechly::sal::v1::AppSource_ContentType value);

  private:
  ::speechly::sal::v1::AppSource_ContentType _internal_content_type() const;
  void _internal_set_content_type(::speechly::sal::v1::AppSource_ContentType value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.AppSource)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    ::google::protobuf::internal::ArenaStringPtr data_chunk_;
    int content_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};// -------------------------------------------------------------------

class CompileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.CompileRequest) */ {
 public:
  inline CompileRequest() : CompileRequest(nullptr) {}
  ~CompileRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CompileRequest(::google::protobuf::internal::ConstantInitialized);

  CompileRequest(const CompileRequest& from);
  CompileRequest(CompileRequest&& from) noexcept
    : CompileRequest() {
    *this = ::std::move(from);
  }

  inline CompileRequest& operator=(const CompileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileRequest& operator=(CompileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileRequest* internal_default_instance() {
    return reinterpret_cast<const CompileRequest*>(
               &_CompileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompileRequest& a, CompileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompileRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CompileRequest& from) {
    CompileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.CompileRequest";
  }
  protected:
  explicit CompileRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSourceFieldNumber = 1,
    kBatchSizeFieldNumber = 2,
    kRandomSeedFieldNumber = 3,
  };
  // .speechly.sal.v1.AppSource app_source = 1;
  bool has_app_source() const;
  void clear_app_source() ;
  const ::speechly::sal::v1::AppSource& app_source() const;
  PROTOBUF_NODISCARD ::speechly::sal::v1::AppSource* release_app_source();
  ::speechly::sal::v1::AppSource* mutable_app_source();
  void set_allocated_app_source(::speechly::sal::v1::AppSource* value);
  void unsafe_arena_set_allocated_app_source(::speechly::sal::v1::AppSource* value);
  ::speechly::sal::v1::AppSource* unsafe_arena_release_app_source();

  private:
  const ::speechly::sal::v1::AppSource& _internal_app_source() const;
  ::speechly::sal::v1::AppSource* _internal_mutable_app_source();

  public:
  // int32 batch_size = 2;
  void clear_batch_size() ;
  ::int32_t batch_size() const;
  void set_batch_size(::int32_t value);

  private:
  ::int32_t _internal_batch_size() const;
  void _internal_set_batch_size(::int32_t value);

  public:
  // int32 random_seed = 3;
  void clear_random_seed() ;
  ::int32_t random_seed() const;
  void set_random_seed(::int32_t value);

  private:
  ::int32_t _internal_random_seed() const;
  void _internal_set_random_seed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.CompileRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::speechly::sal::v1::AppSource* app_source_;
    ::int32_t batch_size_;
    ::int32_t random_seed_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};// -------------------------------------------------------------------

class CompileResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.CompileResult) */ {
 public:
  inline CompileResult() : CompileResult(nullptr) {}
  ~CompileResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CompileResult(::google::protobuf::internal::ConstantInitialized);

  CompileResult(const CompileResult& from);
  CompileResult(CompileResult&& from) noexcept
    : CompileResult() {
    *this = ::std::move(from);
  }

  inline CompileResult& operator=(const CompileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResult& operator=(CompileResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileResult* internal_default_instance() {
    return reinterpret_cast<const CompileResult*>(
               &_CompileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompileResult& a, CompileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompileResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompileResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompileResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CompileResult& from) {
    CompileResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.CompileResult";
  }
  protected:
  explicit CompileResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = CompileResult_Result;
  static constexpr Result COMPILE_SUCCESS = CompileResult_Result_COMPILE_SUCCESS;
  static constexpr Result COMPILE_FAILURE = CompileResult_Result_COMPILE_FAILURE;
  static constexpr Result COMPILE_WARNING = CompileResult_Result_COMPILE_WARNING;
  static inline bool Result_IsValid(int value) {
    return CompileResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = CompileResult_Result_Result_MIN;
  static constexpr Result Result_MAX = CompileResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = CompileResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return CompileResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return CompileResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return CompileResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTemplatesFieldNumber = 2,
    kMessagesFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated string templates = 2;
  int templates_size() const;
  private:
  int _internal_templates_size() const;

  public:
  void clear_templates() ;
  const std::string& templates(int index) const;
  std::string* mutable_templates(int index);
  void set_templates(int index, const std::string& value);
  void set_templates(int index, std::string&& value);
  void set_templates(int index, const char* value);
  void set_templates(int index, const char* value, std::size_t size);
  void set_templates(int index, absl::string_view value);
  std::string* add_templates();
  void add_templates(const std::string& value);
  void add_templates(std::string&& value);
  void add_templates(const char* value);
  void add_templates(const char* value, std::size_t size);
  void add_templates(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& templates() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_templates();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_templates() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_templates();

  public:
  // repeated .speechly.sal.v1.LineReference messages = 3;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::speechly::sal::v1::LineReference* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
      mutable_messages();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>* _internal_mutable_messages();
  public:
  const ::speechly::sal::v1::LineReference& messages(int index) const;
  ::speechly::sal::v1::LineReference* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
      messages() const;
  // .speechly.sal.v1.CompileResult.Result result = 1;
  void clear_result() ;
  ::speechly::sal::v1::CompileResult_Result result() const;
  void set_result(::speechly::sal::v1::CompileResult_Result value);

  private:
  ::speechly::sal::v1::CompileResult_Result _internal_result() const;
  void _internal_set_result(::speechly::sal::v1::CompileResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.CompileResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> templates_;
    ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference > messages_;
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};// -------------------------------------------------------------------

class ConvertRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.ConvertRequest) */ {
 public:
  inline ConvertRequest() : ConvertRequest(nullptr) {}
  ~ConvertRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConvertRequest(::google::protobuf::internal::ConstantInitialized);

  ConvertRequest(const ConvertRequest& from);
  ConvertRequest(ConvertRequest&& from) noexcept
    : ConvertRequest() {
    *this = ::std::move(from);
  }

  inline ConvertRequest& operator=(const ConvertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvertRequest& operator=(ConvertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvertRequest* internal_default_instance() {
    return reinterpret_cast<const ConvertRequest*>(
               &_ConvertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConvertRequest& a, ConvertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvertRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvertRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvertRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConvertRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConvertRequest& from) {
    ConvertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.ConvertRequest";
  }
  protected:
  explicit ConvertRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using InputFormat = ConvertRequest_InputFormat;
  static constexpr InputFormat FORMAT_UNKNOWN = ConvertRequest_InputFormat_FORMAT_UNKNOWN;
  static constexpr InputFormat FORMAT_ALEXA = ConvertRequest_InputFormat_FORMAT_ALEXA;
  static inline bool InputFormat_IsValid(int value) {
    return ConvertRequest_InputFormat_IsValid(value);
  }
  static constexpr InputFormat InputFormat_MIN = ConvertRequest_InputFormat_InputFormat_MIN;
  static constexpr InputFormat InputFormat_MAX = ConvertRequest_InputFormat_InputFormat_MAX;
  static constexpr int InputFormat_ARRAYSIZE = ConvertRequest_InputFormat_InputFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* InputFormat_descriptor() {
    return ConvertRequest_InputFormat_descriptor();
  }
  template <typename T>
  static inline const std::string& InputFormat_Name(T value) {
    return ConvertRequest_InputFormat_Name(value);
  }
  static inline bool InputFormat_Parse(absl::string_view name, InputFormat* value) {
    return ConvertRequest_InputFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kDataChunkFieldNumber = 3,
    kInputFormatFieldNumber = 1,
  };
  // string language = 2;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* ptr);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // bytes data_chunk = 3;
  void clear_data_chunk() ;
  const std::string& data_chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_data_chunk();
  PROTOBUF_NODISCARD std::string* release_data_chunk();
  void set_allocated_data_chunk(std::string* ptr);

  private:
  const std::string& _internal_data_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_chunk(
      const std::string& value);
  std::string* _internal_mutable_data_chunk();

  public:
  // .speechly.sal.v1.ConvertRequest.InputFormat input_format = 1;
  void clear_input_format() ;
  ::speechly::sal::v1::ConvertRequest_InputFormat input_format() const;
  void set_input_format(::speechly::sal::v1::ConvertRequest_InputFormat value);

  private:
  ::speechly::sal::v1::ConvertRequest_InputFormat _internal_input_format() const;
  void _internal_set_input_format(::speechly::sal::v1::ConvertRequest_InputFormat value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.ConvertRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr language_;
    ::google::protobuf::internal::ArenaStringPtr data_chunk_;
    int input_format_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};// -------------------------------------------------------------------

class ConvertResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.ConvertResult) */ {
 public:
  inline ConvertResult() : ConvertResult(nullptr) {}
  ~ConvertResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConvertResult(::google::protobuf::internal::ConstantInitialized);

  ConvertResult(const ConvertResult& from);
  ConvertResult(ConvertResult&& from) noexcept
    : ConvertResult() {
    *this = ::std::move(from);
  }

  inline ConvertResult& operator=(const ConvertResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvertResult& operator=(ConvertResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvertResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvertResult* internal_default_instance() {
    return reinterpret_cast<const ConvertResult*>(
               &_ConvertResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConvertResult& a, ConvertResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvertResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvertResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvertResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvertResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConvertResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConvertResult& from) {
    ConvertResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.ConvertResult";
  }
  protected:
  explicit ConvertResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Status = ConvertResult_Status;
  static constexpr Status CONVERT_SUCCESS = ConvertResult_Status_CONVERT_SUCCESS;
  static constexpr Status CONVERT_WARNINGS = ConvertResult_Status_CONVERT_WARNINGS;
  static constexpr Status CONVERT_FAILED = ConvertResult_Status_CONVERT_FAILED;
  static inline bool Status_IsValid(int value) {
    return ConvertResult_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = ConvertResult_Status_Status_MIN;
  static constexpr Status Status_MAX = ConvertResult_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = ConvertResult_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return ConvertResult_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return ConvertResult_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return ConvertResult_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWarningsFieldNumber = 2,
    kResultFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string warnings = 2;
  void clear_warnings() ;
  const std::string& warnings() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_warnings(Arg_&& arg, Args_... args);
  std::string* mutable_warnings();
  PROTOBUF_NODISCARD std::string* release_warnings();
  void set_allocated_warnings(std::string* ptr);

  private:
  const std::string& _internal_warnings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warnings(
      const std::string& value);
  std::string* _internal_mutable_warnings();

  public:
  // .speechly.sal.v1.AppSource result = 3;
  bool has_result() const;
  void clear_result() ;
  const ::speechly::sal::v1::AppSource& result() const;
  PROTOBUF_NODISCARD ::speechly::sal::v1::AppSource* release_result();
  ::speechly::sal::v1::AppSource* mutable_result();
  void set_allocated_result(::speechly::sal::v1::AppSource* value);
  void unsafe_arena_set_allocated_result(::speechly::sal::v1::AppSource* value);
  ::speechly::sal::v1::AppSource* unsafe_arena_release_result();

  private:
  const ::speechly::sal::v1::AppSource& _internal_result() const;
  ::speechly::sal::v1::AppSource* _internal_mutable_result();

  public:
  // .speechly.sal.v1.ConvertResult.Status status = 1;
  void clear_status() ;
  ::speechly::sal::v1::ConvertResult_Status status() const;
  void set_status(::speechly::sal::v1::ConvertResult_Status value);

  private:
  ::speechly::sal::v1::ConvertResult_Status _internal_status() const;
  void _internal_set_status(::speechly::sal::v1::ConvertResult_Status value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.ConvertResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr warnings_;
    ::speechly::sal::v1::AppSource* result_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};// -------------------------------------------------------------------

class ValidateResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.ValidateResult) */ {
 public:
  inline ValidateResult() : ValidateResult(nullptr) {}
  ~ValidateResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidateResult(::google::protobuf::internal::ConstantInitialized);

  ValidateResult(const ValidateResult& from);
  ValidateResult(ValidateResult&& from) noexcept
    : ValidateResult() {
    *this = ::std::move(from);
  }

  inline ValidateResult& operator=(const ValidateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateResult& operator=(ValidateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateResult* internal_default_instance() {
    return reinterpret_cast<const ValidateResult*>(
               &_ValidateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ValidateResult& a, ValidateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidateResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ValidateResult& from) {
    ValidateResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.ValidateResult";
  }
  protected:
  explicit ValidateResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .speechly.sal.v1.LineReference messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::speechly::sal::v1::LineReference* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
      mutable_messages();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>* _internal_mutable_messages();
  public:
  const ::speechly::sal::v1::LineReference& messages(int index) const;
  ::speechly::sal::v1::LineReference* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
      messages() const;
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.ValidateResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference > messages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};// -------------------------------------------------------------------

class LineReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.LineReference) */ {
 public:
  inline LineReference() : LineReference(nullptr) {}
  ~LineReference() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LineReference(::google::protobuf::internal::ConstantInitialized);

  LineReference(const LineReference& from);
  LineReference(LineReference&& from) noexcept
    : LineReference() {
    *this = ::std::move(from);
  }

  inline LineReference& operator=(const LineReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineReference& operator=(LineReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineReference* internal_default_instance() {
    return reinterpret_cast<const LineReference*>(
               &_LineReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LineReference& a, LineReference& b) {
    a.Swap(&b);
  }
  inline void Swap(LineReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineReference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineReference* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineReference>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LineReference& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LineReference& from) {
    LineReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineReference* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.LineReference";
  }
  protected:
  explicit LineReference(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Level = LineReference_Level;
  static constexpr Level LEVEL_NOTE = LineReference_Level_LEVEL_NOTE;
  static constexpr Level LEVEL_WARNING = LineReference_Level_LEVEL_WARNING;
  static constexpr Level LEVEL_ERROR = LineReference_Level_LEVEL_ERROR;
  static inline bool Level_IsValid(int value) {
    return LineReference_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = LineReference_Level_Level_MIN;
  static constexpr Level Level_MAX = LineReference_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = LineReference_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Level_descriptor() {
    return LineReference_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return LineReference_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return LineReference_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 3,
    kMessageFieldNumber = 5,
    kLineFieldNumber = 1,
    kColumnFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // string file = 3;
  void clear_file() ;
  const std::string& file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file(Arg_&& arg, Args_... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* ptr);

  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(
      const std::string& value);
  std::string* _internal_mutable_file();

  public:
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // uint64 line = 1;
  void clear_line() ;
  ::uint64_t line() const;
  void set_line(::uint64_t value);

  private:
  ::uint64_t _internal_line() const;
  void _internal_set_line(::uint64_t value);

  public:
  // uint32 column = 2;
  void clear_column() ;
  ::uint32_t column() const;
  void set_column(::uint32_t value);

  private:
  ::uint32_t _internal_column() const;
  void _internal_set_column(::uint32_t value);

  public:
  // .speechly.sal.v1.LineReference.Level level = 4;
  void clear_level() ;
  ::speechly::sal::v1::LineReference_Level level() const;
  void set_level(::speechly::sal::v1::LineReference_Level value);

  private:
  ::speechly::sal::v1::LineReference_Level _internal_level() const;
  void _internal_set_level(::speechly::sal::v1::LineReference_Level value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.LineReference)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr file_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::uint64_t line_;
    ::uint32_t column_;
    int level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};// -------------------------------------------------------------------

class ExtractSALSourcesResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.sal.v1.ExtractSALSourcesResult) */ {
 public:
  inline ExtractSALSourcesResult() : ExtractSALSourcesResult(nullptr) {}
  ~ExtractSALSourcesResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExtractSALSourcesResult(::google::protobuf::internal::ConstantInitialized);

  ExtractSALSourcesResult(const ExtractSALSourcesResult& from);
  ExtractSALSourcesResult(ExtractSALSourcesResult&& from) noexcept
    : ExtractSALSourcesResult() {
    *this = ::std::move(from);
  }

  inline ExtractSALSourcesResult& operator=(const ExtractSALSourcesResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractSALSourcesResult& operator=(ExtractSALSourcesResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractSALSourcesResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractSALSourcesResult* internal_default_instance() {
    return reinterpret_cast<const ExtractSALSourcesResult*>(
               &_ExtractSALSourcesResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExtractSALSourcesResult& a, ExtractSALSourcesResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractSALSourcesResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractSALSourcesResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractSALSourcesResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractSALSourcesResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExtractSALSourcesResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExtractSALSourcesResult& from) {
    ExtractSALSourcesResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractSALSourcesResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.sal.v1.ExtractSALSourcesResult";
  }
  protected:
  explicit ExtractSALSourcesResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataChunkFieldNumber = 1,
  };
  // bytes data_chunk = 1;
  void clear_data_chunk() ;
  const std::string& data_chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_data_chunk();
  PROTOBUF_NODISCARD std::string* release_data_chunk();
  void set_allocated_data_chunk(std::string* ptr);

  private:
  const std::string& _internal_data_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_chunk(
      const std::string& value);
  std::string* _internal_mutable_data_chunk();

  public:
  // @@protoc_insertion_point(class_scope:speechly.sal.v1.ExtractSALSourcesResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr data_chunk_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fsal_2fv1_2fcompiler_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AppSource

// string app_id = 1;
inline void AppSource::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& AppSource::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AppSource::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.app_id)
}
inline std::string* AppSource::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.AppSource.app_id)
  return _s;
}
inline const std::string& AppSource::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void AppSource::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSource::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AppSource::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.AppSource.app_id)
  return _impl_.app_id_.Release();
}
inline void AppSource::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.AppSource.app_id)
}

// string language = 2;
inline void AppSource::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& AppSource::language() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AppSource::set_language(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.language)
}
inline std::string* AppSource::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.AppSource.language)
  return _s;
}
inline const std::string& AppSource::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_.Get();
}
inline void AppSource::_internal_set_language(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSource::_internal_mutable_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_.Mutable( GetArenaForAllocation());
}
inline std::string* AppSource::release_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.AppSource.language)
  return _impl_.language_.Release();
}
inline void AppSource::set_allocated_language(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.AppSource.language)
}

// bytes data_chunk = 3;
inline void AppSource::clear_data_chunk() {
  _impl_.data_chunk_.ClearToEmpty();
}
inline const std::string& AppSource::data_chunk() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.data_chunk)
  return _internal_data_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AppSource::set_data_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.data_chunk)
}
inline std::string* AppSource::mutable_data_chunk() {
  std::string* _s = _internal_mutable_data_chunk();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.AppSource.data_chunk)
  return _s;
}
inline const std::string& AppSource::_internal_data_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_chunk_.Get();
}
inline void AppSource::_internal_set_data_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSource::_internal_mutable_data_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_chunk_.Mutable( GetArenaForAllocation());
}
inline std::string* AppSource::release_data_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.AppSource.data_chunk)
  return _impl_.data_chunk_.Release();
}
inline void AppSource::set_allocated_data_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_chunk_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_chunk_.IsDefault()) {
          _impl_.data_chunk_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.AppSource.data_chunk)
}

// .speechly.sal.v1.AppSource.ContentType content_type = 4;
inline void AppSource::clear_content_type() {
  _impl_.content_type_ = 0;
}
inline ::speechly::sal::v1::AppSource_ContentType AppSource::content_type() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.AppSource.content_type)
  return _internal_content_type();
}
inline void AppSource::set_content_type(::speechly::sal::v1::AppSource_ContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.AppSource.content_type)
}
inline ::speechly::sal::v1::AppSource_ContentType AppSource::_internal_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::sal::v1::AppSource_ContentType>(_impl_.content_type_);
}
inline void AppSource::_internal_set_content_type(::speechly::sal::v1::AppSource_ContentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_ = value;
}

// -------------------------------------------------------------------

// CompileRequest

// .speechly.sal.v1.AppSource app_source = 1;
inline bool CompileRequest::has_app_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.app_source_ != nullptr);
  return value;
}
inline void CompileRequest::clear_app_source() {
  if (_impl_.app_source_ != nullptr) _impl_.app_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::speechly::sal::v1::AppSource& CompileRequest::_internal_app_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::sal::v1::AppSource* p = _impl_.app_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::sal::v1::AppSource&>(::speechly::sal::v1::_AppSource_default_instance_);
}
inline const ::speechly::sal::v1::AppSource& CompileRequest::app_source() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileRequest.app_source)
  return _internal_app_source();
}
inline void CompileRequest::unsafe_arena_set_allocated_app_source(::speechly::sal::v1::AppSource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.app_source_);
  }
  _impl_.app_source_ = reinterpret_cast<::speechly::sal::v1::AppSource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.sal.v1.CompileRequest.app_source)
}
inline ::speechly::sal::v1::AppSource* CompileRequest::release_app_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::sal::v1::AppSource* released = _impl_.app_source_;
  _impl_.app_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::sal::v1::AppSource* CompileRequest::unsafe_arena_release_app_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.CompileRequest.app_source)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::sal::v1::AppSource* temp = _impl_.app_source_;
  _impl_.app_source_ = nullptr;
  return temp;
}
inline ::speechly::sal::v1::AppSource* CompileRequest::_internal_mutable_app_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.app_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::sal::v1::AppSource>(GetArenaForAllocation());
    _impl_.app_source_ = reinterpret_cast<::speechly::sal::v1::AppSource*>(p);
  }
  return _impl_.app_source_;
}
inline ::speechly::sal::v1::AppSource* CompileRequest::mutable_app_source() {
  ::speechly::sal::v1::AppSource* _msg = _internal_mutable_app_source();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.CompileRequest.app_source)
  return _msg;
}
inline void CompileRequest::set_allocated_app_source(::speechly::sal::v1::AppSource* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::speechly::sal::v1::AppSource*>(_impl_.app_source_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::speechly::sal::v1::AppSource*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.app_source_ = reinterpret_cast<::speechly::sal::v1::AppSource*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.CompileRequest.app_source)
}

// int32 batch_size = 2;
inline void CompileRequest::clear_batch_size() {
  _impl_.batch_size_ = 0;
}
inline ::int32_t CompileRequest::batch_size() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileRequest.batch_size)
  return _internal_batch_size();
}
inline void CompileRequest::set_batch_size(::int32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileRequest.batch_size)
}
inline ::int32_t CompileRequest::_internal_batch_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_size_;
}
inline void CompileRequest::_internal_set_batch_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_size_ = value;
}

// int32 random_seed = 3;
inline void CompileRequest::clear_random_seed() {
  _impl_.random_seed_ = 0;
}
inline ::int32_t CompileRequest::random_seed() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileRequest.random_seed)
  return _internal_random_seed();
}
inline void CompileRequest::set_random_seed(::int32_t value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileRequest.random_seed)
}
inline ::int32_t CompileRequest::_internal_random_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.random_seed_;
}
inline void CompileRequest::_internal_set_random_seed(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.random_seed_ = value;
}

// -------------------------------------------------------------------

// CompileResult

// .speechly.sal.v1.CompileResult.Result result = 1;
inline void CompileResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::speechly::sal::v1::CompileResult_Result CompileResult::result() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileResult.result)
  return _internal_result();
}
inline void CompileResult::set_result(::speechly::sal::v1::CompileResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileResult.result)
}
inline ::speechly::sal::v1::CompileResult_Result CompileResult::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::sal::v1::CompileResult_Result>(_impl_.result_);
}
inline void CompileResult::_internal_set_result(::speechly::sal::v1::CompileResult_Result value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_ = value;
}

// repeated string templates = 2;
inline int CompileResult::_internal_templates_size() const {
  return _internal_templates().size();
}
inline int CompileResult::templates_size() const {
  return _internal_templates_size();
}
inline void CompileResult::clear_templates() {
  _internal_mutable_templates()->Clear();
}
inline std::string* CompileResult::add_templates() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_templates()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.sal.v1.CompileResult.templates)
  return _s;
}
inline const std::string& CompileResult::templates(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileResult.templates)
  return _internal_templates().Get(index);
}
inline std::string* CompileResult::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.CompileResult.templates)
  return _internal_mutable_templates()->Mutable(index);
}
inline void CompileResult::set_templates(int index, const std::string& value) {
  _internal_mutable_templates()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::set_templates(int index, std::string&& value) {
  _internal_mutable_templates()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::set_templates(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_templates()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::set_templates(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_templates()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::set_templates(int index, absl::string_view value) {
  _internal_mutable_templates()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_templates()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_templates()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_templates()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_templates()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.sal.v1.CompileResult.templates)
}
inline void CompileResult::add_templates(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_templates()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.sal.v1.CompileResult.templates)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompileResult::templates() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.CompileResult.templates)
  return _internal_templates();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* CompileResult::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.CompileResult.templates)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_templates();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompileResult::_internal_templates() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.templates_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CompileResult::_internal_mutable_templates() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.templates_;
}

// repeated .speechly.sal.v1.LineReference messages = 3;
inline int CompileResult::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int CompileResult::messages_size() const {
  return _internal_messages_size();
}
inline void CompileResult::clear_messages() {
  _internal_mutable_messages()->Clear();
}
inline ::speechly::sal::v1::LineReference* CompileResult::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.CompileResult.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
CompileResult::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.CompileResult.messages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_messages();
}
inline const ::speechly::sal::v1::LineReference& CompileResult::messages(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.CompileResult.messages)
    return _internal_messages().Get(index);
}
inline ::speechly::sal::v1::LineReference* CompileResult::add_messages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::sal::v1::LineReference* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:speechly.sal.v1.CompileResult.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
CompileResult::messages() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.CompileResult.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>&
CompileResult::_internal_messages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>*
CompileResult::_internal_mutable_messages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.messages_;
}

// -------------------------------------------------------------------

// ConvertRequest

// .speechly.sal.v1.ConvertRequest.InputFormat input_format = 1;
inline void ConvertRequest::clear_input_format() {
  _impl_.input_format_ = 0;
}
inline ::speechly::sal::v1::ConvertRequest_InputFormat ConvertRequest::input_format() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ConvertRequest.input_format)
  return _internal_input_format();
}
inline void ConvertRequest::set_input_format(::speechly::sal::v1::ConvertRequest_InputFormat value) {
  _internal_set_input_format(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.ConvertRequest.input_format)
}
inline ::speechly::sal::v1::ConvertRequest_InputFormat ConvertRequest::_internal_input_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::sal::v1::ConvertRequest_InputFormat>(_impl_.input_format_);
}
inline void ConvertRequest::_internal_set_input_format(::speechly::sal::v1::ConvertRequest_InputFormat value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.input_format_ = value;
}

// string language = 2;
inline void ConvertRequest::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& ConvertRequest::language() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ConvertRequest.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConvertRequest::set_language(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.ConvertRequest.language)
}
inline std::string* ConvertRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ConvertRequest.language)
  return _s;
}
inline const std::string& ConvertRequest::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_.Get();
}
inline void ConvertRequest::_internal_set_language(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* ConvertRequest::_internal_mutable_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_.Mutable( GetArenaForAllocation());
}
inline std::string* ConvertRequest::release_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.ConvertRequest.language)
  return _impl_.language_.Release();
}
inline void ConvertRequest::set_allocated_language(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.ConvertRequest.language)
}

// bytes data_chunk = 3;
inline void ConvertRequest::clear_data_chunk() {
  _impl_.data_chunk_.ClearToEmpty();
}
inline const std::string& ConvertRequest::data_chunk() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ConvertRequest.data_chunk)
  return _internal_data_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConvertRequest::set_data_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.ConvertRequest.data_chunk)
}
inline std::string* ConvertRequest::mutable_data_chunk() {
  std::string* _s = _internal_mutable_data_chunk();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ConvertRequest.data_chunk)
  return _s;
}
inline const std::string& ConvertRequest::_internal_data_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_chunk_.Get();
}
inline void ConvertRequest::_internal_set_data_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* ConvertRequest::_internal_mutable_data_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_chunk_.Mutable( GetArenaForAllocation());
}
inline std::string* ConvertRequest::release_data_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.ConvertRequest.data_chunk)
  return _impl_.data_chunk_.Release();
}
inline void ConvertRequest::set_allocated_data_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_chunk_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_chunk_.IsDefault()) {
          _impl_.data_chunk_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.ConvertRequest.data_chunk)
}

// -------------------------------------------------------------------

// ConvertResult

// .speechly.sal.v1.ConvertResult.Status status = 1;
inline void ConvertResult::clear_status() {
  _impl_.status_ = 0;
}
inline ::speechly::sal::v1::ConvertResult_Status ConvertResult::status() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ConvertResult.status)
  return _internal_status();
}
inline void ConvertResult::set_status(::speechly::sal::v1::ConvertResult_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.ConvertResult.status)
}
inline ::speechly::sal::v1::ConvertResult_Status ConvertResult::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::sal::v1::ConvertResult_Status>(_impl_.status_);
}
inline void ConvertResult::_internal_set_status(::speechly::sal::v1::ConvertResult_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// string warnings = 2;
inline void ConvertResult::clear_warnings() {
  _impl_.warnings_.ClearToEmpty();
}
inline const std::string& ConvertResult::warnings() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ConvertResult.warnings)
  return _internal_warnings();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConvertResult::set_warnings(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.warnings_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.ConvertResult.warnings)
}
inline std::string* ConvertResult::mutable_warnings() {
  std::string* _s = _internal_mutable_warnings();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ConvertResult.warnings)
  return _s;
}
inline const std::string& ConvertResult::_internal_warnings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.warnings_.Get();
}
inline void ConvertResult::_internal_set_warnings(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.warnings_.Set(value, GetArenaForAllocation());
}
inline std::string* ConvertResult::_internal_mutable_warnings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.warnings_.Mutable( GetArenaForAllocation());
}
inline std::string* ConvertResult::release_warnings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.ConvertResult.warnings)
  return _impl_.warnings_.Release();
}
inline void ConvertResult::set_allocated_warnings(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.warnings_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.warnings_.IsDefault()) {
          _impl_.warnings_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.ConvertResult.warnings)
}

// .speechly.sal.v1.AppSource result = 3;
inline bool ConvertResult::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline void ConvertResult::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::speechly::sal::v1::AppSource& ConvertResult::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::sal::v1::AppSource* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::sal::v1::AppSource&>(::speechly::sal::v1::_AppSource_default_instance_);
}
inline const ::speechly::sal::v1::AppSource& ConvertResult::result() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ConvertResult.result)
  return _internal_result();
}
inline void ConvertResult::unsafe_arena_set_allocated_result(::speechly::sal::v1::AppSource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::speechly::sal::v1::AppSource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.sal.v1.ConvertResult.result)
}
inline ::speechly::sal::v1::AppSource* ConvertResult::release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::sal::v1::AppSource* released = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::sal::v1::AppSource* ConvertResult::unsafe_arena_release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.ConvertResult.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::sal::v1::AppSource* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::speechly::sal::v1::AppSource* ConvertResult::_internal_mutable_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::sal::v1::AppSource>(GetArenaForAllocation());
    _impl_.result_ = reinterpret_cast<::speechly::sal::v1::AppSource*>(p);
  }
  return _impl_.result_;
}
inline ::speechly::sal::v1::AppSource* ConvertResult::mutable_result() {
  ::speechly::sal::v1::AppSource* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ConvertResult.result)
  return _msg;
}
inline void ConvertResult::set_allocated_result(::speechly::sal::v1::AppSource* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::speechly::sal::v1::AppSource*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::speechly::sal::v1::AppSource*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::speechly::sal::v1::AppSource*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.ConvertResult.result)
}

// -------------------------------------------------------------------

// ValidateResult

// repeated .speechly.sal.v1.LineReference messages = 1;
inline int ValidateResult::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int ValidateResult::messages_size() const {
  return _internal_messages_size();
}
inline void ValidateResult::clear_messages() {
  _internal_mutable_messages()->Clear();
}
inline ::speechly::sal::v1::LineReference* ValidateResult::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ValidateResult.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >*
ValidateResult::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:speechly.sal.v1.ValidateResult.messages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_messages();
}
inline const ::speechly::sal::v1::LineReference& ValidateResult::messages(int index) const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ValidateResult.messages)
    return _internal_messages().Get(index);
}
inline ::speechly::sal::v1::LineReference* ValidateResult::add_messages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::sal::v1::LineReference* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:speechly.sal.v1.ValidateResult.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::sal::v1::LineReference >&
ValidateResult::messages() const {
  // @@protoc_insertion_point(field_list:speechly.sal.v1.ValidateResult.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>&
ValidateResult::_internal_messages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::sal::v1::LineReference>*
ValidateResult::_internal_mutable_messages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.messages_;
}

// -------------------------------------------------------------------

// LineReference

// uint64 line = 1;
inline void LineReference::clear_line() {
  _impl_.line_ = ::uint64_t{0u};
}
inline ::uint64_t LineReference::line() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.line)
  return _internal_line();
}
inline void LineReference::set_line(::uint64_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.line)
}
inline ::uint64_t LineReference::_internal_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_;
}
inline void LineReference::_internal_set_line(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.line_ = value;
}

// uint32 column = 2;
inline void LineReference::clear_column() {
  _impl_.column_ = 0u;
}
inline ::uint32_t LineReference::column() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.column)
  return _internal_column();
}
inline void LineReference::set_column(::uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.column)
}
inline ::uint32_t LineReference::_internal_column() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.column_;
}
inline void LineReference::_internal_set_column(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.column_ = value;
}

// string file = 3;
inline void LineReference::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& LineReference::file() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.file)
  return _internal_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LineReference::set_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.file)
}
inline std::string* LineReference::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.LineReference.file)
  return _s;
}
inline const std::string& LineReference::_internal_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_.Get();
}
inline void LineReference::_internal_set_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* LineReference::_internal_mutable_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.file_.Mutable( GetArenaForAllocation());
}
inline std::string* LineReference::release_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.LineReference.file)
  return _impl_.file_.Release();
}
inline void LineReference::set_allocated_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_.IsDefault()) {
          _impl_.file_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.LineReference.file)
}

// .speechly.sal.v1.LineReference.Level level = 4;
inline void LineReference::clear_level() {
  _impl_.level_ = 0;
}
inline ::speechly::sal::v1::LineReference_Level LineReference::level() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.level)
  return _internal_level();
}
inline void LineReference::set_level(::speechly::sal::v1::LineReference_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.level)
}
inline ::speechly::sal::v1::LineReference_Level LineReference::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::sal::v1::LineReference_Level>(_impl_.level_);
}
inline void LineReference::_internal_set_level(::speechly::sal::v1::LineReference_Level value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// string message = 5;
inline void LineReference::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LineReference::message() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.LineReference.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LineReference::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.LineReference.message)
}
inline std::string* LineReference::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.LineReference.message)
  return _s;
}
inline const std::string& LineReference::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void LineReference::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LineReference::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* LineReference::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.LineReference.message)
  return _impl_.message_.Release();
}
inline void LineReference::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.LineReference.message)
}

// -------------------------------------------------------------------

// ExtractSALSourcesResult

// bytes data_chunk = 1;
inline void ExtractSALSourcesResult::clear_data_chunk() {
  _impl_.data_chunk_.ClearToEmpty();
}
inline const std::string& ExtractSALSourcesResult::data_chunk() const {
  // @@protoc_insertion_point(field_get:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
  return _internal_data_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExtractSALSourcesResult::set_data_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
}
inline std::string* ExtractSALSourcesResult::mutable_data_chunk() {
  std::string* _s = _internal_mutable_data_chunk();
  // @@protoc_insertion_point(field_mutable:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
  return _s;
}
inline const std::string& ExtractSALSourcesResult::_internal_data_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_chunk_.Get();
}
inline void ExtractSALSourcesResult::_internal_set_data_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtractSALSourcesResult::_internal_mutable_data_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_chunk_.Mutable( GetArenaForAllocation());
}
inline std::string* ExtractSALSourcesResult::release_data_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
  return _impl_.data_chunk_.Release();
}
inline void ExtractSALSourcesResult::set_allocated_data_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_chunk_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_chunk_.IsDefault()) {
          _impl_.data_chunk_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.sal.v1.ExtractSALSourcesResult.data_chunk)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sal
}  // namespace speechly


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::speechly::sal::v1::AppSource_ContentType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::sal::v1::AppSource_ContentType>() {
  return ::speechly::sal::v1::AppSource_ContentType_descriptor();
}
template <>
struct is_proto_enum<::speechly::sal::v1::CompileResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::sal::v1::CompileResult_Result>() {
  return ::speechly::sal::v1::CompileResult_Result_descriptor();
}
template <>
struct is_proto_enum<::speechly::sal::v1::ConvertRequest_InputFormat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::sal::v1::ConvertRequest_InputFormat>() {
  return ::speechly::sal::v1::ConvertRequest_InputFormat_descriptor();
}
template <>
struct is_proto_enum<::speechly::sal::v1::ConvertResult_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::sal::v1::ConvertResult_Status>() {
  return ::speechly::sal::v1::ConvertResult_Status_descriptor();
}
template <>
struct is_proto_enum<::speechly::sal::v1::LineReference_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::sal::v1::LineReference_Level>() {
  return ::speechly::sal::v1::LineReference_Level_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fsal_2fv1_2fcompiler_2eproto_2epb_2eh
