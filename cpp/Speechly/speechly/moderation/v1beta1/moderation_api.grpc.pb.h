// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/moderation/v1beta1/moderation_api.proto
#ifndef GRPC_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto__INCLUDED
#define GRPC_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto__INCLUDED

#include "speechly/moderation/v1beta1/moderation_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace speechly {
namespace moderation {
namespace v1beta1 {

// Run Speechly Moderation API with streamable audio content or text content.
class ModerationAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "speechly.moderation.v1beta1.ModerationAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Stream audio to be moderated and receive all results once whole audio has been processed.
    // The discourse context may be described for improved performance.
    // Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
    std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>> AudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>>(AudioModerationRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>> AsyncAudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>>(AsyncAudioModerationRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>> PrepareAsyncAudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>>(PrepareAsyncAudioModerationRaw(context, response, cq));
    }
    // Stream audio to be moderated and receive results for identified segments as soon results as possible.
    // The discourse context may be described for improved performance.
    // Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>> StreamingAudioModeration(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>>(StreamingAudioModerationRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>> AsyncStreamingAudioModeration(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>>(AsyncStreamingAudioModerationRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>> PrepareAsyncStreamingAudioModeration(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>>(PrepareAsyncStreamingAudioModerationRaw(context, cq));
    }
    // Moderate a text utterance.
    // The discourse context may be described for improved performance.
    // The related audio may be identified using `audio_context_id`.
    virtual ::grpc::Status TextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::speechly::moderation::v1beta1::TextModerationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::moderation::v1beta1::TextModerationResponse>> AsyncTextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::moderation::v1beta1::TextModerationResponse>>(AsyncTextModerationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::moderation::v1beta1::TextModerationResponse>> PrepareAsyncTextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::moderation::v1beta1::TextModerationResponse>>(PrepareAsyncTextModerationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Stream audio to be moderated and receive all results once whole audio has been processed.
      // The discourse context may be described for improved performance.
      // Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
      virtual void AudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::experimental::ClientWriteReactor< ::speechly::moderation::v1beta1::AudioModerationRequest>* reactor) = 0;
      // Stream audio to be moderated and receive results for identified segments as soon results as possible.
      // The discourse context may be described for improved performance.
      // Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
      virtual void StreamingAudioModeration(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest,::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* reactor) = 0;
      // Moderate a text utterance.
      // The discourse context may be described for improved performance.
      // The related audio may be identified using `audio_context_id`.
      virtual void TextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TextModeration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TextModeration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>* AudioModerationRaw(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>* AsyncAudioModerationRaw(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::moderation::v1beta1::AudioModerationRequest>* PrepareAsyncAudioModerationRaw(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* StreamingAudioModerationRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* AsyncStreamingAudioModerationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* PrepareAsyncStreamingAudioModerationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::moderation::v1beta1::TextModerationResponse>* AsyncTextModerationRaw(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::moderation::v1beta1::TextModerationResponse>* PrepareAsyncTextModerationRaw(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>> AudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>>(AudioModerationRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>> AsyncAudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>>(AsyncAudioModerationRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>> PrepareAsyncAudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>>(PrepareAsyncAudioModerationRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>> StreamingAudioModeration(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>>(StreamingAudioModerationRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>> AsyncStreamingAudioModeration(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>>(AsyncStreamingAudioModerationRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>> PrepareAsyncStreamingAudioModeration(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>>(PrepareAsyncStreamingAudioModerationRaw(context, cq));
    }
    ::grpc::Status TextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::speechly::moderation::v1beta1::TextModerationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::moderation::v1beta1::TextModerationResponse>> AsyncTextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::moderation::v1beta1::TextModerationResponse>>(AsyncTextModerationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::moderation::v1beta1::TextModerationResponse>> PrepareAsyncTextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::moderation::v1beta1::TextModerationResponse>>(PrepareAsyncTextModerationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AudioModeration(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::experimental::ClientWriteReactor< ::speechly::moderation::v1beta1::AudioModerationRequest>* reactor) override;
      void StreamingAudioModeration(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest,::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* reactor) override;
      void TextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, std::function<void(::grpc::Status)>) override;
      void TextModeration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, std::function<void(::grpc::Status)>) override;
      void TextModeration(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TextModeration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::moderation::v1beta1::TextModerationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>* AudioModerationRaw(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response) override;
    ::grpc::ClientAsyncWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>* AsyncAudioModerationRaw(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::speechly::moderation::v1beta1::AudioModerationRequest>* PrepareAsyncAudioModerationRaw(::grpc::ClientContext* context, ::speechly::moderation::v1beta1::AudioModerationResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* StreamingAudioModerationRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* AsyncStreamingAudioModerationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* PrepareAsyncStreamingAudioModerationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::moderation::v1beta1::TextModerationResponse>* AsyncTextModerationRaw(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::moderation::v1beta1::TextModerationResponse>* PrepareAsyncTextModerationRaw(::grpc::ClientContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AudioModeration_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamingAudioModeration_;
    const ::grpc::internal::RpcMethod rpcmethod_TextModeration_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Stream audio to be moderated and receive all results once whole audio has been processed.
    // The discourse context may be described for improved performance.
    // Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
    virtual ::grpc::Status AudioModeration(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::moderation::v1beta1::AudioModerationRequest>* reader, ::speechly::moderation::v1beta1::AudioModerationResponse* response);
    // Stream audio to be moderated and receive results for identified segments as soon results as possible.
    // The discourse context may be described for improved performance.
    // Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
    virtual ::grpc::Status StreamingAudioModeration(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationResponse, ::speechly::moderation::v1beta1::StreamingAudioModerationRequest>* stream);
    // Moderate a text utterance.
    // The discourse context may be described for improved performance.
    // The related audio may be identified using `audio_context_id`.
    virtual ::grpc::Status TextModeration(::grpc::ServerContext* context, const ::speechly::moderation::v1beta1::TextModerationRequest* request, ::speechly::moderation::v1beta1::TextModerationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AudioModeration() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::moderation::v1beta1::AudioModerationRequest>* /*reader*/, ::speechly::moderation::v1beta1::AudioModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAudioModeration(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::speechly::moderation::v1beta1::AudioModerationResponse, ::speechly::moderation::v1beta1::AudioModerationRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamingAudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamingAudioModeration() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamingAudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingAudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationResponse, ::speechly::moderation::v1beta1::StreamingAudioModerationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingAudioModeration(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationResponse, ::speechly::moderation::v1beta1::StreamingAudioModerationRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TextModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TextModeration() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TextModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextModeration(::grpc::ServerContext* /*context*/, const ::speechly::moderation::v1beta1::TextModerationRequest* /*request*/, ::speechly::moderation::v1beta1::TextModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextModeration(::grpc::ServerContext* context, ::speechly::moderation::v1beta1::TextModerationRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::moderation::v1beta1::TextModerationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AudioModeration<WithAsyncMethod_StreamingAudioModeration<WithAsyncMethod_TextModeration<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AudioModeration() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::speechly::moderation::v1beta1::AudioModerationRequest, ::speechly::moderation::v1beta1::AudioModerationResponse>(
          [this] { return this->AudioModeration(); }));
    }
    ~ExperimentalWithCallbackMethod_AudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::moderation::v1beta1::AudioModerationRequest>* /*reader*/, ::speechly::moderation::v1beta1::AudioModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::speechly::moderation::v1beta1::AudioModerationRequest, ::speechly::moderation::v1beta1::AudioModerationResponse>* AudioModeration() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::speechly::moderation::v1beta1::AudioModerationRequest, ::speechly::moderation::v1beta1::AudioModerationResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamingAudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StreamingAudioModeration() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackBidiHandler< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>(
          [this] { return this->StreamingAudioModeration(); }));
    }
    ~ExperimentalWithCallbackMethod_StreamingAudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingAudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationResponse, ::speechly::moderation::v1beta1::StreamingAudioModerationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>* StreamingAudioModeration() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::speechly::moderation::v1beta1::StreamingAudioModerationRequest, ::speechly::moderation::v1beta1::StreamingAudioModerationResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TextModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TextModeration() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::moderation::v1beta1::TextModerationRequest, ::speechly::moderation::v1beta1::TextModerationResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::moderation::v1beta1::TextModerationRequest* request,
                 ::speechly::moderation::v1beta1::TextModerationResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->TextModeration(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_TextModeration(
        ::grpc::experimental::MessageAllocator< ::speechly::moderation::v1beta1::TextModerationRequest, ::speechly::moderation::v1beta1::TextModerationResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::moderation::v1beta1::TextModerationRequest, ::speechly::moderation::v1beta1::TextModerationResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TextModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextModeration(::grpc::ServerContext* /*context*/, const ::speechly::moderation::v1beta1::TextModerationRequest* /*request*/, ::speechly::moderation::v1beta1::TextModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TextModeration(::grpc::ServerContext* /*context*/, const ::speechly::moderation::v1beta1::TextModerationRequest* /*request*/, ::speechly::moderation::v1beta1::TextModerationResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_AudioModeration<ExperimentalWithCallbackMethod_StreamingAudioModeration<ExperimentalWithCallbackMethod_TextModeration<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AudioModeration() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::moderation::v1beta1::AudioModerationRequest>* /*reader*/, ::speechly::moderation::v1beta1::AudioModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamingAudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamingAudioModeration() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamingAudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingAudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationResponse, ::speechly::moderation::v1beta1::StreamingAudioModerationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TextModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TextModeration() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TextModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextModeration(::grpc::ServerContext* /*context*/, const ::speechly::moderation::v1beta1::TextModerationRequest* /*request*/, ::speechly::moderation::v1beta1::TextModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AudioModeration() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::moderation::v1beta1::AudioModerationRequest>* /*reader*/, ::speechly::moderation::v1beta1::AudioModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAudioModeration(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamingAudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamingAudioModeration() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamingAudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingAudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationResponse, ::speechly::moderation::v1beta1::StreamingAudioModerationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingAudioModeration(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TextModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TextModeration() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TextModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextModeration(::grpc::ServerContext* /*context*/, const ::speechly::moderation::v1beta1::TextModerationRequest* /*request*/, ::speechly::moderation::v1beta1::TextModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextModeration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AudioModeration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->AudioModeration(); }));
    }
    ~ExperimentalWithRawCallbackMethod_AudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::moderation::v1beta1::AudioModerationRequest>* /*reader*/, ::speechly::moderation::v1beta1::AudioModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* AudioModeration() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamingAudioModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamingAudioModeration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->StreamingAudioModeration(); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamingAudioModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingAudioModeration(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::speechly::moderation::v1beta1::StreamingAudioModerationResponse, ::speechly::moderation::v1beta1::StreamingAudioModerationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamingAudioModeration() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TextModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TextModeration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->TextModeration(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_TextModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextModeration(::grpc::ServerContext* /*context*/, const ::speechly::moderation::v1beta1::TextModerationRequest* /*request*/, ::speechly::moderation::v1beta1::TextModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TextModeration(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TextModeration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TextModeration() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::moderation::v1beta1::TextModerationRequest, ::speechly::moderation::v1beta1::TextModerationResponse>(std::bind(&WithStreamedUnaryMethod_TextModeration<BaseClass>::StreamedTextModeration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TextModeration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TextModeration(::grpc::ServerContext* /*context*/, const ::speechly::moderation::v1beta1::TextModerationRequest* /*request*/, ::speechly::moderation::v1beta1::TextModerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTextModeration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::moderation::v1beta1::TextModerationRequest,::speechly::moderation::v1beta1::TextModerationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TextModeration<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TextModeration<Service > StreamedService;
};

}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly


#endif  // GRPC_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto__INCLUDED
