// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/moderation/v1beta1/moderation.proto

#include "speechly/moderation/v1beta1/moderation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace moderation {
namespace v1beta1 {
constexpr DiscourseContext::DiscourseContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : listener_ids_()
  , channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , speaker_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(nullptr)
  , end_time_(nullptr){}
struct DiscourseContextDefaultTypeInternal {
  constexpr DiscourseContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscourseContextDefaultTypeInternal() {}
  union {
    DiscourseContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscourseContextDefaultTypeInternal _DiscourseContext_default_instance_;
constexpr ModerationLabel::ModerationLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(0)
  , flagged_(false){}
struct ModerationLabelDefaultTypeInternal {
  constexpr ModerationLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModerationLabelDefaultTypeInternal() {}
  union {
    ModerationLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModerationLabelDefaultTypeInternal _ModerationLabel_default_instance_;
constexpr AudioModerationConfig::AudioModerationConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , discourse_context_(nullptr){}
struct AudioModerationConfigDefaultTypeInternal {
  constexpr AudioModerationConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioModerationConfigDefaultTypeInternal() {}
  union {
    AudioModerationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioModerationConfigDefaultTypeInternal _AudioModerationConfig_default_instance_;
constexpr ModerationSegment::ModerationSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_()
  , transcript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0u)
  , start_ms_(0u)
  , end_ms_(0u){}
struct ModerationSegmentDefaultTypeInternal {
  constexpr ModerationSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModerationSegmentDefaultTypeInternal() {}
  union {
    ModerationSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModerationSegmentDefaultTypeInternal _ModerationSegment_default_instance_;
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::DiscourseContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::DiscourseContext, channel_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::DiscourseContext, speaker_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::DiscourseContext, listener_ids_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::DiscourseContext, start_time_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::DiscourseContext, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationLabel, label_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationLabel, score_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationLabel, flagged_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationConfig, model_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationConfig, language_code_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationConfig, discourse_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationSegment, index_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationSegment, transcript_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationSegment, labels_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationSegment, start_ms_),
  PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::ModerationSegment, end_ms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::moderation::v1beta1::DiscourseContext)},
  { 10, -1, sizeof(::speechly::moderation::v1beta1::ModerationLabel)},
  { 18, -1, sizeof(::speechly::moderation::v1beta1::AudioModerationConfig)},
  { 26, -1, sizeof(::speechly::moderation::v1beta1::ModerationSegment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::moderation::v1beta1::_DiscourseContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::moderation::v1beta1::_ModerationLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::moderation::v1beta1::_AudioModerationConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::moderation::v1beta1::_ModerationSegment_default_instance_),
};

const char descriptor_table_protodef_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,speechly/moderation/v1beta1/moderation"
  ".proto\022\033speechly.moderation.v1beta1\032\037goo"
  "gle/protobuf/timestamp.proto\"\256\001\n\020Discour"
  "seContext\022\022\n\nchannel_id\030\001 \001(\t\022\022\n\nspeaker"
  "_id\030\002 \001(\t\022\024\n\014listener_ids\030\003 \003(\t\022.\n\nstart"
  "_time\030\004 \001(\0132\032.google.protobuf.Timestamp\022"
  ",\n\010end_time\030\005 \001(\0132\032.google.protobuf.Time"
  "stamp\"@\n\017ModerationLabel\022\r\n\005label\030\001 \001(\t\022"
  "\r\n\005score\030\002 \001(\002\022\017\n\007flagged\030\003 \001(\010\"\212\001\n\025Audi"
  "oModerationConfig\022\020\n\010model_id\030\001 \001(\t\022\025\n\rl"
  "anguage_code\030\002 \001(\t\022H\n\021discourse_context\030"
  "\003 \001(\0132-.speechly.moderation.v1beta1.Disc"
  "ourseContext\"\226\001\n\021ModerationSegment\022\r\n\005in"
  "dex\030\001 \001(\r\022\022\n\ntranscript\030\002 \001(\t\022<\n\006labels\030"
  "\003 \003(\0132,.speechly.moderation.v1beta1.Mode"
  "rationLabel\022\020\n\010start_ms\030\004 \001(\r\022\016\n\006end_ms\030"
  "\005 \001(\rB\236\001\n\037com.speechly.moderation.v1beta"
  "1B\017ModerationProtoP\001Z&speechly/moderatio"
  "n/v1beta1;sluv1beta1\242\002\003SMX\252\002\033Speechly.Mo"
  "deration.V1Beta1\312\002\033Speechly\\Moderation\\V"
  "1Beta1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto = {
  false, false, 814, descriptor_table_protodef_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto, "speechly/moderation/v1beta1/moderation.proto", 
  &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_once, descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto::offsets,
  file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto, file_level_enum_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto, file_level_service_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_getter() {
  return &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto(&descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto);
namespace speechly {
namespace moderation {
namespace v1beta1 {

// ===================================================================

class DiscourseContext::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const DiscourseContext* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const DiscourseContext* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DiscourseContext::_Internal::start_time(const DiscourseContext* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DiscourseContext::_Internal::end_time(const DiscourseContext* msg) {
  return *msg->end_time_;
}
void DiscourseContext::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void DiscourseContext::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
DiscourseContext::DiscourseContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  listener_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.DiscourseContext)
}
DiscourseContext::DiscourseContext(const DiscourseContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      listener_ids_(from.listener_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArenaForAllocation());
  }
  speaker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_speaker_id().empty()) {
    speaker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_speaker_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.DiscourseContext)
}

inline void DiscourseContext::SharedCtor() {
channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
speaker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

DiscourseContext::~DiscourseContext() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.DiscourseContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiscourseContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speaker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void DiscourseContext::ArenaDtor(void* object) {
  DiscourseContext* _this = reinterpret_cast< DiscourseContext* >(object);
  (void)_this;
}
void DiscourseContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscourseContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscourseContext::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.DiscourseContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listener_ids_.Clear();
  channel_id_.ClearToEmpty();
  speaker_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscourseContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.moderation.v1beta1.DiscourseContext.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string speaker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_speaker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.moderation.v1beta1.DiscourseContext.speaker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string listener_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_listener_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.moderation.v1beta1.DiscourseContext.listener_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscourseContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.DiscourseContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.moderation.v1beta1.DiscourseContext.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // string speaker_id = 2;
  if (!this->_internal_speaker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_speaker_id().data(), static_cast<int>(this->_internal_speaker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.moderation.v1beta1.DiscourseContext.speaker_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_speaker_id(), target);
  }

  // repeated string listener_ids = 3;
  for (int i = 0, n = this->_internal_listener_ids_size(); i < n; i++) {
    const auto& s = this->_internal_listener_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.moderation.v1beta1.DiscourseContext.listener_ids");
    target = stream->WriteString(3, s, target);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.DiscourseContext)
  return target;
}

size_t DiscourseContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.DiscourseContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string listener_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(listener_ids_.size());
  for (int i = 0, n = listener_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      listener_ids_.Get(i));
  }

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string speaker_id = 2;
  if (!this->_internal_speaker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_speaker_id());
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscourseContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiscourseContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscourseContext::GetClassData() const { return &_class_data_; }

void DiscourseContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DiscourseContext *>(to)->MergeFrom(
      static_cast<const DiscourseContext &>(from));
}


void DiscourseContext::MergeFrom(const DiscourseContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.DiscourseContext)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listener_ids_.MergeFrom(from.listener_ids_);
  if (!from._internal_channel_id().empty()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_speaker_id().empty()) {
    _internal_set_speaker_id(from._internal_speaker_id());
  }
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscourseContext::CopyFrom(const DiscourseContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.DiscourseContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscourseContext::IsInitialized() const {
  return true;
}

void DiscourseContext::InternalSwap(DiscourseContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  listener_ids_.InternalSwap(&other->listener_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &channel_id_, GetArenaForAllocation(),
      &other->channel_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &speaker_id_, GetArenaForAllocation(),
      &other->speaker_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscourseContext, end_time_)
      + sizeof(DiscourseContext::end_time_)
      - PROTOBUF_FIELD_OFFSET(DiscourseContext, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscourseContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto[0]);
}

// ===================================================================

class ModerationLabel::_Internal {
 public:
};

ModerationLabel::ModerationLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.ModerationLabel)
}
ModerationLabel::ModerationLabel(const ModerationLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&flagged_) -
    reinterpret_cast<char*>(&score_)) + sizeof(flagged_));
  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.ModerationLabel)
}

inline void ModerationLabel::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flagged_) -
    reinterpret_cast<char*>(&score_)) + sizeof(flagged_));
}

ModerationLabel::~ModerationLabel() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.ModerationLabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModerationLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModerationLabel::ArenaDtor(void* object) {
  ModerationLabel* _this = reinterpret_cast< ModerationLabel* >(object);
  (void)_this;
}
void ModerationLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModerationLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModerationLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.ModerationLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flagged_) -
      reinterpret_cast<char*>(&score_)) + sizeof(flagged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModerationLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.moderation.v1beta1.ModerationLabel.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool flagged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flagged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModerationLabel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.ModerationLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.moderation.v1beta1.ModerationLabel.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // float score = 2;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // bool flagged = 3;
  if (this->_internal_flagged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flagged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.ModerationLabel)
  return target;
}

size_t ModerationLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.ModerationLabel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // float score = 2;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    total_size += 1 + 4;
  }

  // bool flagged = 3;
  if (this->_internal_flagged() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModerationLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModerationLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModerationLabel::GetClassData() const { return &_class_data_; }

void ModerationLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ModerationLabel *>(to)->MergeFrom(
      static_cast<const ModerationLabel &>(from));
}


void ModerationLabel::MergeFrom(const ModerationLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.ModerationLabel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!(from._internal_score() <= 0 && from._internal_score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_flagged() != 0) {
    _internal_set_flagged(from._internal_flagged());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModerationLabel::CopyFrom(const ModerationLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.ModerationLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModerationLabel::IsInitialized() const {
  return true;
}

void ModerationLabel::InternalSwap(ModerationLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModerationLabel, flagged_)
      + sizeof(ModerationLabel::flagged_)
      - PROTOBUF_FIELD_OFFSET(ModerationLabel, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModerationLabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto[1]);
}

// ===================================================================

class AudioModerationConfig::_Internal {
 public:
  static const ::speechly::moderation::v1beta1::DiscourseContext& discourse_context(const AudioModerationConfig* msg);
};

const ::speechly::moderation::v1beta1::DiscourseContext&
AudioModerationConfig::_Internal::discourse_context(const AudioModerationConfig* msg) {
  return *msg->discourse_context_;
}
AudioModerationConfig::AudioModerationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.AudioModerationConfig)
}
AudioModerationConfig::AudioModerationConfig(const AudioModerationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_discourse_context()) {
    discourse_context_ = new ::speechly::moderation::v1beta1::DiscourseContext(*from.discourse_context_);
  } else {
    discourse_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.AudioModerationConfig)
}

inline void AudioModerationConfig::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
discourse_context_ = nullptr;
}

AudioModerationConfig::~AudioModerationConfig() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.AudioModerationConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioModerationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete discourse_context_;
}

void AudioModerationConfig::ArenaDtor(void* object) {
  AudioModerationConfig* _this = reinterpret_cast< AudioModerationConfig* >(object);
  (void)_this;
}
void AudioModerationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioModerationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioModerationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.AudioModerationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  language_code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && discourse_context_ != nullptr) {
    delete discourse_context_;
  }
  discourse_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioModerationConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.moderation.v1beta1.AudioModerationConfig.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.moderation.v1beta1.AudioModerationConfig.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_discourse_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioModerationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.AudioModerationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.moderation.v1beta1.AudioModerationConfig.model_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_id(), target);
  }

  // string language_code = 2;
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.moderation.v1beta1.AudioModerationConfig.language_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_code(), target);
  }

  // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
  if (this->_internal_has_discourse_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::discourse_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.AudioModerationConfig)
  return target;
}

size_t AudioModerationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.AudioModerationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string language_code = 2;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
  if (this->_internal_has_discourse_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *discourse_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioModerationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioModerationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioModerationConfig::GetClassData() const { return &_class_data_; }

void AudioModerationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AudioModerationConfig *>(to)->MergeFrom(
      static_cast<const AudioModerationConfig &>(from));
}


void AudioModerationConfig::MergeFrom(const AudioModerationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.AudioModerationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from._internal_has_discourse_context()) {
    _internal_mutable_discourse_context()->::speechly::moderation::v1beta1::DiscourseContext::MergeFrom(from._internal_discourse_context());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioModerationConfig::CopyFrom(const AudioModerationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.AudioModerationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioModerationConfig::IsInitialized() const {
  return true;
}

void AudioModerationConfig::InternalSwap(AudioModerationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, GetArenaForAllocation(),
      &other->model_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, GetArenaForAllocation(),
      &other->language_code_, other->GetArenaForAllocation()
  );
  swap(discourse_context_, other->discourse_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioModerationConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto[2]);
}

// ===================================================================

class ModerationSegment::_Internal {
 public:
};

ModerationSegment::ModerationSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.ModerationSegment)
}
ModerationSegment::ModerationSegment(const ModerationSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transcript().empty()) {
    transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transcript(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_ms_) -
    reinterpret_cast<char*>(&index_)) + sizeof(end_ms_));
  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.ModerationSegment)
}

inline void ModerationSegment::SharedCtor() {
transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_ms_) -
    reinterpret_cast<char*>(&index_)) + sizeof(end_ms_));
}

ModerationSegment::~ModerationSegment() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.ModerationSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModerationSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModerationSegment::ArenaDtor(void* object) {
  ModerationSegment* _this = reinterpret_cast< ModerationSegment* >(object);
  (void)_this;
}
void ModerationSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModerationSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModerationSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.ModerationSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  transcript_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_ms_) -
      reinterpret_cast<char*>(&index_)) + sizeof(end_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModerationSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transcript = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.moderation.v1beta1.ModerationSegment.transcript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 start_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModerationSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.ModerationSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // string transcript = 2;
  if (!this->_internal_transcript().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.moderation.v1beta1.ModerationSegment.transcript");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transcript(), target);
  }

  // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_labels(i), target, stream);
  }

  // uint32 start_ms = 4;
  if (this->_internal_start_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_ms(), target);
  }

  // uint32 end_ms = 5;
  if (this->_internal_end_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_end_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.ModerationSegment)
  return target;
}

size_t ModerationSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.ModerationSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 3;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string transcript = 2;
  if (!this->_internal_transcript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 start_ms = 4;
  if (this->_internal_start_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_ms());
  }

  // uint32 end_ms = 5;
  if (this->_internal_end_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModerationSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModerationSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModerationSegment::GetClassData() const { return &_class_data_; }

void ModerationSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ModerationSegment *>(to)->MergeFrom(
      static_cast<const ModerationSegment &>(from));
}


void ModerationSegment::MergeFrom(const ModerationSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.ModerationSegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (!from._internal_transcript().empty()) {
    _internal_set_transcript(from._internal_transcript());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_start_ms() != 0) {
    _internal_set_start_ms(from._internal_start_ms());
  }
  if (from._internal_end_ms() != 0) {
    _internal_set_end_ms(from._internal_end_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModerationSegment::CopyFrom(const ModerationSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.ModerationSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModerationSegment::IsInitialized() const {
  return true;
}

void ModerationSegment::InternalSwap(ModerationSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transcript_, GetArenaForAllocation(),
      &other->transcript_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModerationSegment, end_ms_)
      + sizeof(ModerationSegment::end_ms_)
      - PROTOBUF_FIELD_OFFSET(ModerationSegment, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModerationSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::moderation::v1beta1::DiscourseContext* Arena::CreateMaybeMessage< ::speechly::moderation::v1beta1::DiscourseContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::moderation::v1beta1::DiscourseContext >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::moderation::v1beta1::ModerationLabel* Arena::CreateMaybeMessage< ::speechly::moderation::v1beta1::ModerationLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::moderation::v1beta1::ModerationLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::moderation::v1beta1::AudioModerationConfig* Arena::CreateMaybeMessage< ::speechly::moderation::v1beta1::AudioModerationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::moderation::v1beta1::AudioModerationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::moderation::v1beta1::ModerationSegment* Arena::CreateMaybeMessage< ::speechly::moderation::v1beta1::ModerationSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::moderation::v1beta1::ModerationSegment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
