// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/moderation/v1beta1/moderation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
namespace speechly {
namespace moderation {
namespace v1beta1 {
class AudioModerationConfig;
struct AudioModerationConfigDefaultTypeInternal;
extern AudioModerationConfigDefaultTypeInternal _AudioModerationConfig_default_instance_;
class DiscourseContext;
struct DiscourseContextDefaultTypeInternal;
extern DiscourseContextDefaultTypeInternal _DiscourseContext_default_instance_;
class ModerationLabel;
struct ModerationLabelDefaultTypeInternal;
extern ModerationLabelDefaultTypeInternal _ModerationLabel_default_instance_;
class ModerationSegment;
struct ModerationSegmentDefaultTypeInternal;
extern ModerationSegmentDefaultTypeInternal _ModerationSegment_default_instance_;
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace moderation {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class DiscourseContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.DiscourseContext) */ {
 public:
  inline DiscourseContext() : DiscourseContext(nullptr) {}
  ~DiscourseContext() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DiscourseContext(::google::protobuf::internal::ConstantInitialized);

  DiscourseContext(const DiscourseContext& from);
  DiscourseContext(DiscourseContext&& from) noexcept
    : DiscourseContext() {
    *this = ::std::move(from);
  }

  inline DiscourseContext& operator=(const DiscourseContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscourseContext& operator=(DiscourseContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscourseContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscourseContext* internal_default_instance() {
    return reinterpret_cast<const DiscourseContext*>(
               &_DiscourseContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiscourseContext& a, DiscourseContext& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscourseContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscourseContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscourseContext* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscourseContext>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DiscourseContext& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DiscourseContext& from) {
    DiscourseContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscourseContext* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.DiscourseContext";
  }
  protected:
  explicit DiscourseContext(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenerIdsFieldNumber = 3,
    kChannelIdFieldNumber = 1,
    kSpeakerIdFieldNumber = 2,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
  };
  // repeated string listener_ids = 3;
  int listener_ids_size() const;
  private:
  int _internal_listener_ids_size() const;

  public:
  void clear_listener_ids() ;
  const std::string& listener_ids(int index) const;
  std::string* mutable_listener_ids(int index);
  void set_listener_ids(int index, const std::string& value);
  void set_listener_ids(int index, std::string&& value);
  void set_listener_ids(int index, const char* value);
  void set_listener_ids(int index, const char* value, std::size_t size);
  void set_listener_ids(int index, absl::string_view value);
  std::string* add_listener_ids();
  void add_listener_ids(const std::string& value);
  void add_listener_ids(std::string&& value);
  void add_listener_ids(const char* value);
  void add_listener_ids(const char* value, std::size_t size);
  void add_listener_ids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& listener_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_listener_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_listener_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_listener_ids();

  public:
  // string channel_id = 1;
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // string speaker_id = 2;
  void clear_speaker_id() ;
  const std::string& speaker_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_speaker_id(Arg_&& arg, Args_... args);
  std::string* mutable_speaker_id();
  PROTOBUF_NODISCARD std::string* release_speaker_id();
  void set_allocated_speaker_id(std::string* ptr);

  private:
  const std::string& _internal_speaker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speaker_id(
      const std::string& value);
  std::string* _internal_mutable_speaker_id();

  public:
  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_start_time();

  public:
  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  void clear_end_time() ;
  const ::google::protobuf::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_end_time();

  public:
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.DiscourseContext)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 85, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> listener_ids_;
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::google::protobuf::internal::ArenaStringPtr speaker_id_;
    ::google::protobuf::Timestamp* start_time_;
    ::google::protobuf::Timestamp* end_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};// -------------------------------------------------------------------

class ModerationLabel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.ModerationLabel) */ {
 public:
  inline ModerationLabel() : ModerationLabel(nullptr) {}
  ~ModerationLabel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModerationLabel(::google::protobuf::internal::ConstantInitialized);

  ModerationLabel(const ModerationLabel& from);
  ModerationLabel(ModerationLabel&& from) noexcept
    : ModerationLabel() {
    *this = ::std::move(from);
  }

  inline ModerationLabel& operator=(const ModerationLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModerationLabel& operator=(ModerationLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModerationLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModerationLabel* internal_default_instance() {
    return reinterpret_cast<const ModerationLabel*>(
               &_ModerationLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModerationLabel& a, ModerationLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModerationLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModerationLabel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModerationLabel* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModerationLabel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModerationLabel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModerationLabel& from) {
    ModerationLabel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModerationLabel* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.ModerationLabel";
  }
  protected:
  explicit ModerationLabel(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kScoreFieldNumber = 2,
    kFlaggedFieldNumber = 3,
  };
  // string label = 1;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* ptr);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // float score = 2;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // bool flagged = 3;
  void clear_flagged() ;
  bool flagged() const;
  void set_flagged(bool value);

  private:
  bool _internal_flagged() const;
  void _internal_set_flagged(bool value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.ModerationLabel)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 57, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr label_;
    float score_;
    bool flagged_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};// -------------------------------------------------------------------

class AudioModerationConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.AudioModerationConfig) */ {
 public:
  inline AudioModerationConfig() : AudioModerationConfig(nullptr) {}
  ~AudioModerationConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AudioModerationConfig(::google::protobuf::internal::ConstantInitialized);

  AudioModerationConfig(const AudioModerationConfig& from);
  AudioModerationConfig(AudioModerationConfig&& from) noexcept
    : AudioModerationConfig() {
    *this = ::std::move(from);
  }

  inline AudioModerationConfig& operator=(const AudioModerationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioModerationConfig& operator=(AudioModerationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioModerationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioModerationConfig* internal_default_instance() {
    return reinterpret_cast<const AudioModerationConfig*>(
               &_AudioModerationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioModerationConfig& a, AudioModerationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioModerationConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioModerationConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioModerationConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioModerationConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioModerationConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AudioModerationConfig& from) {
    AudioModerationConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioModerationConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.AudioModerationConfig";
  }
  protected:
  explicit AudioModerationConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kDiscourseContextFieldNumber = 3,
  };
  // string model_id = 1;
  void clear_model_id() ;
  const std::string& model_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_id(Arg_&& arg, Args_... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* ptr);

  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(
      const std::string& value);
  std::string* _internal_mutable_model_id();

  public:
  // string language_code = 2;
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* ptr);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
  bool has_discourse_context() const;
  void clear_discourse_context() ;
  const ::speechly::moderation::v1beta1::DiscourseContext& discourse_context() const;
  PROTOBUF_NODISCARD ::speechly::moderation::v1beta1::DiscourseContext* release_discourse_context();
  ::speechly::moderation::v1beta1::DiscourseContext* mutable_discourse_context();
  void set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value);
  void unsafe_arena_set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value);
  ::speechly::moderation::v1beta1::DiscourseContext* unsafe_arena_release_discourse_context();

  private:
  const ::speechly::moderation::v1beta1::DiscourseContext& _internal_discourse_context() const;
  ::speechly::moderation::v1beta1::DiscourseContext* _internal_mutable_discourse_context();

  public:
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.AudioModerationConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 79, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_id_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::speechly::moderation::v1beta1::DiscourseContext* discourse_context_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};// -------------------------------------------------------------------

class ModerationSegment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.ModerationSegment) */ {
 public:
  inline ModerationSegment() : ModerationSegment(nullptr) {}
  ~ModerationSegment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModerationSegment(::google::protobuf::internal::ConstantInitialized);

  ModerationSegment(const ModerationSegment& from);
  ModerationSegment(ModerationSegment&& from) noexcept
    : ModerationSegment() {
    *this = ::std::move(from);
  }

  inline ModerationSegment& operator=(const ModerationSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModerationSegment& operator=(ModerationSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModerationSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModerationSegment* internal_default_instance() {
    return reinterpret_cast<const ModerationSegment*>(
               &_ModerationSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModerationSegment& a, ModerationSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(ModerationSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModerationSegment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModerationSegment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModerationSegment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModerationSegment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModerationSegment& from) {
    ModerationSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModerationSegment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.ModerationSegment";
  }
  protected:
  explicit ModerationSegment(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kTranscriptFieldNumber = 2,
    kIndexFieldNumber = 1,
    kStartMsFieldNumber = 4,
    kEndMsFieldNumber = 5,
  };
  // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  ::speechly::moderation::v1beta1::ModerationLabel* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >*
      mutable_labels();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>& _internal_labels() const;
  ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>* _internal_mutable_labels();
  public:
  const ::speechly::moderation::v1beta1::ModerationLabel& labels(int index) const;
  ::speechly::moderation::v1beta1::ModerationLabel* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >&
      labels() const;
  // string transcript = 2;
  void clear_transcript() ;
  const std::string& transcript() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transcript(Arg_&& arg, Args_... args);
  std::string* mutable_transcript();
  PROTOBUF_NODISCARD std::string* release_transcript();
  void set_allocated_transcript(std::string* ptr);

  private:
  const std::string& _internal_transcript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transcript(
      const std::string& value);
  std::string* _internal_mutable_transcript();

  public:
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // uint32 start_ms = 4;
  void clear_start_ms() ;
  ::uint32_t start_ms() const;
  void set_start_ms(::uint32_t value);

  private:
  ::uint32_t _internal_start_ms() const;
  void _internal_set_start_ms(::uint32_t value);

  public:
  // uint32 end_ms = 5;
  void clear_end_ms() ;
  ::uint32_t end_ms() const;
  void set_end_ms(::uint32_t value);

  private:
  ::uint32_t _internal_end_ms() const;
  void _internal_set_end_ms(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.ModerationSegment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 64, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel > labels_;
    ::google::protobuf::internal::ArenaStringPtr transcript_;
    ::uint32_t index_;
    ::uint32_t start_ms_;
    ::uint32_t end_ms_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DiscourseContext

// string channel_id = 1;
inline void DiscourseContext::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& DiscourseContext::channel_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DiscourseContext::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.channel_id)
}
inline std::string* DiscourseContext::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.channel_id)
  return _s;
}
inline const std::string& DiscourseContext::_internal_channel_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_id_.Get();
}
inline void DiscourseContext::_internal_set_channel_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscourseContext::_internal_mutable_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DiscourseContext::release_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.channel_id)
  return _impl_.channel_id_.Release();
}
inline void DiscourseContext::set_allocated_channel_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.channel_id)
}

// string speaker_id = 2;
inline void DiscourseContext::clear_speaker_id() {
  _impl_.speaker_id_.ClearToEmpty();
}
inline const std::string& DiscourseContext::speaker_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
  return _internal_speaker_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DiscourseContext::set_speaker_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speaker_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
}
inline std::string* DiscourseContext::mutable_speaker_id() {
  std::string* _s = _internal_mutable_speaker_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
  return _s;
}
inline const std::string& DiscourseContext::_internal_speaker_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speaker_id_.Get();
}
inline void DiscourseContext::_internal_set_speaker_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speaker_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscourseContext::_internal_mutable_speaker_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.speaker_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DiscourseContext::release_speaker_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
  return _impl_.speaker_id_.Release();
}
inline void DiscourseContext::set_allocated_speaker_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.speaker_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.speaker_id_.IsDefault()) {
          _impl_.speaker_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
}

// repeated string listener_ids = 3;
inline int DiscourseContext::_internal_listener_ids_size() const {
  return _internal_listener_ids().size();
}
inline int DiscourseContext::listener_ids_size() const {
  return _internal_listener_ids_size();
}
inline void DiscourseContext::clear_listener_ids() {
  _internal_mutable_listener_ids()->Clear();
}
inline std::string* DiscourseContext::add_listener_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_listener_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return _s;
}
inline const std::string& DiscourseContext::listener_ids(int index) const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return _internal_listener_ids().Get(index);
}
inline std::string* DiscourseContext::mutable_listener_ids(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return _internal_mutable_listener_ids()->Mutable(index);
}
inline void DiscourseContext::set_listener_ids(int index, const std::string& value) {
  _internal_mutable_listener_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::set_listener_ids(int index, std::string&& value) {
  _internal_mutable_listener_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::set_listener_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_listener_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::set_listener_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_listener_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::set_listener_ids(int index, absl::string_view value) {
  _internal_mutable_listener_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_listener_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_listener_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_listener_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_listener_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_listener_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DiscourseContext::listener_ids() const {
  // @@protoc_insertion_point(field_list:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return _internal_listener_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* DiscourseContext::mutable_listener_ids() {
  // @@protoc_insertion_point(field_mutable_list:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_listener_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DiscourseContext::_internal_listener_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.listener_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DiscourseContext::_internal_mutable_listener_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.listener_ids_;
}

// .google.protobuf.Timestamp start_time = 4;
inline bool DiscourseContext::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& DiscourseContext::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DiscourseContext::start_time() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.start_time)
  return _internal_start_time();
}
inline void DiscourseContext::unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.DiscourseContext.start_time)
}
inline ::google::protobuf::Timestamp* DiscourseContext::release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* DiscourseContext::unsafe_arena_release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.start_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DiscourseContext::_internal_mutable_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* DiscourseContext::mutable_start_time() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.start_time)
  return _msg;
}
inline void DiscourseContext::set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.start_time)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool DiscourseContext::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& DiscourseContext::_internal_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DiscourseContext::end_time() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.end_time)
  return _internal_end_time();
}
inline void DiscourseContext::unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.DiscourseContext.end_time)
}
inline ::google::protobuf::Timestamp* DiscourseContext::release_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* DiscourseContext::unsafe_arena_release_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.end_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DiscourseContext::_internal_mutable_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_time_;
}
inline ::google::protobuf::Timestamp* DiscourseContext::mutable_end_time() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.end_time)
  return _msg;
}
inline void DiscourseContext::set_allocated_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.end_time)
}

// -------------------------------------------------------------------

// ModerationLabel

// string label = 1;
inline void ModerationLabel::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& ModerationLabel::label() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationLabel.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModerationLabel::set_label(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationLabel.label)
}
inline std::string* ModerationLabel::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.ModerationLabel.label)
  return _s;
}
inline const std::string& ModerationLabel::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_.Get();
}
inline void ModerationLabel::_internal_set_label(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* ModerationLabel::_internal_mutable_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.label_.Mutable( GetArenaForAllocation());
}
inline std::string* ModerationLabel::release_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.ModerationLabel.label)
  return _impl_.label_.Release();
}
inline void ModerationLabel::set_allocated_label(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.ModerationLabel.label)
}

// float score = 2;
inline void ModerationLabel::clear_score() {
  _impl_.score_ = 0;
}
inline float ModerationLabel::score() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationLabel.score)
  return _internal_score();
}
inline void ModerationLabel::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationLabel.score)
}
inline float ModerationLabel::_internal_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.score_;
}
inline void ModerationLabel::_internal_set_score(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.score_ = value;
}

// bool flagged = 3;
inline void ModerationLabel::clear_flagged() {
  _impl_.flagged_ = false;
}
inline bool ModerationLabel::flagged() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationLabel.flagged)
  return _internal_flagged();
}
inline void ModerationLabel::set_flagged(bool value) {
  _internal_set_flagged(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationLabel.flagged)
}
inline bool ModerationLabel::_internal_flagged() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flagged_;
}
inline void ModerationLabel::_internal_set_flagged(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flagged_ = value;
}

// -------------------------------------------------------------------

// AudioModerationConfig

// string model_id = 1;
inline void AudioModerationConfig::clear_model_id() {
  _impl_.model_id_.ClearToEmpty();
}
inline const std::string& AudioModerationConfig::model_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
  return _internal_model_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioModerationConfig::set_model_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
}
inline std::string* AudioModerationConfig::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
  return _s;
}
inline const std::string& AudioModerationConfig::_internal_model_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_id_.Get();
}
inline void AudioModerationConfig::_internal_set_model_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::_internal_mutable_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::release_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
  return _impl_.model_id_.Release();
}
inline void AudioModerationConfig::set_allocated_model_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_id_.IsDefault()) {
          _impl_.model_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
}

// string language_code = 2;
inline void AudioModerationConfig::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& AudioModerationConfig::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioModerationConfig::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
}
inline std::string* AudioModerationConfig::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
  return _s;
}
inline const std::string& AudioModerationConfig::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void AudioModerationConfig::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
  return _impl_.language_code_.Release();
}
inline void AudioModerationConfig::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
}

// .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
inline bool AudioModerationConfig::has_discourse_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.discourse_context_ != nullptr);
  return value;
}
inline void AudioModerationConfig::clear_discourse_context() {
  if (_impl_.discourse_context_ != nullptr) _impl_.discourse_context_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::speechly::moderation::v1beta1::DiscourseContext& AudioModerationConfig::_internal_discourse_context() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::moderation::v1beta1::DiscourseContext* p = _impl_.discourse_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::moderation::v1beta1::DiscourseContext&>(::speechly::moderation::v1beta1::_DiscourseContext_default_instance_);
}
inline const ::speechly::moderation::v1beta1::DiscourseContext& AudioModerationConfig::discourse_context() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
  return _internal_discourse_context();
}
inline void AudioModerationConfig::unsafe_arena_set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.discourse_context_);
  }
  _impl_.discourse_context_ = reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::release_discourse_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::moderation::v1beta1::DiscourseContext* released = _impl_.discourse_context_;
  _impl_.discourse_context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::unsafe_arena_release_discourse_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::moderation::v1beta1::DiscourseContext* temp = _impl_.discourse_context_;
  _impl_.discourse_context_ = nullptr;
  return temp;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::_internal_mutable_discourse_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.discourse_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::moderation::v1beta1::DiscourseContext>(GetArenaForAllocation());
    _impl_.discourse_context_ = reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(p);
  }
  return _impl_.discourse_context_;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::mutable_discourse_context() {
  ::speechly::moderation::v1beta1::DiscourseContext* _msg = _internal_mutable_discourse_context();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
  return _msg;
}
inline void AudioModerationConfig::set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(_impl_.discourse_context_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.discourse_context_ = reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
}

// -------------------------------------------------------------------

// ModerationSegment

// uint32 index = 1;
inline void ModerationSegment::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t ModerationSegment::index() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.index)
  return _internal_index();
}
inline void ModerationSegment::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.index)
}
inline ::uint32_t ModerationSegment::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void ModerationSegment::_internal_set_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// string transcript = 2;
inline void ModerationSegment::clear_transcript() {
  _impl_.transcript_.ClearToEmpty();
}
inline const std::string& ModerationSegment::transcript() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.transcript)
  return _internal_transcript();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModerationSegment::set_transcript(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transcript_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.transcript)
}
inline std::string* ModerationSegment::mutable_transcript() {
  std::string* _s = _internal_mutable_transcript();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.ModerationSegment.transcript)
  return _s;
}
inline const std::string& ModerationSegment::_internal_transcript() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transcript_.Get();
}
inline void ModerationSegment::_internal_set_transcript(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transcript_.Set(value, GetArenaForAllocation());
}
inline std::string* ModerationSegment::_internal_mutable_transcript() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.transcript_.Mutable( GetArenaForAllocation());
}
inline std::string* ModerationSegment::release_transcript() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.ModerationSegment.transcript)
  return _impl_.transcript_.Release();
}
inline void ModerationSegment::set_allocated_transcript(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transcript_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transcript_.IsDefault()) {
          _impl_.transcript_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.ModerationSegment.transcript)
}

// repeated .speechly.moderation.v1beta1.ModerationLabel labels = 3;
inline int ModerationSegment::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int ModerationSegment::labels_size() const {
  return _internal_labels_size();
}
inline void ModerationSegment::clear_labels() {
  _internal_mutable_labels()->Clear();
}
inline ::speechly::moderation::v1beta1::ModerationLabel* ModerationSegment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.ModerationSegment.labels)
  return _internal_mutable_labels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >*
ModerationSegment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:speechly.moderation.v1beta1.ModerationSegment.labels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_labels();
}
inline const ::speechly::moderation::v1beta1::ModerationLabel& ModerationSegment::labels(int index) const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.labels)
    return _internal_labels().Get(index);
}
inline ::speechly::moderation::v1beta1::ModerationLabel* ModerationSegment::add_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::moderation::v1beta1::ModerationLabel* _add = _internal_mutable_labels()->Add();
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.ModerationSegment.labels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >&
ModerationSegment::labels() const {
  // @@protoc_insertion_point(field_list:speechly.moderation.v1beta1.ModerationSegment.labels)
  return _internal_labels();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>&
ModerationSegment::_internal_labels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.labels_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>*
ModerationSegment::_internal_mutable_labels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.labels_;
}

// uint32 start_ms = 4;
inline void ModerationSegment::clear_start_ms() {
  _impl_.start_ms_ = 0u;
}
inline ::uint32_t ModerationSegment::start_ms() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.start_ms)
  return _internal_start_ms();
}
inline void ModerationSegment::set_start_ms(::uint32_t value) {
  _internal_set_start_ms(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.start_ms)
}
inline ::uint32_t ModerationSegment::_internal_start_ms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_ms_;
}
inline void ModerationSegment::_internal_set_start_ms(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_ms_ = value;
}

// uint32 end_ms = 5;
inline void ModerationSegment::clear_end_ms() {
  _impl_.end_ms_ = 0u;
}
inline ::uint32_t ModerationSegment::end_ms() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.end_ms)
  return _internal_end_ms();
}
inline void ModerationSegment::set_end_ms(::uint32_t value) {
  _internal_set_end_ms(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.end_ms)
}
inline ::uint32_t ModerationSegment::_internal_end_ms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_ms_;
}
inline void ModerationSegment::_internal_set_end_ms(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_ms_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto_2epb_2eh
