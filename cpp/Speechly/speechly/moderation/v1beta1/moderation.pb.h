// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/moderation/v1beta1/moderation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
namespace speechly {
namespace moderation {
namespace v1beta1 {
class AudioModerationConfig;
struct AudioModerationConfigDefaultTypeInternal;
extern AudioModerationConfigDefaultTypeInternal _AudioModerationConfig_default_instance_;
class DiscourseContext;
struct DiscourseContextDefaultTypeInternal;
extern DiscourseContextDefaultTypeInternal _DiscourseContext_default_instance_;
class ModerationLabel;
struct ModerationLabelDefaultTypeInternal;
extern ModerationLabelDefaultTypeInternal _ModerationLabel_default_instance_;
class ModerationSegment;
struct ModerationSegmentDefaultTypeInternal;
extern ModerationSegmentDefaultTypeInternal _ModerationSegment_default_instance_;
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::moderation::v1beta1::AudioModerationConfig* Arena::CreateMaybeMessage<::speechly::moderation::v1beta1::AudioModerationConfig>(Arena*);
template<> ::speechly::moderation::v1beta1::DiscourseContext* Arena::CreateMaybeMessage<::speechly::moderation::v1beta1::DiscourseContext>(Arena*);
template<> ::speechly::moderation::v1beta1::ModerationLabel* Arena::CreateMaybeMessage<::speechly::moderation::v1beta1::ModerationLabel>(Arena*);
template<> ::speechly::moderation::v1beta1::ModerationSegment* Arena::CreateMaybeMessage<::speechly::moderation::v1beta1::ModerationSegment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace moderation {
namespace v1beta1 {

// ===================================================================

class DiscourseContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.DiscourseContext) */ {
 public:
  inline DiscourseContext() : DiscourseContext(nullptr) {}
  ~DiscourseContext() override;
  explicit constexpr DiscourseContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscourseContext(const DiscourseContext& from);
  DiscourseContext(DiscourseContext&& from) noexcept
    : DiscourseContext() {
    *this = ::std::move(from);
  }

  inline DiscourseContext& operator=(const DiscourseContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscourseContext& operator=(DiscourseContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscourseContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscourseContext* internal_default_instance() {
    return reinterpret_cast<const DiscourseContext*>(
               &_DiscourseContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiscourseContext& a, DiscourseContext& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscourseContext* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscourseContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscourseContext* New() const final {
    return new DiscourseContext();
  }

  DiscourseContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscourseContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscourseContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscourseContext& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscourseContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.moderation.v1beta1.DiscourseContext";
  }
  protected:
  explicit DiscourseContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenerIdsFieldNumber = 3,
    kChannelIdFieldNumber = 1,
    kSpeakerIdFieldNumber = 2,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
  };
  // repeated string listener_ids = 3;
  int listener_ids_size() const;
  private:
  int _internal_listener_ids_size() const;
  public:
  void clear_listener_ids();
  const std::string& listener_ids(int index) const;
  std::string* mutable_listener_ids(int index);
  void set_listener_ids(int index, const std::string& value);
  void set_listener_ids(int index, std::string&& value);
  void set_listener_ids(int index, const char* value);
  void set_listener_ids(int index, const char* value, size_t size);
  std::string* add_listener_ids();
  void add_listener_ids(const std::string& value);
  void add_listener_ids(std::string&& value);
  void add_listener_ids(const char* value);
  void add_listener_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& listener_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_listener_ids();
  private:
  const std::string& _internal_listener_ids(int index) const;
  std::string* _internal_add_listener_ids();
  public:

  // string channel_id = 1;
  void clear_channel_id();
  const std::string& channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_channel_id();
  void set_allocated_channel_id(std::string* channel_id);
  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(const std::string& value);
  std::string* _internal_mutable_channel_id();
  public:

  // string speaker_id = 2;
  void clear_speaker_id();
  const std::string& speaker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_speaker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_speaker_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_speaker_id();
  void set_allocated_speaker_id(std::string* speaker_id);
  private:
  const std::string& _internal_speaker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speaker_id(const std::string& value);
  std::string* _internal_mutable_speaker_id();
  public:

  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.DiscourseContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> listener_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speaker_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};
// -------------------------------------------------------------------

class ModerationLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.ModerationLabel) */ {
 public:
  inline ModerationLabel() : ModerationLabel(nullptr) {}
  ~ModerationLabel() override;
  explicit constexpr ModerationLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModerationLabel(const ModerationLabel& from);
  ModerationLabel(ModerationLabel&& from) noexcept
    : ModerationLabel() {
    *this = ::std::move(from);
  }

  inline ModerationLabel& operator=(const ModerationLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModerationLabel& operator=(ModerationLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModerationLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModerationLabel* internal_default_instance() {
    return reinterpret_cast<const ModerationLabel*>(
               &_ModerationLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModerationLabel& a, ModerationLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModerationLabel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModerationLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModerationLabel* New() const final {
    return new ModerationLabel();
  }

  ModerationLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModerationLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModerationLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModerationLabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModerationLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.moderation.v1beta1.ModerationLabel";
  }
  protected:
  explicit ModerationLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kScoreFieldNumber = 2,
    kFlaggedFieldNumber = 3,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // bool flagged = 3;
  void clear_flagged();
  bool flagged() const;
  void set_flagged(bool value);
  private:
  bool _internal_flagged() const;
  void _internal_set_flagged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.ModerationLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  float score_;
  bool flagged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};
// -------------------------------------------------------------------

class AudioModerationConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.AudioModerationConfig) */ {
 public:
  inline AudioModerationConfig() : AudioModerationConfig(nullptr) {}
  ~AudioModerationConfig() override;
  explicit constexpr AudioModerationConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioModerationConfig(const AudioModerationConfig& from);
  AudioModerationConfig(AudioModerationConfig&& from) noexcept
    : AudioModerationConfig() {
    *this = ::std::move(from);
  }

  inline AudioModerationConfig& operator=(const AudioModerationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioModerationConfig& operator=(AudioModerationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioModerationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioModerationConfig* internal_default_instance() {
    return reinterpret_cast<const AudioModerationConfig*>(
               &_AudioModerationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioModerationConfig& a, AudioModerationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioModerationConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioModerationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioModerationConfig* New() const final {
    return new AudioModerationConfig();
  }

  AudioModerationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioModerationConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioModerationConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioModerationConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioModerationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.moderation.v1beta1.AudioModerationConfig";
  }
  protected:
  explicit AudioModerationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kDiscourseContextFieldNumber = 3,
  };
  // string model_id = 1;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
  bool has_discourse_context() const;
  private:
  bool _internal_has_discourse_context() const;
  public:
  void clear_discourse_context();
  const ::speechly::moderation::v1beta1::DiscourseContext& discourse_context() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::moderation::v1beta1::DiscourseContext* release_discourse_context();
  ::speechly::moderation::v1beta1::DiscourseContext* mutable_discourse_context();
  void set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* discourse_context);
  private:
  const ::speechly::moderation::v1beta1::DiscourseContext& _internal_discourse_context() const;
  ::speechly::moderation::v1beta1::DiscourseContext* _internal_mutable_discourse_context();
  public:
  void unsafe_arena_set_allocated_discourse_context(
      ::speechly::moderation::v1beta1::DiscourseContext* discourse_context);
  ::speechly::moderation::v1beta1::DiscourseContext* unsafe_arena_release_discourse_context();

  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.AudioModerationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::speechly::moderation::v1beta1::DiscourseContext* discourse_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};
// -------------------------------------------------------------------

class ModerationSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.ModerationSegment) */ {
 public:
  inline ModerationSegment() : ModerationSegment(nullptr) {}
  ~ModerationSegment() override;
  explicit constexpr ModerationSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModerationSegment(const ModerationSegment& from);
  ModerationSegment(ModerationSegment&& from) noexcept
    : ModerationSegment() {
    *this = ::std::move(from);
  }

  inline ModerationSegment& operator=(const ModerationSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModerationSegment& operator=(ModerationSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModerationSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModerationSegment* internal_default_instance() {
    return reinterpret_cast<const ModerationSegment*>(
               &_ModerationSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModerationSegment& a, ModerationSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(ModerationSegment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModerationSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModerationSegment* New() const final {
    return new ModerationSegment();
  }

  ModerationSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModerationSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModerationSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModerationSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModerationSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.moderation.v1beta1.ModerationSegment";
  }
  protected:
  explicit ModerationSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kTranscriptFieldNumber = 2,
    kIndexFieldNumber = 1,
    kStartMsFieldNumber = 4,
    kEndMsFieldNumber = 5,
  };
  // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::speechly::moderation::v1beta1::ModerationLabel* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >*
      mutable_labels();
  private:
  const ::speechly::moderation::v1beta1::ModerationLabel& _internal_labels(int index) const;
  ::speechly::moderation::v1beta1::ModerationLabel* _internal_add_labels();
  public:
  const ::speechly::moderation::v1beta1::ModerationLabel& labels(int index) const;
  ::speechly::moderation::v1beta1::ModerationLabel* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >&
      labels() const;

  // string transcript = 2;
  void clear_transcript();
  const std::string& transcript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transcript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transcript();
  PROTOBUF_MUST_USE_RESULT std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 start_ms = 4;
  void clear_start_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_ms() const;
  void set_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_ms() const;
  void _internal_set_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end_ms = 5;
  void clear_end_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_ms() const;
  void set_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_ms() const;
  void _internal_set_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.ModerationSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiscourseContext

// string channel_id = 1;
inline void DiscourseContext::clear_channel_id() {
  channel_id_.ClearToEmpty();
}
inline const std::string& DiscourseContext::channel_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.channel_id)
  return _internal_channel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscourseContext::set_channel_id(ArgT0&& arg0, ArgT... args) {
 
 channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.channel_id)
}
inline std::string* DiscourseContext::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.channel_id)
  return _s;
}
inline const std::string& DiscourseContext::_internal_channel_id() const {
  return channel_id_.Get();
}
inline void DiscourseContext::_internal_set_channel_id(const std::string& value) {
  
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiscourseContext::_internal_mutable_channel_id() {
  
  return channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiscourseContext::release_channel_id() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.channel_id)
  return channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiscourseContext::set_allocated_channel_id(std::string* channel_id) {
  if (channel_id != nullptr) {
    
  } else {
    
  }
  channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.channel_id)
}

// string speaker_id = 2;
inline void DiscourseContext::clear_speaker_id() {
  speaker_id_.ClearToEmpty();
}
inline const std::string& DiscourseContext::speaker_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
  return _internal_speaker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscourseContext::set_speaker_id(ArgT0&& arg0, ArgT... args) {
 
 speaker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
}
inline std::string* DiscourseContext::mutable_speaker_id() {
  std::string* _s = _internal_mutable_speaker_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
  return _s;
}
inline const std::string& DiscourseContext::_internal_speaker_id() const {
  return speaker_id_.Get();
}
inline void DiscourseContext::_internal_set_speaker_id(const std::string& value) {
  
  speaker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiscourseContext::_internal_mutable_speaker_id() {
  
  return speaker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiscourseContext::release_speaker_id() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
  return speaker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiscourseContext::set_allocated_speaker_id(std::string* speaker_id) {
  if (speaker_id != nullptr) {
    
  } else {
    
  }
  speaker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), speaker_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.speaker_id)
}

// repeated string listener_ids = 3;
inline int DiscourseContext::_internal_listener_ids_size() const {
  return listener_ids_.size();
}
inline int DiscourseContext::listener_ids_size() const {
  return _internal_listener_ids_size();
}
inline void DiscourseContext::clear_listener_ids() {
  listener_ids_.Clear();
}
inline std::string* DiscourseContext::add_listener_ids() {
  std::string* _s = _internal_add_listener_ids();
  // @@protoc_insertion_point(field_add_mutable:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return _s;
}
inline const std::string& DiscourseContext::_internal_listener_ids(int index) const {
  return listener_ids_.Get(index);
}
inline const std::string& DiscourseContext::listener_ids(int index) const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return _internal_listener_ids(index);
}
inline std::string* DiscourseContext::mutable_listener_ids(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return listener_ids_.Mutable(index);
}
inline void DiscourseContext::set_listener_ids(int index, const std::string& value) {
  listener_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::set_listener_ids(int index, std::string&& value) {
  listener_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::set_listener_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listener_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::set_listener_ids(int index, const char* value, size_t size) {
  listener_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline std::string* DiscourseContext::_internal_add_listener_ids() {
  return listener_ids_.Add();
}
inline void DiscourseContext::add_listener_ids(const std::string& value) {
  listener_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(std::string&& value) {
  listener_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listener_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline void DiscourseContext::add_listener_ids(const char* value, size_t size) {
  listener_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DiscourseContext::listener_ids() const {
  // @@protoc_insertion_point(field_list:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return listener_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DiscourseContext::mutable_listener_ids() {
  // @@protoc_insertion_point(field_mutable_list:speechly.moderation.v1beta1.DiscourseContext.listener_ids)
  return &listener_ids_;
}

// .google.protobuf.Timestamp start_time = 4;
inline bool DiscourseContext::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool DiscourseContext::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DiscourseContext::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DiscourseContext::start_time() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.start_time)
  return _internal_start_time();
}
inline void DiscourseContext::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.DiscourseContext.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::mutable_start_time() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.start_time)
  return _msg;
}
inline void DiscourseContext::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.start_time)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool DiscourseContext::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool DiscourseContext::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DiscourseContext::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DiscourseContext::end_time() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.DiscourseContext.end_time)
  return _internal_end_time();
}
inline void DiscourseContext::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.DiscourseContext.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.DiscourseContext.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DiscourseContext::mutable_end_time() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.DiscourseContext.end_time)
  return _msg;
}
inline void DiscourseContext::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.DiscourseContext.end_time)
}

// -------------------------------------------------------------------

// ModerationLabel

// string label = 1;
inline void ModerationLabel::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& ModerationLabel::label() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationLabel.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModerationLabel::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationLabel.label)
}
inline std::string* ModerationLabel::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.ModerationLabel.label)
  return _s;
}
inline const std::string& ModerationLabel::_internal_label() const {
  return label_.Get();
}
inline void ModerationLabel::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModerationLabel::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModerationLabel::release_label() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.ModerationLabel.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModerationLabel::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.ModerationLabel.label)
}

// float score = 2;
inline void ModerationLabel::clear_score() {
  score_ = 0;
}
inline float ModerationLabel::_internal_score() const {
  return score_;
}
inline float ModerationLabel::score() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationLabel.score)
  return _internal_score();
}
inline void ModerationLabel::_internal_set_score(float value) {
  
  score_ = value;
}
inline void ModerationLabel::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationLabel.score)
}

// bool flagged = 3;
inline void ModerationLabel::clear_flagged() {
  flagged_ = false;
}
inline bool ModerationLabel::_internal_flagged() const {
  return flagged_;
}
inline bool ModerationLabel::flagged() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationLabel.flagged)
  return _internal_flagged();
}
inline void ModerationLabel::_internal_set_flagged(bool value) {
  
  flagged_ = value;
}
inline void ModerationLabel::set_flagged(bool value) {
  _internal_set_flagged(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationLabel.flagged)
}

// -------------------------------------------------------------------

// AudioModerationConfig

// string model_id = 1;
inline void AudioModerationConfig::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& AudioModerationConfig::model_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioModerationConfig::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
}
inline std::string* AudioModerationConfig::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
  return _s;
}
inline const std::string& AudioModerationConfig::_internal_model_id() const {
  return model_id_.Get();
}
inline void AudioModerationConfig::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::release_model_id() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AudioModerationConfig::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.model_id)
}

// string language_code = 2;
inline void AudioModerationConfig::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& AudioModerationConfig::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioModerationConfig::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
}
inline std::string* AudioModerationConfig::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
  return _s;
}
inline const std::string& AudioModerationConfig::_internal_language_code() const {
  return language_code_.Get();
}
inline void AudioModerationConfig::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AudioModerationConfig::release_language_code() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AudioModerationConfig::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.language_code)
}

// .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
inline bool AudioModerationConfig::_internal_has_discourse_context() const {
  return this != internal_default_instance() && discourse_context_ != nullptr;
}
inline bool AudioModerationConfig::has_discourse_context() const {
  return _internal_has_discourse_context();
}
inline void AudioModerationConfig::clear_discourse_context() {
  if (GetArenaForAllocation() == nullptr && discourse_context_ != nullptr) {
    delete discourse_context_;
  }
  discourse_context_ = nullptr;
}
inline const ::speechly::moderation::v1beta1::DiscourseContext& AudioModerationConfig::_internal_discourse_context() const {
  const ::speechly::moderation::v1beta1::DiscourseContext* p = discourse_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::moderation::v1beta1::DiscourseContext&>(
      ::speechly::moderation::v1beta1::_DiscourseContext_default_instance_);
}
inline const ::speechly::moderation::v1beta1::DiscourseContext& AudioModerationConfig::discourse_context() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
  return _internal_discourse_context();
}
inline void AudioModerationConfig::unsafe_arena_set_allocated_discourse_context(
    ::speechly::moderation::v1beta1::DiscourseContext* discourse_context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discourse_context_);
  }
  discourse_context_ = discourse_context;
  if (discourse_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::release_discourse_context() {
  
  ::speechly::moderation::v1beta1::DiscourseContext* temp = discourse_context_;
  discourse_context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::unsafe_arena_release_discourse_context() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
  
  ::speechly::moderation::v1beta1::DiscourseContext* temp = discourse_context_;
  discourse_context_ = nullptr;
  return temp;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::_internal_mutable_discourse_context() {
  
  if (discourse_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::moderation::v1beta1::DiscourseContext>(GetArenaForAllocation());
    discourse_context_ = p;
  }
  return discourse_context_;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* AudioModerationConfig::mutable_discourse_context() {
  ::speechly::moderation::v1beta1::DiscourseContext* _msg = _internal_mutable_discourse_context();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
  return _msg;
}
inline void AudioModerationConfig::set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* discourse_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete discourse_context_;
  }
  if (discourse_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::moderation::v1beta1::DiscourseContext>::GetOwningArena(discourse_context);
    if (message_arena != submessage_arena) {
      discourse_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discourse_context, submessage_arena);
    }
    
  } else {
    
  }
  discourse_context_ = discourse_context;
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationConfig.discourse_context)
}

// -------------------------------------------------------------------

// ModerationSegment

// uint32 index = 1;
inline void ModerationSegment::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModerationSegment::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModerationSegment::index() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.index)
  return _internal_index();
}
inline void ModerationSegment::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void ModerationSegment::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.index)
}

// string transcript = 2;
inline void ModerationSegment::clear_transcript() {
  transcript_.ClearToEmpty();
}
inline const std::string& ModerationSegment::transcript() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.transcript)
  return _internal_transcript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModerationSegment::set_transcript(ArgT0&& arg0, ArgT... args) {
 
 transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.transcript)
}
inline std::string* ModerationSegment::mutable_transcript() {
  std::string* _s = _internal_mutable_transcript();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.ModerationSegment.transcript)
  return _s;
}
inline const std::string& ModerationSegment::_internal_transcript() const {
  return transcript_.Get();
}
inline void ModerationSegment::_internal_set_transcript(const std::string& value) {
  
  transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModerationSegment::_internal_mutable_transcript() {
  
  return transcript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModerationSegment::release_transcript() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.ModerationSegment.transcript)
  return transcript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModerationSegment::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.ModerationSegment.transcript)
}

// repeated .speechly.moderation.v1beta1.ModerationLabel labels = 3;
inline int ModerationSegment::_internal_labels_size() const {
  return labels_.size();
}
inline int ModerationSegment::labels_size() const {
  return _internal_labels_size();
}
inline void ModerationSegment::clear_labels() {
  labels_.Clear();
}
inline ::speechly::moderation::v1beta1::ModerationLabel* ModerationSegment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.ModerationSegment.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >*
ModerationSegment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:speechly.moderation.v1beta1.ModerationSegment.labels)
  return &labels_;
}
inline const ::speechly::moderation::v1beta1::ModerationLabel& ModerationSegment::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::speechly::moderation::v1beta1::ModerationLabel& ModerationSegment::labels(int index) const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.labels)
  return _internal_labels(index);
}
inline ::speechly::moderation::v1beta1::ModerationLabel* ModerationSegment::_internal_add_labels() {
  return labels_.Add();
}
inline ::speechly::moderation::v1beta1::ModerationLabel* ModerationSegment::add_labels() {
  ::speechly::moderation::v1beta1::ModerationLabel* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.ModerationSegment.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >&
ModerationSegment::labels() const {
  // @@protoc_insertion_point(field_list:speechly.moderation.v1beta1.ModerationSegment.labels)
  return labels_;
}

// uint32 start_ms = 4;
inline void ModerationSegment::clear_start_ms() {
  start_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModerationSegment::_internal_start_ms() const {
  return start_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModerationSegment::start_ms() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.start_ms)
  return _internal_start_ms();
}
inline void ModerationSegment::_internal_set_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_ms_ = value;
}
inline void ModerationSegment::set_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_ms(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.start_ms)
}

// uint32 end_ms = 5;
inline void ModerationSegment::clear_end_ms() {
  end_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModerationSegment::_internal_end_ms() const {
  return end_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModerationSegment::end_ms() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.ModerationSegment.end_ms)
  return _internal_end_ms();
}
inline void ModerationSegment::_internal_set_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ms_ = value;
}
inline void ModerationSegment::set_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_ms(value);
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.ModerationSegment.end_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto
