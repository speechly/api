// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/moderation/v1beta1/moderation_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "speechly/moderation/v1beta1/moderation.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
namespace speechly {
namespace moderation {
namespace v1beta1 {
class AudioModerationRequest;
struct AudioModerationRequestDefaultTypeInternal;
extern AudioModerationRequestDefaultTypeInternal _AudioModerationRequest_default_instance_;
class AudioModerationResponse;
struct AudioModerationResponseDefaultTypeInternal;
extern AudioModerationResponseDefaultTypeInternal _AudioModerationResponse_default_instance_;
class StreamingAudioModerationRequest;
struct StreamingAudioModerationRequestDefaultTypeInternal;
extern StreamingAudioModerationRequestDefaultTypeInternal _StreamingAudioModerationRequest_default_instance_;
class StreamingAudioModerationResponse;
struct StreamingAudioModerationResponseDefaultTypeInternal;
extern StreamingAudioModerationResponseDefaultTypeInternal _StreamingAudioModerationResponse_default_instance_;
class TextModerationRequest;
struct TextModerationRequestDefaultTypeInternal;
extern TextModerationRequestDefaultTypeInternal _TextModerationRequest_default_instance_;
class TextModerationResponse;
struct TextModerationResponseDefaultTypeInternal;
extern TextModerationResponseDefaultTypeInternal _TextModerationResponse_default_instance_;
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace moderation {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class TextModerationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.TextModerationRequest) */ {
 public:
  inline TextModerationRequest() : TextModerationRequest(nullptr) {}
  ~TextModerationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TextModerationRequest(::google::protobuf::internal::ConstantInitialized);

  TextModerationRequest(const TextModerationRequest& from);
  TextModerationRequest(TextModerationRequest&& from) noexcept
    : TextModerationRequest() {
    *this = ::std::move(from);
  }

  inline TextModerationRequest& operator=(const TextModerationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextModerationRequest& operator=(TextModerationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextModerationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextModerationRequest* internal_default_instance() {
    return reinterpret_cast<const TextModerationRequest*>(
               &_TextModerationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextModerationRequest& a, TextModerationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextModerationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextModerationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextModerationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextModerationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextModerationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TextModerationRequest& from) {
    TextModerationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextModerationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.TextModerationRequest";
  }
  protected:
  explicit TextModerationRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kTextFieldNumber = 2,
    kLanguageCodeFieldNumber = 4,
    kAudioContextIdFieldNumber = 5,
    kDiscourseContextFieldNumber = 3,
  };
  // string model_id = 1;
  void clear_model_id() ;
  const std::string& model_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_id(Arg_&& arg, Args_... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* ptr);

  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(
      const std::string& value);
  std::string* _internal_mutable_model_id();

  public:
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // string language_code = 4;
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* ptr);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // string audio_context_id = 5;
  void clear_audio_context_id() ;
  const std::string& audio_context_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_context_id(Arg_&& arg, Args_... args);
  std::string* mutable_audio_context_id();
  PROTOBUF_NODISCARD std::string* release_audio_context_id();
  void set_allocated_audio_context_id(std::string* ptr);

  private:
  const std::string& _internal_audio_context_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_context_id(
      const std::string& value);
  std::string* _internal_mutable_audio_context_id();

  public:
  // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
  bool has_discourse_context() const;
  void clear_discourse_context() ;
  const ::speechly::moderation::v1beta1::DiscourseContext& discourse_context() const;
  PROTOBUF_NODISCARD ::speechly::moderation::v1beta1::DiscourseContext* release_discourse_context();
  ::speechly::moderation::v1beta1::DiscourseContext* mutable_discourse_context();
  void set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value);
  void unsafe_arena_set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value);
  ::speechly::moderation::v1beta1::DiscourseContext* unsafe_arena_release_discourse_context();

  private:
  const ::speechly::moderation::v1beta1::DiscourseContext& _internal_discourse_context() const;
  ::speechly::moderation::v1beta1::DiscourseContext* _internal_mutable_discourse_context();

  public:
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.TextModerationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 99, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_id_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::google::protobuf::internal::ArenaStringPtr audio_context_id_;
    ::speechly::moderation::v1beta1::DiscourseContext* discourse_context_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
};// -------------------------------------------------------------------

class TextModerationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.TextModerationResponse) */ {
 public:
  inline TextModerationResponse() : TextModerationResponse(nullptr) {}
  ~TextModerationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TextModerationResponse(::google::protobuf::internal::ConstantInitialized);

  TextModerationResponse(const TextModerationResponse& from);
  TextModerationResponse(TextModerationResponse&& from) noexcept
    : TextModerationResponse() {
    *this = ::std::move(from);
  }

  inline TextModerationResponse& operator=(const TextModerationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextModerationResponse& operator=(TextModerationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextModerationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextModerationResponse* internal_default_instance() {
    return reinterpret_cast<const TextModerationResponse*>(
               &_TextModerationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextModerationResponse& a, TextModerationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextModerationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextModerationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextModerationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextModerationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextModerationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TextModerationResponse& from) {
    TextModerationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextModerationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.TextModerationResponse";
  }
  protected:
  explicit TextModerationResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
  };
  // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  ::speechly::moderation::v1beta1::ModerationLabel* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >*
      mutable_labels();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>& _internal_labels() const;
  ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>* _internal_mutable_labels();
  public:
  const ::speechly::moderation::v1beta1::ModerationLabel& labels(int index) const;
  ::speechly::moderation::v1beta1::ModerationLabel* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >&
      labels() const;
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.TextModerationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel > labels_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
};// -------------------------------------------------------------------

class AudioModerationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.AudioModerationRequest) */ {
 public:
  inline AudioModerationRequest() : AudioModerationRequest(nullptr) {}
  ~AudioModerationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AudioModerationRequest(::google::protobuf::internal::ConstantInitialized);

  AudioModerationRequest(const AudioModerationRequest& from);
  AudioModerationRequest(AudioModerationRequest&& from) noexcept
    : AudioModerationRequest() {
    *this = ::std::move(from);
  }

  inline AudioModerationRequest& operator=(const AudioModerationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioModerationRequest& operator=(AudioModerationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioModerationRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StreamingRequestCase {
    kConfig = 1,
    kAudio = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static inline const AudioModerationRequest* internal_default_instance() {
    return reinterpret_cast<const AudioModerationRequest*>(
               &_AudioModerationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioModerationRequest& a, AudioModerationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioModerationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioModerationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioModerationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioModerationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioModerationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AudioModerationRequest& from) {
    AudioModerationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioModerationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.AudioModerationRequest";
  }
  protected:
  explicit AudioModerationRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kAudioFieldNumber = 2,
  };
  // .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;

  public:
  void clear_config() ;
  const ::speechly::moderation::v1beta1::AudioModerationConfig& config() const;
  PROTOBUF_NODISCARD ::speechly::moderation::v1beta1::AudioModerationConfig* release_config();
  ::speechly::moderation::v1beta1::AudioModerationConfig* mutable_config();
  void set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* value);
  void unsafe_arena_set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* value);
  ::speechly::moderation::v1beta1::AudioModerationConfig* unsafe_arena_release_config();

  private:
  const ::speechly::moderation::v1beta1::AudioModerationConfig& _internal_config() const;
  ::speechly::moderation::v1beta1::AudioModerationConfig* _internal_mutable_config();

  public:
  // bytes audio = 2;
  bool has_audio() const;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* ptr);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.AudioModerationRequest)
 private:
  class _Internal;
  void set_has_config();
  void set_has_audio();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union StreamingRequestUnion {
      constexpr StreamingRequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::speechly::moderation::v1beta1::AudioModerationConfig* config_;
      ::google::protobuf::internal::ArenaStringPtr audio_;
    } streaming_request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
};// -------------------------------------------------------------------

class AudioModerationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.AudioModerationResponse) */ {
 public:
  inline AudioModerationResponse() : AudioModerationResponse(nullptr) {}
  ~AudioModerationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AudioModerationResponse(::google::protobuf::internal::ConstantInitialized);

  AudioModerationResponse(const AudioModerationResponse& from);
  AudioModerationResponse(AudioModerationResponse&& from) noexcept
    : AudioModerationResponse() {
    *this = ::std::move(from);
  }

  inline AudioModerationResponse& operator=(const AudioModerationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioModerationResponse& operator=(AudioModerationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioModerationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioModerationResponse* internal_default_instance() {
    return reinterpret_cast<const AudioModerationResponse*>(
               &_AudioModerationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AudioModerationResponse& a, AudioModerationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioModerationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioModerationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioModerationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioModerationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioModerationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AudioModerationResponse& from) {
    AudioModerationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioModerationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.AudioModerationResponse";
  }
  protected:
  explicit AudioModerationResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .speechly.moderation.v1beta1.ModerationSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;

  public:
  void clear_segments() ;
  ::speechly::moderation::v1beta1::ModerationSegment* mutable_segments(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationSegment >*
      mutable_segments();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationSegment>& _internal_segments() const;
  ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationSegment>* _internal_mutable_segments();
  public:
  const ::speechly::moderation::v1beta1::ModerationSegment& segments(int index) const;
  ::speechly::moderation::v1beta1::ModerationSegment* add_segments();
  const ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationSegment >&
      segments() const;
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.AudioModerationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationSegment > segments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
};// -------------------------------------------------------------------

class StreamingAudioModerationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.StreamingAudioModerationRequest) */ {
 public:
  inline StreamingAudioModerationRequest() : StreamingAudioModerationRequest(nullptr) {}
  ~StreamingAudioModerationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingAudioModerationRequest(::google::protobuf::internal::ConstantInitialized);

  StreamingAudioModerationRequest(const StreamingAudioModerationRequest& from);
  StreamingAudioModerationRequest(StreamingAudioModerationRequest&& from) noexcept
    : StreamingAudioModerationRequest() {
    *this = ::std::move(from);
  }

  inline StreamingAudioModerationRequest& operator=(const StreamingAudioModerationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingAudioModerationRequest& operator=(StreamingAudioModerationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingAudioModerationRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StreamingRequestCase {
    kConfig = 1,
    kAudio = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static inline const StreamingAudioModerationRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingAudioModerationRequest*>(
               &_StreamingAudioModerationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamingAudioModerationRequest& a, StreamingAudioModerationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingAudioModerationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingAudioModerationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingAudioModerationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingAudioModerationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingAudioModerationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamingAudioModerationRequest& from) {
    StreamingAudioModerationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingAudioModerationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.StreamingAudioModerationRequest";
  }
  protected:
  explicit StreamingAudioModerationRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kAudioFieldNumber = 2,
  };
  // .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;

  public:
  void clear_config() ;
  const ::speechly::moderation::v1beta1::AudioModerationConfig& config() const;
  PROTOBUF_NODISCARD ::speechly::moderation::v1beta1::AudioModerationConfig* release_config();
  ::speechly::moderation::v1beta1::AudioModerationConfig* mutable_config();
  void set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* value);
  void unsafe_arena_set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* value);
  ::speechly::moderation::v1beta1::AudioModerationConfig* unsafe_arena_release_config();

  private:
  const ::speechly::moderation::v1beta1::AudioModerationConfig& _internal_config() const;
  ::speechly::moderation::v1beta1::AudioModerationConfig* _internal_mutable_config();

  public:
  // bytes audio = 2;
  bool has_audio() const;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* ptr);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
 private:
  class _Internal;
  void set_has_config();
  void set_has_audio();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union StreamingRequestUnion {
      constexpr StreamingRequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::speechly::moderation::v1beta1::AudioModerationConfig* config_;
      ::google::protobuf::internal::ArenaStringPtr audio_;
    } streaming_request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
};// -------------------------------------------------------------------

class StreamingAudioModerationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.moderation.v1beta1.StreamingAudioModerationResponse) */ {
 public:
  inline StreamingAudioModerationResponse() : StreamingAudioModerationResponse(nullptr) {}
  ~StreamingAudioModerationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingAudioModerationResponse(::google::protobuf::internal::ConstantInitialized);

  StreamingAudioModerationResponse(const StreamingAudioModerationResponse& from);
  StreamingAudioModerationResponse(StreamingAudioModerationResponse&& from) noexcept
    : StreamingAudioModerationResponse() {
    *this = ::std::move(from);
  }

  inline StreamingAudioModerationResponse& operator=(const StreamingAudioModerationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingAudioModerationResponse& operator=(StreamingAudioModerationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingAudioModerationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingAudioModerationResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingAudioModerationResponse*>(
               &_StreamingAudioModerationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamingAudioModerationResponse& a, StreamingAudioModerationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingAudioModerationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingAudioModerationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingAudioModerationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingAudioModerationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingAudioModerationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamingAudioModerationResponse& from) {
    StreamingAudioModerationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingAudioModerationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.moderation.v1beta1.StreamingAudioModerationResponse";
  }
  protected:
  explicit StreamingAudioModerationResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentFieldNumber = 1,
  };
  // .speechly.moderation.v1beta1.ModerationSegment segment = 1;
  bool has_segment() const;
  void clear_segment() ;
  const ::speechly::moderation::v1beta1::ModerationSegment& segment() const;
  PROTOBUF_NODISCARD ::speechly::moderation::v1beta1::ModerationSegment* release_segment();
  ::speechly::moderation::v1beta1::ModerationSegment* mutable_segment();
  void set_allocated_segment(::speechly::moderation::v1beta1::ModerationSegment* value);
  void unsafe_arena_set_allocated_segment(::speechly::moderation::v1beta1::ModerationSegment* value);
  ::speechly::moderation::v1beta1::ModerationSegment* unsafe_arena_release_segment();

  private:
  const ::speechly::moderation::v1beta1::ModerationSegment& _internal_segment() const;
  ::speechly::moderation::v1beta1::ModerationSegment* _internal_mutable_segment();

  public:
  // @@protoc_insertion_point(class_scope:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::speechly::moderation::v1beta1::ModerationSegment* segment_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TextModerationRequest

// string model_id = 1;
inline void TextModerationRequest::clear_model_id() {
  _impl_.model_id_.ClearToEmpty();
}
inline const std::string& TextModerationRequest::model_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.TextModerationRequest.model_id)
  return _internal_model_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextModerationRequest::set_model_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.TextModerationRequest.model_id)
}
inline std::string* TextModerationRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.TextModerationRequest.model_id)
  return _s;
}
inline const std::string& TextModerationRequest::_internal_model_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_id_.Get();
}
inline void TextModerationRequest::_internal_set_model_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TextModerationRequest::_internal_mutable_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TextModerationRequest::release_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.TextModerationRequest.model_id)
  return _impl_.model_id_.Release();
}
inline void TextModerationRequest::set_allocated_model_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_id_.IsDefault()) {
          _impl_.model_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.TextModerationRequest.model_id)
}

// string text = 2;
inline void TextModerationRequest::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TextModerationRequest::text() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.TextModerationRequest.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextModerationRequest::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.TextModerationRequest.text)
}
inline std::string* TextModerationRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.TextModerationRequest.text)
  return _s;
}
inline const std::string& TextModerationRequest::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void TextModerationRequest::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TextModerationRequest::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* TextModerationRequest::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.TextModerationRequest.text)
  return _impl_.text_.Release();
}
inline void TextModerationRequest::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.TextModerationRequest.text)
}

// .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
inline bool TextModerationRequest::has_discourse_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.discourse_context_ != nullptr);
  return value;
}
inline const ::speechly::moderation::v1beta1::DiscourseContext& TextModerationRequest::_internal_discourse_context() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::moderation::v1beta1::DiscourseContext* p = _impl_.discourse_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::moderation::v1beta1::DiscourseContext&>(::speechly::moderation::v1beta1::_DiscourseContext_default_instance_);
}
inline const ::speechly::moderation::v1beta1::DiscourseContext& TextModerationRequest::discourse_context() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.TextModerationRequest.discourse_context)
  return _internal_discourse_context();
}
inline void TextModerationRequest::unsafe_arena_set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.discourse_context_);
  }
  _impl_.discourse_context_ = reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.TextModerationRequest.discourse_context)
}
inline ::speechly::moderation::v1beta1::DiscourseContext* TextModerationRequest::release_discourse_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::moderation::v1beta1::DiscourseContext* released = _impl_.discourse_context_;
  _impl_.discourse_context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* TextModerationRequest::unsafe_arena_release_discourse_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.TextModerationRequest.discourse_context)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::moderation::v1beta1::DiscourseContext* temp = _impl_.discourse_context_;
  _impl_.discourse_context_ = nullptr;
  return temp;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* TextModerationRequest::_internal_mutable_discourse_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.discourse_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::moderation::v1beta1::DiscourseContext>(GetArenaForAllocation());
    _impl_.discourse_context_ = reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(p);
  }
  return _impl_.discourse_context_;
}
inline ::speechly::moderation::v1beta1::DiscourseContext* TextModerationRequest::mutable_discourse_context() {
  ::speechly::moderation::v1beta1::DiscourseContext* _msg = _internal_mutable_discourse_context();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.TextModerationRequest.discourse_context)
  return _msg;
}
inline void TextModerationRequest::set_allocated_discourse_context(::speechly::moderation::v1beta1::DiscourseContext* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.discourse_context_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.discourse_context_ = reinterpret_cast<::speechly::moderation::v1beta1::DiscourseContext*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.TextModerationRequest.discourse_context)
}

// string language_code = 4;
inline void TextModerationRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& TextModerationRequest::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.TextModerationRequest.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextModerationRequest::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.TextModerationRequest.language_code)
}
inline std::string* TextModerationRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.TextModerationRequest.language_code)
  return _s;
}
inline const std::string& TextModerationRequest::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void TextModerationRequest::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* TextModerationRequest::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArenaForAllocation());
}
inline std::string* TextModerationRequest::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.TextModerationRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void TextModerationRequest::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.TextModerationRequest.language_code)
}

// string audio_context_id = 5;
inline void TextModerationRequest::clear_audio_context_id() {
  _impl_.audio_context_id_.ClearToEmpty();
}
inline const std::string& TextModerationRequest::audio_context_id() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.TextModerationRequest.audio_context_id)
  return _internal_audio_context_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextModerationRequest::set_audio_context_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_context_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.TextModerationRequest.audio_context_id)
}
inline std::string* TextModerationRequest::mutable_audio_context_id() {
  std::string* _s = _internal_mutable_audio_context_id();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.TextModerationRequest.audio_context_id)
  return _s;
}
inline const std::string& TextModerationRequest::_internal_audio_context_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_context_id_.Get();
}
inline void TextModerationRequest::_internal_set_audio_context_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_context_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TextModerationRequest::_internal_mutable_audio_context_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.audio_context_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TextModerationRequest::release_audio_context_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.TextModerationRequest.audio_context_id)
  return _impl_.audio_context_id_.Release();
}
inline void TextModerationRequest::set_allocated_audio_context_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_context_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_context_id_.IsDefault()) {
          _impl_.audio_context_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.TextModerationRequest.audio_context_id)
}

// -------------------------------------------------------------------

// TextModerationResponse

// repeated .speechly.moderation.v1beta1.ModerationLabel labels = 1;
inline int TextModerationResponse::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int TextModerationResponse::labels_size() const {
  return _internal_labels_size();
}
inline ::speechly::moderation::v1beta1::ModerationLabel* TextModerationResponse::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.TextModerationResponse.labels)
  return _internal_mutable_labels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >*
TextModerationResponse::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:speechly.moderation.v1beta1.TextModerationResponse.labels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_labels();
}
inline const ::speechly::moderation::v1beta1::ModerationLabel& TextModerationResponse::labels(int index) const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.TextModerationResponse.labels)
    return _internal_labels().Get(index);
}
inline ::speechly::moderation::v1beta1::ModerationLabel* TextModerationResponse::add_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::moderation::v1beta1::ModerationLabel* _add = _internal_mutable_labels()->Add();
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.TextModerationResponse.labels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationLabel >&
TextModerationResponse::labels() const {
  // @@protoc_insertion_point(field_list:speechly.moderation.v1beta1.TextModerationResponse.labels)
  return _internal_labels();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>&
TextModerationResponse::_internal_labels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.labels_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationLabel>*
TextModerationResponse::_internal_mutable_labels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.labels_;
}

// -------------------------------------------------------------------

// AudioModerationRequest

// .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
inline bool AudioModerationRequest::has_config() const {
  return streaming_request_case() == kConfig;
}
inline bool AudioModerationRequest::_internal_has_config() const {
  return streaming_request_case() == kConfig;
}
inline void AudioModerationRequest::set_has_config() {
  _impl_._oneof_case_[0] = kConfig;
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* AudioModerationRequest::release_config() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationRequest.config)
  if (streaming_request_case() == kConfig) {
    clear_has_streaming_request();
    ::speechly::moderation::v1beta1::AudioModerationConfig* temp = _impl_.streaming_request_.config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.streaming_request_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::speechly::moderation::v1beta1::AudioModerationConfig& AudioModerationRequest::_internal_config() const {
  return streaming_request_case() == kConfig
      ? *_impl_.streaming_request_.config_
      : reinterpret_cast<::speechly::moderation::v1beta1::AudioModerationConfig&>(::speechly::moderation::v1beta1::_AudioModerationConfig_default_instance_);
}
inline const ::speechly::moderation::v1beta1::AudioModerationConfig& AudioModerationRequest::config() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationRequest.config)
  return _internal_config();
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* AudioModerationRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:speechly.moderation.v1beta1.AudioModerationRequest.config)
  if (streaming_request_case() == kConfig) {
    clear_has_streaming_request();
    ::speechly::moderation::v1beta1::AudioModerationConfig* temp = _impl_.streaming_request_.config_;
    _impl_.streaming_request_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioModerationRequest::unsafe_arena_set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* config) {
  clear_streaming_request();
  if (config) {
    set_has_config();
    _impl_.streaming_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.AudioModerationRequest.config)
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* AudioModerationRequest::_internal_mutable_config() {
  if (streaming_request_case() != kConfig) {
    clear_streaming_request();
    set_has_config();
    _impl_.streaming_request_.config_ = CreateMaybeMessage< ::speechly::moderation::v1beta1::AudioModerationConfig >(GetArenaForAllocation());
  }
  return _impl_.streaming_request_.config_;
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* AudioModerationRequest::mutable_config() {
  ::speechly::moderation::v1beta1::AudioModerationConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationRequest.config)
  return _msg;
}

// bytes audio = 2;
inline bool AudioModerationRequest::has_audio() const {
  return streaming_request_case() == kAudio;
}
inline void AudioModerationRequest::set_has_audio() {
  _impl_._oneof_case_[0] = kAudio;
}
inline void AudioModerationRequest::clear_audio() {
  if (streaming_request_case() == kAudio) {
    _impl_.streaming_request_.audio_.Destroy();
    clear_has_streaming_request();
  }
}
inline const std::string& AudioModerationRequest::audio() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationRequest.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioModerationRequest::set_audio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    clear_streaming_request();

    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  _impl_.streaming_request_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.AudioModerationRequest.audio)
}
inline std::string* AudioModerationRequest::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationRequest.audio)
  return _s;
}
inline const std::string& AudioModerationRequest::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.streaming_request_.audio_.Get();
}
inline void AudioModerationRequest::_internal_set_audio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    clear_streaming_request();

    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  _impl_.streaming_request_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioModerationRequest::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    clear_streaming_request();

    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  return _impl_.streaming_request_.audio_.Mutable( GetArenaForAllocation());
}
inline std::string* AudioModerationRequest::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.AudioModerationRequest.audio)
  if (streaming_request_case() != kAudio) {
    return nullptr;
  }
  clear_has_streaming_request();
  return _impl_.streaming_request_.audio_.Release();
}
inline void AudioModerationRequest::set_allocated_audio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
  if (value != nullptr) {
    set_has_audio();
    _impl_.streaming_request_.audio_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationRequest.audio)
}

inline bool AudioModerationRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void AudioModerationRequest::clear_has_streaming_request() {
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline AudioModerationRequest::StreamingRequestCase AudioModerationRequest::streaming_request_case() const {
  return AudioModerationRequest::StreamingRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AudioModerationResponse

// repeated .speechly.moderation.v1beta1.ModerationSegment segments = 1;
inline int AudioModerationResponse::_internal_segments_size() const {
  return _internal_segments().size();
}
inline int AudioModerationResponse::segments_size() const {
  return _internal_segments_size();
}
inline ::speechly::moderation::v1beta1::ModerationSegment* AudioModerationResponse::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.AudioModerationResponse.segments)
  return _internal_mutable_segments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationSegment >*
AudioModerationResponse::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:speechly.moderation.v1beta1.AudioModerationResponse.segments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_segments();
}
inline const ::speechly::moderation::v1beta1::ModerationSegment& AudioModerationResponse::segments(int index) const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.AudioModerationResponse.segments)
    return _internal_segments().Get(index);
}
inline ::speechly::moderation::v1beta1::ModerationSegment* AudioModerationResponse::add_segments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::moderation::v1beta1::ModerationSegment* _add = _internal_mutable_segments()->Add();
  // @@protoc_insertion_point(field_add:speechly.moderation.v1beta1.AudioModerationResponse.segments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::moderation::v1beta1::ModerationSegment >&
AudioModerationResponse::segments() const {
  // @@protoc_insertion_point(field_list:speechly.moderation.v1beta1.AudioModerationResponse.segments)
  return _internal_segments();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationSegment>&
AudioModerationResponse::_internal_segments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.segments_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::moderation::v1beta1::ModerationSegment>*
AudioModerationResponse::_internal_mutable_segments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.segments_;
}

// -------------------------------------------------------------------

// StreamingAudioModerationRequest

// .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
inline bool StreamingAudioModerationRequest::has_config() const {
  return streaming_request_case() == kConfig;
}
inline bool StreamingAudioModerationRequest::_internal_has_config() const {
  return streaming_request_case() == kConfig;
}
inline void StreamingAudioModerationRequest::set_has_config() {
  _impl_._oneof_case_[0] = kConfig;
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* StreamingAudioModerationRequest::release_config() {
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.StreamingAudioModerationRequest.config)
  if (streaming_request_case() == kConfig) {
    clear_has_streaming_request();
    ::speechly::moderation::v1beta1::AudioModerationConfig* temp = _impl_.streaming_request_.config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.streaming_request_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::speechly::moderation::v1beta1::AudioModerationConfig& StreamingAudioModerationRequest::_internal_config() const {
  return streaming_request_case() == kConfig
      ? *_impl_.streaming_request_.config_
      : reinterpret_cast<::speechly::moderation::v1beta1::AudioModerationConfig&>(::speechly::moderation::v1beta1::_AudioModerationConfig_default_instance_);
}
inline const ::speechly::moderation::v1beta1::AudioModerationConfig& StreamingAudioModerationRequest::config() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.StreamingAudioModerationRequest.config)
  return _internal_config();
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* StreamingAudioModerationRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:speechly.moderation.v1beta1.StreamingAudioModerationRequest.config)
  if (streaming_request_case() == kConfig) {
    clear_has_streaming_request();
    ::speechly::moderation::v1beta1::AudioModerationConfig* temp = _impl_.streaming_request_.config_;
    _impl_.streaming_request_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingAudioModerationRequest::unsafe_arena_set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* config) {
  clear_streaming_request();
  if (config) {
    set_has_config();
    _impl_.streaming_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.StreamingAudioModerationRequest.config)
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* StreamingAudioModerationRequest::_internal_mutable_config() {
  if (streaming_request_case() != kConfig) {
    clear_streaming_request();
    set_has_config();
    _impl_.streaming_request_.config_ = CreateMaybeMessage< ::speechly::moderation::v1beta1::AudioModerationConfig >(GetArenaForAllocation());
  }
  return _impl_.streaming_request_.config_;
}
inline ::speechly::moderation::v1beta1::AudioModerationConfig* StreamingAudioModerationRequest::mutable_config() {
  ::speechly::moderation::v1beta1::AudioModerationConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.StreamingAudioModerationRequest.config)
  return _msg;
}

// bytes audio = 2;
inline bool StreamingAudioModerationRequest::has_audio() const {
  return streaming_request_case() == kAudio;
}
inline void StreamingAudioModerationRequest::set_has_audio() {
  _impl_._oneof_case_[0] = kAudio;
}
inline void StreamingAudioModerationRequest::clear_audio() {
  if (streaming_request_case() == kAudio) {
    _impl_.streaming_request_.audio_.Destroy();
    clear_has_streaming_request();
  }
}
inline const std::string& StreamingAudioModerationRequest::audio() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.StreamingAudioModerationRequest.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamingAudioModerationRequest::set_audio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    clear_streaming_request();

    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  _impl_.streaming_request_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.moderation.v1beta1.StreamingAudioModerationRequest.audio)
}
inline std::string* StreamingAudioModerationRequest::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.StreamingAudioModerationRequest.audio)
  return _s;
}
inline const std::string& StreamingAudioModerationRequest::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.streaming_request_.audio_.Get();
}
inline void StreamingAudioModerationRequest::_internal_set_audio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    clear_streaming_request();

    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  _impl_.streaming_request_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingAudioModerationRequest::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (streaming_request_case() != kAudio) {
    clear_streaming_request();

    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  return _impl_.streaming_request_.audio_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamingAudioModerationRequest::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.StreamingAudioModerationRequest.audio)
  if (streaming_request_case() != kAudio) {
    return nullptr;
  }
  clear_has_streaming_request();
  return _impl_.streaming_request_.audio_.Release();
}
inline void StreamingAudioModerationRequest::set_allocated_audio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
  if (value != nullptr) {
    set_has_audio();
    _impl_.streaming_request_.audio_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.StreamingAudioModerationRequest.audio)
}

inline bool StreamingAudioModerationRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void StreamingAudioModerationRequest::clear_has_streaming_request() {
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline StreamingAudioModerationRequest::StreamingRequestCase StreamingAudioModerationRequest::streaming_request_case() const {
  return StreamingAudioModerationRequest::StreamingRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingAudioModerationResponse

// .speechly.moderation.v1beta1.ModerationSegment segment = 1;
inline bool StreamingAudioModerationResponse::has_segment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.segment_ != nullptr);
  return value;
}
inline const ::speechly::moderation::v1beta1::ModerationSegment& StreamingAudioModerationResponse::_internal_segment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::moderation::v1beta1::ModerationSegment* p = _impl_.segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::moderation::v1beta1::ModerationSegment&>(::speechly::moderation::v1beta1::_ModerationSegment_default_instance_);
}
inline const ::speechly::moderation::v1beta1::ModerationSegment& StreamingAudioModerationResponse::segment() const {
  // @@protoc_insertion_point(field_get:speechly.moderation.v1beta1.StreamingAudioModerationResponse.segment)
  return _internal_segment();
}
inline void StreamingAudioModerationResponse::unsafe_arena_set_allocated_segment(::speechly::moderation::v1beta1::ModerationSegment* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.segment_);
  }
  _impl_.segment_ = reinterpret_cast<::speechly::moderation::v1beta1::ModerationSegment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.moderation.v1beta1.StreamingAudioModerationResponse.segment)
}
inline ::speechly::moderation::v1beta1::ModerationSegment* StreamingAudioModerationResponse::release_segment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::moderation::v1beta1::ModerationSegment* released = _impl_.segment_;
  _impl_.segment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::moderation::v1beta1::ModerationSegment* StreamingAudioModerationResponse::unsafe_arena_release_segment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.moderation.v1beta1.StreamingAudioModerationResponse.segment)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::moderation::v1beta1::ModerationSegment* temp = _impl_.segment_;
  _impl_.segment_ = nullptr;
  return temp;
}
inline ::speechly::moderation::v1beta1::ModerationSegment* StreamingAudioModerationResponse::_internal_mutable_segment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::moderation::v1beta1::ModerationSegment>(GetArenaForAllocation());
    _impl_.segment_ = reinterpret_cast<::speechly::moderation::v1beta1::ModerationSegment*>(p);
  }
  return _impl_.segment_;
}
inline ::speechly::moderation::v1beta1::ModerationSegment* StreamingAudioModerationResponse::mutable_segment() {
  ::speechly::moderation::v1beta1::ModerationSegment* _msg = _internal_mutable_segment();
  // @@protoc_insertion_point(field_mutable:speechly.moderation.v1beta1.StreamingAudioModerationResponse.segment)
  return _msg;
}
inline void StreamingAudioModerationResponse::set_allocated_segment(::speechly::moderation::v1beta1::ModerationSegment* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.segment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.segment_ = reinterpret_cast<::speechly::moderation::v1beta1::ModerationSegment*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.StreamingAudioModerationResponse.segment)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_2epb_2eh
