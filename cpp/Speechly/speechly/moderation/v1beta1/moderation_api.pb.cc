// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/moderation/v1beta1/moderation_api.proto

#include "speechly/moderation/v1beta1/moderation_api.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace speechly {
namespace moderation {
namespace v1beta1 {
        template <typename>
PROTOBUF_CONSTEXPR TextModerationRequest::TextModerationRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.model_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.text_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.language_code_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.audio_context_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.discourse_context_)*/ nullptr,
    } {}
struct TextModerationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextModerationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextModerationRequestDefaultTypeInternal() {}
  union {
    TextModerationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextModerationRequestDefaultTypeInternal _TextModerationRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TextModerationResponse::TextModerationResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.labels_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TextModerationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextModerationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextModerationResponseDefaultTypeInternal() {}
  union {
    TextModerationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextModerationResponseDefaultTypeInternal _TextModerationResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AudioModerationRequest::AudioModerationRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.streaming_request_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AudioModerationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioModerationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioModerationRequestDefaultTypeInternal() {}
  union {
    AudioModerationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioModerationRequestDefaultTypeInternal _AudioModerationRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AudioModerationResponse::AudioModerationResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.segments_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AudioModerationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioModerationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioModerationResponseDefaultTypeInternal() {}
  union {
    AudioModerationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioModerationResponseDefaultTypeInternal _AudioModerationResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR StreamingAudioModerationRequest::StreamingAudioModerationRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.streaming_request_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct StreamingAudioModerationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingAudioModerationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingAudioModerationRequestDefaultTypeInternal() {}
  union {
    StreamingAudioModerationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingAudioModerationRequestDefaultTypeInternal _StreamingAudioModerationRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR StreamingAudioModerationResponse::StreamingAudioModerationResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.segment_)*/ nullptr,
    } {}
struct StreamingAudioModerationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingAudioModerationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingAudioModerationResponseDefaultTypeInternal() {}
  union {
    StreamingAudioModerationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingAudioModerationResponseDefaultTypeInternal _StreamingAudioModerationResponse_default_instance_;
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly
static ::_pb::Metadata file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto = nullptr;
const ::uint32_t TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationRequest, _impl_.model_id_),
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationRequest, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationRequest, _impl_.discourse_context_),
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationRequest, _impl_.language_code_),
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationRequest, _impl_.audio_context_id_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::TextModerationResponse, _impl_.labels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationRequest, _impl_.streaming_request_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationResponse, _impl_.segments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::StreamingAudioModerationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::StreamingAudioModerationRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::StreamingAudioModerationRequest, _impl_.streaming_request_),
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::StreamingAudioModerationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::StreamingAudioModerationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::StreamingAudioModerationResponse, _impl_.segment_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::speechly::moderation::v1beta1::TextModerationRequest)},
        {18, -1, -1, sizeof(::speechly::moderation::v1beta1::TextModerationResponse)},
        {27, -1, -1, sizeof(::speechly::moderation::v1beta1::AudioModerationRequest)},
        {38, -1, -1, sizeof(::speechly::moderation::v1beta1::AudioModerationResponse)},
        {47, -1, -1, sizeof(::speechly::moderation::v1beta1::StreamingAudioModerationRequest)},
        {58, 67, -1, sizeof(::speechly::moderation::v1beta1::StreamingAudioModerationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::speechly::moderation::v1beta1::_TextModerationRequest_default_instance_._instance,
    &::speechly::moderation::v1beta1::_TextModerationResponse_default_instance_._instance,
    &::speechly::moderation::v1beta1::_AudioModerationRequest_default_instance_._instance,
    &::speechly::moderation::v1beta1::_AudioModerationResponse_default_instance_._instance,
    &::speechly::moderation::v1beta1::_StreamingAudioModerationRequest_default_instance_._instance,
    &::speechly::moderation::v1beta1::_StreamingAudioModerationResponse_default_instance_._instance,
};
const char descriptor_table_protodef_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n0speechly/moderation/v1beta1/moderation"
    "_api.proto\022\033speechly.moderation.v1beta1\032"
    ",speechly/moderation/v1beta1/moderation."
    "proto\"\262\001\n\025TextModerationRequest\022\020\n\010model"
    "_id\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022H\n\021discourse_con"
    "text\030\003 \001(\0132-.speechly.moderation.v1beta1"
    ".DiscourseContext\022\025\n\rlanguage_code\030\004 \001(\t"
    "\022\030\n\020audio_context_id\030\005 \001(\t\"V\n\026TextModera"
    "tionResponse\022<\n\006labels\030\001 \003(\0132,.speechly."
    "moderation.v1beta1.ModerationLabel\"\204\001\n\026A"
    "udioModerationRequest\022D\n\006config\030\001 \001(\01322."
    "speechly.moderation.v1beta1.AudioModerat"
    "ionConfigH\000\022\017\n\005audio\030\002 \001(\014H\000B\023\n\021streamin"
    "g_request\"[\n\027AudioModerationResponse\022@\n\010"
    "segments\030\001 \003(\0132..speechly.moderation.v1b"
    "eta1.ModerationSegment\"\215\001\n\037StreamingAudi"
    "oModerationRequest\022D\n\006config\030\001 \001(\01322.spe"
    "echly.moderation.v1beta1.AudioModeration"
    "ConfigH\000\022\017\n\005audio\030\002 \001(\014H\000B\023\n\021streaming_r"
    "equest\"c\n StreamingAudioModerationRespon"
    "se\022\?\n\007segment\030\001 \001(\0132..speechly.moderatio"
    "n.v1beta1.ModerationSegment2\250\003\n\rModerati"
    "onAPI\022~\n\017AudioModeration\0223.speechly.mode"
    "ration.v1beta1.AudioModerationRequest\0324."
    "speechly.moderation.v1beta1.AudioModerat"
    "ionResponse(\001\022\233\001\n\030StreamingAudioModerati"
    "on\022<.speechly.moderation.v1beta1.Streami"
    "ngAudioModerationRequest\032=.speechly.mode"
    "ration.v1beta1.StreamingAudioModerationR"
    "esponse(\0010\001\022y\n\016TextModeration\0222.speechly"
    ".moderation.v1beta1.TextModerationReques"
    "t\0323.speechly.moderation.v1beta1.TextMode"
    "rationResponseB\241\001\n\037com.speechly.moderati"
    "on.v1beta1B\022ModerationApiProtoP\001Z&speech"
    "ly/moderation/v1beta1;sluv1beta1\242\002\003SMX\252\002"
    "\033Speechly.Moderation.V1Beta1\312\002\033Speechly\\"
    "Moderation\\V1Beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_deps[1] =
    {
        &::descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_2eproto,
};
static ::absl::once_flag descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto = {
    false,
    false,
    1466,
    descriptor_table_protodef_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto,
    "speechly/moderation/v1beta1/moderation_api.proto",
    &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once,
    descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_deps,
    1,
    6,
    schemas,
    file_default_instances,
    TableStruct_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto::offsets,
    file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto,
    file_level_enum_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto,
    file_level_service_descriptors_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto(&descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto);
namespace speechly {
namespace moderation {
namespace v1beta1 {
// ===================================================================

class TextModerationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TextModerationRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_._has_bits_);
  static const ::speechly::moderation::v1beta1::DiscourseContext& discourse_context(const TextModerationRequest* msg);
  static void set_has_discourse_context(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::speechly::moderation::v1beta1::DiscourseContext& TextModerationRequest::_Internal::discourse_context(const TextModerationRequest* msg) {
  return *msg->_impl_.discourse_context_;
}
void TextModerationRequest::clear_discourse_context() {
  if (_impl_.discourse_context_ != nullptr) _impl_.discourse_context_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TextModerationRequest::TextModerationRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.TextModerationRequest)
}
TextModerationRequest::TextModerationRequest(const TextModerationRequest& from) : ::google::protobuf::Message() {
  TextModerationRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_id_){},
      decltype(_impl_.text_){},
      decltype(_impl_.language_code_){},
      decltype(_impl_.audio_context_id_){},
      decltype(_impl_.discourse_context_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language_code().empty()) {
    _this->_impl_.language_code_.Set(from._internal_language_code(), _this->GetArenaForAllocation());
  }
  _impl_.audio_context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_context_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_context_id().empty()) {
    _this->_impl_.audio_context_id_.Set(from._internal_audio_context_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.discourse_context_ = new ::speechly::moderation::v1beta1::DiscourseContext(*from._impl_.discourse_context_);
  }

  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.TextModerationRequest)
}
inline void TextModerationRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_id_){},
      decltype(_impl_.text_){},
      decltype(_impl_.language_code_){},
      decltype(_impl_.audio_context_id_){},
      decltype(_impl_.discourse_context_){nullptr},
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_context_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TextModerationRequest::~TextModerationRequest() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.TextModerationRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TextModerationRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.text_.Destroy();
  _impl_.language_code_.Destroy();
  _impl_.audio_context_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.discourse_context_;
}
void TextModerationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TextModerationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.TextModerationRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.language_code_.ClearToEmpty();
  _impl_.audio_context_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.discourse_context_ != nullptr);
    _impl_.discourse_context_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TextModerationRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 99, 2> TextModerationRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TextModerationRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string model_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.model_id_)}},
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.text_)}},
    // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.discourse_context_)}},
    // string language_code = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.language_code_)}},
    // string audio_context_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.audio_context_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string model_id = 1;
    {PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.model_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
    {PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.discourse_context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string language_code = 4;
    {PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.language_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string audio_context_id = 5;
    {PROTOBUF_FIELD_OFFSET(TextModerationRequest, _impl_.audio_context_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::moderation::v1beta1::DiscourseContext>()},
  }}, {{
    "\61\10\4\0\15\20\0\0"
    "speechly.moderation.v1beta1.TextModerationRequest"
    "model_id"
    "text"
    "language_code"
    "audio_context_id"
  }},
};

::uint8_t* TextModerationRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.TextModerationRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    const std::string& _s = this->_internal_model_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.moderation.v1beta1.TextModerationRequest.model_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.moderation.v1beta1.TextModerationRequest.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::discourse_context(this),
        _Internal::discourse_context(this).GetCachedSize(), target, stream);
  }

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    const std::string& _s = this->_internal_language_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.moderation.v1beta1.TextModerationRequest.language_code");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string audio_context_id = 5;
  if (!this->_internal_audio_context_id().empty()) {
    const std::string& _s = this->_internal_audio_context_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.moderation.v1beta1.TextModerationRequest.audio_context_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.TextModerationRequest)
  return target;
}

::size_t TextModerationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.TextModerationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_model_id());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_language_code());
  }

  // string audio_context_id = 5;
  if (!this->_internal_audio_context_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_audio_context_id());
  }

  // .speechly.moderation.v1beta1.DiscourseContext discourse_context = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.discourse_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TextModerationRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TextModerationRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*TextModerationRequest::GetClassData() const { return &_class_data_; }


void TextModerationRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TextModerationRequest*>(&to_msg);
  auto& from = static_cast<const TextModerationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.TextModerationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_language_code().empty()) {
    _this->_internal_set_language_code(from._internal_language_code());
  }
  if (!from._internal_audio_context_id().empty()) {
    _this->_internal_set_audio_context_id(from._internal_audio_context_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_discourse_context()->::speechly::moderation::v1beta1::DiscourseContext::MergeFrom(
        from._internal_discourse_context());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TextModerationRequest::CopyFrom(const TextModerationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.TextModerationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TextModerationRequest::IsInitialized() const {
  return true;
}

void TextModerationRequest::InternalSwap(TextModerationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_id_, lhs_arena,
                                       &other->_impl_.model_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.language_code_, lhs_arena,
                                       &other->_impl_.language_code_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_context_id_, lhs_arena,
                                       &other->_impl_.audio_context_id_, rhs_arena);
  swap(_impl_.discourse_context_, other->_impl_.discourse_context_);
}

::google::protobuf::Metadata TextModerationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[0]);
}
// ===================================================================

class TextModerationResponse::_Internal {
 public:
};

void TextModerationResponse::clear_labels() {
  _internal_mutable_labels()->Clear();
}
TextModerationResponse::TextModerationResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.TextModerationResponse)
}
TextModerationResponse::TextModerationResponse(const TextModerationResponse& from) : ::google::protobuf::Message() {
  TextModerationResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){from._impl_.labels_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.TextModerationResponse)
}
inline void TextModerationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TextModerationResponse::~TextModerationResponse() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.TextModerationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TextModerationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.~RepeatedPtrField();
}
void TextModerationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TextModerationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.TextModerationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_labels()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TextModerationResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TextModerationResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TextModerationResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TextModerationResponse, _impl_.labels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 1;
    {PROTOBUF_FIELD_OFFSET(TextModerationResponse, _impl_.labels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::moderation::v1beta1::ModerationLabel>()},
  }}, {{
  }},
};

::uint8_t* TextModerationResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.TextModerationResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_labels_size()); i < n; i++) {
    const auto& repfield = this->_internal_labels().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.TextModerationResponse)
  return target;
}

::size_t TextModerationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.TextModerationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.moderation.v1beta1.ModerationLabel labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->_internal_labels()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TextModerationResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TextModerationResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*TextModerationResponse::GetClassData() const { return &_class_data_; }


void TextModerationResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TextModerationResponse*>(&to_msg);
  auto& from = static_cast<const TextModerationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.TextModerationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_labels()->MergeFrom(from._internal_labels());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TextModerationResponse::CopyFrom(const TextModerationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.TextModerationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TextModerationResponse::IsInitialized() const {
  return true;
}

void TextModerationResponse::InternalSwap(TextModerationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
}

::google::protobuf::Metadata TextModerationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[1]);
}
// ===================================================================

class AudioModerationRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::AudioModerationRequest, _impl_._oneof_case_);
  static const ::speechly::moderation::v1beta1::AudioModerationConfig& config(const AudioModerationRequest* msg);
};

const ::speechly::moderation::v1beta1::AudioModerationConfig& AudioModerationRequest::_Internal::config(const AudioModerationRequest* msg) {
  return *msg->_impl_.streaming_request_.config_;
}
void AudioModerationRequest::set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_request();
  if (config) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    _impl_.streaming_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.AudioModerationRequest.config)
}
void AudioModerationRequest::clear_config() {
  if (streaming_request_case() == kConfig) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.streaming_request_.config_;
    }
    clear_has_streaming_request();
  }
}
AudioModerationRequest::AudioModerationRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.AudioModerationRequest)
}
AudioModerationRequest::AudioModerationRequest(const AudioModerationRequest& from) : ::google::protobuf::Message() {
  AudioModerationRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.streaming_request_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kConfig: {
      _this->_internal_mutable_config()->::speechly::moderation::v1beta1::AudioModerationConfig::MergeFrom(
          from._internal_config());
      break;
    }
    case kAudio: {
      _this->_internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.AudioModerationRequest)
}
inline void AudioModerationRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.streaming_request_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_streaming_request();
}
AudioModerationRequest::~AudioModerationRequest() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.AudioModerationRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioModerationRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}
void AudioModerationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioModerationRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:speechly.moderation.v1beta1.AudioModerationRequest)
  switch (streaming_request_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.streaming_request_.config_;
      }
      break;
    }
    case kAudio: {
      _impl_.streaming_request_.audio_.Destroy();
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


PROTOBUF_NOINLINE void AudioModerationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.AudioModerationRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AudioModerationRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 0, 2> AudioModerationRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AudioModerationRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
    {PROTOBUF_FIELD_OFFSET(AudioModerationRequest, _impl_.streaming_request_.config_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes audio = 2;
    {PROTOBUF_FIELD_OFFSET(AudioModerationRequest, _impl_.streaming_request_.audio_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::moderation::v1beta1::AudioModerationConfig>()},
  }}, {{
  }},
};

::uint8_t* AudioModerationRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.AudioModerationRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (streaming_request_case()) {
    case kConfig: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::config(this),
          _Internal::config(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudio: {
      const std::string& _s = this->_internal_audio();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.AudioModerationRequest)
  return target;
}

::size_t AudioModerationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.AudioModerationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.streaming_request_.config_);
      break;
    }
    // bytes audio = 2;
    case kAudio: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AudioModerationRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AudioModerationRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*AudioModerationRequest::GetClassData() const { return &_class_data_; }


void AudioModerationRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AudioModerationRequest*>(&to_msg);
  auto& from = static_cast<const AudioModerationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.AudioModerationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kConfig: {
      _this->_internal_mutable_config()->::speechly::moderation::v1beta1::AudioModerationConfig::MergeFrom(
          from._internal_config());
      break;
    }
    case kAudio: {
      _this->_internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioModerationRequest::CopyFrom(const AudioModerationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.AudioModerationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioModerationRequest::IsInitialized() const {
  return true;
}

void AudioModerationRequest::InternalSwap(AudioModerationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.streaming_request_, other->_impl_.streaming_request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AudioModerationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[2]);
}
// ===================================================================

class AudioModerationResponse::_Internal {
 public:
};

void AudioModerationResponse::clear_segments() {
  _internal_mutable_segments()->Clear();
}
AudioModerationResponse::AudioModerationResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.AudioModerationResponse)
}
AudioModerationResponse::AudioModerationResponse(const AudioModerationResponse& from) : ::google::protobuf::Message() {
  AudioModerationResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.AudioModerationResponse)
}
inline void AudioModerationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AudioModerationResponse::~AudioModerationResponse() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.AudioModerationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioModerationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
}
void AudioModerationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AudioModerationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.AudioModerationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_segments()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AudioModerationResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AudioModerationResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AudioModerationResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .speechly.moderation.v1beta1.ModerationSegment segments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AudioModerationResponse, _impl_.segments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .speechly.moderation.v1beta1.ModerationSegment segments = 1;
    {PROTOBUF_FIELD_OFFSET(AudioModerationResponse, _impl_.segments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::moderation::v1beta1::ModerationSegment>()},
  }}, {{
  }},
};

::uint8_t* AudioModerationResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.AudioModerationResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .speechly.moderation.v1beta1.ModerationSegment segments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.AudioModerationResponse)
  return target;
}

::size_t AudioModerationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.AudioModerationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.moderation.v1beta1.ModerationSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_internal_segments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AudioModerationResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AudioModerationResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*AudioModerationResponse::GetClassData() const { return &_class_data_; }


void AudioModerationResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AudioModerationResponse*>(&to_msg);
  auto& from = static_cast<const AudioModerationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.AudioModerationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_segments()->MergeFrom(from._internal_segments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioModerationResponse::CopyFrom(const AudioModerationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.AudioModerationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioModerationResponse::IsInitialized() const {
  return true;
}

void AudioModerationResponse::InternalSwap(AudioModerationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
}

::google::protobuf::Metadata AudioModerationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[3]);
}
// ===================================================================

class StreamingAudioModerationRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::speechly::moderation::v1beta1::StreamingAudioModerationRequest, _impl_._oneof_case_);
  static const ::speechly::moderation::v1beta1::AudioModerationConfig& config(const StreamingAudioModerationRequest* msg);
};

const ::speechly::moderation::v1beta1::AudioModerationConfig& StreamingAudioModerationRequest::_Internal::config(const StreamingAudioModerationRequest* msg) {
  return *msg->_impl_.streaming_request_.config_;
}
void StreamingAudioModerationRequest::set_allocated_config(::speechly::moderation::v1beta1::AudioModerationConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_request();
  if (config) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    _impl_.streaming_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.moderation.v1beta1.StreamingAudioModerationRequest.config)
}
void StreamingAudioModerationRequest::clear_config() {
  if (streaming_request_case() == kConfig) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.streaming_request_.config_;
    }
    clear_has_streaming_request();
  }
}
StreamingAudioModerationRequest::StreamingAudioModerationRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
}
StreamingAudioModerationRequest::StreamingAudioModerationRequest(const StreamingAudioModerationRequest& from) : ::google::protobuf::Message() {
  StreamingAudioModerationRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.streaming_request_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kConfig: {
      _this->_internal_mutable_config()->::speechly::moderation::v1beta1::AudioModerationConfig::MergeFrom(
          from._internal_config());
      break;
    }
    case kAudio: {
      _this->_internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
}
inline void StreamingAudioModerationRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.streaming_request_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_streaming_request();
}
StreamingAudioModerationRequest::~StreamingAudioModerationRequest() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamingAudioModerationRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}
void StreamingAudioModerationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamingAudioModerationRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  switch (streaming_request_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.streaming_request_.config_;
      }
      break;
    }
    case kAudio: {
      _impl_.streaming_request_.audio_.Destroy();
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


PROTOBUF_NOINLINE void StreamingAudioModerationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamingAudioModerationRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 0, 2> StreamingAudioModerationRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamingAudioModerationRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
    {PROTOBUF_FIELD_OFFSET(StreamingAudioModerationRequest, _impl_.streaming_request_.config_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes audio = 2;
    {PROTOBUF_FIELD_OFFSET(StreamingAudioModerationRequest, _impl_.streaming_request_.audio_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::moderation::v1beta1::AudioModerationConfig>()},
  }}, {{
  }},
};

::uint8_t* StreamingAudioModerationRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (streaming_request_case()) {
    case kConfig: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::config(this),
          _Internal::config(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudio: {
      const std::string& _s = this->_internal_audio();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  return target;
}

::size_t StreamingAudioModerationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .speechly.moderation.v1beta1.AudioModerationConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.streaming_request_.config_);
      break;
    }
    // bytes audio = 2;
    case kAudio: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamingAudioModerationRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    StreamingAudioModerationRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*StreamingAudioModerationRequest::GetClassData() const { return &_class_data_; }


void StreamingAudioModerationRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamingAudioModerationRequest*>(&to_msg);
  auto& from = static_cast<const StreamingAudioModerationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kConfig: {
      _this->_internal_mutable_config()->::speechly::moderation::v1beta1::AudioModerationConfig::MergeFrom(
          from._internal_config());
      break;
    }
    case kAudio: {
      _this->_internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingAudioModerationRequest::CopyFrom(const StreamingAudioModerationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.StreamingAudioModerationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamingAudioModerationRequest::IsInitialized() const {
  return true;
}

void StreamingAudioModerationRequest::InternalSwap(StreamingAudioModerationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.streaming_request_, other->_impl_.streaming_request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata StreamingAudioModerationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[4]);
}
// ===================================================================

class StreamingAudioModerationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamingAudioModerationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamingAudioModerationResponse, _impl_._has_bits_);
  static const ::speechly::moderation::v1beta1::ModerationSegment& segment(const StreamingAudioModerationResponse* msg);
  static void set_has_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::speechly::moderation::v1beta1::ModerationSegment& StreamingAudioModerationResponse::_Internal::segment(const StreamingAudioModerationResponse* msg) {
  return *msg->_impl_.segment_;
}
void StreamingAudioModerationResponse::clear_segment() {
  if (_impl_.segment_ != nullptr) _impl_.segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StreamingAudioModerationResponse::StreamingAudioModerationResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
}
StreamingAudioModerationResponse::StreamingAudioModerationResponse(const StreamingAudioModerationResponse& from) : ::google::protobuf::Message() {
  StreamingAudioModerationResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.segment_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.segment_ = new ::speechly::moderation::v1beta1::ModerationSegment(*from._impl_.segment_);
  }

  // @@protoc_insertion_point(copy_constructor:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
}
inline void StreamingAudioModerationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.segment_){nullptr},
  };
}
StreamingAudioModerationResponse::~StreamingAudioModerationResponse() {
  // @@protoc_insertion_point(destructor:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamingAudioModerationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.segment_;
}
void StreamingAudioModerationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void StreamingAudioModerationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.segment_ != nullptr);
    _impl_.segment_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamingAudioModerationResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StreamingAudioModerationResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamingAudioModerationResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamingAudioModerationResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .speechly.moderation.v1beta1.ModerationSegment segment = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StreamingAudioModerationResponse, _impl_.segment_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .speechly.moderation.v1beta1.ModerationSegment segment = 1;
    {PROTOBUF_FIELD_OFFSET(StreamingAudioModerationResponse, _impl_.segment_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::moderation::v1beta1::ModerationSegment>()},
  }}, {{
  }},
};

::uint8_t* StreamingAudioModerationResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .speechly.moderation.v1beta1.ModerationSegment segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::segment(this),
        _Internal::segment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
  return target;
}

::size_t StreamingAudioModerationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.moderation.v1beta1.ModerationSegment segment = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.segment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamingAudioModerationResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    StreamingAudioModerationResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*StreamingAudioModerationResponse::GetClassData() const { return &_class_data_; }


void StreamingAudioModerationResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamingAudioModerationResponse*>(&to_msg);
  auto& from = static_cast<const StreamingAudioModerationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_segment()->::speechly::moderation::v1beta1::ModerationSegment::MergeFrom(
        from._internal_segment());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingAudioModerationResponse::CopyFrom(const StreamingAudioModerationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.moderation.v1beta1.StreamingAudioModerationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamingAudioModerationResponse::IsInitialized() const {
  return true;
}

void StreamingAudioModerationResponse::InternalSwap(StreamingAudioModerationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.segment_, other->_impl_.segment_);
}

::google::protobuf::Metadata StreamingAudioModerationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_getter, &descriptor_table_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto_once,
      file_level_metadata_speechly_2fmoderation_2fv1beta1_2fmoderation_5fapi_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace moderation
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
