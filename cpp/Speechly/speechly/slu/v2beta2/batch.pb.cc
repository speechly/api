// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v2beta2/batch.proto

#include "speechly/slu/v2beta2/batch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace slu {
namespace v2beta2 {
constexpr BatchTasks::BatchTasks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transcribe_(false)
  , translate_(false){}
struct BatchTasksDefaultTypeInternal {
  constexpr BatchTasksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchTasksDefaultTypeInternal() {}
  union {
    BatchTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchTasksDefaultTypeInternal _BatchTasks_default_instance_;
constexpr BatchOutput::BatchOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_(false)
  , lexical_(false)
  , tokenized_(false){}
struct BatchOutputDefaultTypeInternal {
  constexpr BatchOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchOutputDefaultTypeInternal() {}
  union {
    BatchOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchOutputDefaultTypeInternal _BatchOutput_default_instance_;
constexpr BatchConfig::BatchConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_codes_()
  , options_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BatchConfigDefaultTypeInternal {
  constexpr BatchConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchConfigDefaultTypeInternal() {}
  union {
    BatchConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchConfigDefaultTypeInternal _BatchConfig_default_instance_;
constexpr ProcessAudioSourceRequestItem::ProcessAudioSourceRequestItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destination_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , completion_webhook_(nullptr){}
struct ProcessAudioSourceRequestItemDefaultTypeInternal {
  constexpr ProcessAudioSourceRequestItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessAudioSourceRequestItemDefaultTypeInternal() {}
  union {
    ProcessAudioSourceRequestItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessAudioSourceRequestItemDefaultTypeInternal _ProcessAudioSourceRequestItem_default_instance_;
constexpr Operation::Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destination_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_(nullptr)
  , status_(0)

  , error_code_(0)
{}
struct OperationDefaultTypeInternal {
  constexpr OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationDefaultTypeInternal _Operation_default_instance_;
constexpr OperationResult::OperationResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tokens_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct OperationResultDefaultTypeInternal {
  constexpr OperationResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationResultDefaultTypeInternal() {}
  union {
    OperationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationResultDefaultTypeInternal _OperationResult_default_instance_;
constexpr Token::Token(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0)
  , start_time_(0)
  , end_time_(0){}
struct TokenDefaultTypeInternal {
  constexpr TokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenDefaultTypeInternal _Token_default_instance_;
constexpr Option::Option(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OptionDefaultTypeInternal {
  constexpr OptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OptionDefaultTypeInternal() {}
  union {
    Option _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OptionDefaultTypeInternal _Option_default_instance_;
constexpr HttpResource_Header::HttpResource_Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HttpResource_HeaderDefaultTypeInternal {
  constexpr HttpResource_HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HttpResource_HeaderDefaultTypeInternal() {}
  union {
    HttpResource_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HttpResource_HeaderDefaultTypeInternal _HttpResource_Header_default_instance_;
constexpr HttpResource::HttpResource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , method_(0)
{}
struct HttpResourceDefaultTypeInternal {
  constexpr HttpResourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HttpResourceDefaultTypeInternal() {}
  union {
    HttpResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HttpResourceDefaultTypeInternal _HttpResource_default_instance_;
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchTasks, transcribe_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchTasks, translate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, display_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, lexical_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, tokenized_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, model_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, language_codes_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, batch_reference_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, source_url_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, destination_url_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, completion_webhook_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, reference_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, id_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, reference_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, batch_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, batch_reference_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, status_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, language_code_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, result_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, duration_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, error_code_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, error_description_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, source_url_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, destination_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, type_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, text_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, tokens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, token_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, index_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, start_time_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Option, key_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Option, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource_Header, name_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource_Header, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, url_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, method_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, headers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::slu::v2beta2::BatchTasks)},
  { 7, -1, sizeof(::speechly::slu::v2beta2::BatchOutput)},
  { 15, -1, sizeof(::speechly::slu::v2beta2::BatchConfig)},
  { 24, -1, sizeof(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem)},
  { 34, -1, sizeof(::speechly::slu::v2beta2::Operation)},
  { 52, -1, sizeof(::speechly::slu::v2beta2::OperationResult)},
  { 60, -1, sizeof(::speechly::slu::v2beta2::Token)},
  { 69, -1, sizeof(::speechly::slu::v2beta2::Option)},
  { 76, -1, sizeof(::speechly::slu::v2beta2::HttpResource_Header)},
  { 83, -1, sizeof(::speechly::slu::v2beta2::HttpResource)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_BatchTasks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_BatchOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_BatchConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_ProcessAudioSourceRequestItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_OperationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_Option_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_HttpResource_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_HttpResource_default_instance_),
};

const char descriptor_table_protodef_speechly_2fslu_2fv2beta2_2fbatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n speechly/slu/v2beta2/batch.proto\022\024spee"
  "chly.slu.v2beta2\032\036google/protobuf/durati"
  "on.proto\"3\n\nBatchTasks\022\022\n\ntranscribe\030\001 \001"
  "(\010\022\021\n\ttranslate\030\002 \001(\010\"B\n\013BatchOutput\022\017\n\007"
  "display\030\001 \001(\010\022\017\n\007lexical\030\002 \001(\010\022\021\n\ttokeni"
  "zed\030\003 \001(\010\"\177\n\013BatchConfig\022\020\n\010model_id\030\001 \001"
  "(\t\022\026\n\016language_codes\030\002 \003(\t\022\027\n\017batch_refe"
  "rence\030\004 \001(\t\022-\n\007options\030\005 \003(\0132\034.speechly."
  "slu.v2beta2.Option\"\262\001\n\035ProcessAudioSourc"
  "eRequestItem\022\022\n\nsource_url\030\001 \001(\t\022\027\n\017dest"
  "ination_url\030\002 \001(\t\022>\n\022completion_webhook\030"
  "\003 \001(\0132\".speechly.slu.v2beta2.HttpResourc"
  "e\022\021\n\treference\030\004 \001(\t\022\021\n\tdevice_id\030\005 \001(\t\""
  "\301\005\n\tOperation\022\n\n\002id\030\001 \001(\t\022\021\n\treference\030\002"
  " \001(\t\022\020\n\010batch_id\030\020 \001(\t\022\027\n\017batch_referenc"
  "e\030\021 \001(\t\0226\n\006status\030\003 \001(\0162&.speechly.slu.v"
  "2beta2.Operation.Status\022\025\n\rlanguage_code"
  "\030\004 \001(\t\022\016\n\006app_id\030\005 \001(\t\0225\n\006result\030\006 \003(\0132%"
  ".speechly.slu.v2beta2.OperationResult\022+\n"
  "\010duration\030\007 \001(\0132\031.google.protobuf.Durati"
  "on\022=\n\nerror_code\030\022 \001(\0162).speechly.slu.v2"
  "beta2.Operation.ErrorCode\022\031\n\021error_descr"
  "iption\030\023 \001(\t\022\022\n\nsource_url\030\024 \001(\t\022\027\n\017dest"
  "ination_url\030\025 \001(\t\"W\n\006Status\022\026\n\022STATUS_UN"
  "SPECIFIED\020\000\022\022\n\016STATUS_PENDING\020\001\022\017\n\013STATU"
  "S_DONE\020\002\022\020\n\014STATUS_ERROR\020\003\"\306\001\n\tErrorCode"
  "\022\025\n\021ERROR_UNSPECIFIED\020\000\022\036\n\032ERROR_UNSUPPO"
  "RTED_LANGUAGE\020\001\022\022\n\016ERROR_INTERNAL\020\002\022\034\n\030E"
  "RROR_INVALID_PARAMETERS\020\003\022\030\n\024ERROR_INVAL"
  "ID_SOURCE\020\004\022\035\n\031ERROR_INVALID_DESTINATION"
  "\020\005\022\027\n\023ERROR_INVALID_AUDIO\020\006\"\250\002\n\017Operatio"
  "nResult\022>\n\004type\030\001 \001(\01620.speechly.slu.v2b"
  "eta2.OperationResult.ResultType\022\014\n\004text\030"
  "\002 \001(\t\022+\n\006tokens\030\003 \003(\0132\033.speechly.slu.v2b"
  "eta2.Token\"\231\001\n\nResultType\022\033\n\027RESULT_TYPE"
  "_UNSPECIFIED\020\000\022\"\n\036RESULT_TYPE_TRANSCRIPT"
  "_LEXICAL\020\001\022\"\n\036RESULT_TYPE_TRANSCRIPT_DIS"
  "PLAY\020\002\022&\n\"RESULT_TYPE_TRANSCRIPT_TRANSLA"
  "TION\020\003\"K\n\005Token\022\r\n\005token\030\001 \001(\t\022\r\n\005index\030"
  "\002 \001(\005\022\022\n\nstart_time\030\003 \001(\005\022\020\n\010end_time\030\004 "
  "\001(\005\"$\n\006Option\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \003("
  "\t\"\214\002\n\014HttpResource\022\013\n\003url\030\001 \001(\t\0229\n\006metho"
  "d\030\002 \001(\0162).speechly.slu.v2beta2.HttpResou"
  "rce.Method\022:\n\007headers\030\003 \003(\0132).speechly.s"
  "lu.v2beta2.HttpResource.Header\032%\n\006Header"
  "\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"Q\n\006Method\022"
  "\026\n\022METHOD_UNSPECIFIED\020\000\022\016\n\nMETHOD_GET\020\001\022"
  "\017\n\013METHOD_POST\020\002\022\016\n\nMETHOD_PUT\020\003B}\n\030com."
  "speechly.slu.v2beta2B\nBatchProtoP\001Z\037spee"
  "chly/slu/v2beta2;sluv2beta2\242\002\003SSX\252\002\024Spee"
  "chly.Slu.V2Beta2\312\002\024Speechly\\Slu\\V2Beta2b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto = {
  false, false, 2047, descriptor_table_protodef_speechly_2fslu_2fv2beta2_2fbatch_2eproto, "speechly/slu/v2beta2/batch.proto", 
  &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once, descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto::offsets,
  file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto, file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto, file_level_service_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter() {
  return &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fslu_2fv2beta2_2fbatch_2eproto(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
namespace speechly {
namespace slu {
namespace v2beta2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[0];
}
bool Operation_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Operation_Status Operation::STATUS_UNSPECIFIED;
constexpr Operation_Status Operation::STATUS_PENDING;
constexpr Operation_Status Operation::STATUS_DONE;
constexpr Operation_Status Operation::STATUS_ERROR;
constexpr Operation_Status Operation::Status_MIN;
constexpr Operation_Status Operation::Status_MAX;
constexpr int Operation::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[1];
}
bool Operation_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Operation_ErrorCode Operation::ERROR_UNSPECIFIED;
constexpr Operation_ErrorCode Operation::ERROR_UNSUPPORTED_LANGUAGE;
constexpr Operation_ErrorCode Operation::ERROR_INTERNAL;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_PARAMETERS;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_SOURCE;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_DESTINATION;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_AUDIO;
constexpr Operation_ErrorCode Operation::ErrorCode_MIN;
constexpr Operation_ErrorCode Operation::ErrorCode_MAX;
constexpr int Operation::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationResult_ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[2];
}
bool OperationResult_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_UNSPECIFIED;
constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_TRANSCRIPT_LEXICAL;
constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_TRANSCRIPT_DISPLAY;
constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_TRANSCRIPT_TRANSLATION;
constexpr OperationResult_ResultType OperationResult::ResultType_MIN;
constexpr OperationResult_ResultType OperationResult::ResultType_MAX;
constexpr int OperationResult::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HttpResource_Method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[3];
}
bool HttpResource_Method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HttpResource_Method HttpResource::METHOD_UNSPECIFIED;
constexpr HttpResource_Method HttpResource::METHOD_GET;
constexpr HttpResource_Method HttpResource::METHOD_POST;
constexpr HttpResource_Method HttpResource::METHOD_PUT;
constexpr HttpResource_Method HttpResource::Method_MIN;
constexpr HttpResource_Method HttpResource::Method_MAX;
constexpr int HttpResource::Method_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class BatchTasks::_Internal {
 public:
};

BatchTasks::BatchTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.BatchTasks)
}
BatchTasks::BatchTasks(const BatchTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transcribe_, &from.transcribe_,
    static_cast<size_t>(reinterpret_cast<char*>(&translate_) -
    reinterpret_cast<char*>(&transcribe_)) + sizeof(translate_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.BatchTasks)
}

inline void BatchTasks::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transcribe_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&translate_) -
    reinterpret_cast<char*>(&transcribe_)) + sizeof(translate_));
}

BatchTasks::~BatchTasks() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.BatchTasks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchTasks::ArenaDtor(void* object) {
  BatchTasks* _this = reinterpret_cast< BatchTasks* >(object);
  (void)_this;
}
void BatchTasks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchTasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.BatchTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&transcribe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&translate_) -
      reinterpret_cast<char*>(&transcribe_)) + sizeof(translate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTasks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool transcribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          transcribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool translate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          translate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchTasks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.BatchTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool transcribe = 1;
  if (this->_internal_transcribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_transcribe(), target);
  }

  // bool translate = 2;
  if (this->_internal_translate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_translate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.BatchTasks)
  return target;
}

size_t BatchTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.BatchTasks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool transcribe = 1;
  if (this->_internal_transcribe() != 0) {
    total_size += 1 + 1;
  }

  // bool translate = 2;
  if (this->_internal_translate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchTasks::GetClassData() const { return &_class_data_; }

void BatchTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchTasks *>(to)->MergeFrom(
      static_cast<const BatchTasks &>(from));
}


void BatchTasks::MergeFrom(const BatchTasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.BatchTasks)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_transcribe() != 0) {
    _internal_set_transcribe(from._internal_transcribe());
  }
  if (from._internal_translate() != 0) {
    _internal_set_translate(from._internal_translate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTasks::CopyFrom(const BatchTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.BatchTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTasks::IsInitialized() const {
  return true;
}

void BatchTasks::InternalSwap(BatchTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchTasks, translate_)
      + sizeof(BatchTasks::translate_)
      - PROTOBUF_FIELD_OFFSET(BatchTasks, transcribe_)>(
          reinterpret_cast<char*>(&transcribe_),
          reinterpret_cast<char*>(&other->transcribe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTasks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[0]);
}

// ===================================================================

class BatchOutput::_Internal {
 public:
};

BatchOutput::BatchOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.BatchOutput)
}
BatchOutput::BatchOutput(const BatchOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&display_, &from.display_,
    static_cast<size_t>(reinterpret_cast<char*>(&tokenized_) -
    reinterpret_cast<char*>(&display_)) + sizeof(tokenized_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.BatchOutput)
}

inline void BatchOutput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&display_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tokenized_) -
    reinterpret_cast<char*>(&display_)) + sizeof(tokenized_));
}

BatchOutput::~BatchOutput() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.BatchOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchOutput::ArenaDtor(void* object) {
  BatchOutput* _this = reinterpret_cast< BatchOutput* >(object);
  (void)_this;
}
void BatchOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.BatchOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&display_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokenized_) -
      reinterpret_cast<char*>(&display_)) + sizeof(tokenized_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool display = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lexical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lexical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tokenized = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tokenized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.BatchOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool display = 1;
  if (this->_internal_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_display(), target);
  }

  // bool lexical = 2;
  if (this->_internal_lexical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_lexical(), target);
  }

  // bool tokenized = 3;
  if (this->_internal_tokenized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tokenized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.BatchOutput)
  return target;
}

size_t BatchOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.BatchOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool display = 1;
  if (this->_internal_display() != 0) {
    total_size += 1 + 1;
  }

  // bool lexical = 2;
  if (this->_internal_lexical() != 0) {
    total_size += 1 + 1;
  }

  // bool tokenized = 3;
  if (this->_internal_tokenized() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchOutput::GetClassData() const { return &_class_data_; }

void BatchOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchOutput *>(to)->MergeFrom(
      static_cast<const BatchOutput &>(from));
}


void BatchOutput::MergeFrom(const BatchOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.BatchOutput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_display() != 0) {
    _internal_set_display(from._internal_display());
  }
  if (from._internal_lexical() != 0) {
    _internal_set_lexical(from._internal_lexical());
  }
  if (from._internal_tokenized() != 0) {
    _internal_set_tokenized(from._internal_tokenized());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchOutput::CopyFrom(const BatchOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.BatchOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchOutput::IsInitialized() const {
  return true;
}

void BatchOutput::InternalSwap(BatchOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchOutput, tokenized_)
      + sizeof(BatchOutput::tokenized_)
      - PROTOBUF_FIELD_OFFSET(BatchOutput, display_)>(
          reinterpret_cast<char*>(&display_),
          reinterpret_cast<char*>(&other->display_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[1]);
}

// ===================================================================

class BatchConfig::_Internal {
 public:
};

BatchConfig::BatchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  language_codes_(arena),
  options_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.BatchConfig)
}
BatchConfig::BatchConfig(const BatchConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      language_codes_(from.language_codes_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  batch_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_reference().empty()) {
    batch_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_batch_reference(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.BatchConfig)
}

inline void BatchConfig::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
batch_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BatchConfig::~BatchConfig() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.BatchConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatchConfig::ArenaDtor(void* object) {
  BatchConfig* _this = reinterpret_cast< BatchConfig* >(object);
  (void)_this;
}
void BatchConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.BatchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_codes_.Clear();
  options_.Clear();
  model_id_.ClearToEmpty();
  batch_reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.BatchConfig.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string language_codes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_language_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.BatchConfig.language_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string batch_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_batch_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.BatchConfig.batch_reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v2beta2.Option options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.BatchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.BatchConfig.model_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_id(), target);
  }

  // repeated string language_codes = 2;
  for (int i = 0, n = this->_internal_language_codes_size(); i < n; i++) {
    const auto& s = this->_internal_language_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.BatchConfig.language_codes");
    target = stream->WriteString(2, s, target);
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_reference().data(), static_cast<int>(this->_internal_batch_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.BatchConfig.batch_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_batch_reference(), target);
  }

  // repeated .speechly.slu.v2beta2.Option options = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.BatchConfig)
  return target;
}

size_t BatchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.BatchConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string language_codes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(language_codes_.size());
  for (int i = 0, n = language_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      language_codes_.Get(i));
  }

  // repeated .speechly.slu.v2beta2.Option options = 5;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchConfig::GetClassData() const { return &_class_data_; }

void BatchConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchConfig *>(to)->MergeFrom(
      static_cast<const BatchConfig &>(from));
}


void BatchConfig::MergeFrom(const BatchConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.BatchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  language_codes_.MergeFrom(from.language_codes_);
  options_.MergeFrom(from.options_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_batch_reference().empty()) {
    _internal_set_batch_reference(from._internal_batch_reference());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchConfig::CopyFrom(const BatchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.BatchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchConfig::IsInitialized() const {
  return true;
}

void BatchConfig::InternalSwap(BatchConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  language_codes_.InternalSwap(&other->language_codes_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, GetArenaForAllocation(),
      &other->model_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &batch_reference_, GetArenaForAllocation(),
      &other->batch_reference_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[2]);
}

// ===================================================================

class ProcessAudioSourceRequestItem::_Internal {
 public:
  static const ::speechly::slu::v2beta2::HttpResource& completion_webhook(const ProcessAudioSourceRequestItem* msg);
};

const ::speechly::slu::v2beta2::HttpResource&
ProcessAudioSourceRequestItem::_Internal::completion_webhook(const ProcessAudioSourceRequestItem* msg) {
  return *msg->completion_webhook_;
}
ProcessAudioSourceRequestItem::ProcessAudioSourceRequestItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
}
ProcessAudioSourceRequestItem::ProcessAudioSourceRequestItem(const ProcessAudioSourceRequestItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_url().empty()) {
    source_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_url(), 
      GetArenaForAllocation());
  }
  destination_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination_url().empty()) {
    destination_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination_url(), 
      GetArenaForAllocation());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_completion_webhook()) {
    completion_webhook_ = new ::speechly::slu::v2beta2::HttpResource(*from.completion_webhook_);
  } else {
    completion_webhook_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
}

inline void ProcessAudioSourceRequestItem::SharedCtor() {
source_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
destination_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
completion_webhook_ = nullptr;
}

ProcessAudioSourceRequestItem::~ProcessAudioSourceRequestItem() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessAudioSourceRequestItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete completion_webhook_;
}

void ProcessAudioSourceRequestItem::ArenaDtor(void* object) {
  ProcessAudioSourceRequestItem* _this = reinterpret_cast< ProcessAudioSourceRequestItem* >(object);
  (void)_this;
}
void ProcessAudioSourceRequestItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessAudioSourceRequestItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessAudioSourceRequestItem::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_url_.ClearToEmpty();
  destination_url_.ClearToEmpty();
  reference_.ClearToEmpty();
  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && completion_webhook_ != nullptr) {
    delete completion_webhook_;
  }
  completion_webhook_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessAudioSourceRequestItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string source_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_destination_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_completion_webhook(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessAudioSourceRequestItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_url = 1;
  if (!this->_internal_source_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_url().data(), static_cast<int>(this->_internal_source_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_url(), target);
  }

  // string destination_url = 2;
  if (!this->_internal_destination_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_url().data(), static_cast<int>(this->_internal_destination_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination_url(), target);
  }

  // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
  if (this->_internal_has_completion_webhook()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::completion_webhook(this), target, stream);
  }

  // string reference = 4;
  if (!this->_internal_reference().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference(), target);
  }

  // string device_id = 5;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  return target;
}

size_t ProcessAudioSourceRequestItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_url = 1;
  if (!this->_internal_source_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_url());
  }

  // string destination_url = 2;
  if (!this->_internal_destination_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_url());
  }

  // string reference = 4;
  if (!this->_internal_reference().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string device_id = 5;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
  if (this->_internal_has_completion_webhook()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *completion_webhook_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessAudioSourceRequestItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessAudioSourceRequestItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessAudioSourceRequestItem::GetClassData() const { return &_class_data_; }

void ProcessAudioSourceRequestItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessAudioSourceRequestItem *>(to)->MergeFrom(
      static_cast<const ProcessAudioSourceRequestItem &>(from));
}


void ProcessAudioSourceRequestItem::MergeFrom(const ProcessAudioSourceRequestItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_url().empty()) {
    _internal_set_source_url(from._internal_source_url());
  }
  if (!from._internal_destination_url().empty()) {
    _internal_set_destination_url(from._internal_destination_url());
  }
  if (!from._internal_reference().empty()) {
    _internal_set_reference(from._internal_reference());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_completion_webhook()) {
    _internal_mutable_completion_webhook()->::speechly::slu::v2beta2::HttpResource::MergeFrom(from._internal_completion_webhook());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioSourceRequestItem::CopyFrom(const ProcessAudioSourceRequestItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessAudioSourceRequestItem::IsInitialized() const {
  return true;
}

void ProcessAudioSourceRequestItem::InternalSwap(ProcessAudioSourceRequestItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_url_, GetArenaForAllocation(),
      &other->source_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_url_, GetArenaForAllocation(),
      &other->destination_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reference_, GetArenaForAllocation(),
      &other->reference_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, GetArenaForAllocation(),
      &other->device_id_, other->GetArenaForAllocation()
  );
  swap(completion_webhook_, other->completion_webhook_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessAudioSourceRequestItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[3]);
}

// ===================================================================

class Operation::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const Operation* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
Operation::_Internal::duration(const Operation* msg) {
  return *msg->duration_;
}
void Operation::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  result_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArenaForAllocation());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_id().empty()) {
    batch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_batch_id(), 
      GetArenaForAllocation());
  }
  batch_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_reference().empty()) {
    batch_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_batch_reference(), 
      GetArenaForAllocation());
  }
  error_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_description().empty()) {
    error_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_description(), 
      GetArenaForAllocation());
  }
  source_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_url().empty()) {
    source_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_url(), 
      GetArenaForAllocation());
  }
  destination_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination_url().empty()) {
    destination_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.Operation)
}

inline void Operation::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
batch_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
source_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
destination_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(error_code_));
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.Operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete duration_;
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  id_.ClearToEmpty();
  reference_.ClearToEmpty();
  language_code_.ClearToEmpty();
  app_id_.ClearToEmpty();
  batch_id_.ClearToEmpty();
  batch_reference_.ClearToEmpty();
  error_description_.ClearToEmpty();
  source_url_.ClearToEmpty();
  destination_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v2beta2.Operation.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::speechly::slu::v2beta2::Operation_Status>(val));
        } else goto handle_unusual;
        continue;
      // string language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v2beta2.OperationResult result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string batch_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_batch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.batch_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string batch_reference = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_batch_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.batch_reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::speechly::slu::v2beta2::Operation_ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string error_description = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_error_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.error_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_url = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_source_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.source_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_destination_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Operation.destination_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string reference = 2;
  if (!this->_internal_reference().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.reference");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reference(), target);
  }

  // .speechly.slu.v2beta2.Operation.Status status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_code(), target);
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_id(), target);
  }

  // repeated .speechly.slu.v2beta2.OperationResult result = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_result(i), target, stream);
  }

  // .google.protobuf.Duration duration = 7;
  if (this->_internal_has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::duration(this), target, stream);
  }

  // string batch_id = 16;
  if (!this->_internal_batch_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_id().data(), static_cast<int>(this->_internal_batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.batch_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_batch_id(), target);
  }

  // string batch_reference = 17;
  if (!this->_internal_batch_reference().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_reference().data(), static_cast<int>(this->_internal_batch_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.batch_reference");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_batch_reference(), target);
  }

  // .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_error_code(), target);
  }

  // string error_description = 19;
  if (!this->_internal_error_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_description().data(), static_cast<int>(this->_internal_error_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.error_description");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_error_description(), target);
  }

  // string source_url = 20;
  if (!this->_internal_source_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_url().data(), static_cast<int>(this->_internal_source_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.source_url");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_source_url(), target);
  }

  // string destination_url = 21;
  if (!this->_internal_destination_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_url().data(), static_cast<int>(this->_internal_destination_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Operation.destination_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_destination_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.OperationResult result = 6;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string reference = 2;
  if (!this->_internal_reference().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string batch_id = 16;
  if (!this->_internal_batch_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_id());
  }

  // string batch_reference = 17;
  if (!this->_internal_batch_reference().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_reference());
  }

  // string error_description = 19;
  if (!this->_internal_error_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_description());
  }

  // string source_url = 20;
  if (!this->_internal_source_url().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_url());
  }

  // string destination_url = 21;
  if (!this->_internal_destination_url().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_url());
  }

  // .google.protobuf.Duration duration = 7;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .speechly.slu.v2beta2.Operation.Status status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
  if (this->_internal_error_code() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }

void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Operation *>(to)->MergeFrom(
      static_cast<const Operation &>(from));
}


void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_reference().empty()) {
    _internal_set_reference(from._internal_reference());
  }
  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_batch_id().empty()) {
    _internal_set_batch_id(from._internal_batch_id());
  }
  if (!from._internal_batch_reference().empty()) {
    _internal_set_batch_reference(from._internal_batch_reference());
  }
  if (!from._internal_error_description().empty()) {
    _internal_set_error_description(from._internal_error_description());
  }
  if (!from._internal_source_url().empty()) {
    _internal_set_source_url(from._internal_source_url());
  }
  if (!from._internal_destination_url().empty()) {
    _internal_set_destination_url(from._internal_destination_url());
  }
  if (from._internal_has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reference_, GetArenaForAllocation(),
      &other->reference_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, GetArenaForAllocation(),
      &other->language_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &batch_id_, GetArenaForAllocation(),
      &other->batch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &batch_reference_, GetArenaForAllocation(),
      &other->batch_reference_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_description_, GetArenaForAllocation(),
      &other->error_description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_url_, GetArenaForAllocation(),
      &other->source_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_url_, GetArenaForAllocation(),
      &other->destination_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, error_code_)
      + sizeof(Operation::error_code_)
      - PROTOBUF_FIELD_OFFSET(Operation, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[4]);
}

// ===================================================================

class OperationResult::_Internal {
 public:
};

OperationResult::OperationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tokens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.OperationResult)
}
OperationResult::OperationResult(const OperationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.OperationResult)
}

inline void OperationResult::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

OperationResult::~OperationResult() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.OperationResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationResult::ArenaDtor(void* object) {
  OperationResult* _this = reinterpret_cast< OperationResult* >(object);
  (void)_this;
}
void OperationResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.OperationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  text_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::speechly::slu::v2beta2::OperationResult_ResultType>(val));
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.OperationResult.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v2beta2.Token tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.OperationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.OperationResult.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // repeated .speechly.slu.v2beta2.Token tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tokens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.OperationResult)
  return target;
}

size_t OperationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.OperationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.Token tokens = 3;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationResult::GetClassData() const { return &_class_data_; }

void OperationResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperationResult *>(to)->MergeFrom(
      static_cast<const OperationResult &>(from));
}


void OperationResult::MergeFrom(const OperationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.OperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationResult::CopyFrom(const OperationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.OperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationResult::IsInitialized() const {
  return true;
}

void OperationResult::InternalSwap(OperationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tokens_.InternalSwap(&other->tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, GetArenaForAllocation(),
      &other->text_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[5]);
}

// ===================================================================

class Token::_Internal {
 public:
};

Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.Token)
}

inline void Token::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.Token)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Token::ArenaDtor(void* object) {
  Token* _this = reinterpret_cast< Token* >(object);
  (void)_this;
}
void Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Token.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Token.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 start_time = 3;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_time(), target);
  }

  // int32 end_time = 4;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 start_time = 3;
  if (this->_internal_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_time());
  }

  // int32 end_time = 4;
  if (this->_internal_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Token::GetClassData() const { return &_class_data_; }

void Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Token *>(to)->MergeFrom(
      static_cast<const Token &>(from));
}


void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.Token)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, end_time_)
      + sizeof(Token::end_time_)
      - PROTOBUF_FIELD_OFFSET(Token, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[6]);
}

// ===================================================================

class Option::_Internal {
 public:
};

Option::Option(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.Option)
}
Option::Option(const Option& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.Option)
}

inline void Option::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Option::~Option() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.Option)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Option::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Option::ArenaDtor(void* object) {
  Option* _this = reinterpret_cast< Option* >(object);
  (void)_this;
}
void Option::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Option::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Option::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.Option)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Option::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Option.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.Option.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Option::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.Option)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Option.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.Option.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.Option)
  return target;
}

size_t Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.Option)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Option::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Option::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Option::GetClassData() const { return &_class_data_; }

void Option::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Option *>(to)->MergeFrom(
      static_cast<const Option &>(from));
}


void Option::MergeFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.Option)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Option::CopyFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Option::IsInitialized() const {
  return true;
}

void Option::InternalSwap(Option* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Option::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[7]);
}

// ===================================================================

class HttpResource_Header::_Internal {
 public:
};

HttpResource_Header::HttpResource_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.HttpResource.Header)
}
HttpResource_Header::HttpResource_Header(const HttpResource_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.HttpResource.Header)
}

inline void HttpResource_Header::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HttpResource_Header::~HttpResource_Header() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.HttpResource.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HttpResource_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpResource_Header::ArenaDtor(void* object) {
  HttpResource_Header* _this = reinterpret_cast< HttpResource_Header* >(object);
  (void)_this;
}
void HttpResource_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpResource_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HttpResource_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.HttpResource.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpResource_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.HttpResource.Header.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.HttpResource.Header.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpResource_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.HttpResource.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.HttpResource.Header.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.HttpResource.Header.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.HttpResource.Header)
  return target;
}

size_t HttpResource_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.HttpResource.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpResource_Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HttpResource_Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpResource_Header::GetClassData() const { return &_class_data_; }

void HttpResource_Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HttpResource_Header *>(to)->MergeFrom(
      static_cast<const HttpResource_Header &>(from));
}


void HttpResource_Header::MergeFrom(const HttpResource_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.HttpResource.Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpResource_Header::CopyFrom(const HttpResource_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.HttpResource.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResource_Header::IsInitialized() const {
  return true;
}

void HttpResource_Header::InternalSwap(HttpResource_Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpResource_Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[8]);
}

// ===================================================================

class HttpResource::_Internal {
 public:
};

HttpResource::HttpResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.HttpResource)
}
HttpResource::HttpResource(const HttpResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.HttpResource)
}

inline void HttpResource::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
method_ = 0;
}

HttpResource::~HttpResource() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.HttpResource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HttpResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpResource::ArenaDtor(void* object) {
  HttpResource* _this = reinterpret_cast< HttpResource* >(object);
  (void)_this;
}
void HttpResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HttpResource::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.HttpResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  url_.ClearToEmpty();
  method_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.HttpResource.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v2beta2.HttpResource.Method method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::speechly::slu::v2beta2::HttpResource_Method>(val));
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.HttpResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.HttpResource.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // .speechly.slu.v2beta2.HttpResource.Method method = 2;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.HttpResource)
  return target;
}

size_t HttpResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.HttpResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .speechly.slu.v2beta2.HttpResource.Method method = 2;
  if (this->_internal_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HttpResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpResource::GetClassData() const { return &_class_data_; }

void HttpResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HttpResource *>(to)->MergeFrom(
      static_cast<const HttpResource &>(from));
}


void HttpResource::MergeFrom(const HttpResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.HttpResource)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_method() != 0) {
    _internal_set_method(from._internal_method());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpResource::CopyFrom(const HttpResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.HttpResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResource::IsInitialized() const {
  return true;
}

void HttpResource::InternalSwap(HttpResource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpResource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::BatchTasks* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::BatchTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::BatchTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::BatchOutput* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::BatchOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::BatchOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::BatchConfig* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::BatchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::BatchConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::Operation* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::OperationResult* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::OperationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::OperationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::Token* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::Option* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::Option >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::Option >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::HttpResource_Header* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::HttpResource_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::HttpResource_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::HttpResource* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::HttpResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::HttpResource >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
