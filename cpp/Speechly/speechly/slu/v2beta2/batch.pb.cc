// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v2beta2/batch.proto

#include "speechly/slu/v2beta2/batch.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace speechly {
namespace slu {
namespace v2beta2 {
        template <typename>
PROTOBUF_CONSTEXPR BatchTasks::BatchTasks(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.transcribe_)*/ false,
      /*decltype(_impl_.translate_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BatchTasksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchTasksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchTasksDefaultTypeInternal() {}
  union {
    BatchTasks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchTasksDefaultTypeInternal _BatchTasks_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BatchOutput::BatchOutput(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.display_)*/ false,
      /*decltype(_impl_.lexical_)*/ false,
      /*decltype(_impl_.tokenized_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BatchOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchOutputDefaultTypeInternal() {}
  union {
    BatchOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchOutputDefaultTypeInternal _BatchOutput_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BatchConfig::BatchConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.language_codes_)*/ {},
      /*decltype(_impl_.options_)*/ {},
      /*decltype(_impl_.model_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.batch_reference_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BatchConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchConfigDefaultTypeInternal() {}
  union {
    BatchConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchConfigDefaultTypeInternal _BatchConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ProcessAudioSourceRequestItem::ProcessAudioSourceRequestItem(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.source_url_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.destination_url_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.reference_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.device_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.completion_webhook_)*/ nullptr,
    } {}
struct ProcessAudioSourceRequestItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessAudioSourceRequestItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessAudioSourceRequestItemDefaultTypeInternal() {}
  union {
    ProcessAudioSourceRequestItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessAudioSourceRequestItemDefaultTypeInternal _ProcessAudioSourceRequestItem_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Operation::Operation(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.result_)*/ {},
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.reference_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.language_code_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.app_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.batch_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.batch_reference_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.error_description_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.source_url_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.destination_url_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.duration_)*/ nullptr,
      /*decltype(_impl_.status_)*/ 0,
      /*decltype(_impl_.error_code_)*/ 0,
    } {}
struct OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationDefaultTypeInternal _Operation_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR OperationResult::OperationResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tokens_)*/ {},
      /*decltype(_impl_.text_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct OperationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationResultDefaultTypeInternal() {}
  union {
    OperationResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationResultDefaultTypeInternal _OperationResult_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Token::Token(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.index_)*/ 0,
      /*decltype(_impl_.start_time_)*/ 0,
      /*decltype(_impl_.end_time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenDefaultTypeInternal _Token_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Option::Option(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_.key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct OptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionDefaultTypeInternal() {}
  union {
    Option _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionDefaultTypeInternal _Option_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR HttpResource_Header::HttpResource_Header(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.value_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct HttpResource_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HttpResource_HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HttpResource_HeaderDefaultTypeInternal() {}
  union {
    HttpResource_Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HttpResource_HeaderDefaultTypeInternal _HttpResource_Header_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR HttpResource::HttpResource(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.headers_)*/ {},
      /*decltype(_impl_.url_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.method_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct HttpResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HttpResourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HttpResourceDefaultTypeInternal() {}
  union {
    HttpResource _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HttpResourceDefaultTypeInternal _HttpResource_default_instance_;
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
static ::_pb::Metadata file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto = nullptr;
const ::uint32_t TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchTasks, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchTasks, _impl_.transcribe_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchTasks, _impl_.translate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, _impl_.display_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, _impl_.lexical_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchOutput, _impl_.tokenized_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, _impl_.model_id_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, _impl_.language_codes_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, _impl_.batch_reference_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::BatchConfig, _impl_.options_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _impl_.source_url_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _impl_.destination_url_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _impl_.completion_webhook_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _impl_.reference_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem, _impl_.device_id_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.reference_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.batch_reference_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.language_code_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.app_id_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.error_description_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.source_url_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Operation, _impl_.destination_url_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::OperationResult, _impl_.tokens_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, _impl_.token_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Token, _impl_.end_time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Option, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Option, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::Option, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource_Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource_Header, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource_Header, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, _impl_.url_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::HttpResource, _impl_.headers_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::speechly::slu::v2beta2::BatchTasks)},
        {10, -1, -1, sizeof(::speechly::slu::v2beta2::BatchOutput)},
        {21, -1, -1, sizeof(::speechly::slu::v2beta2::BatchConfig)},
        {33, 46, -1, sizeof(::speechly::slu::v2beta2::ProcessAudioSourceRequestItem)},
        {51, 72, -1, sizeof(::speechly::slu::v2beta2::Operation)},
        {85, -1, -1, sizeof(::speechly::slu::v2beta2::OperationResult)},
        {96, -1, -1, sizeof(::speechly::slu::v2beta2::Token)},
        {108, -1, -1, sizeof(::speechly::slu::v2beta2::Option)},
        {118, -1, -1, sizeof(::speechly::slu::v2beta2::HttpResource_Header)},
        {128, -1, -1, sizeof(::speechly::slu::v2beta2::HttpResource)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::speechly::slu::v2beta2::_BatchTasks_default_instance_._instance,
    &::speechly::slu::v2beta2::_BatchOutput_default_instance_._instance,
    &::speechly::slu::v2beta2::_BatchConfig_default_instance_._instance,
    &::speechly::slu::v2beta2::_ProcessAudioSourceRequestItem_default_instance_._instance,
    &::speechly::slu::v2beta2::_Operation_default_instance_._instance,
    &::speechly::slu::v2beta2::_OperationResult_default_instance_._instance,
    &::speechly::slu::v2beta2::_Token_default_instance_._instance,
    &::speechly::slu::v2beta2::_Option_default_instance_._instance,
    &::speechly::slu::v2beta2::_HttpResource_Header_default_instance_._instance,
    &::speechly::slu::v2beta2::_HttpResource_default_instance_._instance,
};
const char descriptor_table_protodef_speechly_2fslu_2fv2beta2_2fbatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n speechly/slu/v2beta2/batch.proto\022\024spee"
    "chly.slu.v2beta2\032\036google/protobuf/durati"
    "on.proto\"3\n\nBatchTasks\022\022\n\ntranscribe\030\001 \001"
    "(\010\022\021\n\ttranslate\030\002 \001(\010\"B\n\013BatchOutput\022\017\n\007"
    "display\030\001 \001(\010\022\017\n\007lexical\030\002 \001(\010\022\021\n\ttokeni"
    "zed\030\003 \001(\010\"\177\n\013BatchConfig\022\020\n\010model_id\030\001 \001"
    "(\t\022\026\n\016language_codes\030\002 \003(\t\022\027\n\017batch_refe"
    "rence\030\004 \001(\t\022-\n\007options\030\005 \003(\0132\034.speechly."
    "slu.v2beta2.Option\"\262\001\n\035ProcessAudioSourc"
    "eRequestItem\022\022\n\nsource_url\030\001 \001(\t\022\027\n\017dest"
    "ination_url\030\002 \001(\t\022>\n\022completion_webhook\030"
    "\003 \001(\0132\".speechly.slu.v2beta2.HttpResourc"
    "e\022\021\n\treference\030\004 \001(\t\022\021\n\tdevice_id\030\005 \001(\t\""
    "\301\005\n\tOperation\022\n\n\002id\030\001 \001(\t\022\021\n\treference\030\002"
    " \001(\t\022\020\n\010batch_id\030\020 \001(\t\022\027\n\017batch_referenc"
    "e\030\021 \001(\t\0226\n\006status\030\003 \001(\0162&.speechly.slu.v"
    "2beta2.Operation.Status\022\025\n\rlanguage_code"
    "\030\004 \001(\t\022\016\n\006app_id\030\005 \001(\t\0225\n\006result\030\006 \003(\0132%"
    ".speechly.slu.v2beta2.OperationResult\022+\n"
    "\010duration\030\007 \001(\0132\031.google.protobuf.Durati"
    "on\022=\n\nerror_code\030\022 \001(\0162).speechly.slu.v2"
    "beta2.Operation.ErrorCode\022\031\n\021error_descr"
    "iption\030\023 \001(\t\022\022\n\nsource_url\030\024 \001(\t\022\027\n\017dest"
    "ination_url\030\025 \001(\t\"W\n\006Status\022\026\n\022STATUS_UN"
    "SPECIFIED\020\000\022\022\n\016STATUS_PENDING\020\001\022\017\n\013STATU"
    "S_DONE\020\002\022\020\n\014STATUS_ERROR\020\003\"\306\001\n\tErrorCode"
    "\022\025\n\021ERROR_UNSPECIFIED\020\000\022\036\n\032ERROR_UNSUPPO"
    "RTED_LANGUAGE\020\001\022\022\n\016ERROR_INTERNAL\020\002\022\034\n\030E"
    "RROR_INVALID_PARAMETERS\020\003\022\030\n\024ERROR_INVAL"
    "ID_SOURCE\020\004\022\035\n\031ERROR_INVALID_DESTINATION"
    "\020\005\022\027\n\023ERROR_INVALID_AUDIO\020\006\"\250\002\n\017Operatio"
    "nResult\022>\n\004type\030\001 \001(\01620.speechly.slu.v2b"
    "eta2.OperationResult.ResultType\022\014\n\004text\030"
    "\002 \001(\t\022+\n\006tokens\030\003 \003(\0132\033.speechly.slu.v2b"
    "eta2.Token\"\231\001\n\nResultType\022\033\n\027RESULT_TYPE"
    "_UNSPECIFIED\020\000\022\"\n\036RESULT_TYPE_TRANSCRIPT"
    "_LEXICAL\020\001\022\"\n\036RESULT_TYPE_TRANSCRIPT_DIS"
    "PLAY\020\002\022&\n\"RESULT_TYPE_TRANSCRIPT_TRANSLA"
    "TION\020\003\"K\n\005Token\022\r\n\005token\030\001 \001(\t\022\r\n\005index\030"
    "\002 \001(\005\022\022\n\nstart_time\030\003 \001(\005\022\020\n\010end_time\030\004 "
    "\001(\005\"$\n\006Option\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \003("
    "\t\"\214\002\n\014HttpResource\022\013\n\003url\030\001 \001(\t\0229\n\006metho"
    "d\030\002 \001(\0162).speechly.slu.v2beta2.HttpResou"
    "rce.Method\022:\n\007headers\030\003 \003(\0132).speechly.s"
    "lu.v2beta2.HttpResource.Header\032%\n\006Header"
    "\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"Q\n\006Method\022"
    "\026\n\022METHOD_UNSPECIFIED\020\000\022\016\n\nMETHOD_GET\020\001\022"
    "\017\n\013METHOD_POST\020\002\022\016\n\nMETHOD_PUT\020\003B}\n\030com."
    "speechly.slu.v2beta2B\nBatchProtoP\001Z\037spee"
    "chly/slu/v2beta2;sluv2beta2\242\002\003SSX\252\002\024Spee"
    "chly.Slu.V2Beta2\312\002\024Speechly\\Slu\\V2Beta2b"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto = {
    false,
    false,
    2047,
    descriptor_table_protodef_speechly_2fslu_2fv2beta2_2fbatch_2eproto,
    "speechly/slu/v2beta2/batch.proto",
    &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
    descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto::offsets,
    file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto,
    file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto,
    file_level_service_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter() {
  return &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_speechly_2fslu_2fv2beta2_2fbatch_2eproto(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
namespace speechly {
namespace slu {
namespace v2beta2 {
const ::google::protobuf::EnumDescriptor* Operation_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[0];
}
bool Operation_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Operation_Status Operation::STATUS_UNSPECIFIED;
constexpr Operation_Status Operation::STATUS_PENDING;
constexpr Operation_Status Operation::STATUS_DONE;
constexpr Operation_Status Operation::STATUS_ERROR;
constexpr Operation_Status Operation::Status_MIN;
constexpr Operation_Status Operation::Status_MAX;
constexpr int Operation::Status_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Operation_ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[1];
}
bool Operation_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Operation_ErrorCode Operation::ERROR_UNSPECIFIED;
constexpr Operation_ErrorCode Operation::ERROR_UNSUPPORTED_LANGUAGE;
constexpr Operation_ErrorCode Operation::ERROR_INTERNAL;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_PARAMETERS;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_SOURCE;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_DESTINATION;
constexpr Operation_ErrorCode Operation::ERROR_INVALID_AUDIO;
constexpr Operation_ErrorCode Operation::ErrorCode_MIN;
constexpr Operation_ErrorCode Operation::ErrorCode_MAX;
constexpr int Operation::ErrorCode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* OperationResult_ResultType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[2];
}
bool OperationResult_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_UNSPECIFIED;
constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_TRANSCRIPT_LEXICAL;
constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_TRANSCRIPT_DISPLAY;
constexpr OperationResult_ResultType OperationResult::RESULT_TYPE_TRANSCRIPT_TRANSLATION;
constexpr OperationResult_ResultType OperationResult::ResultType_MIN;
constexpr OperationResult_ResultType OperationResult::ResultType_MAX;
constexpr int OperationResult::ResultType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* HttpResource_Method_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_2eproto[3];
}
bool HttpResource_Method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr HttpResource_Method HttpResource::METHOD_UNSPECIFIED;
constexpr HttpResource_Method HttpResource::METHOD_GET;
constexpr HttpResource_Method HttpResource::METHOD_POST;
constexpr HttpResource_Method HttpResource::METHOD_PUT;
constexpr HttpResource_Method HttpResource::Method_MIN;
constexpr HttpResource_Method HttpResource::Method_MAX;
constexpr int HttpResource::Method_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class BatchTasks::_Internal {
 public:
};

BatchTasks::BatchTasks(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.BatchTasks)
}
BatchTasks::BatchTasks(const BatchTasks& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.BatchTasks)
}
inline void BatchTasks::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.transcribe_){false},
      decltype(_impl_.translate_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BatchTasks::~BatchTasks() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.BatchTasks)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BatchTasks::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BatchTasks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BatchTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.BatchTasks)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.transcribe_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.translate_) -
      reinterpret_cast<char*>(&_impl_.transcribe_)) + sizeof(_impl_.translate_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BatchTasks::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> BatchTasks::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BatchTasks_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool translate = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BatchTasks, _impl_.translate_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BatchTasks, _impl_.translate_)}},
    // bool transcribe = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BatchTasks, _impl_.transcribe_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BatchTasks, _impl_.transcribe_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool transcribe = 1;
    {PROTOBUF_FIELD_OFFSET(BatchTasks, _impl_.transcribe_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool translate = 2;
    {PROTOBUF_FIELD_OFFSET(BatchTasks, _impl_.translate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BatchTasks::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.BatchTasks)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool transcribe = 1;
  if (this->_internal_transcribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_transcribe(), target);
  }

  // bool translate = 2;
  if (this->_internal_translate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_translate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.BatchTasks)
  return target;
}

::size_t BatchTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.BatchTasks)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool transcribe = 1;
  if (this->_internal_transcribe() != 0) {
    total_size += 2;
  }

  // bool translate = 2;
  if (this->_internal_translate() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BatchTasks::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BatchTasks::MergeImpl
};
const ::google::protobuf::Message::ClassData*BatchTasks::GetClassData() const { return &_class_data_; }


void BatchTasks::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BatchTasks*>(&to_msg);
  auto& from = static_cast<const BatchTasks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.BatchTasks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_transcribe() != 0) {
    _this->_internal_set_transcribe(from._internal_transcribe());
  }
  if (from._internal_translate() != 0) {
    _this->_internal_set_translate(from._internal_translate());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTasks::CopyFrom(const BatchTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.BatchTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BatchTasks::IsInitialized() const {
  return true;
}

void BatchTasks::InternalSwap(BatchTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchTasks, _impl_.translate_)
      + sizeof(BatchTasks::_impl_.translate_)
      - PROTOBUF_FIELD_OFFSET(BatchTasks, _impl_.transcribe_)>(
          reinterpret_cast<char*>(&_impl_.transcribe_),
          reinterpret_cast<char*>(&other->_impl_.transcribe_));
}

::google::protobuf::Metadata BatchTasks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[0]);
}
// ===================================================================

class BatchOutput::_Internal {
 public:
};

BatchOutput::BatchOutput(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.BatchOutput)
}
BatchOutput::BatchOutput(const BatchOutput& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.BatchOutput)
}
inline void BatchOutput::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.display_){false},
      decltype(_impl_.lexical_){false},
      decltype(_impl_.tokenized_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BatchOutput::~BatchOutput() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.BatchOutput)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BatchOutput::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BatchOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BatchOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.BatchOutput)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.display_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tokenized_) -
      reinterpret_cast<char*>(&_impl_.display_)) + sizeof(_impl_.tokenized_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BatchOutput::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> BatchOutput::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BatchOutput_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool display = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BatchOutput, _impl_.display_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.display_)}},
    // bool lexical = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BatchOutput, _impl_.lexical_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.lexical_)}},
    // bool tokenized = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BatchOutput, _impl_.tokenized_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.tokenized_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool display = 1;
    {PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.display_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool lexical = 2;
    {PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.lexical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool tokenized = 3;
    {PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.tokenized_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BatchOutput::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.BatchOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool display = 1;
  if (this->_internal_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_display(), target);
  }

  // bool lexical = 2;
  if (this->_internal_lexical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_lexical(), target);
  }

  // bool tokenized = 3;
  if (this->_internal_tokenized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_tokenized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.BatchOutput)
  return target;
}

::size_t BatchOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.BatchOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool display = 1;
  if (this->_internal_display() != 0) {
    total_size += 2;
  }

  // bool lexical = 2;
  if (this->_internal_lexical() != 0) {
    total_size += 2;
  }

  // bool tokenized = 3;
  if (this->_internal_tokenized() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BatchOutput::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BatchOutput::MergeImpl
};
const ::google::protobuf::Message::ClassData*BatchOutput::GetClassData() const { return &_class_data_; }


void BatchOutput::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BatchOutput*>(&to_msg);
  auto& from = static_cast<const BatchOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.BatchOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_display() != 0) {
    _this->_internal_set_display(from._internal_display());
  }
  if (from._internal_lexical() != 0) {
    _this->_internal_set_lexical(from._internal_lexical());
  }
  if (from._internal_tokenized() != 0) {
    _this->_internal_set_tokenized(from._internal_tokenized());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatchOutput::CopyFrom(const BatchOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.BatchOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BatchOutput::IsInitialized() const {
  return true;
}

void BatchOutput::InternalSwap(BatchOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.tokenized_)
      + sizeof(BatchOutput::_impl_.tokenized_)
      - PROTOBUF_FIELD_OFFSET(BatchOutput, _impl_.display_)>(
          reinterpret_cast<char*>(&_impl_.display_),
          reinterpret_cast<char*>(&other->_impl_.display_));
}

::google::protobuf::Metadata BatchOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[1]);
}
// ===================================================================

class BatchConfig::_Internal {
 public:
};

BatchConfig::BatchConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.BatchConfig)
}
BatchConfig::BatchConfig(const BatchConfig& from) : ::google::protobuf::Message() {
  BatchConfig* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.language_codes_){from._impl_.language_codes_},
      decltype(_impl_.options_){from._impl_.options_},
      decltype(_impl_.model_id_){},
      decltype(_impl_.batch_reference_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), _this->GetArenaForAllocation());
  }
  _impl_.batch_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_reference().empty()) {
    _this->_impl_.batch_reference_.Set(from._internal_batch_reference(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.BatchConfig)
}
inline void BatchConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.language_codes_){arena},
      decltype(_impl_.options_){arena},
      decltype(_impl_.model_id_){},
      decltype(_impl_.batch_reference_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
BatchConfig::~BatchConfig() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.BatchConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BatchConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_language_codes()->~RepeatedPtrField();
  _impl_.options_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.batch_reference_.Destroy();
}
void BatchConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BatchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.BatchConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_language_codes()->Clear();
  _internal_mutable_options()->Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.batch_reference_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BatchConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 1, 78, 2> BatchConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967268,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BatchConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string model_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.model_id_)}},
    // repeated string language_codes = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.language_codes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string batch_reference = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.batch_reference_)}},
    // repeated .speechly.slu.v2beta2.Option options = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.options_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string model_id = 1;
    {PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.model_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string language_codes = 2;
    {PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.language_codes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string batch_reference = 4;
    {PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.batch_reference_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .speechly.slu.v2beta2.Option options = 5;
    {PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.options_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta2::Option>()},
  }}, {{
    "\40\10\16\17\0\0\0\0"
    "speechly.slu.v2beta2.BatchConfig"
    "model_id"
    "language_codes"
    "batch_reference"
  }},
};

::uint8_t* BatchConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.BatchConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    const std::string& _s = this->_internal_model_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.BatchConfig.model_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string language_codes = 2;
  for (int i = 0, n = this->_internal_language_codes_size(); i < n; ++i) {
    const auto& s = this->_internal_language_codes().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.BatchConfig.language_codes");
    target = stream->WriteString(2, s, target);
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    const std::string& _s = this->_internal_batch_reference();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.BatchConfig.batch_reference");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated .speechly.slu.v2beta2.Option options = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.BatchConfig)
  return target;
}

::size_t BatchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.BatchConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string language_codes = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_language_codes().size());
  for (int i = 0, n = _internal_language_codes().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_language_codes().Get(i));
  }
  // repeated .speechly.slu.v2beta2.Option options = 5;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_internal_options()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_model_id());
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_batch_reference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BatchConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BatchConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*BatchConfig::GetClassData() const { return &_class_data_; }


void BatchConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BatchConfig*>(&to_msg);
  auto& from = static_cast<const BatchConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.BatchConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_language_codes()->MergeFrom(from._internal_language_codes());
  _this->_internal_mutable_options()->MergeFrom(from._internal_options());
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_batch_reference().empty()) {
    _this->_internal_set_batch_reference(from._internal_batch_reference());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatchConfig::CopyFrom(const BatchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.BatchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BatchConfig::IsInitialized() const {
  return true;
}

void BatchConfig::InternalSwap(BatchConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.language_codes_.InternalSwap(&other->_impl_.language_codes_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_id_, lhs_arena,
                                       &other->_impl_.model_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.batch_reference_, lhs_arena,
                                       &other->_impl_.batch_reference_, rhs_arena);
}

::google::protobuf::Metadata BatchConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[2]);
}
// ===================================================================

class ProcessAudioSourceRequestItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessAudioSourceRequestItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_._has_bits_);
  static const ::speechly::slu::v2beta2::HttpResource& completion_webhook(const ProcessAudioSourceRequestItem* msg);
  static void set_has_completion_webhook(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::speechly::slu::v2beta2::HttpResource& ProcessAudioSourceRequestItem::_Internal::completion_webhook(const ProcessAudioSourceRequestItem* msg) {
  return *msg->_impl_.completion_webhook_;
}
ProcessAudioSourceRequestItem::ProcessAudioSourceRequestItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
}
ProcessAudioSourceRequestItem::ProcessAudioSourceRequestItem(const ProcessAudioSourceRequestItem& from) : ::google::protobuf::Message() {
  ProcessAudioSourceRequestItem* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.source_url_){},
      decltype(_impl_.destination_url_){},
      decltype(_impl_.reference_){},
      decltype(_impl_.device_id_){},
      decltype(_impl_.completion_webhook_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.source_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_url().empty()) {
    _this->_impl_.source_url_.Set(from._internal_source_url(), _this->GetArenaForAllocation());
  }
  _impl_.destination_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_url().empty()) {
    _this->_impl_.destination_url_.Set(from._internal_destination_url(), _this->GetArenaForAllocation());
  }
  _impl_.reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reference().empty()) {
    _this->_impl_.reference_.Set(from._internal_reference(), _this->GetArenaForAllocation());
  }
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    _this->_impl_.device_id_.Set(from._internal_device_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.completion_webhook_ = new ::speechly::slu::v2beta2::HttpResource(*from._impl_.completion_webhook_);
  }

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
}
inline void ProcessAudioSourceRequestItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.source_url_){},
      decltype(_impl_.destination_url_){},
      decltype(_impl_.reference_){},
      decltype(_impl_.device_id_){},
      decltype(_impl_.completion_webhook_){nullptr},
  };
  _impl_.source_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ProcessAudioSourceRequestItem::~ProcessAudioSourceRequestItem() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProcessAudioSourceRequestItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_url_.Destroy();
  _impl_.destination_url_.Destroy();
  _impl_.reference_.Destroy();
  _impl_.device_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.completion_webhook_;
}
void ProcessAudioSourceRequestItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ProcessAudioSourceRequestItem::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_url_.ClearToEmpty();
  _impl_.destination_url_.ClearToEmpty();
  _impl_.reference_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.completion_webhook_ != nullptr);
    _impl_.completion_webhook_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProcessAudioSourceRequestItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 102, 2> ProcessAudioSourceRequestItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ProcessAudioSourceRequestItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string source_url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.source_url_)}},
    // string destination_url = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.destination_url_)}},
    // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.completion_webhook_)}},
    // string reference = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.reference_)}},
    // string device_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.device_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string source_url = 1;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.source_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string destination_url = 2;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.destination_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.completion_webhook_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string reference = 4;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.reference_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_id = 5;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequestItem, _impl_.device_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta2::HttpResource>()},
  }}, {{
    "\62\12\17\0\11\11\0\0"
    "speechly.slu.v2beta2.ProcessAudioSourceRequestItem"
    "source_url"
    "destination_url"
    "reference"
    "device_id"
  }},
};

::uint8_t* ProcessAudioSourceRequestItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string source_url = 1;
  if (!this->_internal_source_url().empty()) {
    const std::string& _s = this->_internal_source_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string destination_url = 2;
  if (!this->_internal_destination_url().empty()) {
    const std::string& _s = this->_internal_destination_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::completion_webhook(this),
        _Internal::completion_webhook(this).GetCachedSize(), target, stream);
  }

  // string reference = 4;
  if (!this->_internal_reference().empty()) {
    const std::string& _s = this->_internal_reference();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string device_id = 5;
  if (!this->_internal_device_id().empty()) {
    const std::string& _s = this->_internal_device_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  return target;
}

::size_t ProcessAudioSourceRequestItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_url = 1;
  if (!this->_internal_source_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source_url());
  }

  // string destination_url = 2;
  if (!this->_internal_destination_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_url());
  }

  // string reference = 4;
  if (!this->_internal_reference().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reference());
  }

  // string device_id = 5;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_device_id());
  }

  // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.completion_webhook_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProcessAudioSourceRequestItem::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ProcessAudioSourceRequestItem::MergeImpl
};
const ::google::protobuf::Message::ClassData*ProcessAudioSourceRequestItem::GetClassData() const { return &_class_data_; }


void ProcessAudioSourceRequestItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProcessAudioSourceRequestItem*>(&to_msg);
  auto& from = static_cast<const ProcessAudioSourceRequestItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_url().empty()) {
    _this->_internal_set_source_url(from._internal_source_url());
  }
  if (!from._internal_destination_url().empty()) {
    _this->_internal_set_destination_url(from._internal_destination_url());
  }
  if (!from._internal_reference().empty()) {
    _this->_internal_set_reference(from._internal_reference());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_completion_webhook()->::speechly::slu::v2beta2::HttpResource::MergeFrom(
        from._internal_completion_webhook());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioSourceRequestItem::CopyFrom(const ProcessAudioSourceRequestItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProcessAudioSourceRequestItem::IsInitialized() const {
  return true;
}

void ProcessAudioSourceRequestItem::InternalSwap(ProcessAudioSourceRequestItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_url_, lhs_arena,
                                       &other->_impl_.source_url_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_url_, lhs_arena,
                                       &other->_impl_.destination_url_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reference_, lhs_arena,
                                       &other->_impl_.reference_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, lhs_arena,
                                       &other->_impl_.device_id_, rhs_arena);
  swap(_impl_.completion_webhook_, other->_impl_.completion_webhook_);
}

::google::protobuf::Metadata ProcessAudioSourceRequestItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[3]);
}
// ===================================================================

class Operation::_Internal {
 public:
  using HasBits = decltype(std::declval<Operation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Operation, _impl_._has_bits_);
  static const ::google::protobuf::Duration& duration(const Operation* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Duration& Operation::_Internal::duration(const Operation* msg) {
  return *msg->_impl_.duration_;
}
void Operation::clear_duration() {
  if (_impl_.duration_ != nullptr) _impl_.duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Operation::Operation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.Operation)
}
Operation::Operation(const Operation& from) : ::google::protobuf::Message() {
  Operation* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.result_){from._impl_.result_},
      decltype(_impl_.id_){},
      decltype(_impl_.reference_){},
      decltype(_impl_.language_code_){},
      decltype(_impl_.app_id_){},
      decltype(_impl_.batch_id_){},
      decltype(_impl_.batch_reference_){},
      decltype(_impl_.error_description_){},
      decltype(_impl_.source_url_){},
      decltype(_impl_.destination_url_){},
      decltype(_impl_.duration_){nullptr},
      decltype(_impl_.status_){},
      decltype(_impl_.error_code_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reference().empty()) {
    _this->_impl_.reference_.Set(from._internal_reference(), _this->GetArenaForAllocation());
  }
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language_code().empty()) {
    _this->_impl_.language_code_.Set(from._internal_language_code(), _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), _this->GetArenaForAllocation());
  }
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_id().empty()) {
    _this->_impl_.batch_id_.Set(from._internal_batch_id(), _this->GetArenaForAllocation());
  }
  _impl_.batch_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_reference().empty()) {
    _this->_impl_.batch_reference_.Set(from._internal_batch_reference(), _this->GetArenaForAllocation());
  }
  _impl_.error_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_description().empty()) {
    _this->_impl_.error_description_.Set(from._internal_error_description(), _this->GetArenaForAllocation());
  }
  _impl_.source_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_url().empty()) {
    _this->_impl_.source_url_.Set(from._internal_source_url(), _this->GetArenaForAllocation());
  }
  _impl_.destination_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_url().empty()) {
    _this->_impl_.destination_url_.Set(from._internal_destination_url(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.duration_ = new ::google::protobuf::Duration(*from._impl_.duration_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.error_code_));

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.Operation)
}
inline void Operation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.result_){arena},
      decltype(_impl_.id_){},
      decltype(_impl_.reference_){},
      decltype(_impl_.language_code_){},
      decltype(_impl_.app_id_){},
      decltype(_impl_.batch_id_){},
      decltype(_impl_.batch_reference_){},
      decltype(_impl_.error_description_){},
      decltype(_impl_.source_url_){},
      decltype(_impl_.destination_url_){},
      decltype(_impl_.duration_){nullptr},
      decltype(_impl_.status_){0},
      decltype(_impl_.error_code_){0},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Operation::~Operation() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.Operation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Operation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.reference_.Destroy();
  _impl_.language_code_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.batch_id_.Destroy();
  _impl_.batch_reference_.Destroy();
  _impl_.error_description_.Destroy();
  _impl_.source_url_.Destroy();
  _impl_.destination_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.duration_;
}
void Operation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.Operation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_result()->Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.reference_.ClearToEmpty();
  _impl_.language_code_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.batch_id_.ClearToEmpty();
  _impl_.batch_reference_.ClearToEmpty();
  _impl_.error_description_.ClearToEmpty();
  _impl_.source_url_.ClearToEmpty();
  _impl_.destination_url_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.duration_ != nullptr);
    _impl_.duration_->Clear();
  }
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.error_code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Operation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 13, 2, 142, 2> Operation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Operation, _impl_._has_bits_),
    0, // no _extensions_
    21, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292902784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Operation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string batch_id = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Operation, _impl_.batch_id_)}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Operation, _impl_.id_)}},
    // string reference = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Operation, _impl_.reference_)}},
    // .speechly.slu.v2beta2.Operation.Status status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Operation, _impl_.status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Operation, _impl_.status_)}},
    // string language_code = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Operation, _impl_.language_code_)}},
    // string app_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Operation, _impl_.app_id_)}},
    // repeated .speechly.slu.v2beta2.OperationResult result = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Operation, _impl_.result_)}},
    // .google.protobuf.Duration duration = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 1, PROTOBUF_FIELD_OFFSET(Operation, _impl_.duration_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reference = 2;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.reference_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .speechly.slu.v2beta2.Operation.Status status = 3;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string language_code = 4;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.language_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string app_id = 5;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.app_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .speechly.slu.v2beta2.OperationResult result = 6;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.result_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Duration duration = 7;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.duration_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string batch_id = 16;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.batch_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string batch_reference = 17;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.batch_reference_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.error_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string error_description = 19;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.error_description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string source_url = 20;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.source_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string destination_url = 21;
    {PROTOBUF_FIELD_OFFSET(Operation, _impl_.destination_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta2::OperationResult>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\36\2\11\0\15\6\0\0\10\17\0\21\12\17\0\0"
    "speechly.slu.v2beta2.Operation"
    "id"
    "reference"
    "language_code"
    "app_id"
    "batch_id"
    "batch_reference"
    "error_description"
    "source_url"
    "destination_url"
  }},
};

::uint8_t* Operation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.Operation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string reference = 2;
  if (!this->_internal_reference().empty()) {
    const std::string& _s = this->_internal_reference();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.reference");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .speechly.slu.v2beta2.Operation.Status status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_status(), target);
  }

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    const std::string& _s = this->_internal_language_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.language_code");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    const std::string& _s = this->_internal_app_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.app_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // repeated .speechly.slu.v2beta2.OperationResult result = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration duration = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  // string batch_id = 16;
  if (!this->_internal_batch_id().empty()) {
    const std::string& _s = this->_internal_batch_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.batch_id");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // string batch_reference = 17;
  if (!this->_internal_batch_reference().empty()) {
    const std::string& _s = this->_internal_batch_reference();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.batch_reference");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        18, this->_internal_error_code(), target);
  }

  // string error_description = 19;
  if (!this->_internal_error_description().empty()) {
    const std::string& _s = this->_internal_error_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.error_description");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // string source_url = 20;
  if (!this->_internal_source_url().empty()) {
    const std::string& _s = this->_internal_source_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.source_url");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // string destination_url = 21;
  if (!this->_internal_destination_url().empty()) {
    const std::string& _s = this->_internal_destination_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Operation.destination_url");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.Operation)
  return target;
}

::size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.Operation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.OperationResult result = 6;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_internal_result()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string reference = 2;
  if (!this->_internal_reference().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reference());
  }

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_language_code());
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_app_id());
  }

  // string batch_id = 16;
  if (!this->_internal_batch_id().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_batch_id());
  }

  // string batch_reference = 17;
  if (!this->_internal_batch_reference().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_batch_reference());
  }

  // string error_description = 19;
  if (!this->_internal_error_description().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_description());
  }

  // string source_url = 20;
  if (!this->_internal_source_url().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source_url());
  }

  // string destination_url = 21;
  if (!this->_internal_destination_url().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_url());
  }

  // .google.protobuf.Duration duration = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  // .speechly.slu.v2beta2.Operation.Status status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
  if (this->_internal_error_code() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Operation::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Operation::MergeImpl
};
const ::google::protobuf::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }


void Operation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Operation*>(&to_msg);
  auto& from = static_cast<const Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.Operation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_result()->MergeFrom(from._internal_result());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_reference().empty()) {
    _this->_internal_set_reference(from._internal_reference());
  }
  if (!from._internal_language_code().empty()) {
    _this->_internal_set_language_code(from._internal_language_code());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_batch_id().empty()) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  if (!from._internal_batch_reference().empty()) {
    _this->_internal_set_batch_reference(from._internal_batch_reference());
  }
  if (!from._internal_error_description().empty()) {
    _this->_internal_set_error_description(from._internal_error_description());
  }
  if (!from._internal_source_url().empty()) {
    _this->_internal_set_source_url(from._internal_source_url());
  }
  if (!from._internal_destination_url().empty()) {
    _this->_internal_set_destination_url(from._internal_destination_url());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_duration()->::google::protobuf::Duration::MergeFrom(
        from._internal_duration());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reference_, lhs_arena,
                                       &other->_impl_.reference_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.language_code_, lhs_arena,
                                       &other->_impl_.language_code_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_id_, lhs_arena,
                                       &other->_impl_.app_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.batch_id_, lhs_arena,
                                       &other->_impl_.batch_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.batch_reference_, lhs_arena,
                                       &other->_impl_.batch_reference_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_description_, lhs_arena,
                                       &other->_impl_.error_description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_url_, lhs_arena,
                                       &other->_impl_.source_url_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_url_, lhs_arena,
                                       &other->_impl_.destination_url_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, _impl_.error_code_)
      + sizeof(Operation::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(Operation, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[4]);
}
// ===================================================================

class OperationResult::_Internal {
 public:
};

OperationResult::OperationResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.OperationResult)
}
OperationResult::OperationResult(const OperationResult& from) : ::google::protobuf::Message() {
  OperationResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokens_){from._impl_.tokens_},
      decltype(_impl_.text_){},
      decltype(_impl_.type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.OperationResult)
}
inline void OperationResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tokens_){arena},
      decltype(_impl_.text_){},
      decltype(_impl_.type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
OperationResult::~OperationResult() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.OperationResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OperationResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tokens_.~RepeatedPtrField();
  _impl_.text_.Destroy();
}
void OperationResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void OperationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.OperationResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tokens()->Clear();
  _impl_.text_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OperationResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 49, 2> OperationResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OperationResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OperationResult, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OperationResult, _impl_.type_)}},
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OperationResult, _impl_.text_)}},
    // repeated .speechly.slu.v2beta2.Token tokens = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(OperationResult, _impl_.tokens_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
    {PROTOBUF_FIELD_OFFSET(OperationResult, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(OperationResult, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .speechly.slu.v2beta2.Token tokens = 3;
    {PROTOBUF_FIELD_OFFSET(OperationResult, _impl_.tokens_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta2::Token>()},
  }}, {{
    "\44\0\4\0\0\0\0\0"
    "speechly.slu.v2beta2.OperationResult"
    "text"
  }},
};

::uint8_t* OperationResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.OperationResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.OperationResult.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .speechly.slu.v2beta2.Token tokens = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokens().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.OperationResult)
  return target;
}

::size_t OperationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.OperationResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.Token tokens = 3;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->_internal_tokens()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OperationResult::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    OperationResult::MergeImpl
};
const ::google::protobuf::Message::ClassData*OperationResult::GetClassData() const { return &_class_data_; }


void OperationResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OperationResult*>(&to_msg);
  auto& from = static_cast<const OperationResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.OperationResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tokens()->MergeFrom(from._internal_tokens());
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OperationResult::CopyFrom(const OperationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.OperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OperationResult::IsInitialized() const {
  return true;
}

void OperationResult::InternalSwap(OperationResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tokens_.InternalSwap(&other->_impl_.tokens_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata OperationResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[5]);
}
// ===================================================================

class Token::_Internal {
 public:
};

Token::Token(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.Token)
}
Token::Token(const Token& from) : ::google::protobuf::Message() {
  Token* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){},
      decltype(_impl_.index_){},
      decltype(_impl_.start_time_){},
      decltype(_impl_.end_time_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.end_time_));

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.Token)
}
inline void Token::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){},
      decltype(_impl_.index_){0},
      decltype(_impl_.start_time_){0},
      decltype(_impl_.end_time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Token::~Token() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.Token)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Token::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}
void Token::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.Token)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.end_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Token::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 40, 2> Token::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Token_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 end_time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Token, _impl_.end_time_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Token, _impl_.end_time_)}},
    // string token = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Token, _impl_.token_)}},
    // int32 index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Token, _impl_.index_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Token, _impl_.index_)}},
    // int32 start_time = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Token, _impl_.start_time_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Token, _impl_.start_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string token = 1;
    {PROTOBUF_FIELD_OFFSET(Token, _impl_.token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 index = 2;
    {PROTOBUF_FIELD_OFFSET(Token, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 start_time = 3;
    {PROTOBUF_FIELD_OFFSET(Token, _impl_.start_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 end_time = 4;
    {PROTOBUF_FIELD_OFFSET(Token, _impl_.end_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\32\5\0\0\0\0\0\0"
    "speechly.slu.v2beta2.Token"
    "token"
  }},
};

::uint8_t* Token::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.Token)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    const std::string& _s = this->_internal_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Token.token");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_index(), target);
  }

  // int32 start_time = 3;
  if (this->_internal_start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_start_time(), target);
  }

  // int32 end_time = 4;
  if (this->_internal_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.Token)
  return target;
}

::size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.Token)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_token());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  // int32 start_time = 3;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_start_time());
  }

  // int32 end_time = 4;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_end_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Token::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Token::MergeImpl
};
const ::google::protobuf::Message::ClassData*Token::GetClassData() const { return &_class_data_; }


void Token::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Token*>(&to_msg);
  auto& from = static_cast<const Token&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.Token)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, lhs_arena,
                                       &other->_impl_.token_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, _impl_.end_time_)
      + sizeof(Token::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(Token, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata Token::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[6]);
}
// ===================================================================

class Option::_Internal {
 public:
};

Option::Option(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.Option)
}
Option::Option(const Option& from) : ::google::protobuf::Message() {
  Option* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_},
      decltype(_impl_.key_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.Option)
}
inline void Option::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena},
      decltype(_impl_.key_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Option::~Option() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.Option)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Option::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_value()->~RepeatedPtrField();
  _impl_.key_.Destroy();
}
void Option::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Option::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.Option)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_value()->Clear();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Option::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> Option::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Option_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string value = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string value = 2;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\33\3\5\0\0\0\0\0"
    "speechly.slu.v2beta2.Option"
    "key"
    "value"
  }},
};

::uint8_t* Option::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.Option)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Option.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; ++i) {
    const auto& s = this->_internal_value().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.Option.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.Option)
  return target;
}

::size_t Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.Option)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_value().size());
  for (int i = 0, n = _internal_value().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_value().Get(i));
  }
  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Option::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Option::MergeImpl
};
const ::google::protobuf::Message::ClassData*Option::GetClassData() const { return &_class_data_; }


void Option::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Option*>(&to_msg);
  auto& from = static_cast<const Option&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.Option)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Option::CopyFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Option::IsInitialized() const {
  return true;
}

void Option::InternalSwap(Option* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
}

::google::protobuf::Metadata Option::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[7]);
}
// ===================================================================

class HttpResource_Header::_Internal {
 public:
};

HttpResource_Header::HttpResource_Header(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.HttpResource.Header)
}
HttpResource_Header::HttpResource_Header(const HttpResource_Header& from) : ::google::protobuf::Message() {
  HttpResource_Header* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.HttpResource.Header)
}
inline void HttpResource_Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
HttpResource_Header::~HttpResource_Header() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.HttpResource.Header)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HttpResource_Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}
void HttpResource_Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void HttpResource_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.HttpResource.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HttpResource_Header::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2> HttpResource_Header::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HttpResource_Header_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HttpResource_Header, _impl_.value_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HttpResource_Header, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(HttpResource_Header, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(HttpResource_Header, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\4\5\0\0\0\0\0"
    "speechly.slu.v2beta2.HttpResource.Header"
    "name"
    "value"
  }},
};

::uint8_t* HttpResource_Header::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.HttpResource.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.HttpResource.Header.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.HttpResource.Header.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.HttpResource.Header)
  return target;
}

::size_t HttpResource_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.HttpResource.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HttpResource_Header::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    HttpResource_Header::MergeImpl
};
const ::google::protobuf::Message::ClassData*HttpResource_Header::GetClassData() const { return &_class_data_; }


void HttpResource_Header::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HttpResource_Header*>(&to_msg);
  auto& from = static_cast<const HttpResource_Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.HttpResource.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HttpResource_Header::CopyFrom(const HttpResource_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.HttpResource.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HttpResource_Header::IsInitialized() const {
  return true;
}

void HttpResource_Header::InternalSwap(HttpResource_Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::google::protobuf::Metadata HttpResource_Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[8]);
}
// ===================================================================

class HttpResource::_Internal {
 public:
};

HttpResource::HttpResource(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.HttpResource)
}
HttpResource::HttpResource(const HttpResource& from) : ::google::protobuf::Message() {
  HttpResource* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.headers_){from._impl_.headers_},
      decltype(_impl_.url_){},
      decltype(_impl_.method_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), _this->GetArenaForAllocation());
  }
  _this->_impl_.method_ = from._impl_.method_;

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.HttpResource)
}
inline void HttpResource::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.headers_){arena},
      decltype(_impl_.url_){},
      decltype(_impl_.method_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
HttpResource::~HttpResource() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.HttpResource)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HttpResource::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.~RepeatedPtrField();
  _impl_.url_.Destroy();
}
void HttpResource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void HttpResource::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.HttpResource)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_headers()->Clear();
  _impl_.url_.ClearToEmpty();
  _impl_.method_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HttpResource::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 45, 2> HttpResource::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HttpResource_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HttpResource, _impl_.url_)}},
    // .speechly.slu.v2beta2.HttpResource.Method method = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HttpResource, _impl_.method_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HttpResource, _impl_.method_)}},
    // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(HttpResource, _impl_.headers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string url = 1;
    {PROTOBUF_FIELD_OFFSET(HttpResource, _impl_.url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .speechly.slu.v2beta2.HttpResource.Method method = 2;
    {PROTOBUF_FIELD_OFFSET(HttpResource, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
    {PROTOBUF_FIELD_OFFSET(HttpResource, _impl_.headers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta2::HttpResource_Header>()},
  }}, {{
    "\41\3\0\0\0\0\0\0"
    "speechly.slu.v2beta2.HttpResource"
    "url"
  }},
};

::uint8_t* HttpResource::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.HttpResource)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    const std::string& _s = this->_internal_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta2.HttpResource.url");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .speechly.slu.v2beta2.HttpResource.Method method = 2;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_method(), target);
  }

  // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.HttpResource)
  return target;
}

::size_t HttpResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.HttpResource)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->_internal_headers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_url());
  }

  // .speechly.slu.v2beta2.HttpResource.Method method = 2;
  if (this->_internal_method() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HttpResource::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    HttpResource::MergeImpl
};
const ::google::protobuf::Message::ClassData*HttpResource::GetClassData() const { return &_class_data_; }


void HttpResource::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HttpResource*>(&to_msg);
  auto& from = static_cast<const HttpResource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.HttpResource)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_headers()->MergeFrom(from._internal_headers());
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HttpResource::CopyFrom(const HttpResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.HttpResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HttpResource::IsInitialized() const {
  return true;
}

void HttpResource::InternalSwap(HttpResource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, lhs_arena,
                                       &other->_impl_.url_, rhs_arena);
  swap(_impl_.method_, other->_impl_.method_);
}

::google::protobuf::Metadata HttpResource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
