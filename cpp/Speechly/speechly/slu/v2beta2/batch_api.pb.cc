// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v2beta2/batch_api.proto

#include "speechly/slu/v2beta2/batch_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace slu {
namespace v2beta2 {
constexpr ProcessAudioSourceRequest::ProcessAudioSourceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_()
  , tasks_(nullptr)
  , config_(nullptr)
  , output_(nullptr){}
struct ProcessAudioSourceRequestDefaultTypeInternal {
  constexpr ProcessAudioSourceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessAudioSourceRequestDefaultTypeInternal() {}
  union {
    ProcessAudioSourceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessAudioSourceRequestDefaultTypeInternal _ProcessAudioSourceRequest_default_instance_;
constexpr ProcessAudioSourceResponse::ProcessAudioSourceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_(){}
struct ProcessAudioSourceResponseDefaultTypeInternal {
  constexpr ProcessAudioSourceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessAudioSourceResponseDefaultTypeInternal() {}
  union {
    ProcessAudioSourceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessAudioSourceResponseDefaultTypeInternal _ProcessAudioSourceResponse_default_instance_;
constexpr QueryStatusRequest::QueryStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_ids_()
  , operation_references_()
  , batch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct QueryStatusRequestDefaultTypeInternal {
  constexpr QueryStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryStatusRequestDefaultTypeInternal() {}
  union {
    QueryStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryStatusRequestDefaultTypeInternal _QueryStatusRequest_default_instance_;
constexpr QueryStatusResponse::QueryStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_(){}
struct QueryStatusResponseDefaultTypeInternal {
  constexpr QueryStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryStatusResponseDefaultTypeInternal() {}
  union {
    QueryStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequest, tasks_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequest, config_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequest, output_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceRequest, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::ProcessAudioSourceResponse, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::QueryStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::QueryStatusRequest, operation_ids_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::QueryStatusRequest, operation_references_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::QueryStatusRequest, batch_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::QueryStatusRequest, batch_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::QueryStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta2::QueryStatusResponse, operation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::slu::v2beta2::ProcessAudioSourceRequest)},
  { 9, -1, sizeof(::speechly::slu::v2beta2::ProcessAudioSourceResponse)},
  { 15, -1, sizeof(::speechly::slu::v2beta2::QueryStatusRequest)},
  { 24, -1, sizeof(::speechly::slu::v2beta2::QueryStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_ProcessAudioSourceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_ProcessAudioSourceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_QueryStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v2beta2::_QueryStatusResponse_default_instance_),
};

const char descriptor_table_protodef_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$speechly/slu/v2beta2/batch_api.proto\022\024"
  "speechly.slu.v2beta2\032 speechly/slu/v2bet"
  "a2/batch.proto\"\367\001\n\031ProcessAudioSourceReq"
  "uest\022/\n\005tasks\030\001 \001(\0132 .speechly.slu.v2bet"
  "a2.BatchTasks\0221\n\006config\030\002 \001(\0132!.speechly"
  ".slu.v2beta2.BatchConfig\0221\n\006output\030\003 \001(\013"
  "2!.speechly.slu.v2beta2.BatchOutput\022C\n\006s"
  "ource\030\004 \003(\01323.speechly.slu.v2beta2.Proce"
  "ssAudioSourceRequestItem\"P\n\032ProcessAudio"
  "SourceResponse\0222\n\toperation\030\001 \003(\0132\037.spee"
  "chly.slu.v2beta2.Operation\"t\n\022QueryStatu"
  "sRequest\022\025\n\roperation_ids\030\001 \003(\t\022\034\n\024opera"
  "tion_references\030\002 \003(\t\022\020\n\010batch_id\030\003 \001(\t\022"
  "\027\n\017batch_reference\030\004 \001(\t\"I\n\023QueryStatusR"
  "esponse\0222\n\toperation\030\001 \003(\0132\037.speechly.sl"
  "u.v2beta2.Operation2\347\001\n\010BatchAPI\022w\n\022Proc"
  "essAudioSource\022/.speechly.slu.v2beta2.Pr"
  "ocessAudioSourceRequest\0320.speechly.slu.v"
  "2beta2.ProcessAudioSourceResponse\022b\n\013Que"
  "ryStatus\022(.speechly.slu.v2beta2.QuerySta"
  "tusRequest\032).speechly.slu.v2beta2.QueryS"
  "tatusResponseB\200\001\n\030com.speechly.slu.v2bet"
  "a2B\rBatchApiProtoP\001Z\037speechly/slu/v2beta"
  "2;sluv2beta2\242\002\003SSX\252\002\024Speechly.Slu.V2Beta"
  "2\312\002\024Speechly\\Slu\\V2Beta2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_deps[1] = {
  &::descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto = {
  false, false, 992, descriptor_table_protodef_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto, "speechly/slu/v2beta2/batch_api.proto", 
  &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_once, descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto, file_level_enum_descriptors_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto, file_level_service_descriptors_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto(&descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto);
namespace speechly {
namespace slu {
namespace v2beta2 {

// ===================================================================

class ProcessAudioSourceRequest::_Internal {
 public:
  static const ::speechly::slu::v2beta2::BatchTasks& tasks(const ProcessAudioSourceRequest* msg);
  static const ::speechly::slu::v2beta2::BatchConfig& config(const ProcessAudioSourceRequest* msg);
  static const ::speechly::slu::v2beta2::BatchOutput& output(const ProcessAudioSourceRequest* msg);
};

const ::speechly::slu::v2beta2::BatchTasks&
ProcessAudioSourceRequest::_Internal::tasks(const ProcessAudioSourceRequest* msg) {
  return *msg->tasks_;
}
const ::speechly::slu::v2beta2::BatchConfig&
ProcessAudioSourceRequest::_Internal::config(const ProcessAudioSourceRequest* msg) {
  return *msg->config_;
}
const ::speechly::slu::v2beta2::BatchOutput&
ProcessAudioSourceRequest::_Internal::output(const ProcessAudioSourceRequest* msg) {
  return *msg->output_;
}
void ProcessAudioSourceRequest::clear_tasks() {
  if (GetArenaForAllocation() == nullptr && tasks_ != nullptr) {
    delete tasks_;
  }
  tasks_ = nullptr;
}
void ProcessAudioSourceRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
void ProcessAudioSourceRequest::clear_output() {
  if (GetArenaForAllocation() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
void ProcessAudioSourceRequest::clear_source() {
  source_.Clear();
}
ProcessAudioSourceRequest::ProcessAudioSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  source_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.ProcessAudioSourceRequest)
}
ProcessAudioSourceRequest::ProcessAudioSourceRequest(const ProcessAudioSourceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_(from.source_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tasks()) {
    tasks_ = new ::speechly::slu::v2beta2::BatchTasks(*from.tasks_);
  } else {
    tasks_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::speechly::slu::v2beta2::BatchConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::speechly::slu::v2beta2::BatchOutput(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.ProcessAudioSourceRequest)
}

inline void ProcessAudioSourceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tasks_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&tasks_)) + sizeof(output_));
}

ProcessAudioSourceRequest::~ProcessAudioSourceRequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.ProcessAudioSourceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessAudioSourceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tasks_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete output_;
}

void ProcessAudioSourceRequest::ArenaDtor(void* object) {
  ProcessAudioSourceRequest* _this = reinterpret_cast< ProcessAudioSourceRequest* >(object);
  (void)_this;
}
void ProcessAudioSourceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessAudioSourceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessAudioSourceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.ProcessAudioSourceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.Clear();
  if (GetArenaForAllocation() == nullptr && tasks_ != nullptr) {
    delete tasks_;
  }
  tasks_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessAudioSourceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.slu.v2beta2.BatchTasks tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tasks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v2beta2.BatchConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v2beta2.BatchOutput output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v2beta2.ProcessAudioSourceRequestItem source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessAudioSourceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.ProcessAudioSourceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v2beta2.BatchTasks tasks = 1;
  if (this->_internal_has_tasks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tasks(this), target, stream);
  }

  // .speechly.slu.v2beta2.BatchConfig config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .speechly.slu.v2beta2.BatchOutput output = 3;
  if (this->_internal_has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output(this), target, stream);
  }

  // repeated .speechly.slu.v2beta2.ProcessAudioSourceRequestItem source = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_source(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.ProcessAudioSourceRequest)
  return target;
}

size_t ProcessAudioSourceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.ProcessAudioSourceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.ProcessAudioSourceRequestItem source = 4;
  total_size += 1UL * this->_internal_source_size();
  for (const auto& msg : this->source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .speechly.slu.v2beta2.BatchTasks tasks = 1;
  if (this->_internal_has_tasks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tasks_);
  }

  // .speechly.slu.v2beta2.BatchConfig config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .speechly.slu.v2beta2.BatchOutput output = 3;
  if (this->_internal_has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessAudioSourceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessAudioSourceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessAudioSourceRequest::GetClassData() const { return &_class_data_; }

void ProcessAudioSourceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessAudioSourceRequest *>(to)->MergeFrom(
      static_cast<const ProcessAudioSourceRequest &>(from));
}


void ProcessAudioSourceRequest::MergeFrom(const ProcessAudioSourceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.ProcessAudioSourceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_.MergeFrom(from.source_);
  if (from._internal_has_tasks()) {
    _internal_mutable_tasks()->::speechly::slu::v2beta2::BatchTasks::MergeFrom(from._internal_tasks());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::speechly::slu::v2beta2::BatchConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_has_output()) {
    _internal_mutable_output()->::speechly::slu::v2beta2::BatchOutput::MergeFrom(from._internal_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioSourceRequest::CopyFrom(const ProcessAudioSourceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.ProcessAudioSourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessAudioSourceRequest::IsInitialized() const {
  return true;
}

void ProcessAudioSourceRequest::InternalSwap(ProcessAudioSourceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  source_.InternalSwap(&other->source_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, output_)
      + sizeof(ProcessAudioSourceRequest::output_)
      - PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, tasks_)>(
          reinterpret_cast<char*>(&tasks_),
          reinterpret_cast<char*>(&other->tasks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessAudioSourceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto[0]);
}

// ===================================================================

class ProcessAudioSourceResponse::_Internal {
 public:
};

void ProcessAudioSourceResponse::clear_operation() {
  operation_.Clear();
}
ProcessAudioSourceResponse::ProcessAudioSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.ProcessAudioSourceResponse)
}
ProcessAudioSourceResponse::ProcessAudioSourceResponse(const ProcessAudioSourceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operation_(from.operation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.ProcessAudioSourceResponse)
}

inline void ProcessAudioSourceResponse::SharedCtor() {
}

ProcessAudioSourceResponse::~ProcessAudioSourceResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.ProcessAudioSourceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessAudioSourceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessAudioSourceResponse::ArenaDtor(void* object) {
  ProcessAudioSourceResponse* _this = reinterpret_cast< ProcessAudioSourceResponse* >(object);
  (void)_this;
}
void ProcessAudioSourceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessAudioSourceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessAudioSourceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.ProcessAudioSourceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessAudioSourceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.slu.v2beta2.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessAudioSourceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.ProcessAudioSourceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.ProcessAudioSourceResponse)
  return target;
}

size_t ProcessAudioSourceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.ProcessAudioSourceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  total_size += 1UL * this->_internal_operation_size();
  for (const auto& msg : this->operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessAudioSourceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessAudioSourceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessAudioSourceResponse::GetClassData() const { return &_class_data_; }

void ProcessAudioSourceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessAudioSourceResponse *>(to)->MergeFrom(
      static_cast<const ProcessAudioSourceResponse &>(from));
}


void ProcessAudioSourceResponse::MergeFrom(const ProcessAudioSourceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.ProcessAudioSourceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_.MergeFrom(from.operation_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioSourceResponse::CopyFrom(const ProcessAudioSourceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.ProcessAudioSourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessAudioSourceResponse::IsInitialized() const {
  return true;
}

void ProcessAudioSourceResponse::InternalSwap(ProcessAudioSourceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operation_.InternalSwap(&other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessAudioSourceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto[1]);
}

// ===================================================================

class QueryStatusRequest::_Internal {
 public:
};

QueryStatusRequest::QueryStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operation_ids_(arena),
  operation_references_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.QueryStatusRequest)
}
QueryStatusRequest::QueryStatusRequest(const QueryStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operation_ids_(from.operation_ids_),
      operation_references_(from.operation_references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_id().empty()) {
    batch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_batch_id(), 
      GetArenaForAllocation());
  }
  batch_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_reference().empty()) {
    batch_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_batch_reference(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.QueryStatusRequest)
}

inline void QueryStatusRequest::SharedCtor() {
batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
batch_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryStatusRequest::~QueryStatusRequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.QueryStatusRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  batch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryStatusRequest::ArenaDtor(void* object) {
  QueryStatusRequest* _this = reinterpret_cast< QueryStatusRequest* >(object);
  (void)_this;
}
void QueryStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.QueryStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_ids_.Clear();
  operation_references_.Clear();
  batch_id_.ClearToEmpty();
  batch_reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string operation_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_operation_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.QueryStatusRequest.operation_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string operation_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_operation_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.QueryStatusRequest.operation_references"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string batch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_batch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.QueryStatusRequest.batch_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string batch_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_batch_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v2beta2.QueryStatusRequest.batch_reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.QueryStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string operation_ids = 1;
  for (int i = 0, n = this->_internal_operation_ids_size(); i < n; i++) {
    const auto& s = this->_internal_operation_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.QueryStatusRequest.operation_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string operation_references = 2;
  for (int i = 0, n = this->_internal_operation_references_size(); i < n; i++) {
    const auto& s = this->_internal_operation_references(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.QueryStatusRequest.operation_references");
    target = stream->WriteString(2, s, target);
  }

  // string batch_id = 3;
  if (!this->_internal_batch_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_id().data(), static_cast<int>(this->_internal_batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.QueryStatusRequest.batch_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_batch_id(), target);
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_reference().data(), static_cast<int>(this->_internal_batch_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v2beta2.QueryStatusRequest.batch_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_batch_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.QueryStatusRequest)
  return target;
}

size_t QueryStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.QueryStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string operation_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(operation_ids_.size());
  for (int i = 0, n = operation_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      operation_ids_.Get(i));
  }

  // repeated string operation_references = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(operation_references_.size());
  for (int i = 0, n = operation_references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      operation_references_.Get(i));
  }

  // string batch_id = 3;
  if (!this->_internal_batch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_id());
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryStatusRequest::GetClassData() const { return &_class_data_; }

void QueryStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<QueryStatusRequest *>(to)->MergeFrom(
      static_cast<const QueryStatusRequest &>(from));
}


void QueryStatusRequest::MergeFrom(const QueryStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.QueryStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_ids_.MergeFrom(from.operation_ids_);
  operation_references_.MergeFrom(from.operation_references_);
  if (!from._internal_batch_id().empty()) {
    _internal_set_batch_id(from._internal_batch_id());
  }
  if (!from._internal_batch_reference().empty()) {
    _internal_set_batch_reference(from._internal_batch_reference());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryStatusRequest::CopyFrom(const QueryStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.QueryStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStatusRequest::IsInitialized() const {
  return true;
}

void QueryStatusRequest::InternalSwap(QueryStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operation_ids_.InternalSwap(&other->operation_ids_);
  operation_references_.InternalSwap(&other->operation_references_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &batch_id_, GetArenaForAllocation(),
      &other->batch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &batch_reference_, GetArenaForAllocation(),
      &other->batch_reference_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryStatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto[2]);
}

// ===================================================================

class QueryStatusResponse::_Internal {
 public:
};

void QueryStatusResponse::clear_operation() {
  operation_.Clear();
}
QueryStatusResponse::QueryStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta2.QueryStatusResponse)
}
QueryStatusResponse::QueryStatusResponse(const QueryStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operation_(from.operation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta2.QueryStatusResponse)
}

inline void QueryStatusResponse::SharedCtor() {
}

QueryStatusResponse::~QueryStatusResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta2.QueryStatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryStatusResponse::ArenaDtor(void* object) {
  QueryStatusResponse* _this = reinterpret_cast< QueryStatusResponse* >(object);
  (void)_this;
}
void QueryStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta2.QueryStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.slu.v2beta2.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta2.QueryStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta2.QueryStatusResponse)
  return target;
}

size_t QueryStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta2.QueryStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  total_size += 1UL * this->_internal_operation_size();
  for (const auto& msg : this->operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryStatusResponse::GetClassData() const { return &_class_data_; }

void QueryStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<QueryStatusResponse *>(to)->MergeFrom(
      static_cast<const QueryStatusResponse &>(from));
}


void QueryStatusResponse::MergeFrom(const QueryStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta2.QueryStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_.MergeFrom(from.operation_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryStatusResponse::CopyFrom(const QueryStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta2.QueryStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStatusResponse::IsInitialized() const {
  return true;
}

void QueryStatusResponse::InternalSwap(QueryStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operation_.InternalSwap(&other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryStatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::ProcessAudioSourceRequest* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::ProcessAudioSourceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::ProcessAudioSourceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::ProcessAudioSourceResponse* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::ProcessAudioSourceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::ProcessAudioSourceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::QueryStatusRequest* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::QueryStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::QueryStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v2beta2::QueryStatusResponse* Arena::CreateMaybeMessage< ::speechly::slu::v2beta2::QueryStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v2beta2::QueryStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
