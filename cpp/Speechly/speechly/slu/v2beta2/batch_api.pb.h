// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v2beta2/batch_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "speechly/slu/v2beta2/batch.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
namespace speechly {
namespace slu {
namespace v2beta2 {
class ProcessAudioSourceRequest;
struct ProcessAudioSourceRequestDefaultTypeInternal;
extern ProcessAudioSourceRequestDefaultTypeInternal _ProcessAudioSourceRequest_default_instance_;
class ProcessAudioSourceResponse;
struct ProcessAudioSourceResponseDefaultTypeInternal;
extern ProcessAudioSourceResponseDefaultTypeInternal _ProcessAudioSourceResponse_default_instance_;
class QueryStatusRequest;
struct QueryStatusRequestDefaultTypeInternal;
extern QueryStatusRequestDefaultTypeInternal _QueryStatusRequest_default_instance_;
class QueryStatusResponse;
struct QueryStatusResponseDefaultTypeInternal;
extern QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::slu::v2beta2::ProcessAudioSourceRequest* Arena::CreateMaybeMessage<::speechly::slu::v2beta2::ProcessAudioSourceRequest>(Arena*);
template<> ::speechly::slu::v2beta2::ProcessAudioSourceResponse* Arena::CreateMaybeMessage<::speechly::slu::v2beta2::ProcessAudioSourceResponse>(Arena*);
template<> ::speechly::slu::v2beta2::QueryStatusRequest* Arena::CreateMaybeMessage<::speechly::slu::v2beta2::QueryStatusRequest>(Arena*);
template<> ::speechly::slu::v2beta2::QueryStatusResponse* Arena::CreateMaybeMessage<::speechly::slu::v2beta2::QueryStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace slu {
namespace v2beta2 {

// ===================================================================

class ProcessAudioSourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.ProcessAudioSourceRequest) */ {
 public:
  inline ProcessAudioSourceRequest() : ProcessAudioSourceRequest(nullptr) {}
  ~ProcessAudioSourceRequest() override;
  explicit constexpr ProcessAudioSourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAudioSourceRequest(const ProcessAudioSourceRequest& from);
  ProcessAudioSourceRequest(ProcessAudioSourceRequest&& from) noexcept
    : ProcessAudioSourceRequest() {
    *this = ::std::move(from);
  }

  inline ProcessAudioSourceRequest& operator=(const ProcessAudioSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAudioSourceRequest& operator=(ProcessAudioSourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAudioSourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAudioSourceRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessAudioSourceRequest*>(
               &_ProcessAudioSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessAudioSourceRequest& a, ProcessAudioSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAudioSourceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAudioSourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessAudioSourceRequest* New() const final {
    return new ProcessAudioSourceRequest();
  }

  ProcessAudioSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessAudioSourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAudioSourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessAudioSourceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAudioSourceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v2beta2.ProcessAudioSourceRequest";
  }
  protected:
  explicit ProcessAudioSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 4,
    kTasksFieldNumber = 1,
    kConfigFieldNumber = 2,
    kOutputFieldNumber = 3,
  };
  // repeated .speechly.slu.v2beta2.ProcessAudioSourceRequestItem source = 4;
  int source_size() const;
  private:
  int _internal_source_size() const;
  public:
  void clear_source();
  ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* mutable_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >*
      mutable_source();
  private:
  const ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem& _internal_source(int index) const;
  ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* _internal_add_source();
  public:
  const ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem& source(int index) const;
  ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* add_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >&
      source() const;

  // .speechly.slu.v2beta2.BatchTasks tasks = 1;
  bool has_tasks() const;
  private:
  bool _internal_has_tasks() const;
  public:
  void clear_tasks();
  const ::speechly::slu::v2beta2::BatchTasks& tasks() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::slu::v2beta2::BatchTasks* release_tasks();
  ::speechly::slu::v2beta2::BatchTasks* mutable_tasks();
  void set_allocated_tasks(::speechly::slu::v2beta2::BatchTasks* tasks);
  private:
  const ::speechly::slu::v2beta2::BatchTasks& _internal_tasks() const;
  ::speechly::slu::v2beta2::BatchTasks* _internal_mutable_tasks();
  public:
  void unsafe_arena_set_allocated_tasks(
      ::speechly::slu::v2beta2::BatchTasks* tasks);
  ::speechly::slu::v2beta2::BatchTasks* unsafe_arena_release_tasks();

  // .speechly.slu.v2beta2.BatchConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::speechly::slu::v2beta2::BatchConfig& config() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::slu::v2beta2::BatchConfig* release_config();
  ::speechly::slu::v2beta2::BatchConfig* mutable_config();
  void set_allocated_config(::speechly::slu::v2beta2::BatchConfig* config);
  private:
  const ::speechly::slu::v2beta2::BatchConfig& _internal_config() const;
  ::speechly::slu::v2beta2::BatchConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::speechly::slu::v2beta2::BatchConfig* config);
  ::speechly::slu::v2beta2::BatchConfig* unsafe_arena_release_config();

  // .speechly.slu.v2beta2.BatchOutput output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::speechly::slu::v2beta2::BatchOutput& output() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::slu::v2beta2::BatchOutput* release_output();
  ::speechly::slu::v2beta2::BatchOutput* mutable_output();
  void set_allocated_output(::speechly::slu::v2beta2::BatchOutput* output);
  private:
  const ::speechly::slu::v2beta2::BatchOutput& _internal_output() const;
  ::speechly::slu::v2beta2::BatchOutput* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::speechly::slu::v2beta2::BatchOutput* output);
  ::speechly::slu::v2beta2::BatchOutput* unsafe_arena_release_output();

  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.ProcessAudioSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem > source_;
  ::speechly::slu::v2beta2::BatchTasks* tasks_;
  ::speechly::slu::v2beta2::BatchConfig* config_;
  ::speechly::slu::v2beta2::BatchOutput* output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ProcessAudioSourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.ProcessAudioSourceResponse) */ {
 public:
  inline ProcessAudioSourceResponse() : ProcessAudioSourceResponse(nullptr) {}
  ~ProcessAudioSourceResponse() override;
  explicit constexpr ProcessAudioSourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAudioSourceResponse(const ProcessAudioSourceResponse& from);
  ProcessAudioSourceResponse(ProcessAudioSourceResponse&& from) noexcept
    : ProcessAudioSourceResponse() {
    *this = ::std::move(from);
  }

  inline ProcessAudioSourceResponse& operator=(const ProcessAudioSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAudioSourceResponse& operator=(ProcessAudioSourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAudioSourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAudioSourceResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessAudioSourceResponse*>(
               &_ProcessAudioSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessAudioSourceResponse& a, ProcessAudioSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAudioSourceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAudioSourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessAudioSourceResponse* New() const final {
    return new ProcessAudioSourceResponse();
  }

  ProcessAudioSourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessAudioSourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAudioSourceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessAudioSourceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAudioSourceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v2beta2.ProcessAudioSourceResponse";
  }
  protected:
  explicit ProcessAudioSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  int operation_size() const;
  private:
  int _internal_operation_size() const;
  public:
  void clear_operation();
  ::speechly::slu::v2beta2::Operation* mutable_operation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
      mutable_operation();
  private:
  const ::speechly::slu::v2beta2::Operation& _internal_operation(int index) const;
  ::speechly::slu::v2beta2::Operation* _internal_add_operation();
  public:
  const ::speechly::slu::v2beta2::Operation& operation(int index) const;
  ::speechly::slu::v2beta2::Operation* add_operation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
      operation() const;

  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.ProcessAudioSourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation > operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};
// -------------------------------------------------------------------

class QueryStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.QueryStatusRequest) */ {
 public:
  inline QueryStatusRequest() : QueryStatusRequest(nullptr) {}
  ~QueryStatusRequest() override;
  explicit constexpr QueryStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryStatusRequest(const QueryStatusRequest& from);
  QueryStatusRequest(QueryStatusRequest&& from) noexcept
    : QueryStatusRequest() {
    *this = ::std::move(from);
  }

  inline QueryStatusRequest& operator=(const QueryStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatusRequest& operator=(QueryStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStatusRequest* internal_default_instance() {
    return reinterpret_cast<const QueryStatusRequest*>(
               &_QueryStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryStatusRequest& a, QueryStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatusRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStatusRequest* New() const final {
    return new QueryStatusRequest();
  }

  QueryStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v2beta2.QueryStatusRequest";
  }
  protected:
  explicit QueryStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationIdsFieldNumber = 1,
    kOperationReferencesFieldNumber = 2,
    kBatchIdFieldNumber = 3,
    kBatchReferenceFieldNumber = 4,
  };
  // repeated string operation_ids = 1;
  int operation_ids_size() const;
  private:
  int _internal_operation_ids_size() const;
  public:
  void clear_operation_ids();
  const std::string& operation_ids(int index) const;
  std::string* mutable_operation_ids(int index);
  void set_operation_ids(int index, const std::string& value);
  void set_operation_ids(int index, std::string&& value);
  void set_operation_ids(int index, const char* value);
  void set_operation_ids(int index, const char* value, size_t size);
  std::string* add_operation_ids();
  void add_operation_ids(const std::string& value);
  void add_operation_ids(std::string&& value);
  void add_operation_ids(const char* value);
  void add_operation_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& operation_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_operation_ids();
  private:
  const std::string& _internal_operation_ids(int index) const;
  std::string* _internal_add_operation_ids();
  public:

  // repeated string operation_references = 2;
  int operation_references_size() const;
  private:
  int _internal_operation_references_size() const;
  public:
  void clear_operation_references();
  const std::string& operation_references(int index) const;
  std::string* mutable_operation_references(int index);
  void set_operation_references(int index, const std::string& value);
  void set_operation_references(int index, std::string&& value);
  void set_operation_references(int index, const char* value);
  void set_operation_references(int index, const char* value, size_t size);
  std::string* add_operation_references();
  void add_operation_references(const std::string& value);
  void add_operation_references(std::string&& value);
  void add_operation_references(const char* value);
  void add_operation_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& operation_references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_operation_references();
  private:
  const std::string& _internal_operation_references(int index) const;
  std::string* _internal_add_operation_references();
  public:

  // string batch_id = 3;
  void clear_batch_id();
  const std::string& batch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_batch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_batch_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_batch_id();
  void set_allocated_batch_id(std::string* batch_id);
  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(const std::string& value);
  std::string* _internal_mutable_batch_id();
  public:

  // string batch_reference = 4;
  void clear_batch_reference();
  const std::string& batch_reference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_batch_reference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_batch_reference();
  PROTOBUF_MUST_USE_RESULT std::string* release_batch_reference();
  void set_allocated_batch_reference(std::string* batch_reference);
  private:
  const std::string& _internal_batch_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_reference(const std::string& value);
  std::string* _internal_mutable_batch_reference();
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.QueryStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> operation_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> operation_references_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};
// -------------------------------------------------------------------

class QueryStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.QueryStatusResponse) */ {
 public:
  inline QueryStatusResponse() : QueryStatusResponse(nullptr) {}
  ~QueryStatusResponse() override;
  explicit constexpr QueryStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryStatusResponse(const QueryStatusResponse& from);
  QueryStatusResponse(QueryStatusResponse&& from) noexcept
    : QueryStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryStatusResponse& operator=(const QueryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatusResponse& operator=(QueryStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStatusResponse*>(
               &_QueryStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryStatusResponse& a, QueryStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatusResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStatusResponse* New() const final {
    return new QueryStatusResponse();
  }

  QueryStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v2beta2.QueryStatusResponse";
  }
  protected:
  explicit QueryStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  int operation_size() const;
  private:
  int _internal_operation_size() const;
  public:
  void clear_operation();
  ::speechly::slu::v2beta2::Operation* mutable_operation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
      mutable_operation();
  private:
  const ::speechly::slu::v2beta2::Operation& _internal_operation(int index) const;
  ::speechly::slu::v2beta2::Operation* _internal_add_operation();
  public:
  const ::speechly::slu::v2beta2::Operation& operation(int index) const;
  ::speechly::slu::v2beta2::Operation* add_operation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
      operation() const;

  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.QueryStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation > operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessAudioSourceRequest

// .speechly.slu.v2beta2.BatchTasks tasks = 1;
inline bool ProcessAudioSourceRequest::_internal_has_tasks() const {
  return this != internal_default_instance() && tasks_ != nullptr;
}
inline bool ProcessAudioSourceRequest::has_tasks() const {
  return _internal_has_tasks();
}
inline const ::speechly::slu::v2beta2::BatchTasks& ProcessAudioSourceRequest::_internal_tasks() const {
  const ::speechly::slu::v2beta2::BatchTasks* p = tasks_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v2beta2::BatchTasks&>(
      ::speechly::slu::v2beta2::_BatchTasks_default_instance_);
}
inline const ::speechly::slu::v2beta2::BatchTasks& ProcessAudioSourceRequest::tasks() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
  return _internal_tasks();
}
inline void ProcessAudioSourceRequest::unsafe_arena_set_allocated_tasks(
    ::speechly::slu::v2beta2::BatchTasks* tasks) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tasks_);
  }
  tasks_ = tasks;
  if (tasks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::release_tasks() {
  
  ::speechly::slu::v2beta2::BatchTasks* temp = tasks_;
  tasks_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::unsafe_arena_release_tasks() {
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
  
  ::speechly::slu::v2beta2::BatchTasks* temp = tasks_;
  tasks_ = nullptr;
  return temp;
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::_internal_mutable_tasks() {
  
  if (tasks_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v2beta2::BatchTasks>(GetArenaForAllocation());
    tasks_ = p;
  }
  return tasks_;
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::mutable_tasks() {
  ::speechly::slu::v2beta2::BatchTasks* _msg = _internal_mutable_tasks();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
  return _msg;
}
inline void ProcessAudioSourceRequest::set_allocated_tasks(::speechly::slu::v2beta2::BatchTasks* tasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tasks_);
  }
  if (tasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tasks));
    if (message_arena != submessage_arena) {
      tasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tasks, submessage_arena);
    }
    
  } else {
    
  }
  tasks_ = tasks;
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
}

// .speechly.slu.v2beta2.BatchConfig config = 2;
inline bool ProcessAudioSourceRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool ProcessAudioSourceRequest::has_config() const {
  return _internal_has_config();
}
inline const ::speechly::slu::v2beta2::BatchConfig& ProcessAudioSourceRequest::_internal_config() const {
  const ::speechly::slu::v2beta2::BatchConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v2beta2::BatchConfig&>(
      ::speechly::slu::v2beta2::_BatchConfig_default_instance_);
}
inline const ::speechly::slu::v2beta2::BatchConfig& ProcessAudioSourceRequest::config() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
  return _internal_config();
}
inline void ProcessAudioSourceRequest::unsafe_arena_set_allocated_config(
    ::speechly::slu::v2beta2::BatchConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::release_config() {
  
  ::speechly::slu::v2beta2::BatchConfig* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
  
  ::speechly::slu::v2beta2::BatchConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v2beta2::BatchConfig>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::mutable_config() {
  ::speechly::slu::v2beta2::BatchConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
  return _msg;
}
inline void ProcessAudioSourceRequest::set_allocated_config(::speechly::slu::v2beta2::BatchConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
}

// .speechly.slu.v2beta2.BatchOutput output = 3;
inline bool ProcessAudioSourceRequest::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool ProcessAudioSourceRequest::has_output() const {
  return _internal_has_output();
}
inline const ::speechly::slu::v2beta2::BatchOutput& ProcessAudioSourceRequest::_internal_output() const {
  const ::speechly::slu::v2beta2::BatchOutput* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v2beta2::BatchOutput&>(
      ::speechly::slu::v2beta2::_BatchOutput_default_instance_);
}
inline const ::speechly::slu::v2beta2::BatchOutput& ProcessAudioSourceRequest::output() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
  return _internal_output();
}
inline void ProcessAudioSourceRequest::unsafe_arena_set_allocated_output(
    ::speechly::slu::v2beta2::BatchOutput* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::release_output() {
  
  ::speechly::slu::v2beta2::BatchOutput* temp = output_;
  output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
  
  ::speechly::slu::v2beta2::BatchOutput* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v2beta2::BatchOutput>(GetArenaForAllocation());
    output_ = p;
  }
  return output_;
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::mutable_output() {
  ::speechly::slu::v2beta2::BatchOutput* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
  return _msg;
}
inline void ProcessAudioSourceRequest::set_allocated_output(::speechly::slu::v2beta2::BatchOutput* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output));
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
}

// repeated .speechly.slu.v2beta2.ProcessAudioSourceRequestItem source = 4;
inline int ProcessAudioSourceRequest::_internal_source_size() const {
  return source_.size();
}
inline int ProcessAudioSourceRequest::source_size() const {
  return _internal_source_size();
}
inline ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* ProcessAudioSourceRequest::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >*
ProcessAudioSourceRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return &source_;
}
inline const ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem& ProcessAudioSourceRequest::_internal_source(int index) const {
  return source_.Get(index);
}
inline const ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem& ProcessAudioSourceRequest::source(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return _internal_source(index);
}
inline ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* ProcessAudioSourceRequest::_internal_add_source() {
  return source_.Add();
}
inline ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* ProcessAudioSourceRequest::add_source() {
  ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* _add = _internal_add_source();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >&
ProcessAudioSourceRequest::source() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return source_;
}

// -------------------------------------------------------------------

// ProcessAudioSourceResponse

// repeated .speechly.slu.v2beta2.Operation operation = 1;
inline int ProcessAudioSourceResponse::_internal_operation_size() const {
  return operation_.size();
}
inline int ProcessAudioSourceResponse::operation_size() const {
  return _internal_operation_size();
}
inline ::speechly::slu::v2beta2::Operation* ProcessAudioSourceResponse::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return operation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
ProcessAudioSourceResponse::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return &operation_;
}
inline const ::speechly::slu::v2beta2::Operation& ProcessAudioSourceResponse::_internal_operation(int index) const {
  return operation_.Get(index);
}
inline const ::speechly::slu::v2beta2::Operation& ProcessAudioSourceResponse::operation(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return _internal_operation(index);
}
inline ::speechly::slu::v2beta2::Operation* ProcessAudioSourceResponse::_internal_add_operation() {
  return operation_.Add();
}
inline ::speechly::slu::v2beta2::Operation* ProcessAudioSourceResponse::add_operation() {
  ::speechly::slu::v2beta2::Operation* _add = _internal_add_operation();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
ProcessAudioSourceResponse::operation() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return operation_;
}

// -------------------------------------------------------------------

// QueryStatusRequest

// repeated string operation_ids = 1;
inline int QueryStatusRequest::_internal_operation_ids_size() const {
  return operation_ids_.size();
}
inline int QueryStatusRequest::operation_ids_size() const {
  return _internal_operation_ids_size();
}
inline void QueryStatusRequest::clear_operation_ids() {
  operation_ids_.Clear();
}
inline std::string* QueryStatusRequest::add_operation_ids() {
  std::string* _s = _internal_add_operation_ids();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_operation_ids(int index) const {
  return operation_ids_.Get(index);
}
inline const std::string& QueryStatusRequest::operation_ids(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return _internal_operation_ids(index);
}
inline std::string* QueryStatusRequest::mutable_operation_ids(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return operation_ids_.Mutable(index);
}
inline void QueryStatusRequest::set_operation_ids(int index, const std::string& value) {
  operation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::set_operation_ids(int index, std::string&& value) {
  operation_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::set_operation_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::set_operation_ids(int index, const char* value, size_t size) {
  operation_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline std::string* QueryStatusRequest::_internal_add_operation_ids() {
  return operation_ids_.Add();
}
inline void QueryStatusRequest::add_operation_ids(const std::string& value) {
  operation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(std::string&& value) {
  operation_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(const char* value, size_t size) {
  operation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryStatusRequest::operation_ids() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return operation_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryStatusRequest::mutable_operation_ids() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return &operation_ids_;
}

// repeated string operation_references = 2;
inline int QueryStatusRequest::_internal_operation_references_size() const {
  return operation_references_.size();
}
inline int QueryStatusRequest::operation_references_size() const {
  return _internal_operation_references_size();
}
inline void QueryStatusRequest::clear_operation_references() {
  operation_references_.Clear();
}
inline std::string* QueryStatusRequest::add_operation_references() {
  std::string* _s = _internal_add_operation_references();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_operation_references(int index) const {
  return operation_references_.Get(index);
}
inline const std::string& QueryStatusRequest::operation_references(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return _internal_operation_references(index);
}
inline std::string* QueryStatusRequest::mutable_operation_references(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return operation_references_.Mutable(index);
}
inline void QueryStatusRequest::set_operation_references(int index, const std::string& value) {
  operation_references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::set_operation_references(int index, std::string&& value) {
  operation_references_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::set_operation_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operation_references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::set_operation_references(int index, const char* value, size_t size) {
  operation_references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline std::string* QueryStatusRequest::_internal_add_operation_references() {
  return operation_references_.Add();
}
inline void QueryStatusRequest::add_operation_references(const std::string& value) {
  operation_references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(std::string&& value) {
  operation_references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operation_references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(const char* value, size_t size) {
  operation_references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryStatusRequest::operation_references() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return operation_references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryStatusRequest::mutable_operation_references() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return &operation_references_;
}

// string batch_id = 3;
inline void QueryStatusRequest::clear_batch_id() {
  batch_id_.ClearToEmpty();
}
inline const std::string& QueryStatusRequest::batch_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
  return _internal_batch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStatusRequest::set_batch_id(ArgT0&& arg0, ArgT... args) {
 
 batch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
}
inline std::string* QueryStatusRequest::mutable_batch_id() {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_batch_id() const {
  return batch_id_.Get();
}
inline void QueryStatusRequest::_internal_set_batch_id(const std::string& value) {
  
  batch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::_internal_mutable_batch_id() {
  
  return batch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::release_batch_id() {
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
  return batch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStatusRequest::set_allocated_batch_id(std::string* batch_id) {
  if (batch_id != nullptr) {
    
  } else {
    
  }
  batch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
}

// string batch_reference = 4;
inline void QueryStatusRequest::clear_batch_reference() {
  batch_reference_.ClearToEmpty();
}
inline const std::string& QueryStatusRequest::batch_reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
  return _internal_batch_reference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStatusRequest::set_batch_reference(ArgT0&& arg0, ArgT... args) {
 
 batch_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
}
inline std::string* QueryStatusRequest::mutable_batch_reference() {
  std::string* _s = _internal_mutable_batch_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_batch_reference() const {
  return batch_reference_.Get();
}
inline void QueryStatusRequest::_internal_set_batch_reference(const std::string& value) {
  
  batch_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::_internal_mutable_batch_reference() {
  
  return batch_reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::release_batch_reference() {
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
  return batch_reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStatusRequest::set_allocated_batch_reference(std::string* batch_reference) {
  if (batch_reference != nullptr) {
    
  } else {
    
  }
  batch_reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_reference,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
}

// -------------------------------------------------------------------

// QueryStatusResponse

// repeated .speechly.slu.v2beta2.Operation operation = 1;
inline int QueryStatusResponse::_internal_operation_size() const {
  return operation_.size();
}
inline int QueryStatusResponse::operation_size() const {
  return _internal_operation_size();
}
inline ::speechly::slu::v2beta2::Operation* QueryStatusResponse::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return operation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
QueryStatusResponse::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return &operation_;
}
inline const ::speechly::slu::v2beta2::Operation& QueryStatusResponse::_internal_operation(int index) const {
  return operation_.Get(index);
}
inline const ::speechly::slu::v2beta2::Operation& QueryStatusResponse::operation(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return _internal_operation(index);
}
inline ::speechly::slu::v2beta2::Operation* QueryStatusResponse::_internal_add_operation() {
  return operation_.Add();
}
inline ::speechly::slu::v2beta2::Operation* QueryStatusResponse::add_operation() {
  ::speechly::slu::v2beta2::Operation* _add = _internal_add_operation();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
QueryStatusResponse::operation() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return operation_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto
