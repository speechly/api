// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v2beta2/batch_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "speechly/slu/v2beta2/batch.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
namespace speechly {
namespace slu {
namespace v2beta2 {
class ProcessAudioSourceRequest;
struct ProcessAudioSourceRequestDefaultTypeInternal;
extern ProcessAudioSourceRequestDefaultTypeInternal _ProcessAudioSourceRequest_default_instance_;
class ProcessAudioSourceResponse;
struct ProcessAudioSourceResponseDefaultTypeInternal;
extern ProcessAudioSourceResponseDefaultTypeInternal _ProcessAudioSourceResponse_default_instance_;
class QueryStatusRequest;
struct QueryStatusRequestDefaultTypeInternal;
extern QueryStatusRequestDefaultTypeInternal _QueryStatusRequest_default_instance_;
class QueryStatusResponse;
struct QueryStatusResponseDefaultTypeInternal;
extern QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace slu {
namespace v2beta2 {

// ===================================================================


// -------------------------------------------------------------------

class ProcessAudioSourceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.ProcessAudioSourceRequest) */ {
 public:
  inline ProcessAudioSourceRequest() : ProcessAudioSourceRequest(nullptr) {}
  ~ProcessAudioSourceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessAudioSourceRequest(::google::protobuf::internal::ConstantInitialized);

  ProcessAudioSourceRequest(const ProcessAudioSourceRequest& from);
  ProcessAudioSourceRequest(ProcessAudioSourceRequest&& from) noexcept
    : ProcessAudioSourceRequest() {
    *this = ::std::move(from);
  }

  inline ProcessAudioSourceRequest& operator=(const ProcessAudioSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAudioSourceRequest& operator=(ProcessAudioSourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAudioSourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAudioSourceRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessAudioSourceRequest*>(
               &_ProcessAudioSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessAudioSourceRequest& a, ProcessAudioSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAudioSourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAudioSourceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAudioSourceRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAudioSourceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessAudioSourceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessAudioSourceRequest& from) {
    ProcessAudioSourceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAudioSourceRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.ProcessAudioSourceRequest";
  }
  protected:
  explicit ProcessAudioSourceRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 4,
    kTasksFieldNumber = 1,
    kConfigFieldNumber = 2,
    kOutputFieldNumber = 3,
  };
  // repeated .speechly.slu.v2beta2.ProcessAudioSourceRequestItem source = 4;
  int source_size() const;
  private:
  int _internal_source_size() const;

  public:
  void clear_source() ;
  ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* mutable_source(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >*
      mutable_source();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::ProcessAudioSourceRequestItem>& _internal_source() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::ProcessAudioSourceRequestItem>* _internal_mutable_source();
  public:
  const ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem& source(int index) const;
  ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* add_source();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >&
      source() const;
  // .speechly.slu.v2beta2.BatchTasks tasks = 1;
  bool has_tasks() const;
  void clear_tasks() ;
  const ::speechly::slu::v2beta2::BatchTasks& tasks() const;
  PROTOBUF_NODISCARD ::speechly::slu::v2beta2::BatchTasks* release_tasks();
  ::speechly::slu::v2beta2::BatchTasks* mutable_tasks();
  void set_allocated_tasks(::speechly::slu::v2beta2::BatchTasks* value);
  void unsafe_arena_set_allocated_tasks(::speechly::slu::v2beta2::BatchTasks* value);
  ::speechly::slu::v2beta2::BatchTasks* unsafe_arena_release_tasks();

  private:
  const ::speechly::slu::v2beta2::BatchTasks& _internal_tasks() const;
  ::speechly::slu::v2beta2::BatchTasks* _internal_mutable_tasks();

  public:
  // .speechly.slu.v2beta2.BatchConfig config = 2;
  bool has_config() const;
  void clear_config() ;
  const ::speechly::slu::v2beta2::BatchConfig& config() const;
  PROTOBUF_NODISCARD ::speechly::slu::v2beta2::BatchConfig* release_config();
  ::speechly::slu::v2beta2::BatchConfig* mutable_config();
  void set_allocated_config(::speechly::slu::v2beta2::BatchConfig* value);
  void unsafe_arena_set_allocated_config(::speechly::slu::v2beta2::BatchConfig* value);
  ::speechly::slu::v2beta2::BatchConfig* unsafe_arena_release_config();

  private:
  const ::speechly::slu::v2beta2::BatchConfig& _internal_config() const;
  ::speechly::slu::v2beta2::BatchConfig* _internal_mutable_config();

  public:
  // .speechly.slu.v2beta2.BatchOutput output = 3;
  bool has_output() const;
  void clear_output() ;
  const ::speechly::slu::v2beta2::BatchOutput& output() const;
  PROTOBUF_NODISCARD ::speechly::slu::v2beta2::BatchOutput* release_output();
  ::speechly::slu::v2beta2::BatchOutput* mutable_output();
  void set_allocated_output(::speechly::slu::v2beta2::BatchOutput* value);
  void unsafe_arena_set_allocated_output(::speechly::slu::v2beta2::BatchOutput* value);
  ::speechly::slu::v2beta2::BatchOutput* unsafe_arena_release_output();

  private:
  const ::speechly::slu::v2beta2::BatchOutput& _internal_output() const;
  ::speechly::slu::v2beta2::BatchOutput* _internal_mutable_output();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.ProcessAudioSourceRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem > source_;
    ::speechly::slu::v2beta2::BatchTasks* tasks_;
    ::speechly::slu::v2beta2::BatchConfig* config_;
    ::speechly::slu::v2beta2::BatchOutput* output_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};// -------------------------------------------------------------------

class ProcessAudioSourceResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.ProcessAudioSourceResponse) */ {
 public:
  inline ProcessAudioSourceResponse() : ProcessAudioSourceResponse(nullptr) {}
  ~ProcessAudioSourceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessAudioSourceResponse(::google::protobuf::internal::ConstantInitialized);

  ProcessAudioSourceResponse(const ProcessAudioSourceResponse& from);
  ProcessAudioSourceResponse(ProcessAudioSourceResponse&& from) noexcept
    : ProcessAudioSourceResponse() {
    *this = ::std::move(from);
  }

  inline ProcessAudioSourceResponse& operator=(const ProcessAudioSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAudioSourceResponse& operator=(ProcessAudioSourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAudioSourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAudioSourceResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessAudioSourceResponse*>(
               &_ProcessAudioSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessAudioSourceResponse& a, ProcessAudioSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAudioSourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAudioSourceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAudioSourceResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAudioSourceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessAudioSourceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessAudioSourceResponse& from) {
    ProcessAudioSourceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAudioSourceResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.ProcessAudioSourceResponse";
  }
  protected:
  explicit ProcessAudioSourceResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  int operation_size() const;
  private:
  int _internal_operation_size() const;

  public:
  void clear_operation() ;
  ::speechly::slu::v2beta2::Operation* mutable_operation(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
      mutable_operation();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>& _internal_operation() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>* _internal_mutable_operation();
  public:
  const ::speechly::slu::v2beta2::Operation& operation(int index) const;
  ::speechly::slu::v2beta2::Operation* add_operation();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
      operation() const;
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.ProcessAudioSourceResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation > operation_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};// -------------------------------------------------------------------

class QueryStatusRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.QueryStatusRequest) */ {
 public:
  inline QueryStatusRequest() : QueryStatusRequest(nullptr) {}
  ~QueryStatusRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryStatusRequest(::google::protobuf::internal::ConstantInitialized);

  QueryStatusRequest(const QueryStatusRequest& from);
  QueryStatusRequest(QueryStatusRequest&& from) noexcept
    : QueryStatusRequest() {
    *this = ::std::move(from);
  }

  inline QueryStatusRequest& operator=(const QueryStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatusRequest& operator=(QueryStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStatusRequest* internal_default_instance() {
    return reinterpret_cast<const QueryStatusRequest*>(
               &_QueryStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryStatusRequest& a, QueryStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryStatusRequest& from) {
    QueryStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStatusRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.QueryStatusRequest";
  }
  protected:
  explicit QueryStatusRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationIdsFieldNumber = 1,
    kOperationReferencesFieldNumber = 2,
    kBatchIdFieldNumber = 3,
    kBatchReferenceFieldNumber = 4,
  };
  // repeated string operation_ids = 1;
  int operation_ids_size() const;
  private:
  int _internal_operation_ids_size() const;

  public:
  void clear_operation_ids() ;
  const std::string& operation_ids(int index) const;
  std::string* mutable_operation_ids(int index);
  void set_operation_ids(int index, const std::string& value);
  void set_operation_ids(int index, std::string&& value);
  void set_operation_ids(int index, const char* value);
  void set_operation_ids(int index, const char* value, std::size_t size);
  void set_operation_ids(int index, absl::string_view value);
  std::string* add_operation_ids();
  void add_operation_ids(const std::string& value);
  void add_operation_ids(std::string&& value);
  void add_operation_ids(const char* value);
  void add_operation_ids(const char* value, std::size_t size);
  void add_operation_ids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& operation_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_operation_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_operation_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_operation_ids();

  public:
  // repeated string operation_references = 2;
  int operation_references_size() const;
  private:
  int _internal_operation_references_size() const;

  public:
  void clear_operation_references() ;
  const std::string& operation_references(int index) const;
  std::string* mutable_operation_references(int index);
  void set_operation_references(int index, const std::string& value);
  void set_operation_references(int index, std::string&& value);
  void set_operation_references(int index, const char* value);
  void set_operation_references(int index, const char* value, std::size_t size);
  void set_operation_references(int index, absl::string_view value);
  std::string* add_operation_references();
  void add_operation_references(const std::string& value);
  void add_operation_references(std::string&& value);
  void add_operation_references(const char* value);
  void add_operation_references(const char* value, std::size_t size);
  void add_operation_references(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& operation_references() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_operation_references();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_operation_references() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_operation_references();

  public:
  // string batch_id = 3;
  void clear_batch_id() ;
  const std::string& batch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_id(Arg_&& arg, Args_... args);
  std::string* mutable_batch_id();
  PROTOBUF_NODISCARD std::string* release_batch_id();
  void set_allocated_batch_id(std::string* ptr);

  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(
      const std::string& value);
  std::string* _internal_mutable_batch_id();

  public:
  // string batch_reference = 4;
  void clear_batch_reference() ;
  const std::string& batch_reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_reference(Arg_&& arg, Args_... args);
  std::string* mutable_batch_reference();
  PROTOBUF_NODISCARD std::string* release_batch_reference();
  void set_allocated_batch_reference(std::string* ptr);

  private:
  const std::string& _internal_batch_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_reference(
      const std::string& value);
  std::string* _internal_mutable_batch_reference();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.QueryStatusRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 104, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> operation_ids_;
    ::google::protobuf::RepeatedPtrField<std::string> operation_references_;
    ::google::protobuf::internal::ArenaStringPtr batch_id_;
    ::google::protobuf::internal::ArenaStringPtr batch_reference_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};// -------------------------------------------------------------------

class QueryStatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.QueryStatusResponse) */ {
 public:
  inline QueryStatusResponse() : QueryStatusResponse(nullptr) {}
  ~QueryStatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryStatusResponse(::google::protobuf::internal::ConstantInitialized);

  QueryStatusResponse(const QueryStatusResponse& from);
  QueryStatusResponse(QueryStatusResponse&& from) noexcept
    : QueryStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryStatusResponse& operator=(const QueryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatusResponse& operator=(QueryStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStatusResponse*>(
               &_QueryStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryStatusResponse& a, QueryStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryStatusResponse& from) {
    QueryStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStatusResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.QueryStatusResponse";
  }
  protected:
  explicit QueryStatusResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // repeated .speechly.slu.v2beta2.Operation operation = 1;
  int operation_size() const;
  private:
  int _internal_operation_size() const;

  public:
  void clear_operation() ;
  ::speechly::slu::v2beta2::Operation* mutable_operation(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
      mutable_operation();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>& _internal_operation() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>* _internal_mutable_operation();
  public:
  const ::speechly::slu::v2beta2::Operation& operation(int index) const;
  ::speechly::slu::v2beta2::Operation* add_operation();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
      operation() const;
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.QueryStatusResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation > operation_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessAudioSourceRequest

// .speechly.slu.v2beta2.BatchTasks tasks = 1;
inline bool ProcessAudioSourceRequest::has_tasks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tasks_ != nullptr);
  return value;
}
inline const ::speechly::slu::v2beta2::BatchTasks& ProcessAudioSourceRequest::_internal_tasks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v2beta2::BatchTasks* p = _impl_.tasks_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v2beta2::BatchTasks&>(::speechly::slu::v2beta2::_BatchTasks_default_instance_);
}
inline const ::speechly::slu::v2beta2::BatchTasks& ProcessAudioSourceRequest::tasks() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
  return _internal_tasks();
}
inline void ProcessAudioSourceRequest::unsafe_arena_set_allocated_tasks(::speechly::slu::v2beta2::BatchTasks* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tasks_);
  }
  _impl_.tasks_ = reinterpret_cast<::speechly::slu::v2beta2::BatchTasks*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::release_tasks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v2beta2::BatchTasks* released = _impl_.tasks_;
  _impl_.tasks_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::unsafe_arena_release_tasks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v2beta2::BatchTasks* temp = _impl_.tasks_;
  _impl_.tasks_ = nullptr;
  return temp;
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::_internal_mutable_tasks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tasks_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v2beta2::BatchTasks>(GetArenaForAllocation());
    _impl_.tasks_ = reinterpret_cast<::speechly::slu::v2beta2::BatchTasks*>(p);
  }
  return _impl_.tasks_;
}
inline ::speechly::slu::v2beta2::BatchTasks* ProcessAudioSourceRequest::mutable_tasks() {
  ::speechly::slu::v2beta2::BatchTasks* _msg = _internal_mutable_tasks();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
  return _msg;
}
inline void ProcessAudioSourceRequest::set_allocated_tasks(::speechly::slu::v2beta2::BatchTasks* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tasks_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tasks_ = reinterpret_cast<::speechly::slu::v2beta2::BatchTasks*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.tasks)
}

// .speechly.slu.v2beta2.BatchConfig config = 2;
inline bool ProcessAudioSourceRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline const ::speechly::slu::v2beta2::BatchConfig& ProcessAudioSourceRequest::_internal_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v2beta2::BatchConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v2beta2::BatchConfig&>(::speechly::slu::v2beta2::_BatchConfig_default_instance_);
}
inline const ::speechly::slu::v2beta2::BatchConfig& ProcessAudioSourceRequest::config() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
  return _internal_config();
}
inline void ProcessAudioSourceRequest::unsafe_arena_set_allocated_config(::speechly::slu::v2beta2::BatchConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::speechly::slu::v2beta2::BatchConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::release_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::speechly::slu::v2beta2::BatchConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::unsafe_arena_release_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::speechly::slu::v2beta2::BatchConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::_internal_mutable_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v2beta2::BatchConfig>(GetArenaForAllocation());
    _impl_.config_ = reinterpret_cast<::speechly::slu::v2beta2::BatchConfig*>(p);
  }
  return _impl_.config_;
}
inline ::speechly::slu::v2beta2::BatchConfig* ProcessAudioSourceRequest::mutable_config() {
  ::speechly::slu::v2beta2::BatchConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
  return _msg;
}
inline void ProcessAudioSourceRequest::set_allocated_config(::speechly::slu::v2beta2::BatchConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.config_ = reinterpret_cast<::speechly::slu::v2beta2::BatchConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.config)
}

// .speechly.slu.v2beta2.BatchOutput output = 3;
inline bool ProcessAudioSourceRequest::has_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_ != nullptr);
  return value;
}
inline const ::speechly::slu::v2beta2::BatchOutput& ProcessAudioSourceRequest::_internal_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v2beta2::BatchOutput* p = _impl_.output_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v2beta2::BatchOutput&>(::speechly::slu::v2beta2::_BatchOutput_default_instance_);
}
inline const ::speechly::slu::v2beta2::BatchOutput& ProcessAudioSourceRequest::output() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
  return _internal_output();
}
inline void ProcessAudioSourceRequest::unsafe_arena_set_allocated_output(::speechly::slu::v2beta2::BatchOutput* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_);
  }
  _impl_.output_ = reinterpret_cast<::speechly::slu::v2beta2::BatchOutput*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::release_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::speechly::slu::v2beta2::BatchOutput* released = _impl_.output_;
  _impl_.output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::unsafe_arena_release_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::speechly::slu::v2beta2::BatchOutput* temp = _impl_.output_;
  _impl_.output_ = nullptr;
  return temp;
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::_internal_mutable_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.output_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v2beta2::BatchOutput>(GetArenaForAllocation());
    _impl_.output_ = reinterpret_cast<::speechly::slu::v2beta2::BatchOutput*>(p);
  }
  return _impl_.output_;
}
inline ::speechly::slu::v2beta2::BatchOutput* ProcessAudioSourceRequest::mutable_output() {
  ::speechly::slu::v2beta2::BatchOutput* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
  return _msg;
}
inline void ProcessAudioSourceRequest::set_allocated_output(::speechly::slu::v2beta2::BatchOutput* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.output_ = reinterpret_cast<::speechly::slu::v2beta2::BatchOutput*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequest.output)
}

// repeated .speechly.slu.v2beta2.ProcessAudioSourceRequestItem source = 4;
inline int ProcessAudioSourceRequest::_internal_source_size() const {
  return _internal_source().size();
}
inline int ProcessAudioSourceRequest::source_size() const {
  return _internal_source_size();
}
inline ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* ProcessAudioSourceRequest::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return _internal_mutable_source()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >*
ProcessAudioSourceRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_source();
}
inline const ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem& ProcessAudioSourceRequest::source(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
    return _internal_source().Get(index);
}
inline ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* ProcessAudioSourceRequest::add_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem* _add = _internal_mutable_source()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::ProcessAudioSourceRequestItem >&
ProcessAudioSourceRequest::source() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.ProcessAudioSourceRequest.source)
  return _internal_source();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::ProcessAudioSourceRequestItem>&
ProcessAudioSourceRequest::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::ProcessAudioSourceRequestItem>*
ProcessAudioSourceRequest::_internal_mutable_source() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.source_;
}

// -------------------------------------------------------------------

// ProcessAudioSourceResponse

// repeated .speechly.slu.v2beta2.Operation operation = 1;
inline int ProcessAudioSourceResponse::_internal_operation_size() const {
  return _internal_operation().size();
}
inline int ProcessAudioSourceResponse::operation_size() const {
  return _internal_operation_size();
}
inline ::speechly::slu::v2beta2::Operation* ProcessAudioSourceResponse::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return _internal_mutable_operation()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
ProcessAudioSourceResponse::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_operation();
}
inline const ::speechly::slu::v2beta2::Operation& ProcessAudioSourceResponse::operation(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
    return _internal_operation().Get(index);
}
inline ::speechly::slu::v2beta2::Operation* ProcessAudioSourceResponse::add_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v2beta2::Operation* _add = _internal_mutable_operation()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
ProcessAudioSourceResponse::operation() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.ProcessAudioSourceResponse.operation)
  return _internal_operation();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>&
ProcessAudioSourceResponse::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.operation_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>*
ProcessAudioSourceResponse::_internal_mutable_operation() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.operation_;
}

// -------------------------------------------------------------------

// QueryStatusRequest

// repeated string operation_ids = 1;
inline int QueryStatusRequest::_internal_operation_ids_size() const {
  return _internal_operation_ids().size();
}
inline int QueryStatusRequest::operation_ids_size() const {
  return _internal_operation_ids_size();
}
inline void QueryStatusRequest::clear_operation_ids() {
  _internal_mutable_operation_ids()->Clear();
}
inline std::string* QueryStatusRequest::add_operation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_operation_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return _s;
}
inline const std::string& QueryStatusRequest::operation_ids(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return _internal_operation_ids().Get(index);
}
inline std::string* QueryStatusRequest::mutable_operation_ids(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return _internal_mutable_operation_ids()->Mutable(index);
}
inline void QueryStatusRequest::set_operation_ids(int index, const std::string& value) {
  _internal_mutable_operation_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::set_operation_ids(int index, std::string&& value) {
  _internal_mutable_operation_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::set_operation_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_operation_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::set_operation_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_operation_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::set_operation_ids(int index, absl::string_view value) {
  _internal_mutable_operation_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline void QueryStatusRequest::add_operation_ids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryStatusRequest::operation_ids() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  return _internal_operation_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* QueryStatusRequest::mutable_operation_ids() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.QueryStatusRequest.operation_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_operation_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryStatusRequest::_internal_operation_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.operation_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryStatusRequest::_internal_mutable_operation_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.operation_ids_;
}

// repeated string operation_references = 2;
inline int QueryStatusRequest::_internal_operation_references_size() const {
  return _internal_operation_references().size();
}
inline int QueryStatusRequest::operation_references_size() const {
  return _internal_operation_references_size();
}
inline void QueryStatusRequest::clear_operation_references() {
  _internal_mutable_operation_references()->Clear();
}
inline std::string* QueryStatusRequest::add_operation_references() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_operation_references()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return _s;
}
inline const std::string& QueryStatusRequest::operation_references(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return _internal_operation_references().Get(index);
}
inline std::string* QueryStatusRequest::mutable_operation_references(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return _internal_mutable_operation_references()->Mutable(index);
}
inline void QueryStatusRequest::set_operation_references(int index, const std::string& value) {
  _internal_mutable_operation_references()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::set_operation_references(int index, std::string&& value) {
  _internal_mutable_operation_references()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::set_operation_references(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_operation_references()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::set_operation_references(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_operation_references()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::set_operation_references(int index, absl::string_view value) {
  _internal_mutable_operation_references()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_references()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_references()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_references()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_references()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline void QueryStatusRequest::add_operation_references(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_operation_references()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryStatusRequest::operation_references() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  return _internal_operation_references();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* QueryStatusRequest::mutable_operation_references() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.QueryStatusRequest.operation_references)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_operation_references();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryStatusRequest::_internal_operation_references() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.operation_references_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryStatusRequest::_internal_mutable_operation_references() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.operation_references_;
}

// string batch_id = 3;
inline void QueryStatusRequest::clear_batch_id() {
  _impl_.batch_id_.ClearToEmpty();
}
inline const std::string& QueryStatusRequest::batch_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
  return _internal_batch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryStatusRequest::set_batch_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
}
inline std::string* QueryStatusRequest::mutable_batch_id() {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_batch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_id_.Get();
}
inline void QueryStatusRequest::_internal_set_batch_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::_internal_mutable_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::release_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
  return _impl_.batch_id_.Release();
}
inline void QueryStatusRequest::set_allocated_batch_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_id_.IsDefault()) {
          _impl_.batch_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.QueryStatusRequest.batch_id)
}

// string batch_reference = 4;
inline void QueryStatusRequest::clear_batch_reference() {
  _impl_.batch_reference_.ClearToEmpty();
}
inline const std::string& QueryStatusRequest::batch_reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
  return _internal_batch_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryStatusRequest::set_batch_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
}
inline std::string* QueryStatusRequest::mutable_batch_reference() {
  std::string* _s = _internal_mutable_batch_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_batch_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_reference_.Get();
}
inline void QueryStatusRequest::_internal_set_batch_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_reference_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::_internal_mutable_batch_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_reference_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::release_batch_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
  return _impl_.batch_reference_.Release();
}
inline void QueryStatusRequest::set_allocated_batch_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_reference_.IsDefault()) {
          _impl_.batch_reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.QueryStatusRequest.batch_reference)
}

// -------------------------------------------------------------------

// QueryStatusResponse

// repeated .speechly.slu.v2beta2.Operation operation = 1;
inline int QueryStatusResponse::_internal_operation_size() const {
  return _internal_operation().size();
}
inline int QueryStatusResponse::operation_size() const {
  return _internal_operation_size();
}
inline ::speechly::slu::v2beta2::Operation* QueryStatusResponse::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return _internal_mutable_operation()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >*
QueryStatusResponse::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.QueryStatusResponse.operation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_operation();
}
inline const ::speechly::slu::v2beta2::Operation& QueryStatusResponse::operation(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.QueryStatusResponse.operation)
    return _internal_operation().Get(index);
}
inline ::speechly::slu::v2beta2::Operation* QueryStatusResponse::add_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v2beta2::Operation* _add = _internal_mutable_operation()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Operation >&
QueryStatusResponse::operation() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.QueryStatusResponse.operation)
  return _internal_operation();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>&
QueryStatusResponse::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.operation_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Operation>*
QueryStatusResponse::_internal_mutable_operation() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.operation_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_5fapi_2eproto_2epb_2eh
