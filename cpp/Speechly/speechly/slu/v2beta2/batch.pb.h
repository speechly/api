// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v2beta2/batch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv2beta2_2fbatch_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
namespace speechly {
namespace slu {
namespace v2beta2 {
class BatchConfig;
struct BatchConfigDefaultTypeInternal;
extern BatchConfigDefaultTypeInternal _BatchConfig_default_instance_;
class BatchOutput;
struct BatchOutputDefaultTypeInternal;
extern BatchOutputDefaultTypeInternal _BatchOutput_default_instance_;
class BatchTasks;
struct BatchTasksDefaultTypeInternal;
extern BatchTasksDefaultTypeInternal _BatchTasks_default_instance_;
class HttpResource;
struct HttpResourceDefaultTypeInternal;
extern HttpResourceDefaultTypeInternal _HttpResource_default_instance_;
class HttpResource_Header;
struct HttpResource_HeaderDefaultTypeInternal;
extern HttpResource_HeaderDefaultTypeInternal _HttpResource_Header_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class OperationResult;
struct OperationResultDefaultTypeInternal;
extern OperationResultDefaultTypeInternal _OperationResult_default_instance_;
class Option;
struct OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class ProcessAudioSourceRequestItem;
struct ProcessAudioSourceRequestItemDefaultTypeInternal;
extern ProcessAudioSourceRequestItemDefaultTypeInternal _ProcessAudioSourceRequestItem_default_instance_;
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace slu {
namespace v2beta2 {
enum Operation_Status : int {
  Operation_Status_STATUS_UNSPECIFIED = 0,
  Operation_Status_STATUS_PENDING = 1,
  Operation_Status_STATUS_DONE = 2,
  Operation_Status_STATUS_ERROR = 3,
  Operation_Status_Operation_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Operation_Status_Operation_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Operation_Status_IsValid(int value);
constexpr Operation_Status Operation_Status_Status_MIN = static_cast<Operation_Status>(0);
constexpr Operation_Status Operation_Status_Status_MAX = static_cast<Operation_Status>(3);
constexpr int Operation_Status_Status_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Operation_Status_descriptor();
template <typename T>
const std::string& Operation_Status_Name(T value) {
  static_assert(std::is_same<T, Operation_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Operation_Status_Name(static_cast<Operation_Status>(value));
}
template <>
inline const std::string& Operation_Status_Name(Operation_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Operation_Status_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Operation_Status_Parse(absl::string_view name, Operation_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Status>(
      Operation_Status_descriptor(), name, value);
}
enum Operation_ErrorCode : int {
  Operation_ErrorCode_ERROR_UNSPECIFIED = 0,
  Operation_ErrorCode_ERROR_UNSUPPORTED_LANGUAGE = 1,
  Operation_ErrorCode_ERROR_INTERNAL = 2,
  Operation_ErrorCode_ERROR_INVALID_PARAMETERS = 3,
  Operation_ErrorCode_ERROR_INVALID_SOURCE = 4,
  Operation_ErrorCode_ERROR_INVALID_DESTINATION = 5,
  Operation_ErrorCode_ERROR_INVALID_AUDIO = 6,
  Operation_ErrorCode_Operation_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Operation_ErrorCode_Operation_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Operation_ErrorCode_IsValid(int value);
constexpr Operation_ErrorCode Operation_ErrorCode_ErrorCode_MIN = static_cast<Operation_ErrorCode>(0);
constexpr Operation_ErrorCode Operation_ErrorCode_ErrorCode_MAX = static_cast<Operation_ErrorCode>(6);
constexpr int Operation_ErrorCode_ErrorCode_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Operation_ErrorCode_descriptor();
template <typename T>
const std::string& Operation_ErrorCode_Name(T value) {
  static_assert(std::is_same<T, Operation_ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return Operation_ErrorCode_Name(static_cast<Operation_ErrorCode>(value));
}
template <>
inline const std::string& Operation_ErrorCode_Name(Operation_ErrorCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Operation_ErrorCode_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Operation_ErrorCode_Parse(absl::string_view name, Operation_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_ErrorCode>(
      Operation_ErrorCode_descriptor(), name, value);
}
enum OperationResult_ResultType : int {
  OperationResult_ResultType_RESULT_TYPE_UNSPECIFIED = 0,
  OperationResult_ResultType_RESULT_TYPE_TRANSCRIPT_LEXICAL = 1,
  OperationResult_ResultType_RESULT_TYPE_TRANSCRIPT_DISPLAY = 2,
  OperationResult_ResultType_RESULT_TYPE_TRANSCRIPT_TRANSLATION = 3,
  OperationResult_ResultType_OperationResult_ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OperationResult_ResultType_OperationResult_ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OperationResult_ResultType_IsValid(int value);
constexpr OperationResult_ResultType OperationResult_ResultType_ResultType_MIN = static_cast<OperationResult_ResultType>(0);
constexpr OperationResult_ResultType OperationResult_ResultType_ResultType_MAX = static_cast<OperationResult_ResultType>(3);
constexpr int OperationResult_ResultType_ResultType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
OperationResult_ResultType_descriptor();
template <typename T>
const std::string& OperationResult_ResultType_Name(T value) {
  static_assert(std::is_same<T, OperationResult_ResultType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResultType_Name().");
  return OperationResult_ResultType_Name(static_cast<OperationResult_ResultType>(value));
}
template <>
inline const std::string& OperationResult_ResultType_Name(OperationResult_ResultType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OperationResult_ResultType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool OperationResult_ResultType_Parse(absl::string_view name, OperationResult_ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperationResult_ResultType>(
      OperationResult_ResultType_descriptor(), name, value);
}
enum HttpResource_Method : int {
  HttpResource_Method_METHOD_UNSPECIFIED = 0,
  HttpResource_Method_METHOD_GET = 1,
  HttpResource_Method_METHOD_POST = 2,
  HttpResource_Method_METHOD_PUT = 3,
  HttpResource_Method_HttpResource_Method_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HttpResource_Method_HttpResource_Method_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HttpResource_Method_IsValid(int value);
constexpr HttpResource_Method HttpResource_Method_Method_MIN = static_cast<HttpResource_Method>(0);
constexpr HttpResource_Method HttpResource_Method_Method_MAX = static_cast<HttpResource_Method>(3);
constexpr int HttpResource_Method_Method_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
HttpResource_Method_descriptor();
template <typename T>
const std::string& HttpResource_Method_Name(T value) {
  static_assert(std::is_same<T, HttpResource_Method>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Method_Name().");
  return HttpResource_Method_Name(static_cast<HttpResource_Method>(value));
}
template <>
inline const std::string& HttpResource_Method_Name(HttpResource_Method value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HttpResource_Method_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool HttpResource_Method_Parse(absl::string_view name, HttpResource_Method* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpResource_Method>(
      HttpResource_Method_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BatchTasks final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.BatchTasks) */ {
 public:
  inline BatchTasks() : BatchTasks(nullptr) {}
  ~BatchTasks() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchTasks(::google::protobuf::internal::ConstantInitialized);

  BatchTasks(const BatchTasks& from);
  BatchTasks(BatchTasks&& from) noexcept
    : BatchTasks() {
    *this = ::std::move(from);
  }

  inline BatchTasks& operator=(const BatchTasks& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchTasks& operator=(BatchTasks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchTasks& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchTasks* internal_default_instance() {
    return reinterpret_cast<const BatchTasks*>(
               &_BatchTasks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatchTasks& a, BatchTasks& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchTasks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchTasks* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchTasks* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchTasks>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatchTasks& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BatchTasks& from) {
    BatchTasks::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchTasks* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.BatchTasks";
  }
  protected:
  explicit BatchTasks(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscribeFieldNumber = 1,
    kTranslateFieldNumber = 2,
  };
  // bool transcribe = 1;
  void clear_transcribe() ;
  bool transcribe() const;
  void set_transcribe(bool value);

  private:
  bool _internal_transcribe() const;
  void _internal_set_transcribe(bool value);

  public:
  // bool translate = 2;
  void clear_translate() ;
  bool translate() const;
  void set_translate(bool value);

  private:
  bool _internal_translate() const;
  void _internal_set_translate(bool value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.BatchTasks)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool transcribe_;
    bool translate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class BatchOutput final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.BatchOutput) */ {
 public:
  inline BatchOutput() : BatchOutput(nullptr) {}
  ~BatchOutput() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchOutput(::google::protobuf::internal::ConstantInitialized);

  BatchOutput(const BatchOutput& from);
  BatchOutput(BatchOutput&& from) noexcept
    : BatchOutput() {
    *this = ::std::move(from);
  }

  inline BatchOutput& operator=(const BatchOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchOutput& operator=(BatchOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchOutput* internal_default_instance() {
    return reinterpret_cast<const BatchOutput*>(
               &_BatchOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchOutput& a, BatchOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchOutput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchOutput* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchOutput>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatchOutput& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BatchOutput& from) {
    BatchOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchOutput* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.BatchOutput";
  }
  protected:
  explicit BatchOutput(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayFieldNumber = 1,
    kLexicalFieldNumber = 2,
    kTokenizedFieldNumber = 3,
  };
  // bool display = 1;
  void clear_display() ;
  bool display() const;
  void set_display(bool value);

  private:
  bool _internal_display() const;
  void _internal_set_display(bool value);

  public:
  // bool lexical = 2;
  void clear_lexical() ;
  bool lexical() const;
  void set_lexical(bool value);

  private:
  bool _internal_lexical() const;
  void _internal_set_lexical(bool value);

  public:
  // bool tokenized = 3;
  void clear_tokenized() ;
  bool tokenized() const;
  void set_tokenized(bool value);

  private:
  bool _internal_tokenized() const;
  void _internal_set_tokenized(bool value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.BatchOutput)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool display_;
    bool lexical_;
    bool tokenized_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class BatchConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.BatchConfig) */ {
 public:
  inline BatchConfig() : BatchConfig(nullptr) {}
  ~BatchConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchConfig(::google::protobuf::internal::ConstantInitialized);

  BatchConfig(const BatchConfig& from);
  BatchConfig(BatchConfig&& from) noexcept
    : BatchConfig() {
    *this = ::std::move(from);
  }

  inline BatchConfig& operator=(const BatchConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchConfig& operator=(BatchConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchConfig* internal_default_instance() {
    return reinterpret_cast<const BatchConfig*>(
               &_BatchConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BatchConfig& a, BatchConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatchConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BatchConfig& from) {
    BatchConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.BatchConfig";
  }
  protected:
  explicit BatchConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 2,
    kOptionsFieldNumber = 5,
    kModelIdFieldNumber = 1,
    kBatchReferenceFieldNumber = 4,
  };
  // repeated string language_codes = 2;
  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;

  public:
  void clear_language_codes() ;
  const std::string& language_codes(int index) const;
  std::string* mutable_language_codes(int index);
  void set_language_codes(int index, const std::string& value);
  void set_language_codes(int index, std::string&& value);
  void set_language_codes(int index, const char* value);
  void set_language_codes(int index, const char* value, std::size_t size);
  void set_language_codes(int index, absl::string_view value);
  std::string* add_language_codes();
  void add_language_codes(const std::string& value);
  void add_language_codes(std::string&& value);
  void add_language_codes(const char* value);
  void add_language_codes(const char* value, std::size_t size);
  void add_language_codes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_language_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_language_codes();

  public:
  // repeated .speechly.slu.v2beta2.Option options = 5;
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::speechly::slu::v2beta2::Option* mutable_options(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Option >*
      mutable_options();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Option>& _internal_options() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Option>* _internal_mutable_options();
  public:
  const ::speechly::slu::v2beta2::Option& options(int index) const;
  ::speechly::slu::v2beta2::Option* add_options();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Option >&
      options() const;
  // string model_id = 1;
  void clear_model_id() ;
  const std::string& model_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_id(Arg_&& arg, Args_... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* ptr);

  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(
      const std::string& value);
  std::string* _internal_mutable_model_id();

  public:
  // string batch_reference = 4;
  void clear_batch_reference() ;
  const std::string& batch_reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_reference(Arg_&& arg, Args_... args);
  std::string* mutable_batch_reference();
  PROTOBUF_NODISCARD std::string* release_batch_reference();
  void set_allocated_batch_reference(std::string* ptr);

  private:
  const std::string& _internal_batch_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_reference(
      const std::string& value);
  std::string* _internal_mutable_batch_reference();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.BatchConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 4, 1, 78, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> language_codes_;
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Option > options_;
    ::google::protobuf::internal::ArenaStringPtr model_id_;
    ::google::protobuf::internal::ArenaStringPtr batch_reference_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class ProcessAudioSourceRequestItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.ProcessAudioSourceRequestItem) */ {
 public:
  inline ProcessAudioSourceRequestItem() : ProcessAudioSourceRequestItem(nullptr) {}
  ~ProcessAudioSourceRequestItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessAudioSourceRequestItem(::google::protobuf::internal::ConstantInitialized);

  ProcessAudioSourceRequestItem(const ProcessAudioSourceRequestItem& from);
  ProcessAudioSourceRequestItem(ProcessAudioSourceRequestItem&& from) noexcept
    : ProcessAudioSourceRequestItem() {
    *this = ::std::move(from);
  }

  inline ProcessAudioSourceRequestItem& operator=(const ProcessAudioSourceRequestItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAudioSourceRequestItem& operator=(ProcessAudioSourceRequestItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAudioSourceRequestItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAudioSourceRequestItem* internal_default_instance() {
    return reinterpret_cast<const ProcessAudioSourceRequestItem*>(
               &_ProcessAudioSourceRequestItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessAudioSourceRequestItem& a, ProcessAudioSourceRequestItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAudioSourceRequestItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAudioSourceRequestItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAudioSourceRequestItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAudioSourceRequestItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessAudioSourceRequestItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessAudioSourceRequestItem& from) {
    ProcessAudioSourceRequestItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAudioSourceRequestItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.ProcessAudioSourceRequestItem";
  }
  protected:
  explicit ProcessAudioSourceRequestItem(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUrlFieldNumber = 1,
    kDestinationUrlFieldNumber = 2,
    kReferenceFieldNumber = 4,
    kDeviceIdFieldNumber = 5,
    kCompletionWebhookFieldNumber = 3,
  };
  // string source_url = 1;
  void clear_source_url() ;
  const std::string& source_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_url(Arg_&& arg, Args_... args);
  std::string* mutable_source_url();
  PROTOBUF_NODISCARD std::string* release_source_url();
  void set_allocated_source_url(std::string* ptr);

  private:
  const std::string& _internal_source_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_url(
      const std::string& value);
  std::string* _internal_mutable_source_url();

  public:
  // string destination_url = 2;
  void clear_destination_url() ;
  const std::string& destination_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_url(Arg_&& arg, Args_... args);
  std::string* mutable_destination_url();
  PROTOBUF_NODISCARD std::string* release_destination_url();
  void set_allocated_destination_url(std::string* ptr);

  private:
  const std::string& _internal_destination_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_url(
      const std::string& value);
  std::string* _internal_mutable_destination_url();

  public:
  // string reference = 4;
  void clear_reference() ;
  const std::string& reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reference(Arg_&& arg, Args_... args);
  std::string* mutable_reference();
  PROTOBUF_NODISCARD std::string* release_reference();
  void set_allocated_reference(std::string* ptr);

  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(
      const std::string& value);
  std::string* _internal_mutable_reference();

  public:
  // string device_id = 5;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* ptr);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
  bool has_completion_webhook() const;
  void clear_completion_webhook() ;
  const ::speechly::slu::v2beta2::HttpResource& completion_webhook() const;
  PROTOBUF_NODISCARD ::speechly::slu::v2beta2::HttpResource* release_completion_webhook();
  ::speechly::slu::v2beta2::HttpResource* mutable_completion_webhook();
  void set_allocated_completion_webhook(::speechly::slu::v2beta2::HttpResource* value);
  void unsafe_arena_set_allocated_completion_webhook(::speechly::slu::v2beta2::HttpResource* value);
  ::speechly::slu::v2beta2::HttpResource* unsafe_arena_release_completion_webhook();

  private:
  const ::speechly::slu::v2beta2::HttpResource& _internal_completion_webhook() const;
  ::speechly::slu::v2beta2::HttpResource* _internal_mutable_completion_webhook();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.ProcessAudioSourceRequestItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 102, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_url_;
    ::google::protobuf::internal::ArenaStringPtr destination_url_;
    ::google::protobuf::internal::ArenaStringPtr reference_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::speechly::slu::v2beta2::HttpResource* completion_webhook_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class Operation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Operation(::google::protobuf::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Operation& from) {
    Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.Operation";
  }
  protected:
  explicit Operation(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Status = Operation_Status;
  static constexpr Status STATUS_UNSPECIFIED = Operation_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_PENDING = Operation_Status_STATUS_PENDING;
  static constexpr Status STATUS_DONE = Operation_Status_STATUS_DONE;
  static constexpr Status STATUS_ERROR = Operation_Status_STATUS_ERROR;
  static inline bool Status_IsValid(int value) {
    return Operation_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = Operation_Status_Status_MIN;
  static constexpr Status Status_MAX = Operation_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = Operation_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return Operation_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return Operation_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return Operation_Status_Parse(name, value);
  }

  using ErrorCode = Operation_ErrorCode;
  static constexpr ErrorCode ERROR_UNSPECIFIED = Operation_ErrorCode_ERROR_UNSPECIFIED;
  static constexpr ErrorCode ERROR_UNSUPPORTED_LANGUAGE = Operation_ErrorCode_ERROR_UNSUPPORTED_LANGUAGE;
  static constexpr ErrorCode ERROR_INTERNAL = Operation_ErrorCode_ERROR_INTERNAL;
  static constexpr ErrorCode ERROR_INVALID_PARAMETERS = Operation_ErrorCode_ERROR_INVALID_PARAMETERS;
  static constexpr ErrorCode ERROR_INVALID_SOURCE = Operation_ErrorCode_ERROR_INVALID_SOURCE;
  static constexpr ErrorCode ERROR_INVALID_DESTINATION = Operation_ErrorCode_ERROR_INVALID_DESTINATION;
  static constexpr ErrorCode ERROR_INVALID_AUDIO = Operation_ErrorCode_ERROR_INVALID_AUDIO;
  static inline bool ErrorCode_IsValid(int value) {
    return Operation_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN = Operation_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX = Operation_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE = Operation_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
    return Operation_ErrorCode_descriptor();
  }
  template <typename T>
  static inline const std::string& ErrorCode_Name(T value) {
    return Operation_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(absl::string_view name, ErrorCode* value) {
    return Operation_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 6,
    kIdFieldNumber = 1,
    kReferenceFieldNumber = 2,
    kLanguageCodeFieldNumber = 4,
    kAppIdFieldNumber = 5,
    kBatchIdFieldNumber = 16,
    kBatchReferenceFieldNumber = 17,
    kErrorDescriptionFieldNumber = 19,
    kSourceUrlFieldNumber = 20,
    kDestinationUrlFieldNumber = 21,
    kDurationFieldNumber = 7,
    kStatusFieldNumber = 3,
    kErrorCodeFieldNumber = 18,
  };
  // repeated .speechly.slu.v2beta2.OperationResult result = 6;
  int result_size() const;
  private:
  int _internal_result_size() const;

  public:
  void clear_result() ;
  ::speechly::slu::v2beta2::OperationResult* mutable_result(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::OperationResult >*
      mutable_result();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::OperationResult>& _internal_result() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::OperationResult>* _internal_mutable_result();
  public:
  const ::speechly::slu::v2beta2::OperationResult& result(int index) const;
  ::speechly::slu::v2beta2::OperationResult* add_result();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::OperationResult >&
      result() const;
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string reference = 2;
  void clear_reference() ;
  const std::string& reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reference(Arg_&& arg, Args_... args);
  std::string* mutable_reference();
  PROTOBUF_NODISCARD std::string* release_reference();
  void set_allocated_reference(std::string* ptr);

  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(
      const std::string& value);
  std::string* _internal_mutable_reference();

  public:
  // string language_code = 4;
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* ptr);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // string app_id = 5;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string batch_id = 16;
  void clear_batch_id() ;
  const std::string& batch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_id(Arg_&& arg, Args_... args);
  std::string* mutable_batch_id();
  PROTOBUF_NODISCARD std::string* release_batch_id();
  void set_allocated_batch_id(std::string* ptr);

  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(
      const std::string& value);
  std::string* _internal_mutable_batch_id();

  public:
  // string batch_reference = 17;
  void clear_batch_reference() ;
  const std::string& batch_reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_reference(Arg_&& arg, Args_... args);
  std::string* mutable_batch_reference();
  PROTOBUF_NODISCARD std::string* release_batch_reference();
  void set_allocated_batch_reference(std::string* ptr);

  private:
  const std::string& _internal_batch_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_reference(
      const std::string& value);
  std::string* _internal_mutable_batch_reference();

  public:
  // string error_description = 19;
  void clear_error_description() ;
  const std::string& error_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_description(Arg_&& arg, Args_... args);
  std::string* mutable_error_description();
  PROTOBUF_NODISCARD std::string* release_error_description();
  void set_allocated_error_description(std::string* ptr);

  private:
  const std::string& _internal_error_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_description(
      const std::string& value);
  std::string* _internal_mutable_error_description();

  public:
  // string source_url = 20;
  void clear_source_url() ;
  const std::string& source_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_url(Arg_&& arg, Args_... args);
  std::string* mutable_source_url();
  PROTOBUF_NODISCARD std::string* release_source_url();
  void set_allocated_source_url(std::string* ptr);

  private:
  const std::string& _internal_source_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_url(
      const std::string& value);
  std::string* _internal_mutable_source_url();

  public:
  // string destination_url = 21;
  void clear_destination_url() ;
  const std::string& destination_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_url(Arg_&& arg, Args_... args);
  std::string* mutable_destination_url();
  PROTOBUF_NODISCARD std::string* release_destination_url();
  void set_allocated_destination_url(std::string* ptr);

  private:
  const std::string& _internal_destination_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_url(
      const std::string& value);
  std::string* _internal_mutable_destination_url();

  public:
  // .google.protobuf.Duration duration = 7;
  bool has_duration() const;
  void clear_duration() ;
  const ::google::protobuf::Duration& duration() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_duration(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_duration();

  private:
  const ::google::protobuf::Duration& _internal_duration() const;
  ::google::protobuf::Duration* _internal_mutable_duration();

  public:
  // .speechly.slu.v2beta2.Operation.Status status = 3;
  void clear_status() ;
  ::speechly::slu::v2beta2::Operation_Status status() const;
  void set_status(::speechly::slu::v2beta2::Operation_Status value);

  private:
  ::speechly::slu::v2beta2::Operation_Status _internal_status() const;
  void _internal_set_status(::speechly::slu::v2beta2::Operation_Status value);

  public:
  // .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
  void clear_error_code() ;
  ::speechly::slu::v2beta2::Operation_ErrorCode error_code() const;
  void set_error_code(::speechly::slu::v2beta2::Operation_ErrorCode value);

  private:
  ::speechly::slu::v2beta2::Operation_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::speechly::slu::v2beta2::Operation_ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.Operation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 13, 2, 142, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::OperationResult > result_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr reference_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr batch_id_;
    ::google::protobuf::internal::ArenaStringPtr batch_reference_;
    ::google::protobuf::internal::ArenaStringPtr error_description_;
    ::google::protobuf::internal::ArenaStringPtr source_url_;
    ::google::protobuf::internal::ArenaStringPtr destination_url_;
    ::google::protobuf::Duration* duration_;
    int status_;
    int error_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class OperationResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.OperationResult) */ {
 public:
  inline OperationResult() : OperationResult(nullptr) {}
  ~OperationResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OperationResult(::google::protobuf::internal::ConstantInitialized);

  OperationResult(const OperationResult& from);
  OperationResult(OperationResult&& from) noexcept
    : OperationResult() {
    *this = ::std::move(from);
  }

  inline OperationResult& operator=(const OperationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationResult& operator=(OperationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationResult* internal_default_instance() {
    return reinterpret_cast<const OperationResult*>(
               &_OperationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OperationResult& a, OperationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OperationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OperationResult& from) {
    OperationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.OperationResult";
  }
  protected:
  explicit OperationResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ResultType = OperationResult_ResultType;
  static constexpr ResultType RESULT_TYPE_UNSPECIFIED = OperationResult_ResultType_RESULT_TYPE_UNSPECIFIED;
  static constexpr ResultType RESULT_TYPE_TRANSCRIPT_LEXICAL = OperationResult_ResultType_RESULT_TYPE_TRANSCRIPT_LEXICAL;
  static constexpr ResultType RESULT_TYPE_TRANSCRIPT_DISPLAY = OperationResult_ResultType_RESULT_TYPE_TRANSCRIPT_DISPLAY;
  static constexpr ResultType RESULT_TYPE_TRANSCRIPT_TRANSLATION = OperationResult_ResultType_RESULT_TYPE_TRANSCRIPT_TRANSLATION;
  static inline bool ResultType_IsValid(int value) {
    return OperationResult_ResultType_IsValid(value);
  }
  static constexpr ResultType ResultType_MIN = OperationResult_ResultType_ResultType_MIN;
  static constexpr ResultType ResultType_MAX = OperationResult_ResultType_ResultType_MAX;
  static constexpr int ResultType_ARRAYSIZE = OperationResult_ResultType_ResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
    return OperationResult_ResultType_descriptor();
  }
  template <typename T>
  static inline const std::string& ResultType_Name(T value) {
    return OperationResult_ResultType_Name(value);
  }
  static inline bool ResultType_Parse(absl::string_view name, ResultType* value) {
    return OperationResult_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 3,
    kTextFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .speechly.slu.v2beta2.Token tokens = 3;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;

  public:
  void clear_tokens() ;
  ::speechly::slu::v2beta2::Token* mutable_tokens(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Token >*
      mutable_tokens();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Token>& _internal_tokens() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Token>* _internal_mutable_tokens();
  public:
  const ::speechly::slu::v2beta2::Token& tokens(int index) const;
  ::speechly::slu::v2beta2::Token* add_tokens();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Token >&
      tokens() const;
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
  void clear_type() ;
  ::speechly::slu::v2beta2::OperationResult_ResultType type() const;
  void set_type(::speechly::slu::v2beta2::OperationResult_ResultType value);

  private:
  ::speechly::slu::v2beta2::OperationResult_ResultType _internal_type() const;
  void _internal_set_type(::speechly::slu::v2beta2::OperationResult_ResultType value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.OperationResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Token > tokens_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class Token final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Token(::google::protobuf::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Token& from) {
    Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.Token";
  }
  protected:
  explicit Token(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kIndexFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // int32 index = 2;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 start_time = 3;
  void clear_start_time() ;
  ::int32_t start_time() const;
  void set_start_time(::int32_t value);

  private:
  ::int32_t _internal_start_time() const;
  void _internal_set_start_time(::int32_t value);

  public:
  // int32 end_time = 4;
  void clear_end_time() ;
  ::int32_t end_time() const;
  void set_end_time(::int32_t value);

  private:
  ::int32_t _internal_end_time() const;
  void _internal_set_end_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.Token)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::int32_t index_;
    ::int32_t start_time_;
    ::int32_t end_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class Option final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.Option) */ {
 public:
  inline Option() : Option(nullptr) {}
  ~Option() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Option(::google::protobuf::internal::ConstantInitialized);

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Option* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Option* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Option& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Option& from) {
    Option::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.Option";
  }
  protected:
  explicit Option(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, std::size_t size);
  void set_value(int index, absl::string_view value);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, std::size_t size);
  void add_value(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_value();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_value();

  public:
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.Option)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> value_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class HttpResource_Header final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.HttpResource.Header) */ {
 public:
  inline HttpResource_Header() : HttpResource_Header(nullptr) {}
  ~HttpResource_Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HttpResource_Header(::google::protobuf::internal::ConstantInitialized);

  HttpResource_Header(const HttpResource_Header& from);
  HttpResource_Header(HttpResource_Header&& from) noexcept
    : HttpResource_Header() {
    *this = ::std::move(from);
  }

  inline HttpResource_Header& operator=(const HttpResource_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResource_Header& operator=(HttpResource_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpResource_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpResource_Header* internal_default_instance() {
    return reinterpret_cast<const HttpResource_Header*>(
               &_HttpResource_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HttpResource_Header& a, HttpResource_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResource_Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResource_Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpResource_Header* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpResource_Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HttpResource_Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HttpResource_Header& from) {
    HttpResource_Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResource_Header* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.HttpResource.Header";
  }
  protected:
  explicit HttpResource_Header(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.HttpResource.Header)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 58, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};// -------------------------------------------------------------------

class HttpResource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v2beta2.HttpResource) */ {
 public:
  inline HttpResource() : HttpResource(nullptr) {}
  ~HttpResource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HttpResource(::google::protobuf::internal::ConstantInitialized);

  HttpResource(const HttpResource& from);
  HttpResource(HttpResource&& from) noexcept
    : HttpResource() {
    *this = ::std::move(from);
  }

  inline HttpResource& operator=(const HttpResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResource& operator=(HttpResource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpResource& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpResource* internal_default_instance() {
    return reinterpret_cast<const HttpResource*>(
               &_HttpResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HttpResource& a, HttpResource& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpResource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpResource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HttpResource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HttpResource& from) {
    HttpResource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResource* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v2beta2.HttpResource";
  }
  protected:
  explicit HttpResource(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HttpResource_Header Header;

  using Method = HttpResource_Method;
  static constexpr Method METHOD_UNSPECIFIED = HttpResource_Method_METHOD_UNSPECIFIED;
  static constexpr Method METHOD_GET = HttpResource_Method_METHOD_GET;
  static constexpr Method METHOD_POST = HttpResource_Method_METHOD_POST;
  static constexpr Method METHOD_PUT = HttpResource_Method_METHOD_PUT;
  static inline bool Method_IsValid(int value) {
    return HttpResource_Method_IsValid(value);
  }
  static constexpr Method Method_MIN = HttpResource_Method_Method_MIN;
  static constexpr Method Method_MAX = HttpResource_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE = HttpResource_Method_Method_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Method_descriptor() {
    return HttpResource_Method_descriptor();
  }
  template <typename T>
  static inline const std::string& Method_Name(T value) {
    return HttpResource_Method_Name(value);
  }
  static inline bool Method_Parse(absl::string_view name, Method* value) {
    return HttpResource_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kUrlFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  ::speechly::slu::v2beta2::HttpResource_Header* mutable_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::HttpResource_Header >*
      mutable_headers();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::HttpResource_Header>& _internal_headers() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::HttpResource_Header>* _internal_mutable_headers();
  public:
  const ::speechly::slu::v2beta2::HttpResource_Header& headers(int index) const;
  ::speechly::slu::v2beta2::HttpResource_Header* add_headers();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::HttpResource_Header >&
      headers() const;
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // .speechly.slu.v2beta2.HttpResource.Method method = 2;
  void clear_method() ;
  ::speechly::slu::v2beta2::HttpResource_Method method() const;
  void set_method(::speechly::slu::v2beta2::HttpResource_Method value);

  private:
  ::speechly::slu::v2beta2::HttpResource_Method _internal_method() const;
  void _internal_set_method(::speechly::slu::v2beta2::HttpResource_Method value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v2beta2.HttpResource)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::HttpResource_Header > headers_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    int method_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv2beta2_2fbatch_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BatchTasks

// bool transcribe = 1;
inline void BatchTasks::clear_transcribe() {
  _impl_.transcribe_ = false;
}
inline bool BatchTasks::transcribe() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchTasks.transcribe)
  return _internal_transcribe();
}
inline void BatchTasks::set_transcribe(bool value) {
  _internal_set_transcribe(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchTasks.transcribe)
}
inline bool BatchTasks::_internal_transcribe() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transcribe_;
}
inline void BatchTasks::_internal_set_transcribe(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transcribe_ = value;
}

// bool translate = 2;
inline void BatchTasks::clear_translate() {
  _impl_.translate_ = false;
}
inline bool BatchTasks::translate() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchTasks.translate)
  return _internal_translate();
}
inline void BatchTasks::set_translate(bool value) {
  _internal_set_translate(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchTasks.translate)
}
inline bool BatchTasks::_internal_translate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.translate_;
}
inline void BatchTasks::_internal_set_translate(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.translate_ = value;
}

// -------------------------------------------------------------------

// BatchOutput

// bool display = 1;
inline void BatchOutput::clear_display() {
  _impl_.display_ = false;
}
inline bool BatchOutput::display() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchOutput.display)
  return _internal_display();
}
inline void BatchOutput::set_display(bool value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchOutput.display)
}
inline bool BatchOutput::_internal_display() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_;
}
inline void BatchOutput::_internal_set_display(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_ = value;
}

// bool lexical = 2;
inline void BatchOutput::clear_lexical() {
  _impl_.lexical_ = false;
}
inline bool BatchOutput::lexical() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchOutput.lexical)
  return _internal_lexical();
}
inline void BatchOutput::set_lexical(bool value) {
  _internal_set_lexical(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchOutput.lexical)
}
inline bool BatchOutput::_internal_lexical() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lexical_;
}
inline void BatchOutput::_internal_set_lexical(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lexical_ = value;
}

// bool tokenized = 3;
inline void BatchOutput::clear_tokenized() {
  _impl_.tokenized_ = false;
}
inline bool BatchOutput::tokenized() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchOutput.tokenized)
  return _internal_tokenized();
}
inline void BatchOutput::set_tokenized(bool value) {
  _internal_set_tokenized(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchOutput.tokenized)
}
inline bool BatchOutput::_internal_tokenized() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tokenized_;
}
inline void BatchOutput::_internal_set_tokenized(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tokenized_ = value;
}

// -------------------------------------------------------------------

// BatchConfig

// string model_id = 1;
inline void BatchConfig::clear_model_id() {
  _impl_.model_id_.ClearToEmpty();
}
inline const std::string& BatchConfig::model_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchConfig.model_id)
  return _internal_model_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchConfig::set_model_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchConfig.model_id)
}
inline std::string* BatchConfig::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.BatchConfig.model_id)
  return _s;
}
inline const std::string& BatchConfig::_internal_model_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_id_.Get();
}
inline void BatchConfig::_internal_set_model_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchConfig::_internal_mutable_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchConfig::release_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.BatchConfig.model_id)
  return _impl_.model_id_.Release();
}
inline void BatchConfig::set_allocated_model_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_id_.IsDefault()) {
          _impl_.model_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.BatchConfig.model_id)
}

// repeated string language_codes = 2;
inline int BatchConfig::_internal_language_codes_size() const {
  return _internal_language_codes().size();
}
inline int BatchConfig::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void BatchConfig::clear_language_codes() {
  _internal_mutable_language_codes()->Clear();
}
inline std::string* BatchConfig::add_language_codes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_language_codes()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v2beta2.BatchConfig.language_codes)
  return _s;
}
inline const std::string& BatchConfig::language_codes(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchConfig.language_codes)
  return _internal_language_codes().Get(index);
}
inline std::string* BatchConfig::mutable_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.BatchConfig.language_codes)
  return _internal_mutable_language_codes()->Mutable(index);
}
inline void BatchConfig::set_language_codes(int index, const std::string& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::set_language_codes(int index, std::string&& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::set_language_codes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::set_language_codes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_language_codes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::set_language_codes(int index, absl::string_view value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::add_language_codes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::add_language_codes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::add_language_codes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::add_language_codes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline void BatchConfig::add_language_codes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.slu.v2beta2.BatchConfig.language_codes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BatchConfig::language_codes() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.BatchConfig.language_codes)
  return _internal_language_codes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* BatchConfig::mutable_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.BatchConfig.language_codes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_language_codes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BatchConfig::_internal_language_codes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_codes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BatchConfig::_internal_mutable_language_codes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.language_codes_;
}

// string batch_reference = 4;
inline void BatchConfig::clear_batch_reference() {
  _impl_.batch_reference_.ClearToEmpty();
}
inline const std::string& BatchConfig::batch_reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchConfig.batch_reference)
  return _internal_batch_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchConfig::set_batch_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.BatchConfig.batch_reference)
}
inline std::string* BatchConfig::mutable_batch_reference() {
  std::string* _s = _internal_mutable_batch_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.BatchConfig.batch_reference)
  return _s;
}
inline const std::string& BatchConfig::_internal_batch_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_reference_.Get();
}
inline void BatchConfig::_internal_set_batch_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_reference_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchConfig::_internal_mutable_batch_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_reference_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchConfig::release_batch_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.BatchConfig.batch_reference)
  return _impl_.batch_reference_.Release();
}
inline void BatchConfig::set_allocated_batch_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_reference_.IsDefault()) {
          _impl_.batch_reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.BatchConfig.batch_reference)
}

// repeated .speechly.slu.v2beta2.Option options = 5;
inline int BatchConfig::_internal_options_size() const {
  return _internal_options().size();
}
inline int BatchConfig::options_size() const {
  return _internal_options_size();
}
inline void BatchConfig::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::speechly::slu::v2beta2::Option* BatchConfig::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.BatchConfig.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Option >*
BatchConfig::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.BatchConfig.options)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_options();
}
inline const ::speechly::slu::v2beta2::Option& BatchConfig::options(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.BatchConfig.options)
    return _internal_options().Get(index);
}
inline ::speechly::slu::v2beta2::Option* BatchConfig::add_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v2beta2::Option* _add = _internal_mutable_options()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.BatchConfig.options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Option >&
BatchConfig::options() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.BatchConfig.options)
  return _internal_options();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Option>&
BatchConfig::_internal_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.options_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Option>*
BatchConfig::_internal_mutable_options() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.options_;
}

// -------------------------------------------------------------------

// ProcessAudioSourceRequestItem

// string source_url = 1;
inline void ProcessAudioSourceRequestItem::clear_source_url() {
  _impl_.source_url_.ClearToEmpty();
}
inline const std::string& ProcessAudioSourceRequestItem::source_url() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url)
  return _internal_source_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioSourceRequestItem::set_source_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url)
}
inline std::string* ProcessAudioSourceRequestItem::mutable_source_url() {
  std::string* _s = _internal_mutable_source_url();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url)
  return _s;
}
inline const std::string& ProcessAudioSourceRequestItem::_internal_source_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_url_.Get();
}
inline void ProcessAudioSourceRequestItem::_internal_set_source_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::_internal_mutable_source_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.source_url_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::release_source_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url)
  return _impl_.source_url_.Release();
}
inline void ProcessAudioSourceRequestItem::set_allocated_source_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_url_.IsDefault()) {
          _impl_.source_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.source_url)
}

// string destination_url = 2;
inline void ProcessAudioSourceRequestItem::clear_destination_url() {
  _impl_.destination_url_.ClearToEmpty();
}
inline const std::string& ProcessAudioSourceRequestItem::destination_url() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url)
  return _internal_destination_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioSourceRequestItem::set_destination_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.destination_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url)
}
inline std::string* ProcessAudioSourceRequestItem::mutable_destination_url() {
  std::string* _s = _internal_mutable_destination_url();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url)
  return _s;
}
inline const std::string& ProcessAudioSourceRequestItem::_internal_destination_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.destination_url_.Get();
}
inline void ProcessAudioSourceRequestItem::_internal_set_destination_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.destination_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::_internal_mutable_destination_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.destination_url_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::release_destination_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url)
  return _impl_.destination_url_.Release();
}
inline void ProcessAudioSourceRequestItem::set_allocated_destination_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.destination_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.destination_url_.IsDefault()) {
          _impl_.destination_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.destination_url)
}

// .speechly.slu.v2beta2.HttpResource completion_webhook = 3;
inline bool ProcessAudioSourceRequestItem::has_completion_webhook() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.completion_webhook_ != nullptr);
  return value;
}
inline void ProcessAudioSourceRequestItem::clear_completion_webhook() {
  if (_impl_.completion_webhook_ != nullptr) _impl_.completion_webhook_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::speechly::slu::v2beta2::HttpResource& ProcessAudioSourceRequestItem::_internal_completion_webhook() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v2beta2::HttpResource* p = _impl_.completion_webhook_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v2beta2::HttpResource&>(::speechly::slu::v2beta2::_HttpResource_default_instance_);
}
inline const ::speechly::slu::v2beta2::HttpResource& ProcessAudioSourceRequestItem::completion_webhook() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.completion_webhook)
  return _internal_completion_webhook();
}
inline void ProcessAudioSourceRequestItem::unsafe_arena_set_allocated_completion_webhook(::speechly::slu::v2beta2::HttpResource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.completion_webhook_);
  }
  _impl_.completion_webhook_ = reinterpret_cast<::speechly::slu::v2beta2::HttpResource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.completion_webhook)
}
inline ::speechly::slu::v2beta2::HttpResource* ProcessAudioSourceRequestItem::release_completion_webhook() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v2beta2::HttpResource* released = _impl_.completion_webhook_;
  _impl_.completion_webhook_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v2beta2::HttpResource* ProcessAudioSourceRequestItem::unsafe_arena_release_completion_webhook() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.completion_webhook)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v2beta2::HttpResource* temp = _impl_.completion_webhook_;
  _impl_.completion_webhook_ = nullptr;
  return temp;
}
inline ::speechly::slu::v2beta2::HttpResource* ProcessAudioSourceRequestItem::_internal_mutable_completion_webhook() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.completion_webhook_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v2beta2::HttpResource>(GetArenaForAllocation());
    _impl_.completion_webhook_ = reinterpret_cast<::speechly::slu::v2beta2::HttpResource*>(p);
  }
  return _impl_.completion_webhook_;
}
inline ::speechly::slu::v2beta2::HttpResource* ProcessAudioSourceRequestItem::mutable_completion_webhook() {
  ::speechly::slu::v2beta2::HttpResource* _msg = _internal_mutable_completion_webhook();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.completion_webhook)
  return _msg;
}
inline void ProcessAudioSourceRequestItem::set_allocated_completion_webhook(::speechly::slu::v2beta2::HttpResource* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::speechly::slu::v2beta2::HttpResource*>(_impl_.completion_webhook_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::speechly::slu::v2beta2::HttpResource*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.completion_webhook_ = reinterpret_cast<::speechly::slu::v2beta2::HttpResource*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.completion_webhook)
}

// string reference = 4;
inline void ProcessAudioSourceRequestItem::clear_reference() {
  _impl_.reference_.ClearToEmpty();
}
inline const std::string& ProcessAudioSourceRequestItem::reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference)
  return _internal_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioSourceRequestItem::set_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference)
}
inline std::string* ProcessAudioSourceRequestItem::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference)
  return _s;
}
inline const std::string& ProcessAudioSourceRequestItem::_internal_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reference_.Get();
}
inline void ProcessAudioSourceRequestItem::_internal_set_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::_internal_mutable_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reference_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::release_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference)
  return _impl_.reference_.Release();
}
inline void ProcessAudioSourceRequestItem::set_allocated_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reference_.IsDefault()) {
          _impl_.reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.reference)
}

// string device_id = 5;
inline void ProcessAudioSourceRequestItem::clear_device_id() {
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& ProcessAudioSourceRequestItem::device_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioSourceRequestItem::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id)
}
inline std::string* ProcessAudioSourceRequestItem::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id)
  return _s;
}
inline const std::string& ProcessAudioSourceRequestItem::_internal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_id_.Get();
}
inline void ProcessAudioSourceRequestItem::_internal_set_device_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::_internal_mutable_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioSourceRequestItem::release_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id)
  return _impl_.device_id_.Release();
}
inline void ProcessAudioSourceRequestItem::set_allocated_device_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_id_.IsDefault()) {
          _impl_.device_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.ProcessAudioSourceRequestItem.device_id)
}

// -------------------------------------------------------------------

// Operation

// string id = 1;
inline void Operation::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Operation::id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.id)
}
inline std::string* Operation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.id)
  return _s;
}
inline const std::string& Operation::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Operation::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.id)
  return _impl_.id_.Release();
}
inline void Operation::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.id)
}

// string reference = 2;
inline void Operation::clear_reference() {
  _impl_.reference_.ClearToEmpty();
}
inline const std::string& Operation::reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.reference)
  return _internal_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.reference)
}
inline std::string* Operation::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.reference)
  return _s;
}
inline const std::string& Operation::_internal_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reference_.Get();
}
inline void Operation::_internal_set_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reference_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.reference)
  return _impl_.reference_.Release();
}
inline void Operation::set_allocated_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reference_.IsDefault()) {
          _impl_.reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.reference)
}

// string batch_id = 16;
inline void Operation::clear_batch_id() {
  _impl_.batch_id_.ClearToEmpty();
}
inline const std::string& Operation::batch_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.batch_id)
  return _internal_batch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_batch_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.batch_id)
}
inline std::string* Operation::mutable_batch_id() {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.batch_id)
  return _s;
}
inline const std::string& Operation::_internal_batch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_id_.Get();
}
inline void Operation::_internal_set_batch_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.batch_id)
  return _impl_.batch_id_.Release();
}
inline void Operation::set_allocated_batch_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_id_.IsDefault()) {
          _impl_.batch_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.batch_id)
}

// string batch_reference = 17;
inline void Operation::clear_batch_reference() {
  _impl_.batch_reference_.ClearToEmpty();
}
inline const std::string& Operation::batch_reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.batch_reference)
  return _internal_batch_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_batch_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.batch_reference)
}
inline std::string* Operation::mutable_batch_reference() {
  std::string* _s = _internal_mutable_batch_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.batch_reference)
  return _s;
}
inline const std::string& Operation::_internal_batch_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_reference_.Get();
}
inline void Operation::_internal_set_batch_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_reference_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_batch_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_reference_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_batch_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.batch_reference)
  return _impl_.batch_reference_.Release();
}
inline void Operation::set_allocated_batch_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_reference_.IsDefault()) {
          _impl_.batch_reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.batch_reference)
}

// .speechly.slu.v2beta2.Operation.Status status = 3;
inline void Operation::clear_status() {
  _impl_.status_ = 0;
}
inline ::speechly::slu::v2beta2::Operation_Status Operation::status() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.status)
  return _internal_status();
}
inline void Operation::set_status(::speechly::slu::v2beta2::Operation_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.status)
}
inline ::speechly::slu::v2beta2::Operation_Status Operation::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::slu::v2beta2::Operation_Status>(_impl_.status_);
}
inline void Operation::_internal_set_status(::speechly::slu::v2beta2::Operation_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// string language_code = 4;
inline void Operation::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& Operation::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.language_code)
}
inline std::string* Operation::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.language_code)
  return _s;
}
inline const std::string& Operation::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void Operation::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.language_code)
  return _impl_.language_code_.Release();
}
inline void Operation::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.language_code)
}

// string app_id = 5;
inline void Operation::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& Operation::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.app_id)
}
inline std::string* Operation::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.app_id)
  return _s;
}
inline const std::string& Operation::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void Operation::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.app_id)
  return _impl_.app_id_.Release();
}
inline void Operation::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.app_id)
}

// repeated .speechly.slu.v2beta2.OperationResult result = 6;
inline int Operation::_internal_result_size() const {
  return _internal_result().size();
}
inline int Operation::result_size() const {
  return _internal_result_size();
}
inline void Operation::clear_result() {
  _internal_mutable_result()->Clear();
}
inline ::speechly::slu::v2beta2::OperationResult* Operation::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.result)
  return _internal_mutable_result()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::OperationResult >*
Operation::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.Operation.result)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_result();
}
inline const ::speechly::slu::v2beta2::OperationResult& Operation::result(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.result)
    return _internal_result().Get(index);
}
inline ::speechly::slu::v2beta2::OperationResult* Operation::add_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v2beta2::OperationResult* _add = _internal_mutable_result()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.Operation.result)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::OperationResult >&
Operation::result() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.Operation.result)
  return _internal_result();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::OperationResult>&
Operation::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::OperationResult>*
Operation::_internal_mutable_result() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.result_;
}

// .google.protobuf.Duration duration = 7;
inline bool Operation::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.duration_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& Operation::_internal_duration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& Operation::duration() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.duration)
  return _internal_duration();
}
inline void Operation::unsafe_arena_set_allocated_duration(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v2beta2.Operation.duration)
}
inline ::google::protobuf::Duration* Operation::release_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* Operation::unsafe_arena_release_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.duration)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* Operation::_internal_mutable_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
    _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.duration_;
}
inline ::google::protobuf::Duration* Operation::mutable_duration() {
  ::google::protobuf::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.duration)
  return _msg;
}
inline void Operation::set_allocated_duration(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.duration)
}

// .speechly.slu.v2beta2.Operation.ErrorCode error_code = 18;
inline void Operation::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline ::speechly::slu::v2beta2::Operation_ErrorCode Operation::error_code() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.error_code)
  return _internal_error_code();
}
inline void Operation::set_error_code(::speechly::slu::v2beta2::Operation_ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.error_code)
}
inline ::speechly::slu::v2beta2::Operation_ErrorCode Operation::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::slu::v2beta2::Operation_ErrorCode>(_impl_.error_code_);
}
inline void Operation::_internal_set_error_code(::speechly::slu::v2beta2::Operation_ErrorCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_code_ = value;
}

// string error_description = 19;
inline void Operation::clear_error_description() {
  _impl_.error_description_.ClearToEmpty();
}
inline const std::string& Operation::error_description() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.error_description)
  return _internal_error_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_error_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.error_description)
}
inline std::string* Operation::mutable_error_description() {
  std::string* _s = _internal_mutable_error_description();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.error_description)
  return _s;
}
inline const std::string& Operation::_internal_error_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_description_.Get();
}
inline void Operation::_internal_set_error_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_description_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_error_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_description_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_error_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.error_description)
  return _impl_.error_description_.Release();
}
inline void Operation::set_allocated_error_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_description_.IsDefault()) {
          _impl_.error_description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.error_description)
}

// string source_url = 20;
inline void Operation::clear_source_url() {
  _impl_.source_url_.ClearToEmpty();
}
inline const std::string& Operation::source_url() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.source_url)
  return _internal_source_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_source_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.source_url)
}
inline std::string* Operation::mutable_source_url() {
  std::string* _s = _internal_mutable_source_url();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.source_url)
  return _s;
}
inline const std::string& Operation::_internal_source_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_url_.Get();
}
inline void Operation::_internal_set_source_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_source_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.source_url_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_source_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.source_url)
  return _impl_.source_url_.Release();
}
inline void Operation::set_allocated_source_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_url_.IsDefault()) {
          _impl_.source_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.source_url)
}

// string destination_url = 21;
inline void Operation::clear_destination_url() {
  _impl_.destination_url_.ClearToEmpty();
}
inline const std::string& Operation::destination_url() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Operation.destination_url)
  return _internal_destination_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_destination_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.destination_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Operation.destination_url)
}
inline std::string* Operation::mutable_destination_url() {
  std::string* _s = _internal_mutable_destination_url();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Operation.destination_url)
  return _s;
}
inline const std::string& Operation::_internal_destination_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.destination_url_.Get();
}
inline void Operation::_internal_set_destination_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.destination_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_destination_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.destination_url_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_destination_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Operation.destination_url)
  return _impl_.destination_url_.Release();
}
inline void Operation::set_allocated_destination_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.destination_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.destination_url_.IsDefault()) {
          _impl_.destination_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Operation.destination_url)
}

// -------------------------------------------------------------------

// OperationResult

// .speechly.slu.v2beta2.OperationResult.ResultType type = 1;
inline void OperationResult::clear_type() {
  _impl_.type_ = 0;
}
inline ::speechly::slu::v2beta2::OperationResult_ResultType OperationResult::type() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.OperationResult.type)
  return _internal_type();
}
inline void OperationResult::set_type(::speechly::slu::v2beta2::OperationResult_ResultType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.OperationResult.type)
}
inline ::speechly::slu::v2beta2::OperationResult_ResultType OperationResult::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::slu::v2beta2::OperationResult_ResultType>(_impl_.type_);
}
inline void OperationResult::_internal_set_type(::speechly::slu::v2beta2::OperationResult_ResultType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string text = 2;
inline void OperationResult::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& OperationResult::text() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.OperationResult.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationResult::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.OperationResult.text)
}
inline std::string* OperationResult::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.OperationResult.text)
  return _s;
}
inline const std::string& OperationResult::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void OperationResult::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationResult::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* OperationResult::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.OperationResult.text)
  return _impl_.text_.Release();
}
inline void OperationResult::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.OperationResult.text)
}

// repeated .speechly.slu.v2beta2.Token tokens = 3;
inline int OperationResult::_internal_tokens_size() const {
  return _internal_tokens().size();
}
inline int OperationResult::tokens_size() const {
  return _internal_tokens_size();
}
inline void OperationResult::clear_tokens() {
  _internal_mutable_tokens()->Clear();
}
inline ::speechly::slu::v2beta2::Token* OperationResult::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.OperationResult.tokens)
  return _internal_mutable_tokens()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Token >*
OperationResult::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.OperationResult.tokens)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tokens();
}
inline const ::speechly::slu::v2beta2::Token& OperationResult::tokens(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.OperationResult.tokens)
    return _internal_tokens().Get(index);
}
inline ::speechly::slu::v2beta2::Token* OperationResult::add_tokens() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v2beta2::Token* _add = _internal_mutable_tokens()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.OperationResult.tokens)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::Token >&
OperationResult::tokens() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.OperationResult.tokens)
  return _internal_tokens();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Token>&
OperationResult::_internal_tokens() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tokens_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::Token>*
OperationResult::_internal_mutable_tokens() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tokens_;
}

// -------------------------------------------------------------------

// Token

// string token = 1;
inline void Token::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Token::token() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Token.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Token.token)
}
inline std::string* Token::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Token.token)
  return _s;
}
inline const std::string& Token::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void Token::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Token.token)
  return _impl_.token_.Release();
}
inline void Token::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Token.token)
}

// int32 index = 2;
inline void Token::clear_index() {
  _impl_.index_ = 0;
}
inline ::int32_t Token::index() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Token.index)
  return _internal_index();
}
inline void Token::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Token.index)
}
inline ::int32_t Token::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void Token::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// int32 start_time = 3;
inline void Token::clear_start_time() {
  _impl_.start_time_ = 0;
}
inline ::int32_t Token::start_time() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Token.start_time)
  return _internal_start_time();
}
inline void Token::set_start_time(::int32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Token.start_time)
}
inline ::int32_t Token::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_;
}
inline void Token::_internal_set_start_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_ = value;
}

// int32 end_time = 4;
inline void Token::clear_end_time() {
  _impl_.end_time_ = 0;
}
inline ::int32_t Token::end_time() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Token.end_time)
  return _internal_end_time();
}
inline void Token::set_end_time(::int32_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Token.end_time)
}
inline ::int32_t Token::_internal_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_time_;
}
inline void Token::_internal_set_end_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_time_ = value;
}

// -------------------------------------------------------------------

// Option

// string key = 1;
inline void Option::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Option::key() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Option.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Option.key)
}
inline std::string* Option::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Option.key)
  return _s;
}
inline const std::string& Option::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void Option::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Option::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* Option::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.Option.key)
  return _impl_.key_.Release();
}
inline void Option::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.Option.key)
}

// repeated string value = 2;
inline int Option::_internal_value_size() const {
  return _internal_value().size();
}
inline int Option::value_size() const {
  return _internal_value_size();
}
inline void Option::clear_value() {
  _internal_mutable_value()->Clear();
}
inline std::string* Option::add_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_value()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v2beta2.Option.value)
  return _s;
}
inline const std::string& Option::value(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.Option.value)
  return _internal_value().Get(index);
}
inline std::string* Option::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.Option.value)
  return _internal_mutable_value()->Mutable(index);
}
inline void Option::set_value(int index, const std::string& value) {
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Option.value)
}
inline void Option::set_value(int index, std::string&& value) {
  _internal_mutable_value()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.Option.value)
}
inline void Option::set_value(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v2beta2.Option.value)
}
inline void Option::set_value(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_value()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v2beta2.Option.value)
}
inline void Option::set_value(int index, absl::string_view value) {
  _internal_mutable_value()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.slu.v2beta2.Option.value)
}
inline void Option::add_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.Option.value)
}
inline void Option::add_value(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.Option.value)
}
inline void Option::add_value(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v2beta2.Option.value)
}
inline void Option::add_value(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v2beta2.Option.value)
}
inline void Option::add_value(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.slu.v2beta2.Option.value)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Option::value() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.Option.value)
  return _internal_value();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Option::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.Option.value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_value();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Option::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Option::_internal_mutable_value() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.value_;
}

// -------------------------------------------------------------------

// HttpResource_Header

// string name = 1;
inline void HttpResource_Header::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HttpResource_Header::name() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.HttpResource.Header.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResource_Header::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.HttpResource.Header.name)
}
inline std::string* HttpResource_Header::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.HttpResource.Header.name)
  return _s;
}
inline const std::string& HttpResource_Header::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void HttpResource_Header::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResource_Header::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.HttpResource.Header.name)
  return _impl_.name_.Release();
}
inline void HttpResource_Header::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.HttpResource.Header.name)
}

// string value = 2;
inline void HttpResource_Header::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& HttpResource_Header::value() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.HttpResource.Header.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResource_Header::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.HttpResource.Header.value)
}
inline std::string* HttpResource_Header::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.HttpResource.Header.value)
  return _s;
}
inline const std::string& HttpResource_Header::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void HttpResource_Header::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResource_Header::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.HttpResource.Header.value)
  return _impl_.value_.Release();
}
inline void HttpResource_Header::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.HttpResource.Header.value)
}

// -------------------------------------------------------------------

// HttpResource

// string url = 1;
inline void HttpResource::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& HttpResource::url() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.HttpResource.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResource::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.HttpResource.url)
}
inline std::string* HttpResource::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.HttpResource.url)
  return _s;
}
inline const std::string& HttpResource::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void HttpResource::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResource::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResource::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v2beta2.HttpResource.url)
  return _impl_.url_.Release();
}
inline void HttpResource::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v2beta2.HttpResource.url)
}

// .speechly.slu.v2beta2.HttpResource.Method method = 2;
inline void HttpResource::clear_method() {
  _impl_.method_ = 0;
}
inline ::speechly::slu::v2beta2::HttpResource_Method HttpResource::method() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.HttpResource.method)
  return _internal_method();
}
inline void HttpResource::set_method(::speechly::slu::v2beta2::HttpResource_Method value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v2beta2.HttpResource.method)
}
inline ::speechly::slu::v2beta2::HttpResource_Method HttpResource::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::slu::v2beta2::HttpResource_Method>(_impl_.method_);
}
inline void HttpResource::_internal_set_method(::speechly::slu::v2beta2::HttpResource_Method value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_ = value;
}

// repeated .speechly.slu.v2beta2.HttpResource.Header headers = 3;
inline int HttpResource::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int HttpResource::headers_size() const {
  return _internal_headers_size();
}
inline void HttpResource::clear_headers() {
  _internal_mutable_headers()->Clear();
}
inline ::speechly::slu::v2beta2::HttpResource_Header* HttpResource::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v2beta2.HttpResource.headers)
  return _internal_mutable_headers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::HttpResource_Header >*
HttpResource::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v2beta2.HttpResource.headers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_headers();
}
inline const ::speechly::slu::v2beta2::HttpResource_Header& HttpResource::headers(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v2beta2.HttpResource.headers)
    return _internal_headers().Get(index);
}
inline ::speechly::slu::v2beta2::HttpResource_Header* HttpResource::add_headers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v2beta2::HttpResource_Header* _add = _internal_mutable_headers()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v2beta2.HttpResource.headers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v2beta2::HttpResource_Header >&
HttpResource::headers() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v2beta2.HttpResource.headers)
  return _internal_headers();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::HttpResource_Header>&
HttpResource::_internal_headers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.headers_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v2beta2::HttpResource_Header>*
HttpResource::_internal_mutable_headers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.headers_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta2
}  // namespace slu
}  // namespace speechly


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::speechly::slu::v2beta2::Operation_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::slu::v2beta2::Operation_Status>() {
  return ::speechly::slu::v2beta2::Operation_Status_descriptor();
}
template <>
struct is_proto_enum<::speechly::slu::v2beta2::Operation_ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::slu::v2beta2::Operation_ErrorCode>() {
  return ::speechly::slu::v2beta2::Operation_ErrorCode_descriptor();
}
template <>
struct is_proto_enum<::speechly::slu::v2beta2::OperationResult_ResultType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::slu::v2beta2::OperationResult_ResultType>() {
  return ::speechly::slu::v2beta2::OperationResult_ResultType_descriptor();
}
template <>
struct is_proto_enum<::speechly::slu::v2beta2::HttpResource_Method> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::slu::v2beta2::HttpResource_Method>() {
  return ::speechly::slu::v2beta2::HttpResource_Method_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv2beta2_2fbatch_2eproto_2epb_2eh
