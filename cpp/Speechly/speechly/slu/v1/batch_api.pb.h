// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/batch_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "speechly/slu/v1/batch.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto;
namespace speechly {
namespace slu {
namespace v1 {
class ProcessAudioRequest;
struct ProcessAudioRequestDefaultTypeInternal;
extern ProcessAudioRequestDefaultTypeInternal _ProcessAudioRequest_default_instance_;
class ProcessAudioResponse;
struct ProcessAudioResponseDefaultTypeInternal;
extern ProcessAudioResponseDefaultTypeInternal _ProcessAudioResponse_default_instance_;
class QueryStatusRequest;
struct QueryStatusRequestDefaultTypeInternal;
extern QueryStatusRequestDefaultTypeInternal _QueryStatusRequest_default_instance_;
class QueryStatusResponse;
struct QueryStatusResponseDefaultTypeInternal;
extern QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace slu {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ProcessAudioRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.ProcessAudioRequest) */ {
 public:
  inline ProcessAudioRequest() : ProcessAudioRequest(nullptr) {}
  ~ProcessAudioRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessAudioRequest(::google::protobuf::internal::ConstantInitialized);

  ProcessAudioRequest(const ProcessAudioRequest& from);
  ProcessAudioRequest(ProcessAudioRequest&& from) noexcept
    : ProcessAudioRequest() {
    *this = ::std::move(from);
  }

  inline ProcessAudioRequest& operator=(const ProcessAudioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAudioRequest& operator=(ProcessAudioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAudioRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kAudio = 3,
    kUri = 4,
    kHttpSource = 9,
    SOURCE_NOT_SET = 0,
  };

  enum DestinationCase {
    kResultsUri = 5,
    kHttpResult = 10,
    DESTINATION_NOT_SET = 0,
  };

  static inline const ProcessAudioRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessAudioRequest*>(
               &_ProcessAudioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessAudioRequest& a, ProcessAudioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAudioRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAudioRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAudioRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAudioRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessAudioRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessAudioRequest& from) {
    ProcessAudioRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAudioRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.ProcessAudioRequest";
  }
  protected:
  explicit ProcessAudioRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 7,
    kAppIdFieldNumber = 1,
    kReferenceFieldNumber = 6,
    kDeviceIdFieldNumber = 8,
    kConfigFieldNumber = 2,
    kAudioFieldNumber = 3,
    kUriFieldNumber = 4,
    kHttpSourceFieldNumber = 9,
    kResultsUriFieldNumber = 5,
    kHttpResultFieldNumber = 10,
  };
  // repeated .speechly.slu.v1.Option options = 7;
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::speechly::slu::v1::Option* mutable_options(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Option >*
      mutable_options();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Option>& _internal_options() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Option>* _internal_mutable_options();
  public:
  const ::speechly::slu::v1::Option& options(int index) const;
  ::speechly::slu::v1::Option* add_options();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Option >&
      options() const;
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string reference = 6;
  void clear_reference() ;
  const std::string& reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reference(Arg_&& arg, Args_... args);
  std::string* mutable_reference();
  PROTOBUF_NODISCARD std::string* release_reference();
  void set_allocated_reference(std::string* ptr);

  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(
      const std::string& value);
  std::string* _internal_mutable_reference();

  public:
  // string device_id = 8;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* ptr);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // .speechly.slu.v1.AudioConfiguration config = 2;
  bool has_config() const;
  void clear_config() ;
  const ::speechly::slu::v1::AudioConfiguration& config() const;
  PROTOBUF_NODISCARD ::speechly::slu::v1::AudioConfiguration* release_config();
  ::speechly::slu::v1::AudioConfiguration* mutable_config();
  void set_allocated_config(::speechly::slu::v1::AudioConfiguration* value);
  void unsafe_arena_set_allocated_config(::speechly::slu::v1::AudioConfiguration* value);
  ::speechly::slu::v1::AudioConfiguration* unsafe_arena_release_config();

  private:
  const ::speechly::slu::v1::AudioConfiguration& _internal_config() const;
  ::speechly::slu::v1::AudioConfiguration* _internal_mutable_config();

  public:
  // bytes audio = 3;
  bool has_audio() const;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* ptr);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  // string uri = 4;
  bool has_uri() const;
  void clear_uri() ;
  const std::string& uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // .speechly.slu.v1.HttpResource http_source = 9;
  bool has_http_source() const;
  private:
  bool _internal_has_http_source() const;

  public:
  void clear_http_source() ;
  const ::speechly::slu::v1::HttpResource& http_source() const;
  PROTOBUF_NODISCARD ::speechly::slu::v1::HttpResource* release_http_source();
  ::speechly::slu::v1::HttpResource* mutable_http_source();
  void set_allocated_http_source(::speechly::slu::v1::HttpResource* value);
  void unsafe_arena_set_allocated_http_source(::speechly::slu::v1::HttpResource* value);
  ::speechly::slu::v1::HttpResource* unsafe_arena_release_http_source();

  private:
  const ::speechly::slu::v1::HttpResource& _internal_http_source() const;
  ::speechly::slu::v1::HttpResource* _internal_mutable_http_source();

  public:
  // string results_uri = 5;
  bool has_results_uri() const;
  void clear_results_uri() ;
  const std::string& results_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_results_uri(Arg_&& arg, Args_... args);
  std::string* mutable_results_uri();
  PROTOBUF_NODISCARD std::string* release_results_uri();
  void set_allocated_results_uri(std::string* ptr);

  private:
  const std::string& _internal_results_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_results_uri(
      const std::string& value);
  std::string* _internal_mutable_results_uri();

  public:
  // .speechly.slu.v1.HttpResource http_result = 10;
  bool has_http_result() const;
  private:
  bool _internal_has_http_result() const;

  public:
  void clear_http_result() ;
  const ::speechly::slu::v1::HttpResource& http_result() const;
  PROTOBUF_NODISCARD ::speechly::slu::v1::HttpResource* release_http_result();
  ::speechly::slu::v1::HttpResource* mutable_http_result();
  void set_allocated_http_result(::speechly::slu::v1::HttpResource* value);
  void unsafe_arena_set_allocated_http_result(::speechly::slu::v1::HttpResource* value);
  ::speechly::slu::v1::HttpResource* unsafe_arena_release_http_result();

  private:
  const ::speechly::slu::v1::HttpResource& _internal_http_result() const;
  ::speechly::slu::v1::HttpResource* _internal_mutable_http_result();

  public:
  void clear_source();
  SourceCase source_case() const;
  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.ProcessAudioRequest)
 private:
  class _Internal;
  void set_has_audio();
  void set_has_uri();
  void set_has_http_source();
  void set_has_results_uri();
  void set_has_http_result();

  inline bool has_source() const;
  inline void clear_has_source();

  inline bool has_destination() const;
  inline void clear_has_destination();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 10, 4, 90, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Option > options_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr reference_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::speechly::slu::v1::AudioConfiguration* config_;
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr audio_;
      ::google::protobuf::internal::ArenaStringPtr uri_;
      ::speechly::slu::v1::HttpResource* http_source_;
    } source_;
    union DestinationUnion {
      constexpr DestinationUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr results_uri_;
      ::speechly::slu::v1::HttpResource* http_result_;
    } destination_;
    ::uint32_t _oneof_case_[2];

    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto;
};// -------------------------------------------------------------------

class ProcessAudioResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.ProcessAudioResponse) */ {
 public:
  inline ProcessAudioResponse() : ProcessAudioResponse(nullptr) {}
  ~ProcessAudioResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessAudioResponse(::google::protobuf::internal::ConstantInitialized);

  ProcessAudioResponse(const ProcessAudioResponse& from);
  ProcessAudioResponse(ProcessAudioResponse&& from) noexcept
    : ProcessAudioResponse() {
    *this = ::std::move(from);
  }

  inline ProcessAudioResponse& operator=(const ProcessAudioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAudioResponse& operator=(ProcessAudioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAudioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAudioResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessAudioResponse*>(
               &_ProcessAudioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessAudioResponse& a, ProcessAudioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAudioResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAudioResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAudioResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAudioResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessAudioResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessAudioResponse& from) {
    ProcessAudioResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAudioResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.ProcessAudioResponse";
  }
  protected:
  explicit ProcessAudioResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // .speechly.slu.v1.Operation operation = 1;
  bool has_operation() const;
  void clear_operation() ;
  const ::speechly::slu::v1::Operation& operation() const;
  PROTOBUF_NODISCARD ::speechly::slu::v1::Operation* release_operation();
  ::speechly::slu::v1::Operation* mutable_operation();
  void set_allocated_operation(::speechly::slu::v1::Operation* value);
  void unsafe_arena_set_allocated_operation(::speechly::slu::v1::Operation* value);
  ::speechly::slu::v1::Operation* unsafe_arena_release_operation();

  private:
  const ::speechly::slu::v1::Operation& _internal_operation() const;
  ::speechly::slu::v1::Operation* _internal_mutable_operation();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.ProcessAudioResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::speechly::slu::v1::Operation* operation_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto;
};// -------------------------------------------------------------------

class QueryStatusRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.QueryStatusRequest) */ {
 public:
  inline QueryStatusRequest() : QueryStatusRequest(nullptr) {}
  ~QueryStatusRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryStatusRequest(::google::protobuf::internal::ConstantInitialized);

  QueryStatusRequest(const QueryStatusRequest& from);
  QueryStatusRequest(QueryStatusRequest&& from) noexcept
    : QueryStatusRequest() {
    *this = ::std::move(from);
  }

  inline QueryStatusRequest& operator=(const QueryStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatusRequest& operator=(QueryStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStatusRequest* internal_default_instance() {
    return reinterpret_cast<const QueryStatusRequest*>(
               &_QueryStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryStatusRequest& a, QueryStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryStatusRequest& from) {
    QueryStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStatusRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.QueryStatusRequest";
  }
  protected:
  explicit QueryStatusRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReferenceFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string reference = 2;
  void clear_reference() ;
  const std::string& reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reference(Arg_&& arg, Args_... args);
  std::string* mutable_reference();
  PROTOBUF_NODISCARD std::string* release_reference();
  void set_allocated_reference(std::string* ptr);

  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(
      const std::string& value);
  std::string* _internal_mutable_reference();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.QueryStatusRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 54, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr reference_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto;
};// -------------------------------------------------------------------

class QueryStatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.QueryStatusResponse) */ {
 public:
  inline QueryStatusResponse() : QueryStatusResponse(nullptr) {}
  ~QueryStatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryStatusResponse(::google::protobuf::internal::ConstantInitialized);

  QueryStatusResponse(const QueryStatusResponse& from);
  QueryStatusResponse(QueryStatusResponse&& from) noexcept
    : QueryStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryStatusResponse& operator=(const QueryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatusResponse& operator=(QueryStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStatusResponse*>(
               &_QueryStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryStatusResponse& a, QueryStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryStatusResponse& from) {
    QueryStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStatusResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.QueryStatusResponse";
  }
  protected:
  explicit QueryStatusResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // .speechly.slu.v1.Operation operation = 1;
  bool has_operation() const;
  void clear_operation() ;
  const ::speechly::slu::v1::Operation& operation() const;
  PROTOBUF_NODISCARD ::speechly::slu::v1::Operation* release_operation();
  ::speechly::slu::v1::Operation* mutable_operation();
  void set_allocated_operation(::speechly::slu::v1::Operation* value);
  void unsafe_arena_set_allocated_operation(::speechly::slu::v1::Operation* value);
  ::speechly::slu::v1::Operation* unsafe_arena_release_operation();

  private:
  const ::speechly::slu::v1::Operation& _internal_operation() const;
  ::speechly::slu::v1::Operation* _internal_mutable_operation();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.QueryStatusResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::speechly::slu::v1::Operation* operation_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessAudioRequest

// string app_id = 1;
inline void ProcessAudioRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& ProcessAudioRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.ProcessAudioRequest.app_id)
}
inline std::string* ProcessAudioRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.app_id)
  return _s;
}
inline const std::string& ProcessAudioRequest::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void ProcessAudioRequest::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void ProcessAudioRequest::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioRequest.app_id)
}

// string device_id = 8;
inline void ProcessAudioRequest::clear_device_id() {
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& ProcessAudioRequest::device_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioRequest::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.ProcessAudioRequest.device_id)
}
inline std::string* ProcessAudioRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.device_id)
  return _s;
}
inline const std::string& ProcessAudioRequest::_internal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_id_.Get();
}
inline void ProcessAudioRequest::_internal_set_device_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::_internal_mutable_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::release_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.device_id)
  return _impl_.device_id_.Release();
}
inline void ProcessAudioRequest::set_allocated_device_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_id_.IsDefault()) {
          _impl_.device_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioRequest.device_id)
}

// .speechly.slu.v1.AudioConfiguration config = 2;
inline bool ProcessAudioRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline const ::speechly::slu::v1::AudioConfiguration& ProcessAudioRequest::_internal_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v1::AudioConfiguration* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v1::AudioConfiguration&>(::speechly::slu::v1::_AudioConfiguration_default_instance_);
}
inline const ::speechly::slu::v1::AudioConfiguration& ProcessAudioRequest::config() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.config)
  return _internal_config();
}
inline void ProcessAudioRequest::unsafe_arena_set_allocated_config(::speechly::slu::v1::AudioConfiguration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::speechly::slu::v1::AudioConfiguration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.ProcessAudioRequest.config)
}
inline ::speechly::slu::v1::AudioConfiguration* ProcessAudioRequest::release_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::AudioConfiguration* released = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v1::AudioConfiguration* ProcessAudioRequest::unsafe_arena_release_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::AudioConfiguration* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::speechly::slu::v1::AudioConfiguration* ProcessAudioRequest::_internal_mutable_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v1::AudioConfiguration>(GetArenaForAllocation());
    _impl_.config_ = reinterpret_cast<::speechly::slu::v1::AudioConfiguration*>(p);
  }
  return _impl_.config_;
}
inline ::speechly::slu::v1::AudioConfiguration* ProcessAudioRequest::mutable_config() {
  ::speechly::slu::v1::AudioConfiguration* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.config)
  return _msg;
}
inline void ProcessAudioRequest::set_allocated_config(::speechly::slu::v1::AudioConfiguration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::speechly::slu::v1::AudioConfiguration*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioRequest.config)
}

// bytes audio = 3;
inline bool ProcessAudioRequest::has_audio() const {
  return source_case() == kAudio;
}
inline void ProcessAudioRequest::set_has_audio() {
  _impl_._oneof_case_[0] = kAudio;
}
inline void ProcessAudioRequest::clear_audio() {
  if (source_case() == kAudio) {
    _impl_.source_.audio_.Destroy();
    clear_has_source();
  }
}
inline const std::string& ProcessAudioRequest::audio() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioRequest::set_audio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (source_case() != kAudio) {
    clear_source();

    set_has_audio();
    _impl_.source_.audio_.InitDefault();
  }
  _impl_.source_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.ProcessAudioRequest.audio)
}
inline std::string* ProcessAudioRequest::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.audio)
  return _s;
}
inline const std::string& ProcessAudioRequest::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (source_case() != kAudio) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.source_.audio_.Get();
}
inline void ProcessAudioRequest::_internal_set_audio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (source_case() != kAudio) {
    clear_source();

    set_has_audio();
    _impl_.source_.audio_.InitDefault();
  }
  _impl_.source_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (source_case() != kAudio) {
    clear_source();

    set_has_audio();
    _impl_.source_.audio_.InitDefault();
  }
  return _impl_.source_.audio_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.audio)
  if (source_case() != kAudio) {
    return nullptr;
  }
  clear_has_source();
  return _impl_.source_.audio_.Release();
}
inline void ProcessAudioRequest::set_allocated_audio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_source()) {
    clear_source();
  }
  if (value != nullptr) {
    set_has_audio();
    _impl_.source_.audio_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioRequest.audio)
}

// string uri = 4;
inline bool ProcessAudioRequest::has_uri() const {
  return source_case() == kUri;
}
inline void ProcessAudioRequest::set_has_uri() {
  _impl_._oneof_case_[0] = kUri;
}
inline void ProcessAudioRequest::clear_uri() {
  if (source_case() == kUri) {
    _impl_.source_.uri_.Destroy();
    clear_has_source();
  }
}
inline const std::string& ProcessAudioRequest::uri() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioRequest::set_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (source_case() != kUri) {
    clear_source();

    set_has_uri();
    _impl_.source_.uri_.InitDefault();
  }
  _impl_.source_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.ProcessAudioRequest.uri)
}
inline std::string* ProcessAudioRequest::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.uri)
  return _s;
}
inline const std::string& ProcessAudioRequest::_internal_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (source_case() != kUri) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.source_.uri_.Get();
}
inline void ProcessAudioRequest::_internal_set_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (source_case() != kUri) {
    clear_source();

    set_has_uri();
    _impl_.source_.uri_.InitDefault();
  }
  _impl_.source_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::_internal_mutable_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (source_case() != kUri) {
    clear_source();

    set_has_uri();
    _impl_.source_.uri_.InitDefault();
  }
  return _impl_.source_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::release_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.uri)
  if (source_case() != kUri) {
    return nullptr;
  }
  clear_has_source();
  return _impl_.source_.uri_.Release();
}
inline void ProcessAudioRequest::set_allocated_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_source()) {
    clear_source();
  }
  if (value != nullptr) {
    set_has_uri();
    _impl_.source_.uri_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioRequest.uri)
}

// .speechly.slu.v1.HttpResource http_source = 9;
inline bool ProcessAudioRequest::has_http_source() const {
  return source_case() == kHttpSource;
}
inline bool ProcessAudioRequest::_internal_has_http_source() const {
  return source_case() == kHttpSource;
}
inline void ProcessAudioRequest::set_has_http_source() {
  _impl_._oneof_case_[0] = kHttpSource;
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::release_http_source() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.http_source)
  if (source_case() == kHttpSource) {
    clear_has_source();
    ::speechly::slu::v1::HttpResource* temp = _impl_.source_.http_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.http_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::speechly::slu::v1::HttpResource& ProcessAudioRequest::_internal_http_source() const {
  return source_case() == kHttpSource
      ? *_impl_.source_.http_source_
      : reinterpret_cast<::speechly::slu::v1::HttpResource&>(::speechly::slu::v1::_HttpResource_default_instance_);
}
inline const ::speechly::slu::v1::HttpResource& ProcessAudioRequest::http_source() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.http_source)
  return _internal_http_source();
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::unsafe_arena_release_http_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:speechly.slu.v1.ProcessAudioRequest.http_source)
  if (source_case() == kHttpSource) {
    clear_has_source();
    ::speechly::slu::v1::HttpResource* temp = _impl_.source_.http_source_;
    _impl_.source_.http_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessAudioRequest::unsafe_arena_set_allocated_http_source(::speechly::slu::v1::HttpResource* http_source) {
  clear_source();
  if (http_source) {
    set_has_http_source();
    _impl_.source_.http_source_ = http_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.ProcessAudioRequest.http_source)
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::_internal_mutable_http_source() {
  if (source_case() != kHttpSource) {
    clear_source();
    set_has_http_source();
    _impl_.source_.http_source_ = CreateMaybeMessage< ::speechly::slu::v1::HttpResource >(GetArenaForAllocation());
  }
  return _impl_.source_.http_source_;
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::mutable_http_source() {
  ::speechly::slu::v1::HttpResource* _msg = _internal_mutable_http_source();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.http_source)
  return _msg;
}

// string results_uri = 5;
inline bool ProcessAudioRequest::has_results_uri() const {
  return destination_case() == kResultsUri;
}
inline void ProcessAudioRequest::set_has_results_uri() {
  _impl_._oneof_case_[1] = kResultsUri;
}
inline void ProcessAudioRequest::clear_results_uri() {
  if (destination_case() == kResultsUri) {
    _impl_.destination_.results_uri_.Destroy();
    clear_has_destination();
  }
}
inline const std::string& ProcessAudioRequest::results_uri() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.results_uri)
  return _internal_results_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioRequest::set_results_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (destination_case() != kResultsUri) {
    clear_destination();

    set_has_results_uri();
    _impl_.destination_.results_uri_.InitDefault();
  }
  _impl_.destination_.results_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.ProcessAudioRequest.results_uri)
}
inline std::string* ProcessAudioRequest::mutable_results_uri() {
  std::string* _s = _internal_mutable_results_uri();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.results_uri)
  return _s;
}
inline const std::string& ProcessAudioRequest::_internal_results_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (destination_case() != kResultsUri) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.destination_.results_uri_.Get();
}
inline void ProcessAudioRequest::_internal_set_results_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (destination_case() != kResultsUri) {
    clear_destination();

    set_has_results_uri();
    _impl_.destination_.results_uri_.InitDefault();
  }
  _impl_.destination_.results_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::_internal_mutable_results_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (destination_case() != kResultsUri) {
    clear_destination();

    set_has_results_uri();
    _impl_.destination_.results_uri_.InitDefault();
  }
  return _impl_.destination_.results_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::release_results_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.results_uri)
  if (destination_case() != kResultsUri) {
    return nullptr;
  }
  clear_has_destination();
  return _impl_.destination_.results_uri_.Release();
}
inline void ProcessAudioRequest::set_allocated_results_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_destination()) {
    clear_destination();
  }
  if (value != nullptr) {
    set_has_results_uri();
    _impl_.destination_.results_uri_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioRequest.results_uri)
}

// .speechly.slu.v1.HttpResource http_result = 10;
inline bool ProcessAudioRequest::has_http_result() const {
  return destination_case() == kHttpResult;
}
inline bool ProcessAudioRequest::_internal_has_http_result() const {
  return destination_case() == kHttpResult;
}
inline void ProcessAudioRequest::set_has_http_result() {
  _impl_._oneof_case_[1] = kHttpResult;
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::release_http_result() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.http_result)
  if (destination_case() == kHttpResult) {
    clear_has_destination();
    ::speechly::slu::v1::HttpResource* temp = _impl_.destination_.http_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.destination_.http_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::speechly::slu::v1::HttpResource& ProcessAudioRequest::_internal_http_result() const {
  return destination_case() == kHttpResult
      ? *_impl_.destination_.http_result_
      : reinterpret_cast<::speechly::slu::v1::HttpResource&>(::speechly::slu::v1::_HttpResource_default_instance_);
}
inline const ::speechly::slu::v1::HttpResource& ProcessAudioRequest::http_result() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.http_result)
  return _internal_http_result();
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::unsafe_arena_release_http_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:speechly.slu.v1.ProcessAudioRequest.http_result)
  if (destination_case() == kHttpResult) {
    clear_has_destination();
    ::speechly::slu::v1::HttpResource* temp = _impl_.destination_.http_result_;
    _impl_.destination_.http_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessAudioRequest::unsafe_arena_set_allocated_http_result(::speechly::slu::v1::HttpResource* http_result) {
  clear_destination();
  if (http_result) {
    set_has_http_result();
    _impl_.destination_.http_result_ = http_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.ProcessAudioRequest.http_result)
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::_internal_mutable_http_result() {
  if (destination_case() != kHttpResult) {
    clear_destination();
    set_has_http_result();
    _impl_.destination_.http_result_ = CreateMaybeMessage< ::speechly::slu::v1::HttpResource >(GetArenaForAllocation());
  }
  return _impl_.destination_.http_result_;
}
inline ::speechly::slu::v1::HttpResource* ProcessAudioRequest::mutable_http_result() {
  ::speechly::slu::v1::HttpResource* _msg = _internal_mutable_http_result();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.http_result)
  return _msg;
}

// string reference = 6;
inline void ProcessAudioRequest::clear_reference() {
  _impl_.reference_.ClearToEmpty();
}
inline const std::string& ProcessAudioRequest::reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.reference)
  return _internal_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessAudioRequest::set_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.ProcessAudioRequest.reference)
}
inline std::string* ProcessAudioRequest::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.reference)
  return _s;
}
inline const std::string& ProcessAudioRequest::_internal_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reference_.Get();
}
inline void ProcessAudioRequest::_internal_set_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::_internal_mutable_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reference_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessAudioRequest::release_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioRequest.reference)
  return _impl_.reference_.Release();
}
inline void ProcessAudioRequest::set_allocated_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reference_.IsDefault()) {
          _impl_.reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioRequest.reference)
}

// repeated .speechly.slu.v1.Option options = 7;
inline int ProcessAudioRequest::_internal_options_size() const {
  return _internal_options().size();
}
inline int ProcessAudioRequest::options_size() const {
  return _internal_options_size();
}
inline ::speechly::slu::v1::Option* ProcessAudioRequest::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioRequest.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Option >*
ProcessAudioRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.ProcessAudioRequest.options)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_options();
}
inline const ::speechly::slu::v1::Option& ProcessAudioRequest::options(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioRequest.options)
    return _internal_options().Get(index);
}
inline ::speechly::slu::v1::Option* ProcessAudioRequest::add_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::Option* _add = _internal_mutable_options()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.ProcessAudioRequest.options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Option >&
ProcessAudioRequest::options() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.ProcessAudioRequest.options)
  return _internal_options();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Option>&
ProcessAudioRequest::_internal_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.options_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Option>*
ProcessAudioRequest::_internal_mutable_options() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.options_;
}

inline bool ProcessAudioRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void ProcessAudioRequest::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline bool ProcessAudioRequest::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void ProcessAudioRequest::clear_has_destination() {
  _impl_._oneof_case_[1] = DESTINATION_NOT_SET;
}
inline ProcessAudioRequest::SourceCase ProcessAudioRequest::source_case() const {
  return ProcessAudioRequest::SourceCase(_impl_._oneof_case_[0]);
}
inline ProcessAudioRequest::DestinationCase ProcessAudioRequest::destination_case() const {
  return ProcessAudioRequest::DestinationCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// ProcessAudioResponse

// .speechly.slu.v1.Operation operation = 1;
inline bool ProcessAudioResponse::has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operation_ != nullptr);
  return value;
}
inline const ::speechly::slu::v1::Operation& ProcessAudioResponse::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v1::Operation* p = _impl_.operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v1::Operation&>(::speechly::slu::v1::_Operation_default_instance_);
}
inline const ::speechly::slu::v1::Operation& ProcessAudioResponse::operation() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.ProcessAudioResponse.operation)
  return _internal_operation();
}
inline void ProcessAudioResponse::unsafe_arena_set_allocated_operation(::speechly::slu::v1::Operation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operation_);
  }
  _impl_.operation_ = reinterpret_cast<::speechly::slu::v1::Operation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.ProcessAudioResponse.operation)
}
inline ::speechly::slu::v1::Operation* ProcessAudioResponse::release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::Operation* released = _impl_.operation_;
  _impl_.operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v1::Operation* ProcessAudioResponse::unsafe_arena_release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.ProcessAudioResponse.operation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::Operation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
  return temp;
}
inline ::speechly::slu::v1::Operation* ProcessAudioResponse::_internal_mutable_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v1::Operation>(GetArenaForAllocation());
    _impl_.operation_ = reinterpret_cast<::speechly::slu::v1::Operation*>(p);
  }
  return _impl_.operation_;
}
inline ::speechly::slu::v1::Operation* ProcessAudioResponse::mutable_operation() {
  ::speechly::slu::v1::Operation* _msg = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.ProcessAudioResponse.operation)
  return _msg;
}
inline void ProcessAudioResponse::set_allocated_operation(::speechly::slu::v1::Operation* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.operation_ = reinterpret_cast<::speechly::slu::v1::Operation*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.ProcessAudioResponse.operation)
}

// -------------------------------------------------------------------

// QueryStatusRequest

// string id = 1;
inline void QueryStatusRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueryStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.QueryStatusRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryStatusRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.QueryStatusRequest.id)
}
inline std::string* QueryStatusRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.QueryStatusRequest.id)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void QueryStatusRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.QueryStatusRequest.id)
  return _impl_.id_.Release();
}
inline void QueryStatusRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.QueryStatusRequest.id)
}

// string reference = 2;
inline void QueryStatusRequest::clear_reference() {
  _impl_.reference_.ClearToEmpty();
}
inline const std::string& QueryStatusRequest::reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.QueryStatusRequest.reference)
  return _internal_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryStatusRequest::set_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.QueryStatusRequest.reference)
}
inline std::string* QueryStatusRequest::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.QueryStatusRequest.reference)
  return _s;
}
inline const std::string& QueryStatusRequest::_internal_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reference_.Get();
}
inline void QueryStatusRequest::_internal_set_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::_internal_mutable_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reference_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryStatusRequest::release_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.QueryStatusRequest.reference)
  return _impl_.reference_.Release();
}
inline void QueryStatusRequest::set_allocated_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reference_.IsDefault()) {
          _impl_.reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.QueryStatusRequest.reference)
}

// -------------------------------------------------------------------

// QueryStatusResponse

// .speechly.slu.v1.Operation operation = 1;
inline bool QueryStatusResponse::has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operation_ != nullptr);
  return value;
}
inline const ::speechly::slu::v1::Operation& QueryStatusResponse::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v1::Operation* p = _impl_.operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v1::Operation&>(::speechly::slu::v1::_Operation_default_instance_);
}
inline const ::speechly::slu::v1::Operation& QueryStatusResponse::operation() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.QueryStatusResponse.operation)
  return _internal_operation();
}
inline void QueryStatusResponse::unsafe_arena_set_allocated_operation(::speechly::slu::v1::Operation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operation_);
  }
  _impl_.operation_ = reinterpret_cast<::speechly::slu::v1::Operation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.QueryStatusResponse.operation)
}
inline ::speechly::slu::v1::Operation* QueryStatusResponse::release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::Operation* released = _impl_.operation_;
  _impl_.operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v1::Operation* QueryStatusResponse::unsafe_arena_release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.QueryStatusResponse.operation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::Operation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
  return temp;
}
inline ::speechly::slu::v1::Operation* QueryStatusResponse::_internal_mutable_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v1::Operation>(GetArenaForAllocation());
    _impl_.operation_ = reinterpret_cast<::speechly::slu::v1::Operation*>(p);
  }
  return _impl_.operation_;
}
inline ::speechly::slu::v1::Operation* QueryStatusResponse::mutable_operation() {
  ::speechly::slu::v1::Operation* _msg = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.QueryStatusResponse.operation)
  return _msg;
}
inline void QueryStatusResponse::set_allocated_operation(::speechly::slu::v1::Operation* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.operation_ = reinterpret_cast<::speechly::slu::v1::Operation*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.QueryStatusResponse.operation)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slu
}  // namespace speechly


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto_2epb_2eh
