// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/wlu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fwlu_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fwlu_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto;
namespace speechly {
namespace slu {
namespace v1 {
class TextsRequest;
struct TextsRequestDefaultTypeInternal;
extern TextsRequestDefaultTypeInternal _TextsRequest_default_instance_;
class TextsResponse;
struct TextsResponseDefaultTypeInternal;
extern TextsResponseDefaultTypeInternal _TextsResponse_default_instance_;
class WLUEntity;
struct WLUEntityDefaultTypeInternal;
extern WLUEntityDefaultTypeInternal _WLUEntity_default_instance_;
class WLUIntent;
struct WLUIntentDefaultTypeInternal;
extern WLUIntentDefaultTypeInternal _WLUIntent_default_instance_;
class WLURequest;
struct WLURequestDefaultTypeInternal;
extern WLURequestDefaultTypeInternal _WLURequest_default_instance_;
class WLUResponse;
struct WLUResponseDefaultTypeInternal;
extern WLUResponseDefaultTypeInternal _WLUResponse_default_instance_;
class WLUSegment;
struct WLUSegmentDefaultTypeInternal;
extern WLUSegmentDefaultTypeInternal _WLUSegment_default_instance_;
class WLUToken;
struct WLUTokenDefaultTypeInternal;
extern WLUTokenDefaultTypeInternal _WLUToken_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace slu {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class TextsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.TextsRequest) */ {
 public:
  inline TextsRequest() : TextsRequest(nullptr) {}
  ~TextsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TextsRequest(::google::protobuf::internal::ConstantInitialized);

  TextsRequest(const TextsRequest& from);
  TextsRequest(TextsRequest&& from) noexcept
    : TextsRequest() {
    *this = ::std::move(from);
  }

  inline TextsRequest& operator=(const TextsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextsRequest& operator=(TextsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextsRequest* internal_default_instance() {
    return reinterpret_cast<const TextsRequest*>(
               &_TextsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextsRequest& a, TextsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TextsRequest& from) {
    TextsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.TextsRequest";
  }
  protected:
  explicit TextsRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // repeated .speechly.slu.v1.WLURequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;

  public:
  void clear_requests() ;
  ::speechly::slu::v1::WLURequest* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLURequest >*
      mutable_requests();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLURequest>& _internal_requests() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLURequest>* _internal_mutable_requests();
  public:
  const ::speechly::slu::v1::WLURequest& requests(int index) const;
  ::speechly::slu::v1::WLURequest* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLURequest >&
      requests() const;
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.TextsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLURequest > requests_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};// -------------------------------------------------------------------

class TextsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.TextsResponse) */ {
 public:
  inline TextsResponse() : TextsResponse(nullptr) {}
  ~TextsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TextsResponse(::google::protobuf::internal::ConstantInitialized);

  TextsResponse(const TextsResponse& from);
  TextsResponse(TextsResponse&& from) noexcept
    : TextsResponse() {
    *this = ::std::move(from);
  }

  inline TextsResponse& operator=(const TextsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextsResponse& operator=(TextsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextsResponse* internal_default_instance() {
    return reinterpret_cast<const TextsResponse*>(
               &_TextsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextsResponse& a, TextsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TextsResponse& from) {
    TextsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.TextsResponse";
  }
  protected:
  explicit TextsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .speechly.slu.v1.WLUResponse responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;

  public:
  void clear_responses() ;
  ::speechly::slu::v1::WLUResponse* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUResponse >*
      mutable_responses();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUResponse>& _internal_responses() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUResponse>* _internal_mutable_responses();
  public:
  const ::speechly::slu::v1::WLUResponse& responses(int index) const;
  ::speechly::slu::v1::WLUResponse* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUResponse >&
      responses() const;
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.TextsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUResponse > responses_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};// -------------------------------------------------------------------

class WLURequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLURequest) */ {
 public:
  inline WLURequest() : WLURequest(nullptr) {}
  ~WLURequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WLURequest(::google::protobuf::internal::ConstantInitialized);

  WLURequest(const WLURequest& from);
  WLURequest(WLURequest&& from) noexcept
    : WLURequest() {
    *this = ::std::move(from);
  }

  inline WLURequest& operator=(const WLURequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLURequest& operator=(WLURequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WLURequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WLURequest* internal_default_instance() {
    return reinterpret_cast<const WLURequest*>(
               &_WLURequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WLURequest& a, WLURequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WLURequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WLURequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WLURequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WLURequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WLURequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WLURequest& from) {
    WLURequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLURequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.WLURequest";
  }
  protected:
  explicit WLURequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 1,
    kTextFieldNumber = 2,
    kReferenceTimeFieldNumber = 3,
  };
  // string language_code = 1;
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* ptr);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // .google.protobuf.Timestamp reference_time = 3;
  bool has_reference_time() const;
  void clear_reference_time() ;
  const ::google::protobuf::Timestamp& reference_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_reference_time();
  ::google::protobuf::Timestamp* mutable_reference_time();
  void set_allocated_reference_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_reference_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_reference_time();

  private:
  const ::google::protobuf::Timestamp& _internal_reference_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_reference_time();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLURequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 52, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::Timestamp* reference_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};// -------------------------------------------------------------------

class WLUResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUResponse) */ {
 public:
  inline WLUResponse() : WLUResponse(nullptr) {}
  ~WLUResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WLUResponse(::google::protobuf::internal::ConstantInitialized);

  WLUResponse(const WLUResponse& from);
  WLUResponse(WLUResponse&& from) noexcept
    : WLUResponse() {
    *this = ::std::move(from);
  }

  inline WLUResponse& operator=(const WLUResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUResponse& operator=(WLUResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WLUResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WLUResponse* internal_default_instance() {
    return reinterpret_cast<const WLUResponse*>(
               &_WLUResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WLUResponse& a, WLUResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WLUResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WLUResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WLUResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WLUResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WLUResponse& from) {
    WLUResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.WLUResponse";
  }
  protected:
  explicit WLUResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .speechly.slu.v1.WLUSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;

  public:
  void clear_segments() ;
  ::speechly::slu::v1::WLUSegment* mutable_segments(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >*
      mutable_segments();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUSegment>& _internal_segments() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUSegment>* _internal_mutable_segments();
  public:
  const ::speechly::slu::v1::WLUSegment& segments(int index) const;
  ::speechly::slu::v1::WLUSegment* add_segments();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >&
      segments() const;
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUSegment > segments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};// -------------------------------------------------------------------

class WLUSegment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUSegment) */ {
 public:
  inline WLUSegment() : WLUSegment(nullptr) {}
  ~WLUSegment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WLUSegment(::google::protobuf::internal::ConstantInitialized);

  WLUSegment(const WLUSegment& from);
  WLUSegment(WLUSegment&& from) noexcept
    : WLUSegment() {
    *this = ::std::move(from);
  }

  inline WLUSegment& operator=(const WLUSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUSegment& operator=(WLUSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WLUSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const WLUSegment* internal_default_instance() {
    return reinterpret_cast<const WLUSegment*>(
               &_WLUSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WLUSegment& a, WLUSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WLUSegment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WLUSegment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WLUSegment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WLUSegment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WLUSegment& from) {
    WLUSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUSegment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.WLUSegment";
  }
  protected:
  explicit WLUSegment(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 2,
    kEntitiesFieldNumber = 3,
    kTextFieldNumber = 1,
    kAnnotatedTextFieldNumber = 5,
    kIntentFieldNumber = 4,
  };
  // repeated .speechly.slu.v1.WLUToken tokens = 2;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;

  public:
  void clear_tokens() ;
  ::speechly::slu::v1::WLUToken* mutable_tokens(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUToken >*
      mutable_tokens();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUToken>& _internal_tokens() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUToken>* _internal_mutable_tokens();
  public:
  const ::speechly::slu::v1::WLUToken& tokens(int index) const;
  ::speechly::slu::v1::WLUToken* add_tokens();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUToken >&
      tokens() const;
  // repeated .speechly.slu.v1.WLUEntity entities = 3;
  int entities_size() const;
  private:
  int _internal_entities_size() const;

  public:
  void clear_entities() ;
  ::speechly::slu::v1::WLUEntity* mutable_entities(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >*
      mutable_entities();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUEntity>& _internal_entities() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUEntity>* _internal_mutable_entities();
  public:
  const ::speechly::slu::v1::WLUEntity& entities(int index) const;
  ::speechly::slu::v1::WLUEntity* add_entities();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >&
      entities() const;
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // string annotated_text = 5;
  void clear_annotated_text() ;
  const std::string& annotated_text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_annotated_text(Arg_&& arg, Args_... args);
  std::string* mutable_annotated_text();
  PROTOBUF_NODISCARD std::string* release_annotated_text();
  void set_allocated_annotated_text(std::string* ptr);

  private:
  const std::string& _internal_annotated_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotated_text(
      const std::string& value);
  std::string* _internal_mutable_annotated_text();

  public:
  // .speechly.slu.v1.WLUIntent intent = 4;
  bool has_intent() const;
  void clear_intent() ;
  const ::speechly::slu::v1::WLUIntent& intent() const;
  PROTOBUF_NODISCARD ::speechly::slu::v1::WLUIntent* release_intent();
  ::speechly::slu::v1::WLUIntent* mutable_intent();
  void set_allocated_intent(::speechly::slu::v1::WLUIntent* value);
  void unsafe_arena_set_allocated_intent(::speechly::slu::v1::WLUIntent* value);
  ::speechly::slu::v1::WLUIntent* unsafe_arena_release_intent();

  private:
  const ::speechly::slu::v1::WLUIntent& _internal_intent() const;
  ::speechly::slu::v1::WLUIntent* _internal_mutable_intent();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUSegment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUToken > tokens_;
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUEntity > entities_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr annotated_text_;
    ::speechly::slu::v1::WLUIntent* intent_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};// -------------------------------------------------------------------

class WLUToken final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUToken) */ {
 public:
  inline WLUToken() : WLUToken(nullptr) {}
  ~WLUToken() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WLUToken(::google::protobuf::internal::ConstantInitialized);

  WLUToken(const WLUToken& from);
  WLUToken(WLUToken&& from) noexcept
    : WLUToken() {
    *this = ::std::move(from);
  }

  inline WLUToken& operator=(const WLUToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUToken& operator=(WLUToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WLUToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const WLUToken* internal_default_instance() {
    return reinterpret_cast<const WLUToken*>(
               &_WLUToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WLUToken& a, WLUToken& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WLUToken* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WLUToken* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WLUToken>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WLUToken& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WLUToken& from) {
    WLUToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUToken* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.WLUToken";
  }
  protected:
  explicit WLUToken(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string word = 1;
  void clear_word() ;
  const std::string& word() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_word(Arg_&& arg, Args_... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* ptr);

  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(
      const std::string& value);
  std::string* _internal_mutable_word();

  public:
  // int32 index = 2;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUToken)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 37, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr word_;
    ::int32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};// -------------------------------------------------------------------

class WLUEntity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUEntity) */ {
 public:
  inline WLUEntity() : WLUEntity(nullptr) {}
  ~WLUEntity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WLUEntity(::google::protobuf::internal::ConstantInitialized);

  WLUEntity(const WLUEntity& from);
  WLUEntity(WLUEntity&& from) noexcept
    : WLUEntity() {
    *this = ::std::move(from);
  }

  inline WLUEntity& operator=(const WLUEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUEntity& operator=(WLUEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WLUEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const WLUEntity* internal_default_instance() {
    return reinterpret_cast<const WLUEntity*>(
               &_WLUEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WLUEntity& a, WLUEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WLUEntity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WLUEntity* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WLUEntity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WLUEntity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WLUEntity& from) {
    WLUEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUEntity* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.WLUEntity";
  }
  protected:
  explicit WLUEntity(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 1,
    kValueFieldNumber = 2,
    kStartPositionFieldNumber = 3,
    kEndPositionFieldNumber = 4,
  };
  // string entity = 1;
  void clear_entity() ;
  const std::string& entity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entity(Arg_&& arg, Args_... args);
  std::string* mutable_entity();
  PROTOBUF_NODISCARD std::string* release_entity();
  void set_allocated_entity(std::string* ptr);

  private:
  const std::string& _internal_entity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity(
      const std::string& value);
  std::string* _internal_mutable_entity();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // int32 start_position = 3;
  void clear_start_position() ;
  ::int32_t start_position() const;
  void set_start_position(::int32_t value);

  private:
  ::int32_t _internal_start_position() const;
  void _internal_set_start_position(::int32_t value);

  public:
  // int32 end_position = 4;
  void clear_end_position() ;
  ::int32_t end_position() const;
  void set_end_position(::int32_t value);

  private:
  ::int32_t _internal_end_position() const;
  void _internal_set_end_position(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUEntity)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr entity_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::int32_t start_position_;
    ::int32_t end_position_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};// -------------------------------------------------------------------

class WLUIntent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUIntent) */ {
 public:
  inline WLUIntent() : WLUIntent(nullptr) {}
  ~WLUIntent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WLUIntent(::google::protobuf::internal::ConstantInitialized);

  WLUIntent(const WLUIntent& from);
  WLUIntent(WLUIntent&& from) noexcept
    : WLUIntent() {
    *this = ::std::move(from);
  }

  inline WLUIntent& operator=(const WLUIntent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUIntent& operator=(WLUIntent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WLUIntent& default_instance() {
    return *internal_default_instance();
  }
  static inline const WLUIntent* internal_default_instance() {
    return reinterpret_cast<const WLUIntent*>(
               &_WLUIntent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WLUIntent& a, WLUIntent& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUIntent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WLUIntent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WLUIntent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WLUIntent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WLUIntent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WLUIntent& from) {
    WLUIntent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUIntent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.WLUIntent";
  }
  protected:
  explicit WLUIntent(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentFieldNumber = 1,
  };
  // string intent = 1;
  void clear_intent() ;
  const std::string& intent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_intent(Arg_&& arg, Args_... args);
  std::string* mutable_intent();
  PROTOBUF_NODISCARD std::string* release_intent();
  void set_allocated_intent(std::string* ptr);

  private:
  const std::string& _internal_intent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intent(
      const std::string& value);
  std::string* _internal_mutable_intent();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUIntent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr intent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TextsRequest

// string app_id = 1;
inline void TextsRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& TextsRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.TextsRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextsRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.TextsRequest.app_id)
}
inline std::string* TextsRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.TextsRequest.app_id)
  return _s;
}
inline const std::string& TextsRequest::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void TextsRequest::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TextsRequest::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TextsRequest::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.TextsRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void TextsRequest::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.TextsRequest.app_id)
}

// repeated .speechly.slu.v1.WLURequest requests = 2;
inline int TextsRequest::_internal_requests_size() const {
  return _internal_requests().size();
}
inline int TextsRequest::requests_size() const {
  return _internal_requests_size();
}
inline void TextsRequest::clear_requests() {
  _internal_mutable_requests()->Clear();
}
inline ::speechly::slu::v1::WLURequest* TextsRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.TextsRequest.requests)
  return _internal_mutable_requests()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLURequest >*
TextsRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.TextsRequest.requests)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_requests();
}
inline const ::speechly::slu::v1::WLURequest& TextsRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.TextsRequest.requests)
    return _internal_requests().Get(index);
}
inline ::speechly::slu::v1::WLURequest* TextsRequest::add_requests() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::WLURequest* _add = _internal_mutable_requests()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.TextsRequest.requests)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLURequest >&
TextsRequest::requests() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.TextsRequest.requests)
  return _internal_requests();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLURequest>&
TextsRequest::_internal_requests() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requests_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLURequest>*
TextsRequest::_internal_mutable_requests() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.requests_;
}

// -------------------------------------------------------------------

// TextsResponse

// repeated .speechly.slu.v1.WLUResponse responses = 1;
inline int TextsResponse::_internal_responses_size() const {
  return _internal_responses().size();
}
inline int TextsResponse::responses_size() const {
  return _internal_responses_size();
}
inline void TextsResponse::clear_responses() {
  _internal_mutable_responses()->Clear();
}
inline ::speechly::slu::v1::WLUResponse* TextsResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.TextsResponse.responses)
  return _internal_mutable_responses()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUResponse >*
TextsResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.TextsResponse.responses)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_responses();
}
inline const ::speechly::slu::v1::WLUResponse& TextsResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.TextsResponse.responses)
    return _internal_responses().Get(index);
}
inline ::speechly::slu::v1::WLUResponse* TextsResponse::add_responses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::WLUResponse* _add = _internal_mutable_responses()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.TextsResponse.responses)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUResponse >&
TextsResponse::responses() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.TextsResponse.responses)
  return _internal_responses();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUResponse>&
TextsResponse::_internal_responses() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.responses_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUResponse>*
TextsResponse::_internal_mutable_responses() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.responses_;
}

// -------------------------------------------------------------------

// WLURequest

// string language_code = 1;
inline void WLURequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& WLURequest::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLURequest.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLURequest::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLURequest.language_code)
}
inline std::string* WLURequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLURequest.language_code)
  return _s;
}
inline const std::string& WLURequest::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void WLURequest::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* WLURequest::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArenaForAllocation());
}
inline std::string* WLURequest::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLURequest.language_code)
  return _impl_.language_code_.Release();
}
inline void WLURequest::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLURequest.language_code)
}

// string text = 2;
inline void WLURequest::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& WLURequest::text() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLURequest.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLURequest::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLURequest.text)
}
inline std::string* WLURequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLURequest.text)
  return _s;
}
inline const std::string& WLURequest::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void WLURequest::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* WLURequest::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* WLURequest::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLURequest.text)
  return _impl_.text_.Release();
}
inline void WLURequest::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLURequest.text)
}

// .google.protobuf.Timestamp reference_time = 3;
inline bool WLURequest::has_reference_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& WLURequest::_internal_reference_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.reference_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& WLURequest::reference_time() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLURequest.reference_time)
  return _internal_reference_time();
}
inline void WLURequest::unsafe_arena_set_allocated_reference_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reference_time_);
  }
  _impl_.reference_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.WLURequest.reference_time)
}
inline ::google::protobuf::Timestamp* WLURequest::release_reference_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.reference_time_;
  _impl_.reference_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* WLURequest::unsafe_arena_release_reference_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLURequest.reference_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.reference_time_;
  _impl_.reference_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* WLURequest::_internal_mutable_reference_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.reference_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.reference_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.reference_time_;
}
inline ::google::protobuf::Timestamp* WLURequest::mutable_reference_time() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_reference_time();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLURequest.reference_time)
  return _msg;
}
inline void WLURequest::set_allocated_reference_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reference_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.reference_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLURequest.reference_time)
}

// -------------------------------------------------------------------

// WLUResponse

// repeated .speechly.slu.v1.WLUSegment segments = 1;
inline int WLUResponse::_internal_segments_size() const {
  return _internal_segments().size();
}
inline int WLUResponse::segments_size() const {
  return _internal_segments_size();
}
inline void WLUResponse::clear_segments() {
  _internal_mutable_segments()->Clear();
}
inline ::speechly::slu::v1::WLUSegment* WLUResponse::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUResponse.segments)
  return _internal_mutable_segments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >*
WLUResponse::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.WLUResponse.segments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_segments();
}
inline const ::speechly::slu::v1::WLUSegment& WLUResponse::segments(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUResponse.segments)
    return _internal_segments().Get(index);
}
inline ::speechly::slu::v1::WLUSegment* WLUResponse::add_segments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::WLUSegment* _add = _internal_mutable_segments()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.WLUResponse.segments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >&
WLUResponse::segments() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.WLUResponse.segments)
  return _internal_segments();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUSegment>&
WLUResponse::_internal_segments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.segments_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUSegment>*
WLUResponse::_internal_mutable_segments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.segments_;
}

// -------------------------------------------------------------------

// WLUSegment

// string text = 1;
inline void WLUSegment::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& WLUSegment::text() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLUSegment::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUSegment.text)
}
inline std::string* WLUSegment::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.text)
  return _s;
}
inline const std::string& WLUSegment::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void WLUSegment::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* WLUSegment::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* WLUSegment::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUSegment.text)
  return _impl_.text_.Release();
}
inline void WLUSegment::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUSegment.text)
}

// repeated .speechly.slu.v1.WLUToken tokens = 2;
inline int WLUSegment::_internal_tokens_size() const {
  return _internal_tokens().size();
}
inline int WLUSegment::tokens_size() const {
  return _internal_tokens_size();
}
inline void WLUSegment::clear_tokens() {
  _internal_mutable_tokens()->Clear();
}
inline ::speechly::slu::v1::WLUToken* WLUSegment::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.tokens)
  return _internal_mutable_tokens()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUToken >*
WLUSegment::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.WLUSegment.tokens)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tokens();
}
inline const ::speechly::slu::v1::WLUToken& WLUSegment::tokens(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.tokens)
    return _internal_tokens().Get(index);
}
inline ::speechly::slu::v1::WLUToken* WLUSegment::add_tokens() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::WLUToken* _add = _internal_mutable_tokens()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.WLUSegment.tokens)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUToken >&
WLUSegment::tokens() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.WLUSegment.tokens)
  return _internal_tokens();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUToken>&
WLUSegment::_internal_tokens() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tokens_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUToken>*
WLUSegment::_internal_mutable_tokens() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tokens_;
}

// repeated .speechly.slu.v1.WLUEntity entities = 3;
inline int WLUSegment::_internal_entities_size() const {
  return _internal_entities().size();
}
inline int WLUSegment::entities_size() const {
  return _internal_entities_size();
}
inline void WLUSegment::clear_entities() {
  _internal_mutable_entities()->Clear();
}
inline ::speechly::slu::v1::WLUEntity* WLUSegment::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.entities)
  return _internal_mutable_entities()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >*
WLUSegment::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.WLUSegment.entities)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_entities();
}
inline const ::speechly::slu::v1::WLUEntity& WLUSegment::entities(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.entities)
    return _internal_entities().Get(index);
}
inline ::speechly::slu::v1::WLUEntity* WLUSegment::add_entities() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::WLUEntity* _add = _internal_mutable_entities()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.WLUSegment.entities)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >&
WLUSegment::entities() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.WLUSegment.entities)
  return _internal_entities();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUEntity>&
WLUSegment::_internal_entities() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entities_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::WLUEntity>*
WLUSegment::_internal_mutable_entities() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.entities_;
}

// .speechly.slu.v1.WLUIntent intent = 4;
inline bool WLUSegment::has_intent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.intent_ != nullptr);
  return value;
}
inline void WLUSegment::clear_intent() {
  if (_impl_.intent_ != nullptr) _impl_.intent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::speechly::slu::v1::WLUIntent& WLUSegment::_internal_intent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::speechly::slu::v1::WLUIntent* p = _impl_.intent_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::slu::v1::WLUIntent&>(::speechly::slu::v1::_WLUIntent_default_instance_);
}
inline const ::speechly::slu::v1::WLUIntent& WLUSegment::intent() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.intent)
  return _internal_intent();
}
inline void WLUSegment::unsafe_arena_set_allocated_intent(::speechly::slu::v1::WLUIntent* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.intent_);
  }
  _impl_.intent_ = reinterpret_cast<::speechly::slu::v1::WLUIntent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.WLUSegment.intent)
}
inline ::speechly::slu::v1::WLUIntent* WLUSegment::release_intent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::WLUIntent* released = _impl_.intent_;
  _impl_.intent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::speechly::slu::v1::WLUIntent* WLUSegment::unsafe_arena_release_intent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUSegment.intent)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::speechly::slu::v1::WLUIntent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
  return temp;
}
inline ::speechly::slu::v1::WLUIntent* WLUSegment::_internal_mutable_intent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v1::WLUIntent>(GetArenaForAllocation());
    _impl_.intent_ = reinterpret_cast<::speechly::slu::v1::WLUIntent*>(p);
  }
  return _impl_.intent_;
}
inline ::speechly::slu::v1::WLUIntent* WLUSegment::mutable_intent() {
  ::speechly::slu::v1::WLUIntent* _msg = _internal_mutable_intent();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.intent)
  return _msg;
}
inline void WLUSegment::set_allocated_intent(::speechly::slu::v1::WLUIntent* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::speechly::slu::v1::WLUIntent*>(_impl_.intent_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::speechly::slu::v1::WLUIntent*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.intent_ = reinterpret_cast<::speechly::slu::v1::WLUIntent*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUSegment.intent)
}

// string annotated_text = 5;
inline void WLUSegment::clear_annotated_text() {
  _impl_.annotated_text_.ClearToEmpty();
}
inline const std::string& WLUSegment::annotated_text() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.annotated_text)
  return _internal_annotated_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLUSegment::set_annotated_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.annotated_text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUSegment.annotated_text)
}
inline std::string* WLUSegment::mutable_annotated_text() {
  std::string* _s = _internal_mutable_annotated_text();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.annotated_text)
  return _s;
}
inline const std::string& WLUSegment::_internal_annotated_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.annotated_text_.Get();
}
inline void WLUSegment::_internal_set_annotated_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.annotated_text_.Set(value, GetArenaForAllocation());
}
inline std::string* WLUSegment::_internal_mutable_annotated_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.annotated_text_.Mutable( GetArenaForAllocation());
}
inline std::string* WLUSegment::release_annotated_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUSegment.annotated_text)
  return _impl_.annotated_text_.Release();
}
inline void WLUSegment::set_allocated_annotated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.annotated_text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.annotated_text_.IsDefault()) {
          _impl_.annotated_text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUSegment.annotated_text)
}

// -------------------------------------------------------------------

// WLUToken

// string word = 1;
inline void WLUToken::clear_word() {
  _impl_.word_.ClearToEmpty();
}
inline const std::string& WLUToken::word() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUToken.word)
  return _internal_word();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLUToken::set_word(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUToken.word)
}
inline std::string* WLUToken::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUToken.word)
  return _s;
}
inline const std::string& WLUToken::_internal_word() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.word_.Get();
}
inline void WLUToken::_internal_set_word(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word_.Set(value, GetArenaForAllocation());
}
inline std::string* WLUToken::_internal_mutable_word() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.word_.Mutable( GetArenaForAllocation());
}
inline std::string* WLUToken::release_word() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUToken.word)
  return _impl_.word_.Release();
}
inline void WLUToken::set_allocated_word(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.word_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.word_.IsDefault()) {
          _impl_.word_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUToken.word)
}

// int32 index = 2;
inline void WLUToken::clear_index() {
  _impl_.index_ = 0;
}
inline ::int32_t WLUToken::index() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUToken.index)
  return _internal_index();
}
inline void WLUToken::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUToken.index)
}
inline ::int32_t WLUToken::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void WLUToken::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// WLUEntity

// string entity = 1;
inline void WLUEntity::clear_entity() {
  _impl_.entity_.ClearToEmpty();
}
inline const std::string& WLUEntity::entity() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.entity)
  return _internal_entity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLUEntity::set_entity(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entity_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.entity)
}
inline std::string* WLUEntity::mutable_entity() {
  std::string* _s = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUEntity.entity)
  return _s;
}
inline const std::string& WLUEntity::_internal_entity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entity_.Get();
}
inline void WLUEntity::_internal_set_entity(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entity_.Set(value, GetArenaForAllocation());
}
inline std::string* WLUEntity::_internal_mutable_entity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.entity_.Mutable( GetArenaForAllocation());
}
inline std::string* WLUEntity::release_entity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUEntity.entity)
  return _impl_.entity_.Release();
}
inline void WLUEntity::set_allocated_entity(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.entity_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entity_.IsDefault()) {
          _impl_.entity_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUEntity.entity)
}

// string value = 2;
inline void WLUEntity::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& WLUEntity::value() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLUEntity::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.value)
}
inline std::string* WLUEntity::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUEntity.value)
  return _s;
}
inline const std::string& WLUEntity::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void WLUEntity::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* WLUEntity::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* WLUEntity::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUEntity.value)
  return _impl_.value_.Release();
}
inline void WLUEntity::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUEntity.value)
}

// int32 start_position = 3;
inline void WLUEntity::clear_start_position() {
  _impl_.start_position_ = 0;
}
inline ::int32_t WLUEntity::start_position() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.start_position)
  return _internal_start_position();
}
inline void WLUEntity::set_start_position(::int32_t value) {
  _internal_set_start_position(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.start_position)
}
inline ::int32_t WLUEntity::_internal_start_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_position_;
}
inline void WLUEntity::_internal_set_start_position(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_position_ = value;
}

// int32 end_position = 4;
inline void WLUEntity::clear_end_position() {
  _impl_.end_position_ = 0;
}
inline ::int32_t WLUEntity::end_position() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.end_position)
  return _internal_end_position();
}
inline void WLUEntity::set_end_position(::int32_t value) {
  _internal_set_end_position(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.end_position)
}
inline ::int32_t WLUEntity::_internal_end_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_position_;
}
inline void WLUEntity::_internal_set_end_position(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_position_ = value;
}

// -------------------------------------------------------------------

// WLUIntent

// string intent = 1;
inline void WLUIntent::clear_intent() {
  _impl_.intent_.ClearToEmpty();
}
inline const std::string& WLUIntent::intent() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUIntent.intent)
  return _internal_intent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WLUIntent::set_intent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUIntent.intent)
}
inline std::string* WLUIntent::mutable_intent() {
  std::string* _s = _internal_mutable_intent();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUIntent.intent)
  return _s;
}
inline const std::string& WLUIntent::_internal_intent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intent_.Get();
}
inline void WLUIntent::_internal_set_intent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intent_.Set(value, GetArenaForAllocation());
}
inline std::string* WLUIntent::_internal_mutable_intent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.intent_.Mutable( GetArenaForAllocation());
}
inline std::string* WLUIntent::release_intent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUIntent.intent)
  return _impl_.intent_.Release();
}
inline void WLUIntent::set_allocated_intent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.intent_.IsDefault()) {
          _impl_.intent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUIntent.intent)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slu
}  // namespace speechly


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fwlu_2eproto_2epb_2eh
