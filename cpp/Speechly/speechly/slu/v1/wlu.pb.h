// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/wlu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fwlu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fwlu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto;
namespace speechly {
namespace slu {
namespace v1 {
class WLUEntity;
class WLUEntityDefaultTypeInternal;
extern WLUEntityDefaultTypeInternal _WLUEntity_default_instance_;
class WLUIntent;
class WLUIntentDefaultTypeInternal;
extern WLUIntentDefaultTypeInternal _WLUIntent_default_instance_;
class WLURequest;
class WLURequestDefaultTypeInternal;
extern WLURequestDefaultTypeInternal _WLURequest_default_instance_;
class WLUResponse;
class WLUResponseDefaultTypeInternal;
extern WLUResponseDefaultTypeInternal _WLUResponse_default_instance_;
class WLUSegment;
class WLUSegmentDefaultTypeInternal;
extern WLUSegmentDefaultTypeInternal _WLUSegment_default_instance_;
class WLUToken;
class WLUTokenDefaultTypeInternal;
extern WLUTokenDefaultTypeInternal _WLUToken_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::slu::v1::WLUEntity* Arena::CreateMaybeMessage<::speechly::slu::v1::WLUEntity>(Arena*);
template<> ::speechly::slu::v1::WLUIntent* Arena::CreateMaybeMessage<::speechly::slu::v1::WLUIntent>(Arena*);
template<> ::speechly::slu::v1::WLURequest* Arena::CreateMaybeMessage<::speechly::slu::v1::WLURequest>(Arena*);
template<> ::speechly::slu::v1::WLUResponse* Arena::CreateMaybeMessage<::speechly::slu::v1::WLUResponse>(Arena*);
template<> ::speechly::slu::v1::WLUSegment* Arena::CreateMaybeMessage<::speechly::slu::v1::WLUSegment>(Arena*);
template<> ::speechly::slu::v1::WLUToken* Arena::CreateMaybeMessage<::speechly::slu::v1::WLUToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace slu {
namespace v1 {

// ===================================================================

class WLURequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLURequest) */ {
 public:
  WLURequest();
  virtual ~WLURequest();

  WLURequest(const WLURequest& from);
  WLURequest(WLURequest&& from) noexcept
    : WLURequest() {
    *this = ::std::move(from);
  }

  inline WLURequest& operator=(const WLURequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLURequest& operator=(WLURequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WLURequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WLURequest* internal_default_instance() {
    return reinterpret_cast<const WLURequest*>(
               &_WLURequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WLURequest& a, WLURequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WLURequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WLURequest* New() const final {
    return CreateMaybeMessage<WLURequest>(nullptr);
  }

  WLURequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WLURequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WLURequest& from);
  void MergeFrom(const WLURequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLURequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.WLURequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto);
    return ::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // string language_code = 1;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLURequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};
// -------------------------------------------------------------------

class WLUResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUResponse) */ {
 public:
  WLUResponse();
  virtual ~WLUResponse();

  WLUResponse(const WLUResponse& from);
  WLUResponse(WLUResponse&& from) noexcept
    : WLUResponse() {
    *this = ::std::move(from);
  }

  inline WLUResponse& operator=(const WLUResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUResponse& operator=(WLUResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WLUResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WLUResponse* internal_default_instance() {
    return reinterpret_cast<const WLUResponse*>(
               &_WLUResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WLUResponse& a, WLUResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WLUResponse* New() const final {
    return CreateMaybeMessage<WLUResponse>(nullptr);
  }

  WLUResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WLUResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WLUResponse& from);
  void MergeFrom(const WLUResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.WLUResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto);
    return ::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .speechly.slu.v1.WLUSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::speechly::slu::v1::WLUSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >*
      mutable_segments();
  private:
  const ::speechly::slu::v1::WLUSegment& _internal_segments(int index) const;
  ::speechly::slu::v1::WLUSegment* _internal_add_segments();
  public:
  const ::speechly::slu::v1::WLUSegment& segments(int index) const;
  ::speechly::slu::v1::WLUSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUSegment > segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};
// -------------------------------------------------------------------

class WLUSegment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUSegment) */ {
 public:
  WLUSegment();
  virtual ~WLUSegment();

  WLUSegment(const WLUSegment& from);
  WLUSegment(WLUSegment&& from) noexcept
    : WLUSegment() {
    *this = ::std::move(from);
  }

  inline WLUSegment& operator=(const WLUSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUSegment& operator=(WLUSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WLUSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WLUSegment* internal_default_instance() {
    return reinterpret_cast<const WLUSegment*>(
               &_WLUSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WLUSegment& a, WLUSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUSegment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WLUSegment* New() const final {
    return CreateMaybeMessage<WLUSegment>(nullptr);
  }

  WLUSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WLUSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WLUSegment& from);
  void MergeFrom(const WLUSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.WLUSegment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto);
    return ::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 2,
    kEntitiesFieldNumber = 3,
    kTextFieldNumber = 1,
    kIntentFieldNumber = 4,
  };
  // repeated .speechly.slu.v1.WLUToken tokens = 2;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::speechly::slu::v1::WLUToken* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUToken >*
      mutable_tokens();
  private:
  const ::speechly::slu::v1::WLUToken& _internal_tokens(int index) const;
  ::speechly::slu::v1::WLUToken* _internal_add_tokens();
  public:
  const ::speechly::slu::v1::WLUToken& tokens(int index) const;
  ::speechly::slu::v1::WLUToken* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUToken >&
      tokens() const;

  // repeated .speechly.slu.v1.WLUEntity entities = 3;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::speechly::slu::v1::WLUEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >*
      mutable_entities();
  private:
  const ::speechly::slu::v1::WLUEntity& _internal_entities(int index) const;
  ::speechly::slu::v1::WLUEntity* _internal_add_entities();
  public:
  const ::speechly::slu::v1::WLUEntity& entities(int index) const;
  ::speechly::slu::v1::WLUEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >&
      entities() const;

  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .speechly.slu.v1.WLUIntent intent = 4;
  bool has_intent() const;
  private:
  bool _internal_has_intent() const;
  public:
  void clear_intent();
  const ::speechly::slu::v1::WLUIntent& intent() const;
  ::speechly::slu::v1::WLUIntent* release_intent();
  ::speechly::slu::v1::WLUIntent* mutable_intent();
  void set_allocated_intent(::speechly::slu::v1::WLUIntent* intent);
  private:
  const ::speechly::slu::v1::WLUIntent& _internal_intent() const;
  ::speechly::slu::v1::WLUIntent* _internal_mutable_intent();
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUSegment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUToken > tokens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUEntity > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::speechly::slu::v1::WLUIntent* intent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};
// -------------------------------------------------------------------

class WLUToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUToken) */ {
 public:
  WLUToken();
  virtual ~WLUToken();

  WLUToken(const WLUToken& from);
  WLUToken(WLUToken&& from) noexcept
    : WLUToken() {
    *this = ::std::move(from);
  }

  inline WLUToken& operator=(const WLUToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUToken& operator=(WLUToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WLUToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WLUToken* internal_default_instance() {
    return reinterpret_cast<const WLUToken*>(
               &_WLUToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WLUToken& a, WLUToken& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WLUToken* New() const final {
    return CreateMaybeMessage<WLUToken>(nullptr);
  }

  WLUToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WLUToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WLUToken& from);
  void MergeFrom(const WLUToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.WLUToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto);
    return ::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string word = 1;
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};
// -------------------------------------------------------------------

class WLUEntity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUEntity) */ {
 public:
  WLUEntity();
  virtual ~WLUEntity();

  WLUEntity(const WLUEntity& from);
  WLUEntity(WLUEntity&& from) noexcept
    : WLUEntity() {
    *this = ::std::move(from);
  }

  inline WLUEntity& operator=(const WLUEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUEntity& operator=(WLUEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WLUEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WLUEntity* internal_default_instance() {
    return reinterpret_cast<const WLUEntity*>(
               &_WLUEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WLUEntity& a, WLUEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUEntity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WLUEntity* New() const final {
    return CreateMaybeMessage<WLUEntity>(nullptr);
  }

  WLUEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WLUEntity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WLUEntity& from);
  void MergeFrom(const WLUEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUEntity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.WLUEntity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto);
    return ::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 1,
    kValueFieldNumber = 2,
    kStartPositionFieldNumber = 3,
    kEndPositionFieldNumber = 4,
  };
  // string entity = 1;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 start_position = 3;
  void clear_start_position();
  ::PROTOBUF_NAMESPACE_ID::int32 start_position() const;
  void set_start_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_position() const;
  void _internal_set_start_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_position = 4;
  void clear_end_position();
  ::PROTOBUF_NAMESPACE_ID::int32 end_position() const;
  void set_end_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_position() const;
  void _internal_set_end_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUEntity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};
// -------------------------------------------------------------------

class WLUIntent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.WLUIntent) */ {
 public:
  WLUIntent();
  virtual ~WLUIntent();

  WLUIntent(const WLUIntent& from);
  WLUIntent(WLUIntent&& from) noexcept
    : WLUIntent() {
    *this = ::std::move(from);
  }

  inline WLUIntent& operator=(const WLUIntent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WLUIntent& operator=(WLUIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WLUIntent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WLUIntent* internal_default_instance() {
    return reinterpret_cast<const WLUIntent*>(
               &_WLUIntent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WLUIntent& a, WLUIntent& b) {
    a.Swap(&b);
  }
  inline void Swap(WLUIntent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WLUIntent* New() const final {
    return CreateMaybeMessage<WLUIntent>(nullptr);
  }

  WLUIntent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WLUIntent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WLUIntent& from);
  void MergeFrom(const WLUIntent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WLUIntent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.WLUIntent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto);
    return ::descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentFieldNumber = 1,
  };
  // string intent = 1;
  void clear_intent();
  const std::string& intent() const;
  void set_intent(const std::string& value);
  void set_intent(std::string&& value);
  void set_intent(const char* value);
  void set_intent(const char* value, size_t size);
  std::string* mutable_intent();
  std::string* release_intent();
  void set_allocated_intent(std::string* intent);
  private:
  const std::string& _internal_intent() const;
  void _internal_set_intent(const std::string& value);
  std::string* _internal_mutable_intent();
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.WLUIntent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WLURequest

// string language_code = 1;
inline void WLURequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WLURequest::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLURequest.language_code)
  return _internal_language_code();
}
inline void WLURequest::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLURequest.language_code)
}
inline std::string* WLURequest::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLURequest.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& WLURequest::_internal_language_code() const {
  return language_code_.GetNoArena();
}
inline void WLURequest::_internal_set_language_code(const std::string& value) {
  
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WLURequest::set_language_code(std::string&& value) {
  
  language_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.slu.v1.WLURequest.language_code)
}
inline void WLURequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.WLURequest.language_code)
}
inline void WLURequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.WLURequest.language_code)
}
inline std::string* WLURequest::_internal_mutable_language_code() {
  
  return language_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WLURequest::release_language_code() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLURequest.language_code)
  
  return language_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WLURequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLURequest.language_code)
}

// string text = 2;
inline void WLURequest::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WLURequest::text() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLURequest.text)
  return _internal_text();
}
inline void WLURequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLURequest.text)
}
inline std::string* WLURequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLURequest.text)
  return _internal_mutable_text();
}
inline const std::string& WLURequest::_internal_text() const {
  return text_.GetNoArena();
}
inline void WLURequest::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WLURequest::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.slu.v1.WLURequest.text)
}
inline void WLURequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.WLURequest.text)
}
inline void WLURequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.WLURequest.text)
}
inline std::string* WLURequest::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WLURequest::release_text() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLURequest.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WLURequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLURequest.text)
}

// -------------------------------------------------------------------

// WLUResponse

// repeated .speechly.slu.v1.WLUSegment segments = 1;
inline int WLUResponse::_internal_segments_size() const {
  return segments_.size();
}
inline int WLUResponse::segments_size() const {
  return _internal_segments_size();
}
inline void WLUResponse::clear_segments() {
  segments_.Clear();
}
inline ::speechly::slu::v1::WLUSegment* WLUResponse::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUResponse.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >*
WLUResponse::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.WLUResponse.segments)
  return &segments_;
}
inline const ::speechly::slu::v1::WLUSegment& WLUResponse::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::speechly::slu::v1::WLUSegment& WLUResponse::segments(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUResponse.segments)
  return _internal_segments(index);
}
inline ::speechly::slu::v1::WLUSegment* WLUResponse::_internal_add_segments() {
  return segments_.Add();
}
inline ::speechly::slu::v1::WLUSegment* WLUResponse::add_segments() {
  // @@protoc_insertion_point(field_add:speechly.slu.v1.WLUResponse.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUSegment >&
WLUResponse::segments() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.WLUResponse.segments)
  return segments_;
}

// -------------------------------------------------------------------

// WLUSegment

// string text = 1;
inline void WLUSegment::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WLUSegment::text() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.text)
  return _internal_text();
}
inline void WLUSegment::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUSegment.text)
}
inline std::string* WLUSegment::mutable_text() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.text)
  return _internal_mutable_text();
}
inline const std::string& WLUSegment::_internal_text() const {
  return text_.GetNoArena();
}
inline void WLUSegment::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WLUSegment::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.slu.v1.WLUSegment.text)
}
inline void WLUSegment::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.WLUSegment.text)
}
inline void WLUSegment::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.WLUSegment.text)
}
inline std::string* WLUSegment::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WLUSegment::release_text() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUSegment.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WLUSegment::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUSegment.text)
}

// repeated .speechly.slu.v1.WLUToken tokens = 2;
inline int WLUSegment::_internal_tokens_size() const {
  return tokens_.size();
}
inline int WLUSegment::tokens_size() const {
  return _internal_tokens_size();
}
inline void WLUSegment::clear_tokens() {
  tokens_.Clear();
}
inline ::speechly::slu::v1::WLUToken* WLUSegment::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUToken >*
WLUSegment::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.WLUSegment.tokens)
  return &tokens_;
}
inline const ::speechly::slu::v1::WLUToken& WLUSegment::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::speechly::slu::v1::WLUToken& WLUSegment::tokens(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.tokens)
  return _internal_tokens(index);
}
inline ::speechly::slu::v1::WLUToken* WLUSegment::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::speechly::slu::v1::WLUToken* WLUSegment::add_tokens() {
  // @@protoc_insertion_point(field_add:speechly.slu.v1.WLUSegment.tokens)
  return _internal_add_tokens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUToken >&
WLUSegment::tokens() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.WLUSegment.tokens)
  return tokens_;
}

// repeated .speechly.slu.v1.WLUEntity entities = 3;
inline int WLUSegment::_internal_entities_size() const {
  return entities_.size();
}
inline int WLUSegment::entities_size() const {
  return _internal_entities_size();
}
inline void WLUSegment::clear_entities() {
  entities_.Clear();
}
inline ::speechly::slu::v1::WLUEntity* WLUSegment::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >*
WLUSegment::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.WLUSegment.entities)
  return &entities_;
}
inline const ::speechly::slu::v1::WLUEntity& WLUSegment::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::speechly::slu::v1::WLUEntity& WLUSegment::entities(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.entities)
  return _internal_entities(index);
}
inline ::speechly::slu::v1::WLUEntity* WLUSegment::_internal_add_entities() {
  return entities_.Add();
}
inline ::speechly::slu::v1::WLUEntity* WLUSegment::add_entities() {
  // @@protoc_insertion_point(field_add:speechly.slu.v1.WLUSegment.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::WLUEntity >&
WLUSegment::entities() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.WLUSegment.entities)
  return entities_;
}

// .speechly.slu.v1.WLUIntent intent = 4;
inline bool WLUSegment::_internal_has_intent() const {
  return this != internal_default_instance() && intent_ != nullptr;
}
inline bool WLUSegment::has_intent() const {
  return _internal_has_intent();
}
inline void WLUSegment::clear_intent() {
  if (GetArenaNoVirtual() == nullptr && intent_ != nullptr) {
    delete intent_;
  }
  intent_ = nullptr;
}
inline const ::speechly::slu::v1::WLUIntent& WLUSegment::_internal_intent() const {
  const ::speechly::slu::v1::WLUIntent* p = intent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::speechly::slu::v1::WLUIntent*>(
      &::speechly::slu::v1::_WLUIntent_default_instance_);
}
inline const ::speechly::slu::v1::WLUIntent& WLUSegment::intent() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUSegment.intent)
  return _internal_intent();
}
inline ::speechly::slu::v1::WLUIntent* WLUSegment::release_intent() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUSegment.intent)
  
  ::speechly::slu::v1::WLUIntent* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::speechly::slu::v1::WLUIntent* WLUSegment::_internal_mutable_intent() {
  
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::slu::v1::WLUIntent>(GetArenaNoVirtual());
    intent_ = p;
  }
  return intent_;
}
inline ::speechly::slu::v1::WLUIntent* WLUSegment::mutable_intent() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUSegment.intent)
  return _internal_mutable_intent();
}
inline void WLUSegment::set_allocated_intent(::speechly::slu::v1::WLUIntent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intent_;
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    
  } else {
    
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUSegment.intent)
}

// -------------------------------------------------------------------

// WLUToken

// string word = 1;
inline void WLUToken::clear_word() {
  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WLUToken::word() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUToken.word)
  return _internal_word();
}
inline void WLUToken::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUToken.word)
}
inline std::string* WLUToken::mutable_word() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUToken.word)
  return _internal_mutable_word();
}
inline const std::string& WLUToken::_internal_word() const {
  return word_.GetNoArena();
}
inline void WLUToken::_internal_set_word(const std::string& value) {
  
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WLUToken::set_word(std::string&& value) {
  
  word_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.slu.v1.WLUToken.word)
}
inline void WLUToken::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.WLUToken.word)
}
inline void WLUToken::set_word(const char* value, size_t size) {
  
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.WLUToken.word)
}
inline std::string* WLUToken::_internal_mutable_word() {
  
  return word_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WLUToken::release_word() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUToken.word)
  
  return word_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WLUToken::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  word_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUToken.word)
}

// int32 index = 2;
inline void WLUToken::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WLUToken::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WLUToken::index() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUToken.index)
  return _internal_index();
}
inline void WLUToken::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void WLUToken::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUToken.index)
}

// -------------------------------------------------------------------

// WLUEntity

// string entity = 1;
inline void WLUEntity::clear_entity() {
  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WLUEntity::entity() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.entity)
  return _internal_entity();
}
inline void WLUEntity::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.entity)
}
inline std::string* WLUEntity::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUEntity.entity)
  return _internal_mutable_entity();
}
inline const std::string& WLUEntity::_internal_entity() const {
  return entity_.GetNoArena();
}
inline void WLUEntity::_internal_set_entity(const std::string& value) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WLUEntity::set_entity(std::string&& value) {
  
  entity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.slu.v1.WLUEntity.entity)
}
inline void WLUEntity::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.WLUEntity.entity)
}
inline void WLUEntity::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.WLUEntity.entity)
}
inline std::string* WLUEntity::_internal_mutable_entity() {
  
  return entity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WLUEntity::release_entity() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUEntity.entity)
  
  return entity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WLUEntity::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUEntity.entity)
}

// string value = 2;
inline void WLUEntity::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WLUEntity::value() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.value)
  return _internal_value();
}
inline void WLUEntity::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.value)
}
inline std::string* WLUEntity::mutable_value() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUEntity.value)
  return _internal_mutable_value();
}
inline const std::string& WLUEntity::_internal_value() const {
  return value_.GetNoArena();
}
inline void WLUEntity::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WLUEntity::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.slu.v1.WLUEntity.value)
}
inline void WLUEntity::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.WLUEntity.value)
}
inline void WLUEntity::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.WLUEntity.value)
}
inline std::string* WLUEntity::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WLUEntity::release_value() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUEntity.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WLUEntity::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUEntity.value)
}

// int32 start_position = 3;
inline void WLUEntity::clear_start_position() {
  start_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WLUEntity::_internal_start_position() const {
  return start_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WLUEntity::start_position() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.start_position)
  return _internal_start_position();
}
inline void WLUEntity::_internal_set_start_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_position_ = value;
}
inline void WLUEntity::set_start_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_position(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.start_position)
}

// int32 end_position = 4;
inline void WLUEntity::clear_end_position() {
  end_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WLUEntity::_internal_end_position() const {
  return end_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WLUEntity::end_position() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUEntity.end_position)
  return _internal_end_position();
}
inline void WLUEntity::_internal_set_end_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_position_ = value;
}
inline void WLUEntity::set_end_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_position(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUEntity.end_position)
}

// -------------------------------------------------------------------

// WLUIntent

// string intent = 1;
inline void WLUIntent::clear_intent() {
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WLUIntent::intent() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.WLUIntent.intent)
  return _internal_intent();
}
inline void WLUIntent::set_intent(const std::string& value) {
  _internal_set_intent(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.WLUIntent.intent)
}
inline std::string* WLUIntent::mutable_intent() {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.WLUIntent.intent)
  return _internal_mutable_intent();
}
inline const std::string& WLUIntent::_internal_intent() const {
  return intent_.GetNoArena();
}
inline void WLUIntent::_internal_set_intent(const std::string& value) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WLUIntent::set_intent(std::string&& value) {
  
  intent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.slu.v1.WLUIntent.intent)
}
inline void WLUIntent::set_intent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.WLUIntent.intent)
}
inline void WLUIntent::set_intent(const char* value, size_t size) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.WLUIntent.intent)
}
inline std::string* WLUIntent::_internal_mutable_intent() {
  
  return intent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WLUIntent::release_intent() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.WLUIntent.intent)
  
  return intent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WLUIntent::set_allocated_intent(std::string* intent) {
  if (intent != nullptr) {
    
  } else {
    
  }
  intent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intent);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.WLUIntent.intent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace slu
}  // namespace speechly

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fwlu_2eproto
