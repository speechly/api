// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/slu/v1/wlu.proto

#include "speechly/slu/v1/wlu.pb.h"
#include "speechly/slu/v1/wlu.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace speechly {
namespace slu {
namespace v1 {

static const char* WLU_method_names[] = {
  "/speechly.slu.v1.WLU/Text",
  "/speechly.slu.v1.WLU/Texts",
};

std::unique_ptr< WLU::Stub> WLU::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WLU::Stub> stub(new WLU::Stub(channel));
  return stub;
}

WLU::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Text_(WLU_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Texts_(WLU_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WLU::Stub::Text(::grpc::ClientContext* context, const ::speechly::slu::v1::WLURequest& request, ::speechly::slu::v1::WLUResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Text_, context, request, response);
}

void WLU::Stub::experimental_async::Text(::grpc::ClientContext* context, const ::speechly::slu::v1::WLURequest* request, ::speechly::slu::v1::WLUResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Text_, context, request, response, std::move(f));
}

void WLU::Stub::experimental_async::Text(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::WLUResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Text_, context, request, response, std::move(f));
}

void WLU::Stub::experimental_async::Text(::grpc::ClientContext* context, const ::speechly::slu::v1::WLURequest* request, ::speechly::slu::v1::WLUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Text_, context, request, response, reactor);
}

void WLU::Stub::experimental_async::Text(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::WLUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Text_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::WLUResponse>* WLU::Stub::AsyncTextRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::WLURequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::slu::v1::WLUResponse>::Create(channel_.get(), cq, rpcmethod_Text_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::WLUResponse>* WLU::Stub::PrepareAsyncTextRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::WLURequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::slu::v1::WLUResponse>::Create(channel_.get(), cq, rpcmethod_Text_, context, request, false);
}

::grpc::Status WLU::Stub::Texts(::grpc::ClientContext* context, const ::speechly::slu::v1::TextsRequest& request, ::speechly::slu::v1::TextsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Texts_, context, request, response);
}

void WLU::Stub::experimental_async::Texts(::grpc::ClientContext* context, const ::speechly::slu::v1::TextsRequest* request, ::speechly::slu::v1::TextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Texts_, context, request, response, std::move(f));
}

void WLU::Stub::experimental_async::Texts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::TextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Texts_, context, request, response, std::move(f));
}

void WLU::Stub::experimental_async::Texts(::grpc::ClientContext* context, const ::speechly::slu::v1::TextsRequest* request, ::speechly::slu::v1::TextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Texts_, context, request, response, reactor);
}

void WLU::Stub::experimental_async::Texts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::TextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Texts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::TextsResponse>* WLU::Stub::AsyncTextsRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::TextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::slu::v1::TextsResponse>::Create(channel_.get(), cq, rpcmethod_Texts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::TextsResponse>* WLU::Stub::PrepareAsyncTextsRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::TextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::slu::v1::TextsResponse>::Create(channel_.get(), cq, rpcmethod_Texts_, context, request, false);
}

WLU::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WLU_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WLU::Service, ::speechly::slu::v1::WLURequest, ::speechly::slu::v1::WLUResponse>(
          std::mem_fn(&WLU::Service::Text), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WLU_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WLU::Service, ::speechly::slu::v1::TextsRequest, ::speechly::slu::v1::TextsResponse>(
          std::mem_fn(&WLU::Service::Texts), this)));
}

WLU::Service::~Service() {
}

::grpc::Status WLU::Service::Text(::grpc::ServerContext* context, const ::speechly::slu::v1::WLURequest* request, ::speechly::slu::v1::WLUResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WLU::Service::Texts(::grpc::ServerContext* context, const ::speechly::slu::v1::TextsRequest* request, ::speechly::slu::v1::TextsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speechly
}  // namespace slu
}  // namespace v1

