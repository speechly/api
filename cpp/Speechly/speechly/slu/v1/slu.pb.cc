// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/slu.proto

#include "speechly/slu/v1/slu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace slu {
namespace v1 {
constexpr SLURequest::SLURequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLURequestDefaultTypeInternal {
  constexpr SLURequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLURequestDefaultTypeInternal() {}
  union {
    SLURequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLURequestDefaultTypeInternal _SLURequest_default_instance_;
constexpr SLUConfig::SLUConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoding_(0)

  , channels_(0)
  , sample_rate_hertz_(0){}
struct SLUConfigDefaultTypeInternal {
  constexpr SLUConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUConfigDefaultTypeInternal() {}
  union {
    SLUConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUConfigDefaultTypeInternal _SLUConfig_default_instance_;
constexpr SLUEvent::SLUEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_(0)
{}
struct SLUEventDefaultTypeInternal {
  constexpr SLUEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUEventDefaultTypeInternal() {}
  union {
    SLUEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUEventDefaultTypeInternal _SLUEvent_default_instance_;
constexpr SLUResponse::SLUResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_context_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , segment_id_(0)
  , _oneof_case_{}{}
struct SLUResponseDefaultTypeInternal {
  constexpr SLUResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUResponseDefaultTypeInternal() {}
  union {
    SLUResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUResponseDefaultTypeInternal _SLUResponse_default_instance_;
constexpr SLUTranscript::SLUTranscript(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0)
  , start_time_(0)
  , end_time_(0){}
struct SLUTranscriptDefaultTypeInternal {
  constexpr SLUTranscriptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUTranscriptDefaultTypeInternal() {}
  union {
    SLUTranscript _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUTranscriptDefaultTypeInternal _SLUTranscript_default_instance_;
constexpr SLUEntity::SLUEntity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_position_(0)
  , end_position_(0){}
struct SLUEntityDefaultTypeInternal {
  constexpr SLUEntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUEntityDefaultTypeInternal() {}
  union {
    SLUEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUEntityDefaultTypeInternal _SLUEntity_default_instance_;
constexpr SLUIntent::SLUIntent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLUIntentDefaultTypeInternal {
  constexpr SLUIntentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUIntentDefaultTypeInternal() {}
  union {
    SLUIntent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUIntentDefaultTypeInternal _SLUIntent_default_instance_;
constexpr SLUSegmentEnd::SLUSegmentEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLUSegmentEndDefaultTypeInternal {
  constexpr SLUSegmentEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUSegmentEndDefaultTypeInternal() {}
  union {
    SLUSegmentEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUSegmentEndDefaultTypeInternal _SLUSegmentEnd_default_instance_;
constexpr SLUTentativeTranscript::SLUTentativeTranscript(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tentative_words_()
  , tentative_transcript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLUTentativeTranscriptDefaultTypeInternal {
  constexpr SLUTentativeTranscriptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUTentativeTranscriptDefaultTypeInternal() {}
  union {
    SLUTentativeTranscript _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUTentativeTranscriptDefaultTypeInternal _SLUTentativeTranscript_default_instance_;
constexpr SLUTentativeEntities::SLUTentativeEntities(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tentative_entities_(){}
struct SLUTentativeEntitiesDefaultTypeInternal {
  constexpr SLUTentativeEntitiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUTentativeEntitiesDefaultTypeInternal() {}
  union {
    SLUTentativeEntities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUTentativeEntitiesDefaultTypeInternal _SLUTentativeEntities_default_instance_;
constexpr SLUStarted::SLUStarted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLUStartedDefaultTypeInternal {
  constexpr SLUStartedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUStartedDefaultTypeInternal() {}
  union {
    SLUStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUStartedDefaultTypeInternal _SLUStarted_default_instance_;
constexpr SLUFinished::SLUFinished(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(nullptr){}
struct SLUFinishedDefaultTypeInternal {
  constexpr SLUFinishedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUFinishedDefaultTypeInternal() {}
  union {
    SLUFinished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUFinishedDefaultTypeInternal _SLUFinished_default_instance_;
constexpr SLUError::SLUError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLUErrorDefaultTypeInternal {
  constexpr SLUErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLUErrorDefaultTypeInternal() {}
  union {
    SLUError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLUErrorDefaultTypeInternal _SLUError_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fslu_2fv1_2fslu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fslu_2fv1_2fslu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLURequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLURequest, streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, encoding_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, channels_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, language_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEvent, event_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEvent, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, audio_context_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, segment_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, streaming_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, word_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, index_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, start_time_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, entity_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, value_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, start_position_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, end_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUIntent, intent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUSegmentEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeTranscript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeTranscript, tentative_transcript_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeTranscript, tentative_words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeEntities, tentative_entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUFinished, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUError, code_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUError, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::slu::v1::SLURequest)},
  { 9, -1, sizeof(::speechly::slu::v1::SLUConfig)},
  { 18, -1, sizeof(::speechly::slu::v1::SLUEvent)},
  { 25, -1, sizeof(::speechly::slu::v1::SLUResponse)},
  { 42, -1, sizeof(::speechly::slu::v1::SLUTranscript)},
  { 51, -1, sizeof(::speechly::slu::v1::SLUEntity)},
  { 60, -1, sizeof(::speechly::slu::v1::SLUIntent)},
  { 66, -1, sizeof(::speechly::slu::v1::SLUSegmentEnd)},
  { 71, -1, sizeof(::speechly::slu::v1::SLUTentativeTranscript)},
  { 78, -1, sizeof(::speechly::slu::v1::SLUTentativeEntities)},
  { 84, -1, sizeof(::speechly::slu::v1::SLUStarted)},
  { 89, -1, sizeof(::speechly::slu::v1::SLUFinished)},
  { 95, -1, sizeof(::speechly::slu::v1::SLUError)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLURequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUTranscript_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUIntent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUSegmentEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUTentativeTranscript_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUTentativeEntities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUStarted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUFinished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUError_default_instance_),
};

const char descriptor_table_protodef_speechly_2fslu_2fv1_2fslu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031speechly/slu/v1/slu.proto\022\017speechly.sl"
  "u.v1\"\214\001\n\nSLURequest\022,\n\006config\030\001 \001(\0132\032.sp"
  "eechly.slu.v1.SLUConfigH\000\022*\n\005event\030\002 \001(\013"
  "2\031.speechly.slu.v1.SLUEventH\000\022\017\n\005audio\030\003"
  " \001(\014H\000B\023\n\021streaming_request\"\240\001\n\tSLUConfi"
  "g\0225\n\010encoding\030\001 \001(\0162#.speechly.slu.v1.SL"
  "UConfig.Encoding\022\020\n\010channels\030\002 \001(\005\022\031\n\021sa"
  "mple_rate_hertz\030\003 \001(\005\022\025\n\rlanguage_code\030\004"
  " \001(\t\"\030\n\010Encoding\022\014\n\010LINEAR16\020\000\"h\n\010SLUEve"
  "nt\022.\n\005event\030\001 \001(\0162\037.speechly.slu.v1.SLUE"
  "vent.Event\022\016\n\006app_id\030\002 \001(\t\"\034\n\005Event\022\t\n\005S"
  "TART\020\000\022\010\n\004STOP\020\001\"\277\004\n\013SLUResponse\022\025\n\raudi"
  "o_context\030\001 \001(\t\022\022\n\nsegment_id\030\002 \001(\005\0224\n\nt"
  "ranscript\030\003 \001(\0132\036.speechly.slu.v1.SLUTra"
  "nscriptH\000\022,\n\006entity\030\004 \001(\0132\032.speechly.slu"
  ".v1.SLUEntityH\000\022,\n\006intent\030\005 \001(\0132\032.speech"
  "ly.slu.v1.SLUIntentH\000\0225\n\013segment_end\030\006 \001"
  "(\0132\036.speechly.slu.v1.SLUSegmentEndH\000\022G\n\024"
  "tentative_transcript\030\007 \001(\0132\'.speechly.sl"
  "u.v1.SLUTentativeTranscriptH\000\022C\n\022tentati"
  "ve_entities\030\010 \001(\0132%.speechly.slu.v1.SLUT"
  "entativeEntitiesH\000\0226\n\020tentative_intent\030\t"
  " \001(\0132\032.speechly.slu.v1.SLUIntentH\000\022.\n\007st"
  "arted\030\n \001(\0132\033.speechly.slu.v1.SLUStarted"
  "H\000\0220\n\010finished\030\013 \001(\0132\034.speechly.slu.v1.S"
  "LUFinishedH\000B\024\n\022streaming_response\"R\n\rSL"
  "UTranscript\022\014\n\004word\030\001 \001(\t\022\r\n\005index\030\002 \001(\005"
  "\022\022\n\nstart_time\030\003 \001(\005\022\020\n\010end_time\030\004 \001(\005\"X"
  "\n\tSLUEntity\022\016\n\006entity\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t\022\026\n\016start_position\030\003 \001(\005\022\024\n\014end_positi"
  "on\030\004 \001(\005\"\033\n\tSLUIntent\022\016\n\006intent\030\001 \001(\t\"\017\n"
  "\rSLUSegmentEnd\"o\n\026SLUTentativeTranscript"
  "\022\034\n\024tentative_transcript\030\001 \001(\t\0227\n\017tentat"
  "ive_words\030\002 \003(\0132\036.speechly.slu.v1.SLUTra"
  "nscript\"N\n\024SLUTentativeEntities\0226\n\022tenta"
  "tive_entities\030\001 \003(\0132\032.speechly.slu.v1.SL"
  "UEntity\"\014\n\nSLUStarted\"7\n\013SLUFinished\022(\n\005"
  "error\030\002 \001(\0132\031.speechly.slu.v1.SLUError\")"
  "\n\010SLUError\022\014\n\004code\030\001 \001(\t\022\017\n\007message\030\002 \001("
  "\t2N\n\003SLU\022G\n\006Stream\022\033.speechly.slu.v1.SLU"
  "Request\032\034.speechly.slu.v1.SLUResponse(\0010"
  "\001Bf\n\027com.speechly.api.slu.v1B\010SluProtoP\001"
  "Z\025speechly/slu/v1;sluv1\242\002\003SSX\252\002\017Speechly"
  ".Slu.V1\312\002\017Speechly\\Slu\\V1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto = {
  false, false, 1753, descriptor_table_protodef_speechly_2fslu_2fv1_2fslu_2eproto, "speechly/slu/v1/slu.proto", 
  &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_speechly_2fslu_2fv1_2fslu_2eproto::offsets,
  file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto, file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto, file_level_service_descriptors_speechly_2fslu_2fv1_2fslu_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter() {
  return &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fslu_2fv1_2fslu_2eproto(&descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto);
namespace speechly {
namespace slu {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLUConfig_Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto[0];
}
bool SLUConfig_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SLUConfig_Encoding SLUConfig::LINEAR16;
constexpr SLUConfig_Encoding SLUConfig::Encoding_MIN;
constexpr SLUConfig_Encoding SLUConfig::Encoding_MAX;
constexpr int SLUConfig::Encoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLUEvent_Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto[1];
}
bool SLUEvent_Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SLUEvent_Event SLUEvent::START;
constexpr SLUEvent_Event SLUEvent::STOP;
constexpr SLUEvent_Event SLUEvent::Event_MIN;
constexpr SLUEvent_Event SLUEvent::Event_MAX;
constexpr int SLUEvent::Event_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SLURequest::_Internal {
 public:
  static const ::speechly::slu::v1::SLUConfig& config(const SLURequest* msg);
  static const ::speechly::slu::v1::SLUEvent& event(const SLURequest* msg);
};

const ::speechly::slu::v1::SLUConfig&
SLURequest::_Internal::config(const SLURequest* msg) {
  return *msg->streaming_request_.config_;
}
const ::speechly::slu::v1::SLUEvent&
SLURequest::_Internal::event(const SLURequest* msg) {
  return *msg->streaming_request_.event_;
}
void SLURequest::set_allocated_config(::speechly::slu::v1::SLUConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_request();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streaming_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLURequest.config)
}
void SLURequest::set_allocated_event(::speechly::slu::v1::SLUEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_request();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUEvent>::GetOwningArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    streaming_request_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLURequest.event)
}
SLURequest::SLURequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLURequest)
}
SLURequest::SLURequest(const SLURequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kConfig: {
      _internal_mutable_config()->::speechly::slu::v1::SLUConfig::MergeFrom(from._internal_config());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::speechly::slu::v1::SLUEvent::MergeFrom(from._internal_event());
      break;
    }
    case kAudio: {
      _internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLURequest)
}

inline void SLURequest::SharedCtor() {
clear_has_streaming_request();
}

SLURequest::~SLURequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLURequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLURequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void SLURequest::ArenaDtor(void* object) {
  SLURequest* _this = reinterpret_cast< SLURequest* >(object);
  (void)_this;
}
void SLURequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLURequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLURequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:speechly.slu.v1.SLURequest)
  switch (streaming_request_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_request_.config_;
      }
      break;
    }
    case kEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_request_.event_;
      }
      break;
    }
    case kAudio: {
      streaming_request_.audio_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void SLURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLURequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLURequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .speechly.slu.v1.SLUEvent event = 2;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::event(this), target, stream);
  }

  // bytes audio = 3;
  if (_internal_has_audio()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLURequest)
  return target;
}

size_t SLURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLURequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .speechly.slu.v1.SLUConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.config_);
      break;
    }
    // .speechly.slu.v1.SLUEvent event = 2;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.event_);
      break;
    }
    // bytes audio = 3;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLURequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLURequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLURequest::GetClassData() const { return &_class_data_; }

void SLURequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLURequest *>(to)->MergeFrom(
      static_cast<const SLURequest &>(from));
}


void SLURequest::MergeFrom(const SLURequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLURequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kConfig: {
      _internal_mutable_config()->::speechly::slu::v1::SLUConfig::MergeFrom(from._internal_config());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::speechly::slu::v1::SLUEvent::MergeFrom(from._internal_event());
      break;
    }
    case kAudio: {
      _internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLURequest::CopyFrom(const SLURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLURequest::IsInitialized() const {
  return true;
}

void SLURequest::InternalSwap(SLURequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLURequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[0]);
}

// ===================================================================

class SLUConfig::_Internal {
 public:
};

SLUConfig::SLUConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUConfig)
}
SLUConfig::SLUConfig(const SLUConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_hertz_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUConfig)
}

inline void SLUConfig::SharedCtor() {
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoding_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_hertz_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
}

SLUConfig::~SLUConfig() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUConfig::ArenaDtor(void* object) {
  SLUConfig* _this = reinterpret_cast< SLUConfig* >(object);
  (void)_this;
}
void SLUConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmpty();
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_hertz_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUConfig.Encoding encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::speechly::slu::v1::SLUConfig_Encoding>(val));
        } else goto handle_unusual;
        continue;
      // int32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sample_rate_hertz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUConfig.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUConfig.Encoding encoding = 1;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding(), target);
  }

  // int32 channels = 2;
  if (this->_internal_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channels(), target);
  }

  // int32 sample_rate_hertz = 3;
  if (this->_internal_sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sample_rate_hertz(), target);
  }

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUConfig.language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUConfig)
  return target;
}

size_t SLUConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language_code = 4;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // .speechly.slu.v1.SLUConfig.Encoding encoding = 1;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  // int32 channels = 2;
  if (this->_internal_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channels());
  }

  // int32 sample_rate_hertz = 3;
  if (this->_internal_sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_rate_hertz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUConfig::GetClassData() const { return &_class_data_; }

void SLUConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUConfig *>(to)->MergeFrom(
      static_cast<const SLUConfig &>(from));
}


void SLUConfig::MergeFrom(const SLUConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_channels() != 0) {
    _internal_set_channels(from._internal_channels());
  }
  if (from._internal_sample_rate_hertz() != 0) {
    _internal_set_sample_rate_hertz(from._internal_sample_rate_hertz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUConfig::CopyFrom(const SLUConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUConfig::IsInitialized() const {
  return true;
}

void SLUConfig::InternalSwap(SLUConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, GetArenaForAllocation(),
      &other->language_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLUConfig, sample_rate_hertz_)
      + sizeof(SLUConfig::sample_rate_hertz_)
      - PROTOBUF_FIELD_OFFSET(SLUConfig, encoding_)>(
          reinterpret_cast<char*>(&encoding_),
          reinterpret_cast<char*>(&other->encoding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[1]);
}

// ===================================================================

class SLUEvent::_Internal {
 public:
};

SLUEvent::SLUEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUEvent)
}
SLUEvent::SLUEvent(const SLUEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUEvent)
}

inline void SLUEvent::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_ = 0;
}

SLUEvent::~SLUEvent() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUEvent::ArenaDtor(void* object) {
  SLUEvent* _this = reinterpret_cast< SLUEvent* >(object);
  (void)_this;
}
void SLUEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  event_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUEvent.Event event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::speechly::slu::v1::SLUEvent_Event>(val));
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUEvent.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUEvent.Event event = 1;
  if (this->_internal_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUEvent.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUEvent)
  return target;
}

size_t SLUEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .speechly.slu.v1.SLUEvent.Event event = 1;
  if (this->_internal_event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUEvent::GetClassData() const { return &_class_data_; }

void SLUEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUEvent *>(to)->MergeFrom(
      static_cast<const SLUEvent &>(from));
}


void SLUEvent::MergeFrom(const SLUEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_event() != 0) {
    _internal_set_event(from._internal_event());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUEvent::CopyFrom(const SLUEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUEvent::IsInitialized() const {
  return true;
}

void SLUEvent::InternalSwap(SLUEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[2]);
}

// ===================================================================

class SLUResponse::_Internal {
 public:
  static const ::speechly::slu::v1::SLUTranscript& transcript(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUEntity& entity(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUIntent& intent(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUSegmentEnd& segment_end(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUTentativeTranscript& tentative_transcript(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUTentativeEntities& tentative_entities(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUIntent& tentative_intent(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUStarted& started(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUFinished& finished(const SLUResponse* msg);
};

const ::speechly::slu::v1::SLUTranscript&
SLUResponse::_Internal::transcript(const SLUResponse* msg) {
  return *msg->streaming_response_.transcript_;
}
const ::speechly::slu::v1::SLUEntity&
SLUResponse::_Internal::entity(const SLUResponse* msg) {
  return *msg->streaming_response_.entity_;
}
const ::speechly::slu::v1::SLUIntent&
SLUResponse::_Internal::intent(const SLUResponse* msg) {
  return *msg->streaming_response_.intent_;
}
const ::speechly::slu::v1::SLUSegmentEnd&
SLUResponse::_Internal::segment_end(const SLUResponse* msg) {
  return *msg->streaming_response_.segment_end_;
}
const ::speechly::slu::v1::SLUTentativeTranscript&
SLUResponse::_Internal::tentative_transcript(const SLUResponse* msg) {
  return *msg->streaming_response_.tentative_transcript_;
}
const ::speechly::slu::v1::SLUTentativeEntities&
SLUResponse::_Internal::tentative_entities(const SLUResponse* msg) {
  return *msg->streaming_response_.tentative_entities_;
}
const ::speechly::slu::v1::SLUIntent&
SLUResponse::_Internal::tentative_intent(const SLUResponse* msg) {
  return *msg->streaming_response_.tentative_intent_;
}
const ::speechly::slu::v1::SLUStarted&
SLUResponse::_Internal::started(const SLUResponse* msg) {
  return *msg->streaming_response_.started_;
}
const ::speechly::slu::v1::SLUFinished&
SLUResponse::_Internal::finished(const SLUResponse* msg) {
  return *msg->streaming_response_.finished_;
}
void SLUResponse::set_allocated_transcript(::speechly::slu::v1::SLUTranscript* transcript) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (transcript) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUTranscript>::GetOwningArena(transcript);
    if (message_arena != submessage_arena) {
      transcript = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transcript, submessage_arena);
    }
    set_has_transcript();
    streaming_response_.transcript_ = transcript;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.transcript)
}
void SLUResponse::set_allocated_entity(::speechly::slu::v1::SLUEntity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUEntity>::GetOwningArena(entity);
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    set_has_entity();
    streaming_response_.entity_ = entity;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.entity)
}
void SLUResponse::set_allocated_intent(::speechly::slu::v1::SLUIntent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUIntent>::GetOwningArena(intent);
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    set_has_intent();
    streaming_response_.intent_ = intent;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.intent)
}
void SLUResponse::set_allocated_segment_end(::speechly::slu::v1::SLUSegmentEnd* segment_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (segment_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUSegmentEnd>::GetOwningArena(segment_end);
    if (message_arena != submessage_arena) {
      segment_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment_end, submessage_arena);
    }
    set_has_segment_end();
    streaming_response_.segment_end_ = segment_end;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.segment_end)
}
void SLUResponse::set_allocated_tentative_transcript(::speechly::slu::v1::SLUTentativeTranscript* tentative_transcript) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (tentative_transcript) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUTentativeTranscript>::GetOwningArena(tentative_transcript);
    if (message_arena != submessage_arena) {
      tentative_transcript = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tentative_transcript, submessage_arena);
    }
    set_has_tentative_transcript();
    streaming_response_.tentative_transcript_ = tentative_transcript;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.tentative_transcript)
}
void SLUResponse::set_allocated_tentative_entities(::speechly::slu::v1::SLUTentativeEntities* tentative_entities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (tentative_entities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUTentativeEntities>::GetOwningArena(tentative_entities);
    if (message_arena != submessage_arena) {
      tentative_entities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tentative_entities, submessage_arena);
    }
    set_has_tentative_entities();
    streaming_response_.tentative_entities_ = tentative_entities;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.tentative_entities)
}
void SLUResponse::set_allocated_tentative_intent(::speechly::slu::v1::SLUIntent* tentative_intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (tentative_intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUIntent>::GetOwningArena(tentative_intent);
    if (message_arena != submessage_arena) {
      tentative_intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tentative_intent, submessage_arena);
    }
    set_has_tentative_intent();
    streaming_response_.tentative_intent_ = tentative_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.tentative_intent)
}
void SLUResponse::set_allocated_started(::speechly::slu::v1::SLUStarted* started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUStarted>::GetOwningArena(started);
    if (message_arena != submessage_arena) {
      started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started, submessage_arena);
    }
    set_has_started();
    streaming_response_.started_ = started;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.started)
}
void SLUResponse::set_allocated_finished(::speechly::slu::v1::SLUFinished* finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_response();
  if (finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::speechly::slu::v1::SLUFinished>::GetOwningArena(finished);
    if (message_arena != submessage_arena) {
      finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finished, submessage_arena);
    }
    set_has_finished();
    streaming_response_.finished_ = finished;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.finished)
}
SLUResponse::SLUResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUResponse)
}
SLUResponse::SLUResponse(const SLUResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_context().empty()) {
    audio_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_context(), 
      GetArenaForAllocation());
  }
  segment_id_ = from.segment_id_;
  clear_has_streaming_response();
  switch (from.streaming_response_case()) {
    case kTranscript: {
      _internal_mutable_transcript()->::speechly::slu::v1::SLUTranscript::MergeFrom(from._internal_transcript());
      break;
    }
    case kEntity: {
      _internal_mutable_entity()->::speechly::slu::v1::SLUEntity::MergeFrom(from._internal_entity());
      break;
    }
    case kIntent: {
      _internal_mutable_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_intent());
      break;
    }
    case kSegmentEnd: {
      _internal_mutable_segment_end()->::speechly::slu::v1::SLUSegmentEnd::MergeFrom(from._internal_segment_end());
      break;
    }
    case kTentativeTranscript: {
      _internal_mutable_tentative_transcript()->::speechly::slu::v1::SLUTentativeTranscript::MergeFrom(from._internal_tentative_transcript());
      break;
    }
    case kTentativeEntities: {
      _internal_mutable_tentative_entities()->::speechly::slu::v1::SLUTentativeEntities::MergeFrom(from._internal_tentative_entities());
      break;
    }
    case kTentativeIntent: {
      _internal_mutable_tentative_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_tentative_intent());
      break;
    }
    case kStarted: {
      _internal_mutable_started()->::speechly::slu::v1::SLUStarted::MergeFrom(from._internal_started());
      break;
    }
    case kFinished: {
      _internal_mutable_finished()->::speechly::slu::v1::SLUFinished::MergeFrom(from._internal_finished());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUResponse)
}

inline void SLUResponse::SharedCtor() {
audio_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
segment_id_ = 0;
clear_has_streaming_response();
}

SLUResponse::~SLUResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  audio_context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_streaming_response()) {
    clear_streaming_response();
  }
}

void SLUResponse::ArenaDtor(void* object) {
  SLUResponse* _this = reinterpret_cast< SLUResponse* >(object);
  (void)_this;
}
void SLUResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUResponse::clear_streaming_response() {
// @@protoc_insertion_point(one_of_clear_start:speechly.slu.v1.SLUResponse)
  switch (streaming_response_case()) {
    case kTranscript: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.transcript_;
      }
      break;
    }
    case kEntity: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.entity_;
      }
      break;
    }
    case kIntent: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.intent_;
      }
      break;
    }
    case kSegmentEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.segment_end_;
      }
      break;
    }
    case kTentativeTranscript: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.tentative_transcript_;
      }
      break;
    }
    case kTentativeEntities: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.tentative_entities_;
      }
      break;
    }
    case kTentativeIntent: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.tentative_intent_;
      }
      break;
    }
    case kStarted: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.started_;
      }
      break;
    }
    case kFinished: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_response_.finished_;
      }
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_RESPONSE_NOT_SET;
}


void SLUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_context_.ClearToEmpty();
  segment_id_ = 0;
  clear_streaming_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string audio_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUResponse.audio_context"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 segment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUTranscript transcript = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transcript(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUEntity entity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUIntent intent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUSegmentEnd segment_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUTentativeTranscript tentative_transcript = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tentative_transcript(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUTentativeEntities tentative_entities = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tentative_entities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUIntent tentative_intent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tentative_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUStarted started = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_started(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUFinished finished = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_finished(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string audio_context = 1;
  if (!this->_internal_audio_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_context().data(), static_cast<int>(this->_internal_audio_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUResponse.audio_context");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_context(), target);
  }

  // int32 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_segment_id(), target);
  }

  // .speechly.slu.v1.SLUTranscript transcript = 3;
  if (_internal_has_transcript()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transcript(this), target, stream);
  }

  // .speechly.slu.v1.SLUEntity entity = 4;
  if (_internal_has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::entity(this), target, stream);
  }

  // .speechly.slu.v1.SLUIntent intent = 5;
  if (_internal_has_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::intent(this), target, stream);
  }

  // .speechly.slu.v1.SLUSegmentEnd segment_end = 6;
  if (_internal_has_segment_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::segment_end(this), target, stream);
  }

  // .speechly.slu.v1.SLUTentativeTranscript tentative_transcript = 7;
  if (_internal_has_tentative_transcript()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tentative_transcript(this), target, stream);
  }

  // .speechly.slu.v1.SLUTentativeEntities tentative_entities = 8;
  if (_internal_has_tentative_entities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tentative_entities(this), target, stream);
  }

  // .speechly.slu.v1.SLUIntent tentative_intent = 9;
  if (_internal_has_tentative_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tentative_intent(this), target, stream);
  }

  // .speechly.slu.v1.SLUStarted started = 10;
  if (_internal_has_started()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::started(this), target, stream);
  }

  // .speechly.slu.v1.SLUFinished finished = 11;
  if (_internal_has_finished()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::finished(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUResponse)
  return target;
}

size_t SLUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audio_context = 1;
  if (!this->_internal_audio_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_context());
  }

  // int32 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_id());
  }

  switch (streaming_response_case()) {
    // .speechly.slu.v1.SLUTranscript transcript = 3;
    case kTranscript: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.transcript_);
      break;
    }
    // .speechly.slu.v1.SLUEntity entity = 4;
    case kEntity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.entity_);
      break;
    }
    // .speechly.slu.v1.SLUIntent intent = 5;
    case kIntent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.intent_);
      break;
    }
    // .speechly.slu.v1.SLUSegmentEnd segment_end = 6;
    case kSegmentEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.segment_end_);
      break;
    }
    // .speechly.slu.v1.SLUTentativeTranscript tentative_transcript = 7;
    case kTentativeTranscript: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.tentative_transcript_);
      break;
    }
    // .speechly.slu.v1.SLUTentativeEntities tentative_entities = 8;
    case kTentativeEntities: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.tentative_entities_);
      break;
    }
    // .speechly.slu.v1.SLUIntent tentative_intent = 9;
    case kTentativeIntent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.tentative_intent_);
      break;
    }
    // .speechly.slu.v1.SLUStarted started = 10;
    case kStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.started_);
      break;
    }
    // .speechly.slu.v1.SLUFinished finished = 11;
    case kFinished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.finished_);
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUResponse::GetClassData() const { return &_class_data_; }

void SLUResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUResponse *>(to)->MergeFrom(
      static_cast<const SLUResponse &>(from));
}


void SLUResponse::MergeFrom(const SLUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_context().empty()) {
    _internal_set_audio_context(from._internal_audio_context());
  }
  if (from._internal_segment_id() != 0) {
    _internal_set_segment_id(from._internal_segment_id());
  }
  switch (from.streaming_response_case()) {
    case kTranscript: {
      _internal_mutable_transcript()->::speechly::slu::v1::SLUTranscript::MergeFrom(from._internal_transcript());
      break;
    }
    case kEntity: {
      _internal_mutable_entity()->::speechly::slu::v1::SLUEntity::MergeFrom(from._internal_entity());
      break;
    }
    case kIntent: {
      _internal_mutable_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_intent());
      break;
    }
    case kSegmentEnd: {
      _internal_mutable_segment_end()->::speechly::slu::v1::SLUSegmentEnd::MergeFrom(from._internal_segment_end());
      break;
    }
    case kTentativeTranscript: {
      _internal_mutable_tentative_transcript()->::speechly::slu::v1::SLUTentativeTranscript::MergeFrom(from._internal_tentative_transcript());
      break;
    }
    case kTentativeEntities: {
      _internal_mutable_tentative_entities()->::speechly::slu::v1::SLUTentativeEntities::MergeFrom(from._internal_tentative_entities());
      break;
    }
    case kTentativeIntent: {
      _internal_mutable_tentative_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_tentative_intent());
      break;
    }
    case kStarted: {
      _internal_mutable_started()->::speechly::slu::v1::SLUStarted::MergeFrom(from._internal_started());
      break;
    }
    case kFinished: {
      _internal_mutable_finished()->::speechly::slu::v1::SLUFinished::MergeFrom(from._internal_finished());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUResponse::CopyFrom(const SLUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUResponse::IsInitialized() const {
  return true;
}

void SLUResponse::InternalSwap(SLUResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audio_context_, GetArenaForAllocation(),
      &other->audio_context_, other->GetArenaForAllocation()
  );
  swap(segment_id_, other->segment_id_);
  swap(streaming_response_, other->streaming_response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[3]);
}

// ===================================================================

class SLUTranscript::_Internal {
 public:
};

SLUTranscript::SLUTranscript(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUTranscript)
}
SLUTranscript::SLUTranscript(const SLUTranscript& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_word().empty()) {
    word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_word(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUTranscript)
}

inline void SLUTranscript::SharedCtor() {
word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
}

SLUTranscript::~SLUTranscript() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUTranscript)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUTranscript::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUTranscript::ArenaDtor(void* object) {
  SLUTranscript* _this = reinterpret_cast< SLUTranscript* >(object);
  (void)_this;
}
void SLUTranscript::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUTranscript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUTranscript::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUTranscript::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUTranscript.word"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUTranscript::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUTranscript.word");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 start_time = 3;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_time(), target);
  }

  // int32 end_time = 4;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUTranscript)
  return target;
}

size_t SLUTranscript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUTranscript)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 start_time = 3;
  if (this->_internal_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_time());
  }

  // int32 end_time = 4;
  if (this->_internal_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUTranscript::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUTranscript::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUTranscript::GetClassData() const { return &_class_data_; }

void SLUTranscript::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUTranscript *>(to)->MergeFrom(
      static_cast<const SLUTranscript &>(from));
}


void SLUTranscript::MergeFrom(const SLUTranscript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUTranscript)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_word().empty()) {
    _internal_set_word(from._internal_word());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUTranscript::CopyFrom(const SLUTranscript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUTranscript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUTranscript::IsInitialized() const {
  return true;
}

void SLUTranscript::InternalSwap(SLUTranscript* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &word_, GetArenaForAllocation(),
      &other->word_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLUTranscript, end_time_)
      + sizeof(SLUTranscript::end_time_)
      - PROTOBUF_FIELD_OFFSET(SLUTranscript, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUTranscript::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[4]);
}

// ===================================================================

class SLUEntity::_Internal {
 public:
};

SLUEntity::SLUEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUEntity)
}
SLUEntity::SLUEntity(const SLUEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity().empty()) {
    entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_position_, &from.start_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_position_) -
    reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUEntity)
}

inline void SLUEntity::SharedCtor() {
entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_position_) -
    reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
}

SLUEntity::~SLUEntity() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUEntity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUEntity::ArenaDtor(void* object) {
  SLUEntity* _this = reinterpret_cast< SLUEntity* >(object);
  (void)_this;
}
void SLUEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_position_) -
      reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUEntity.entity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUEntity.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (!this->_internal_entity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUEntity.entity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUEntity.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int32 start_position = 3;
  if (this->_internal_start_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_position(), target);
  }

  // int32 end_position = 4;
  if (this->_internal_end_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUEntity)
  return target;
}

size_t SLUEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 1;
  if (!this->_internal_entity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 start_position = 3;
  if (this->_internal_start_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_position());
  }

  // int32 end_position = 4;
  if (this->_internal_end_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUEntity::GetClassData() const { return &_class_data_; }

void SLUEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUEntity *>(to)->MergeFrom(
      static_cast<const SLUEntity &>(from));
}


void SLUEntity::MergeFrom(const SLUEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUEntity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity().empty()) {
    _internal_set_entity(from._internal_entity());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_start_position() != 0) {
    _internal_set_start_position(from._internal_start_position());
  }
  if (from._internal_end_position() != 0) {
    _internal_set_end_position(from._internal_end_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUEntity::CopyFrom(const SLUEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUEntity::IsInitialized() const {
  return true;
}

void SLUEntity::InternalSwap(SLUEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entity_, GetArenaForAllocation(),
      &other->entity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLUEntity, end_position_)
      + sizeof(SLUEntity::end_position_)
      - PROTOBUF_FIELD_OFFSET(SLUEntity, start_position_)>(
          reinterpret_cast<char*>(&start_position_),
          reinterpret_cast<char*>(&other->start_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUEntity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[5]);
}

// ===================================================================

class SLUIntent::_Internal {
 public:
};

SLUIntent::SLUIntent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUIntent)
}
SLUIntent::SLUIntent(const SLUIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_intent(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUIntent)
}

inline void SLUIntent::SharedCtor() {
intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLUIntent::~SLUIntent() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUIntent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUIntent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUIntent::ArenaDtor(void* object) {
  SLUIntent* _this = reinterpret_cast< SLUIntent* >(object);
  (void)_this;
}
void SLUIntent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUIntent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUIntent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string intent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_intent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUIntent.intent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUIntent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string intent = 1;
  if (!this->_internal_intent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUIntent.intent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_intent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUIntent)
  return target;
}

size_t SLUIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUIntent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string intent = 1;
  if (!this->_internal_intent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUIntent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUIntent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUIntent::GetClassData() const { return &_class_data_; }

void SLUIntent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUIntent *>(to)->MergeFrom(
      static_cast<const SLUIntent &>(from));
}


void SLUIntent::MergeFrom(const SLUIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUIntent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_intent().empty()) {
    _internal_set_intent(from._internal_intent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUIntent::CopyFrom(const SLUIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUIntent::IsInitialized() const {
  return true;
}

void SLUIntent::InternalSwap(SLUIntent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &intent_, GetArenaForAllocation(),
      &other->intent_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUIntent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[6]);
}

// ===================================================================

class SLUSegmentEnd::_Internal {
 public:
};

SLUSegmentEnd::SLUSegmentEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUSegmentEnd)
}
SLUSegmentEnd::SLUSegmentEnd(const SLUSegmentEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUSegmentEnd)
}

inline void SLUSegmentEnd::SharedCtor() {
}

SLUSegmentEnd::~SLUSegmentEnd() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUSegmentEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUSegmentEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLUSegmentEnd::ArenaDtor(void* object) {
  SLUSegmentEnd* _this = reinterpret_cast< SLUSegmentEnd* >(object);
  (void)_this;
}
void SLUSegmentEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUSegmentEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUSegmentEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUSegmentEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUSegmentEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUSegmentEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUSegmentEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUSegmentEnd)
  return target;
}

size_t SLUSegmentEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUSegmentEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUSegmentEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUSegmentEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUSegmentEnd::GetClassData() const { return &_class_data_; }

void SLUSegmentEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUSegmentEnd *>(to)->MergeFrom(
      static_cast<const SLUSegmentEnd &>(from));
}


void SLUSegmentEnd::MergeFrom(const SLUSegmentEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUSegmentEnd)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUSegmentEnd::CopyFrom(const SLUSegmentEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUSegmentEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUSegmentEnd::IsInitialized() const {
  return true;
}

void SLUSegmentEnd::InternalSwap(SLUSegmentEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUSegmentEnd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[7]);
}

// ===================================================================

class SLUTentativeTranscript::_Internal {
 public:
};

SLUTentativeTranscript::SLUTentativeTranscript(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tentative_words_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUTentativeTranscript)
}
SLUTentativeTranscript::SLUTentativeTranscript(const SLUTentativeTranscript& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tentative_words_(from.tentative_words_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tentative_transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tentative_transcript().empty()) {
    tentative_transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tentative_transcript(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUTentativeTranscript)
}

inline void SLUTentativeTranscript::SharedCtor() {
tentative_transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLUTentativeTranscript::~SLUTentativeTranscript() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUTentativeTranscript)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUTentativeTranscript::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tentative_transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUTentativeTranscript::ArenaDtor(void* object) {
  SLUTentativeTranscript* _this = reinterpret_cast< SLUTentativeTranscript* >(object);
  (void)_this;
}
void SLUTentativeTranscript::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUTentativeTranscript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUTentativeTranscript::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUTentativeTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tentative_words_.Clear();
  tentative_transcript_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUTentativeTranscript::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tentative_transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tentative_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUTentativeTranscript.tentative_transcript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v1.SLUTranscript tentative_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tentative_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUTentativeTranscript::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUTentativeTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tentative_transcript = 1;
  if (!this->_internal_tentative_transcript().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tentative_transcript().data(), static_cast<int>(this->_internal_tentative_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUTentativeTranscript.tentative_transcript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tentative_transcript(), target);
  }

  // repeated .speechly.slu.v1.SLUTranscript tentative_words = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tentative_words_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tentative_words(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUTentativeTranscript)
  return target;
}

size_t SLUTentativeTranscript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUTentativeTranscript)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.SLUTranscript tentative_words = 2;
  total_size += 1UL * this->_internal_tentative_words_size();
  for (const auto& msg : this->tentative_words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tentative_transcript = 1;
  if (!this->_internal_tentative_transcript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tentative_transcript());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUTentativeTranscript::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUTentativeTranscript::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUTentativeTranscript::GetClassData() const { return &_class_data_; }

void SLUTentativeTranscript::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUTentativeTranscript *>(to)->MergeFrom(
      static_cast<const SLUTentativeTranscript &>(from));
}


void SLUTentativeTranscript::MergeFrom(const SLUTentativeTranscript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUTentativeTranscript)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tentative_words_.MergeFrom(from.tentative_words_);
  if (!from._internal_tentative_transcript().empty()) {
    _internal_set_tentative_transcript(from._internal_tentative_transcript());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUTentativeTranscript::CopyFrom(const SLUTentativeTranscript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUTentativeTranscript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUTentativeTranscript::IsInitialized() const {
  return true;
}

void SLUTentativeTranscript::InternalSwap(SLUTentativeTranscript* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tentative_words_.InternalSwap(&other->tentative_words_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tentative_transcript_, GetArenaForAllocation(),
      &other->tentative_transcript_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUTentativeTranscript::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[8]);
}

// ===================================================================

class SLUTentativeEntities::_Internal {
 public:
};

SLUTentativeEntities::SLUTentativeEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tentative_entities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUTentativeEntities)
}
SLUTentativeEntities::SLUTentativeEntities(const SLUTentativeEntities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tentative_entities_(from.tentative_entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUTentativeEntities)
}

inline void SLUTentativeEntities::SharedCtor() {
}

SLUTentativeEntities::~SLUTentativeEntities() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUTentativeEntities)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUTentativeEntities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLUTentativeEntities::ArenaDtor(void* object) {
  SLUTentativeEntities* _this = reinterpret_cast< SLUTentativeEntities* >(object);
  (void)_this;
}
void SLUTentativeEntities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUTentativeEntities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUTentativeEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUTentativeEntities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tentative_entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUTentativeEntities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.slu.v1.SLUEntity tentative_entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tentative_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUTentativeEntities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUTentativeEntities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.SLUEntity tentative_entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tentative_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tentative_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUTentativeEntities)
  return target;
}

size_t SLUTentativeEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUTentativeEntities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.SLUEntity tentative_entities = 1;
  total_size += 1UL * this->_internal_tentative_entities_size();
  for (const auto& msg : this->tentative_entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUTentativeEntities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUTentativeEntities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUTentativeEntities::GetClassData() const { return &_class_data_; }

void SLUTentativeEntities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUTentativeEntities *>(to)->MergeFrom(
      static_cast<const SLUTentativeEntities &>(from));
}


void SLUTentativeEntities::MergeFrom(const SLUTentativeEntities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUTentativeEntities)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tentative_entities_.MergeFrom(from.tentative_entities_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUTentativeEntities::CopyFrom(const SLUTentativeEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUTentativeEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUTentativeEntities::IsInitialized() const {
  return true;
}

void SLUTentativeEntities::InternalSwap(SLUTentativeEntities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tentative_entities_.InternalSwap(&other->tentative_entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUTentativeEntities::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[9]);
}

// ===================================================================

class SLUStarted::_Internal {
 public:
};

SLUStarted::SLUStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUStarted)
}
SLUStarted::SLUStarted(const SLUStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUStarted)
}

inline void SLUStarted::SharedCtor() {
}

SLUStarted::~SLUStarted() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUStarted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLUStarted::ArenaDtor(void* object) {
  SLUStarted* _this = reinterpret_cast< SLUStarted* >(object);
  (void)_this;
}
void SLUStarted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUStarted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUStarted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUStarted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUStarted)
  return target;
}

size_t SLUStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUStarted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUStarted::GetClassData() const { return &_class_data_; }

void SLUStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUStarted *>(to)->MergeFrom(
      static_cast<const SLUStarted &>(from));
}


void SLUStarted::MergeFrom(const SLUStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUStarted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUStarted::CopyFrom(const SLUStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUStarted::IsInitialized() const {
  return true;
}

void SLUStarted::InternalSwap(SLUStarted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUStarted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[10]);
}

// ===================================================================

class SLUFinished::_Internal {
 public:
  static const ::speechly::slu::v1::SLUError& error(const SLUFinished* msg);
};

const ::speechly::slu::v1::SLUError&
SLUFinished::_Internal::error(const SLUFinished* msg) {
  return *msg->error_;
}
SLUFinished::SLUFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUFinished)
}
SLUFinished::SLUFinished(const SLUFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::speechly::slu::v1::SLUError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUFinished)
}

inline void SLUFinished::SharedCtor() {
error_ = nullptr;
}

SLUFinished::~SLUFinished() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUFinished)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUFinished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void SLUFinished::ArenaDtor(void* object) {
  SLUFinished* _this = reinterpret_cast< SLUFinished* >(object);
  (void)_this;
}
void SLUFinished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUError error = 2;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUFinished)
  return target;
}

size_t SLUFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUError error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUFinished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUFinished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUFinished::GetClassData() const { return &_class_data_; }

void SLUFinished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUFinished *>(to)->MergeFrom(
      static_cast<const SLUFinished &>(from));
}


void SLUFinished::MergeFrom(const SLUFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUFinished)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_mutable_error()->::speechly::slu::v1::SLUError::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUFinished::CopyFrom(const SLUFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUFinished::IsInitialized() const {
  return true;
}

void SLUFinished::InternalSwap(SLUFinished* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUFinished::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[11]);
}

// ===================================================================

class SLUError::_Internal {
 public:
};

SLUError::SLUError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.SLUError)
}
SLUError::SLUError(const SLUError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUError)
}

inline void SLUError::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLUError::~SLUError() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLUError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUError::ArenaDtor(void* object) {
  SLUError* _this = reinterpret_cast< SLUError* >(object);
  (void)_this;
}
void SLUError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLUError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLUError::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLUError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUError.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUError.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUError)
  return target;
}

size_t SLUError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLUError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLUError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLUError::GetClassData() const { return &_class_data_; }

void SLUError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SLUError *>(to)->MergeFrom(
      static_cast<const SLUError &>(from));
}


void SLUError::MergeFrom(const SLUError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLUError::CopyFrom(const SLUError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUError::IsInitialized() const {
  return true;
}

void SLUError::InternalSwap(SLUError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLURequest* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLURequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUConfig* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUEvent* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUResponse* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUTranscript* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUTranscript >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUTranscript >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUEntity* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUIntent* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUIntent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUIntent >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUSegmentEnd* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUSegmentEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUSegmentEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUTentativeTranscript* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUTentativeTranscript >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUTentativeTranscript >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUTentativeEntities* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUTentativeEntities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUTentativeEntities >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUStarted* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUFinished* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUError* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::SLUError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
