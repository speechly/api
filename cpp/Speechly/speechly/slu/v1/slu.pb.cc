// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/slu.proto

#include "speechly/slu/v1/slu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUSegmentEnd_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUStarted_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fslu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto;
namespace speechly {
namespace slu {
namespace v1 {
class SLURequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLURequest> _instance;
  const ::speechly::slu::v1::SLUConfig* config_;
  const ::speechly::slu::v1::SLUEvent* event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
} _SLURequest_default_instance_;
class SLUConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUConfig> _instance;
} _SLUConfig_default_instance_;
class SLUEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUEvent> _instance;
} _SLUEvent_default_instance_;
class SLUResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUResponse> _instance;
  const ::speechly::slu::v1::SLUTranscript* transcript_;
  const ::speechly::slu::v1::SLUEntity* entity_;
  const ::speechly::slu::v1::SLUIntent* intent_;
  const ::speechly::slu::v1::SLUSegmentEnd* segment_end_;
  const ::speechly::slu::v1::SLUTentativeTranscript* tentative_transcript_;
  const ::speechly::slu::v1::SLUTentativeEntities* tentative_entities_;
  const ::speechly::slu::v1::SLUIntent* tentative_intent_;
  const ::speechly::slu::v1::SLUStarted* started_;
  const ::speechly::slu::v1::SLUFinished* finished_;
} _SLUResponse_default_instance_;
class SLUTranscriptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUTranscript> _instance;
} _SLUTranscript_default_instance_;
class SLUEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUEntity> _instance;
} _SLUEntity_default_instance_;
class SLUIntentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUIntent> _instance;
} _SLUIntent_default_instance_;
class SLUSegmentEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUSegmentEnd> _instance;
} _SLUSegmentEnd_default_instance_;
class SLUTentativeTranscriptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUTentativeTranscript> _instance;
} _SLUTentativeTranscript_default_instance_;
class SLUTentativeEntitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUTentativeEntities> _instance;
} _SLUTentativeEntities_default_instance_;
class SLUStartedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUStarted> _instance;
} _SLUStarted_default_instance_;
class SLUFinishedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUFinished> _instance;
} _SLUFinished_default_instance_;
class SLUErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLUError> _instance;
} _SLUError_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
static void InitDefaultsscc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUConfig_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static void InitDefaultsscc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUEntity_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static void InitDefaultsscc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUError_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static void InitDefaultsscc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUEvent_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static void InitDefaultsscc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUFinished_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUFinished();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUFinished::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto}, {
      &scc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto.base,}};

static void InitDefaultsscc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUIntent_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUIntent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUIntent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static void InitDefaultsscc_info_SLURequest_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLURequest_default_instance_;
    new (ptr) ::speechly::slu::v1::SLURequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLURequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLURequest_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLURequest_speechly_2fslu_2fv1_2fslu_2eproto}, {
      &scc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto.base,}};

static void InitDefaultsscc_info_SLUResponse_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUResponse_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SLUResponse_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_SLUResponse_speechly_2fslu_2fv1_2fslu_2eproto}, {
      &scc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUSegmentEnd_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUStarted_speechly_2fslu_2fv1_2fslu_2eproto.base,
      &scc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto.base,}};

static void InitDefaultsscc_info_SLUSegmentEnd_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUSegmentEnd_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUSegmentEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUSegmentEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUSegmentEnd_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUSegmentEnd_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static void InitDefaultsscc_info_SLUStarted_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUStarted_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUStarted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUStarted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUStarted_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUStarted_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static void InitDefaultsscc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUTentativeEntities_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUTentativeEntities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUTentativeEntities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto}, {
      &scc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto.base,}};

static void InitDefaultsscc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUTentativeTranscript_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUTentativeTranscript();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUTentativeTranscript::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto}, {
      &scc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base,}};

static void InitDefaultsscc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_SLUTranscript_default_instance_;
    new (ptr) ::speechly::slu::v1::SLUTranscript();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::SLUTranscript::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fslu_2fv1_2fslu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fslu_2fv1_2fslu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLURequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::speechly::slu::v1::SLURequestDefaultTypeInternal, config_),
  offsetof(::speechly::slu::v1::SLURequestDefaultTypeInternal, event_),
  offsetof(::speechly::slu::v1::SLURequestDefaultTypeInternal, audio_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLURequest, streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, encoding_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, channels_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUConfig, language_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEvent, event_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEvent, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, audio_context_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, segment_id_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, transcript_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, entity_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, intent_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, segment_end_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, tentative_transcript_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, tentative_entities_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, tentative_intent_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, started_),
  offsetof(::speechly::slu::v1::SLUResponseDefaultTypeInternal, finished_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUResponse, streaming_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, word_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, index_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, start_time_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTranscript, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, entity_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, value_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, start_position_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUEntity, end_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUIntent, intent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUSegmentEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeTranscript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeTranscript, tentative_transcript_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeTranscript, tentative_words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUTentativeEntities, tentative_entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUFinished, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUError, code_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::SLUError, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::slu::v1::SLURequest)},
  { 9, -1, sizeof(::speechly::slu::v1::SLUConfig)},
  { 18, -1, sizeof(::speechly::slu::v1::SLUEvent)},
  { 25, -1, sizeof(::speechly::slu::v1::SLUResponse)},
  { 42, -1, sizeof(::speechly::slu::v1::SLUTranscript)},
  { 51, -1, sizeof(::speechly::slu::v1::SLUEntity)},
  { 60, -1, sizeof(::speechly::slu::v1::SLUIntent)},
  { 66, -1, sizeof(::speechly::slu::v1::SLUSegmentEnd)},
  { 71, -1, sizeof(::speechly::slu::v1::SLUTentativeTranscript)},
  { 78, -1, sizeof(::speechly::slu::v1::SLUTentativeEntities)},
  { 84, -1, sizeof(::speechly::slu::v1::SLUStarted)},
  { 89, -1, sizeof(::speechly::slu::v1::SLUFinished)},
  { 95, -1, sizeof(::speechly::slu::v1::SLUError)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLURequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUTranscript_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUIntent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUSegmentEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUTentativeTranscript_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUTentativeEntities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUStarted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUFinished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_SLUError_default_instance_),
};

const char descriptor_table_protodef_speechly_2fslu_2fv1_2fslu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031speechly/slu/v1/slu.proto\022\017speechly.sl"
  "u.v1\"\214\001\n\nSLURequest\022,\n\006config\030\001 \001(\0132\032.sp"
  "eechly.slu.v1.SLUConfigH\000\022*\n\005event\030\002 \001(\013"
  "2\031.speechly.slu.v1.SLUEventH\000\022\017\n\005audio\030\003"
  " \001(\014H\000B\023\n\021streaming_request\"\240\001\n\tSLUConfi"
  "g\0225\n\010encoding\030\001 \001(\0162#.speechly.slu.v1.SL"
  "UConfig.Encoding\022\020\n\010channels\030\002 \001(\005\022\031\n\021sa"
  "mple_rate_hertz\030\003 \001(\005\022\025\n\rlanguage_code\030\004"
  " \001(\t\"\030\n\010Encoding\022\014\n\010LINEAR16\020\000\"h\n\010SLUEve"
  "nt\022.\n\005event\030\001 \001(\0162\037.speechly.slu.v1.SLUE"
  "vent.Event\022\016\n\006app_id\030\002 \001(\t\"\034\n\005Event\022\t\n\005S"
  "TART\020\000\022\010\n\004STOP\020\001\"\277\004\n\013SLUResponse\022\025\n\raudi"
  "o_context\030\001 \001(\t\022\022\n\nsegment_id\030\002 \001(\005\0224\n\nt"
  "ranscript\030\003 \001(\0132\036.speechly.slu.v1.SLUTra"
  "nscriptH\000\022,\n\006entity\030\004 \001(\0132\032.speechly.slu"
  ".v1.SLUEntityH\000\022,\n\006intent\030\005 \001(\0132\032.speech"
  "ly.slu.v1.SLUIntentH\000\0225\n\013segment_end\030\006 \001"
  "(\0132\036.speechly.slu.v1.SLUSegmentEndH\000\022G\n\024"
  "tentative_transcript\030\007 \001(\0132\'.speechly.sl"
  "u.v1.SLUTentativeTranscriptH\000\022C\n\022tentati"
  "ve_entities\030\010 \001(\0132%.speechly.slu.v1.SLUT"
  "entativeEntitiesH\000\0226\n\020tentative_intent\030\t"
  " \001(\0132\032.speechly.slu.v1.SLUIntentH\000\022.\n\007st"
  "arted\030\n \001(\0132\033.speechly.slu.v1.SLUStarted"
  "H\000\0220\n\010finished\030\013 \001(\0132\034.speechly.slu.v1.S"
  "LUFinishedH\000B\024\n\022streaming_response\"R\n\rSL"
  "UTranscript\022\014\n\004word\030\001 \001(\t\022\r\n\005index\030\002 \001(\005"
  "\022\022\n\nstart_time\030\003 \001(\005\022\020\n\010end_time\030\004 \001(\005\"X"
  "\n\tSLUEntity\022\016\n\006entity\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t\022\026\n\016start_position\030\003 \001(\005\022\024\n\014end_positi"
  "on\030\004 \001(\005\"\033\n\tSLUIntent\022\016\n\006intent\030\001 \001(\t\"\017\n"
  "\rSLUSegmentEnd\"o\n\026SLUTentativeTranscript"
  "\022\034\n\024tentative_transcript\030\001 \001(\t\0227\n\017tentat"
  "ive_words\030\002 \003(\0132\036.speechly.slu.v1.SLUTra"
  "nscript\"N\n\024SLUTentativeEntities\0226\n\022tenta"
  "tive_entities\030\001 \003(\0132\032.speechly.slu.v1.SL"
  "UEntity\"\014\n\nSLUStarted\"7\n\013SLUFinished\022(\n\005"
  "error\030\002 \001(\0132\031.speechly.slu.v1.SLUError\")"
  "\n\010SLUError\022\014\n\004code\030\001 \001(\t\022\017\n\007message\030\002 \001("
  "\t2N\n\003SLU\022G\n\006Stream\022\033.speechly.slu.v1.SLU"
  "Request\032\034.speechly.slu.v1.SLUResponse(\0010"
  "\001Bf\n\027com.speechly.api.slu.v1B\010SluProtoP\001"
  "Z\025speechly/slu/v1;sluv1\242\002\003SSX\252\002\017Speechly"
  ".Slu.V1\312\002\017Speechly\\Slu\\V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_sccs[13] = {
  &scc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLURequest_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUResponse_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUSegmentEnd_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUStarted_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base,
  &scc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once;
static bool descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto = {
  &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_initialized, descriptor_table_protodef_speechly_2fslu_2fv1_2fslu_2eproto, "speechly/slu/v1/slu.proto", 1753,
  &descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_once, descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_sccs, descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_speechly_2fslu_2fv1_2fslu_2eproto::offsets,
  file_level_metadata_speechly_2fslu_2fv1_2fslu_2eproto, 13, file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto, file_level_service_descriptors_speechly_2fslu_2fv1_2fslu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_speechly_2fslu_2fv1_2fslu_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto), true);
namespace speechly {
namespace slu {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLUConfig_Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto[0];
}
bool SLUConfig_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SLUConfig_Encoding SLUConfig::LINEAR16;
constexpr SLUConfig_Encoding SLUConfig::Encoding_MIN;
constexpr SLUConfig_Encoding SLUConfig::Encoding_MAX;
constexpr int SLUConfig::Encoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLUEvent_Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fslu_2fv1_2fslu_2eproto);
  return file_level_enum_descriptors_speechly_2fslu_2fv1_2fslu_2eproto[1];
}
bool SLUEvent_Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SLUEvent_Event SLUEvent::START;
constexpr SLUEvent_Event SLUEvent::STOP;
constexpr SLUEvent_Event SLUEvent::Event_MIN;
constexpr SLUEvent_Event SLUEvent::Event_MAX;
constexpr int SLUEvent::Event_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SLURequest::InitAsDefaultInstance() {
  ::speechly::slu::v1::_SLURequest_default_instance_.config_ = const_cast< ::speechly::slu::v1::SLUConfig*>(
      ::speechly::slu::v1::SLUConfig::internal_default_instance());
  ::speechly::slu::v1::_SLURequest_default_instance_.event_ = const_cast< ::speechly::slu::v1::SLUEvent*>(
      ::speechly::slu::v1::SLUEvent::internal_default_instance());
  ::speechly::slu::v1::_SLURequest_default_instance_.audio_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class SLURequest::_Internal {
 public:
  static const ::speechly::slu::v1::SLUConfig& config(const SLURequest* msg);
  static const ::speechly::slu::v1::SLUEvent& event(const SLURequest* msg);
};

const ::speechly::slu::v1::SLUConfig&
SLURequest::_Internal::config(const SLURequest* msg) {
  return *msg->streaming_request_.config_;
}
const ::speechly::slu::v1::SLUEvent&
SLURequest::_Internal::event(const SLURequest* msg) {
  return *msg->streaming_request_.event_;
}
void SLURequest::set_allocated_config(::speechly::slu::v1::SLUConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streaming_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLURequest.config)
}
void SLURequest::set_allocated_event(::speechly::slu::v1::SLUEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    streaming_request_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLURequest.event)
}
SLURequest::SLURequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLURequest)
}
SLURequest::SLURequest(const SLURequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kConfig: {
      _internal_mutable_config()->::speechly::slu::v1::SLUConfig::MergeFrom(from._internal_config());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::speechly::slu::v1::SLUEvent::MergeFrom(from._internal_event());
      break;
    }
    case kAudio: {
      _internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLURequest)
}

void SLURequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLURequest_speechly_2fslu_2fv1_2fslu_2eproto.base);
  clear_has_streaming_request();
}

SLURequest::~SLURequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLURequest)
  SharedDtor();
}

void SLURequest::SharedDtor() {
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void SLURequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLURequest& SLURequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLURequest_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLURequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:speechly.slu.v1.SLURequest)
  switch (streaming_request_case()) {
    case kConfig: {
      delete streaming_request_.config_;
      break;
    }
    case kEvent: {
      delete streaming_request_.event_;
      break;
    }
    case kAudio: {
      streaming_request_.audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void SLURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear();
}

const char* SLURequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLURequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .speechly.slu.v1.SLUEvent event = 2;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::event(this), target, stream);
  }

  // bytes audio = 3;
  if (_internal_has_audio()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLURequest)
  return target;
}

size_t SLURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLURequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .speechly.slu.v1.SLUConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.config_);
      break;
    }
    // .speechly.slu.v1.SLUEvent event = 2;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.event_);
      break;
    }
    // bytes audio = 3;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLURequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLURequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SLURequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLURequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLURequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLURequest)
    MergeFrom(*source);
  }
}

void SLURequest::MergeFrom(const SLURequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLURequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kConfig: {
      _internal_mutable_config()->::speechly::slu::v1::SLUConfig::MergeFrom(from._internal_config());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::speechly::slu::v1::SLUEvent::MergeFrom(from._internal_event());
      break;
    }
    case kAudio: {
      _internal_set_audio(from._internal_audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void SLURequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLURequest::CopyFrom(const SLURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLURequest::IsInitialized() const {
  return true;
}

void SLURequest::InternalSwap(SLURequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLURequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUConfig::InitAsDefaultInstance() {
}
class SLUConfig::_Internal {
 public:
};

SLUConfig::SLUConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUConfig)
}
SLUConfig::SLUConfig(const SLUConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_hertz_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUConfig)
}

void SLUConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto.base);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_hertz_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
}

SLUConfig::~SLUConfig() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUConfig)
  SharedDtor();
}

void SLUConfig::SharedDtor() {
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUConfig& SLUConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUConfig_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_hertz_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
  _internal_metadata_.Clear();
}

const char* SLUConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUConfig.Encoding encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::speechly::slu::v1::SLUConfig_Encoding>(val));
        } else goto handle_unusual;
        continue;
      // int32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sample_rate_hertz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUConfig.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding(), target);
  }

  // int32 channels = 2;
  if (this->channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channels(), target);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sample_rate_hertz(), target);
  }

  // string language_code = 4;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUConfig.language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUConfig)
  return target;
}

size_t SLUConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language_code = 4;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // .speechly.slu.v1.SLUConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  // int32 channels = 2;
  if (this->channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channels());
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_rate_hertz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUConfig)
    MergeFrom(*source);
  }
}

void SLUConfig::MergeFrom(const SLUConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  if (from.encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from.channels() != 0) {
    _internal_set_channels(from._internal_channels());
  }
  if (from.sample_rate_hertz() != 0) {
    _internal_set_sample_rate_hertz(from._internal_sample_rate_hertz());
  }
}

void SLUConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUConfig::CopyFrom(const SLUConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUConfig::IsInitialized() const {
  return true;
}

void SLUConfig::InternalSwap(SLUConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encoding_, other->encoding_);
  swap(channels_, other->channels_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUEvent::InitAsDefaultInstance() {
}
class SLUEvent::_Internal {
 public:
};

SLUEvent::SLUEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUEvent)
}
SLUEvent::SLUEvent(const SLUEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUEvent)
}

void SLUEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_ = 0;
}

SLUEvent::~SLUEvent() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUEvent)
  SharedDtor();
}

void SLUEvent::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUEvent& SLUEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUEvent_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_ = 0;
  _internal_metadata_.Clear();
}

const char* SLUEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUEvent.Event event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::speechly::slu::v1::SLUEvent_Event>(val));
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUEvent.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUEvent.Event event = 1;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUEvent.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUEvent)
  return target;
}

size_t SLUEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .speechly.slu.v1.SLUEvent.Event event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUEvent)
    MergeFrom(*source);
  }
}

void SLUEvent::MergeFrom(const SLUEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
}

void SLUEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUEvent::CopyFrom(const SLUEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUEvent::IsInitialized() const {
  return true;
}

void SLUEvent::InternalSwap(SLUEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUResponse::InitAsDefaultInstance() {
  ::speechly::slu::v1::_SLUResponse_default_instance_.transcript_ = const_cast< ::speechly::slu::v1::SLUTranscript*>(
      ::speechly::slu::v1::SLUTranscript::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.entity_ = const_cast< ::speechly::slu::v1::SLUEntity*>(
      ::speechly::slu::v1::SLUEntity::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.intent_ = const_cast< ::speechly::slu::v1::SLUIntent*>(
      ::speechly::slu::v1::SLUIntent::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.segment_end_ = const_cast< ::speechly::slu::v1::SLUSegmentEnd*>(
      ::speechly::slu::v1::SLUSegmentEnd::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.tentative_transcript_ = const_cast< ::speechly::slu::v1::SLUTentativeTranscript*>(
      ::speechly::slu::v1::SLUTentativeTranscript::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.tentative_entities_ = const_cast< ::speechly::slu::v1::SLUTentativeEntities*>(
      ::speechly::slu::v1::SLUTentativeEntities::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.tentative_intent_ = const_cast< ::speechly::slu::v1::SLUIntent*>(
      ::speechly::slu::v1::SLUIntent::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.started_ = const_cast< ::speechly::slu::v1::SLUStarted*>(
      ::speechly::slu::v1::SLUStarted::internal_default_instance());
  ::speechly::slu::v1::_SLUResponse_default_instance_.finished_ = const_cast< ::speechly::slu::v1::SLUFinished*>(
      ::speechly::slu::v1::SLUFinished::internal_default_instance());
}
class SLUResponse::_Internal {
 public:
  static const ::speechly::slu::v1::SLUTranscript& transcript(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUEntity& entity(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUIntent& intent(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUSegmentEnd& segment_end(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUTentativeTranscript& tentative_transcript(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUTentativeEntities& tentative_entities(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUIntent& tentative_intent(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUStarted& started(const SLUResponse* msg);
  static const ::speechly::slu::v1::SLUFinished& finished(const SLUResponse* msg);
};

const ::speechly::slu::v1::SLUTranscript&
SLUResponse::_Internal::transcript(const SLUResponse* msg) {
  return *msg->streaming_response_.transcript_;
}
const ::speechly::slu::v1::SLUEntity&
SLUResponse::_Internal::entity(const SLUResponse* msg) {
  return *msg->streaming_response_.entity_;
}
const ::speechly::slu::v1::SLUIntent&
SLUResponse::_Internal::intent(const SLUResponse* msg) {
  return *msg->streaming_response_.intent_;
}
const ::speechly::slu::v1::SLUSegmentEnd&
SLUResponse::_Internal::segment_end(const SLUResponse* msg) {
  return *msg->streaming_response_.segment_end_;
}
const ::speechly::slu::v1::SLUTentativeTranscript&
SLUResponse::_Internal::tentative_transcript(const SLUResponse* msg) {
  return *msg->streaming_response_.tentative_transcript_;
}
const ::speechly::slu::v1::SLUTentativeEntities&
SLUResponse::_Internal::tentative_entities(const SLUResponse* msg) {
  return *msg->streaming_response_.tentative_entities_;
}
const ::speechly::slu::v1::SLUIntent&
SLUResponse::_Internal::tentative_intent(const SLUResponse* msg) {
  return *msg->streaming_response_.tentative_intent_;
}
const ::speechly::slu::v1::SLUStarted&
SLUResponse::_Internal::started(const SLUResponse* msg) {
  return *msg->streaming_response_.started_;
}
const ::speechly::slu::v1::SLUFinished&
SLUResponse::_Internal::finished(const SLUResponse* msg) {
  return *msg->streaming_response_.finished_;
}
void SLUResponse::set_allocated_transcript(::speechly::slu::v1::SLUTranscript* transcript) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (transcript) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transcript = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transcript, submessage_arena);
    }
    set_has_transcript();
    streaming_response_.transcript_ = transcript;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.transcript)
}
void SLUResponse::set_allocated_entity(::speechly::slu::v1::SLUEntity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    set_has_entity();
    streaming_response_.entity_ = entity;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.entity)
}
void SLUResponse::set_allocated_intent(::speechly::slu::v1::SLUIntent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    set_has_intent();
    streaming_response_.intent_ = intent;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.intent)
}
void SLUResponse::set_allocated_segment_end(::speechly::slu::v1::SLUSegmentEnd* segment_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (segment_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      segment_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment_end, submessage_arena);
    }
    set_has_segment_end();
    streaming_response_.segment_end_ = segment_end;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.segment_end)
}
void SLUResponse::set_allocated_tentative_transcript(::speechly::slu::v1::SLUTentativeTranscript* tentative_transcript) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (tentative_transcript) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tentative_transcript = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tentative_transcript, submessage_arena);
    }
    set_has_tentative_transcript();
    streaming_response_.tentative_transcript_ = tentative_transcript;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.tentative_transcript)
}
void SLUResponse::set_allocated_tentative_entities(::speechly::slu::v1::SLUTentativeEntities* tentative_entities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (tentative_entities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tentative_entities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tentative_entities, submessage_arena);
    }
    set_has_tentative_entities();
    streaming_response_.tentative_entities_ = tentative_entities;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.tentative_entities)
}
void SLUResponse::set_allocated_tentative_intent(::speechly::slu::v1::SLUIntent* tentative_intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (tentative_intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tentative_intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tentative_intent, submessage_arena);
    }
    set_has_tentative_intent();
    streaming_response_.tentative_intent_ = tentative_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.tentative_intent)
}
void SLUResponse::set_allocated_started(::speechly::slu::v1::SLUStarted* started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started, submessage_arena);
    }
    set_has_started();
    streaming_response_.started_ = started;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.started)
}
void SLUResponse::set_allocated_finished(::speechly::slu::v1::SLUFinished* finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finished, submessage_arena);
    }
    set_has_finished();
    streaming_response_.finished_ = finished;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.SLUResponse.finished)
}
SLUResponse::SLUResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUResponse)
}
SLUResponse::SLUResponse(const SLUResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_context().empty()) {
    audio_context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_context_);
  }
  segment_id_ = from.segment_id_;
  clear_has_streaming_response();
  switch (from.streaming_response_case()) {
    case kTranscript: {
      _internal_mutable_transcript()->::speechly::slu::v1::SLUTranscript::MergeFrom(from._internal_transcript());
      break;
    }
    case kEntity: {
      _internal_mutable_entity()->::speechly::slu::v1::SLUEntity::MergeFrom(from._internal_entity());
      break;
    }
    case kIntent: {
      _internal_mutable_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_intent());
      break;
    }
    case kSegmentEnd: {
      _internal_mutable_segment_end()->::speechly::slu::v1::SLUSegmentEnd::MergeFrom(from._internal_segment_end());
      break;
    }
    case kTentativeTranscript: {
      _internal_mutable_tentative_transcript()->::speechly::slu::v1::SLUTentativeTranscript::MergeFrom(from._internal_tentative_transcript());
      break;
    }
    case kTentativeEntities: {
      _internal_mutable_tentative_entities()->::speechly::slu::v1::SLUTentativeEntities::MergeFrom(from._internal_tentative_entities());
      break;
    }
    case kTentativeIntent: {
      _internal_mutable_tentative_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_tentative_intent());
      break;
    }
    case kStarted: {
      _internal_mutable_started()->::speechly::slu::v1::SLUStarted::MergeFrom(from._internal_started());
      break;
    }
    case kFinished: {
      _internal_mutable_finished()->::speechly::slu::v1::SLUFinished::MergeFrom(from._internal_finished());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUResponse)
}

void SLUResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUResponse_speechly_2fslu_2fv1_2fslu_2eproto.base);
  audio_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  segment_id_ = 0;
  clear_has_streaming_response();
}

SLUResponse::~SLUResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUResponse)
  SharedDtor();
}

void SLUResponse::SharedDtor() {
  audio_context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_streaming_response()) {
    clear_streaming_response();
  }
}

void SLUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUResponse& SLUResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUResponse_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUResponse::clear_streaming_response() {
// @@protoc_insertion_point(one_of_clear_start:speechly.slu.v1.SLUResponse)
  switch (streaming_response_case()) {
    case kTranscript: {
      delete streaming_response_.transcript_;
      break;
    }
    case kEntity: {
      delete streaming_response_.entity_;
      break;
    }
    case kIntent: {
      delete streaming_response_.intent_;
      break;
    }
    case kSegmentEnd: {
      delete streaming_response_.segment_end_;
      break;
    }
    case kTentativeTranscript: {
      delete streaming_response_.tentative_transcript_;
      break;
    }
    case kTentativeEntities: {
      delete streaming_response_.tentative_entities_;
      break;
    }
    case kTentativeIntent: {
      delete streaming_response_.tentative_intent_;
      break;
    }
    case kStarted: {
      delete streaming_response_.started_;
      break;
    }
    case kFinished: {
      delete streaming_response_.finished_;
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_RESPONSE_NOT_SET;
}


void SLUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  segment_id_ = 0;
  clear_streaming_response();
  _internal_metadata_.Clear();
}

const char* SLUResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string audio_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUResponse.audio_context"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 segment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUTranscript transcript = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transcript(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUEntity entity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUIntent intent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUSegmentEnd segment_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUTentativeTranscript tentative_transcript = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tentative_transcript(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUTentativeEntities tentative_entities = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tentative_entities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUIntent tentative_intent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tentative_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUStarted started = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_started(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.SLUFinished finished = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_finished(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string audio_context = 1;
  if (this->audio_context().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_context().data(), static_cast<int>(this->_internal_audio_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUResponse.audio_context");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_context(), target);
  }

  // int32 segment_id = 2;
  if (this->segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_segment_id(), target);
  }

  // .speechly.slu.v1.SLUTranscript transcript = 3;
  if (_internal_has_transcript()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transcript(this), target, stream);
  }

  // .speechly.slu.v1.SLUEntity entity = 4;
  if (_internal_has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::entity(this), target, stream);
  }

  // .speechly.slu.v1.SLUIntent intent = 5;
  if (_internal_has_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::intent(this), target, stream);
  }

  // .speechly.slu.v1.SLUSegmentEnd segment_end = 6;
  if (_internal_has_segment_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::segment_end(this), target, stream);
  }

  // .speechly.slu.v1.SLUTentativeTranscript tentative_transcript = 7;
  if (_internal_has_tentative_transcript()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tentative_transcript(this), target, stream);
  }

  // .speechly.slu.v1.SLUTentativeEntities tentative_entities = 8;
  if (_internal_has_tentative_entities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tentative_entities(this), target, stream);
  }

  // .speechly.slu.v1.SLUIntent tentative_intent = 9;
  if (_internal_has_tentative_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tentative_intent(this), target, stream);
  }

  // .speechly.slu.v1.SLUStarted started = 10;
  if (_internal_has_started()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::started(this), target, stream);
  }

  // .speechly.slu.v1.SLUFinished finished = 11;
  if (_internal_has_finished()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::finished(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUResponse)
  return target;
}

size_t SLUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audio_context = 1;
  if (this->audio_context().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_context());
  }

  // int32 segment_id = 2;
  if (this->segment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_id());
  }

  switch (streaming_response_case()) {
    // .speechly.slu.v1.SLUTranscript transcript = 3;
    case kTranscript: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.transcript_);
      break;
    }
    // .speechly.slu.v1.SLUEntity entity = 4;
    case kEntity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.entity_);
      break;
    }
    // .speechly.slu.v1.SLUIntent intent = 5;
    case kIntent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.intent_);
      break;
    }
    // .speechly.slu.v1.SLUSegmentEnd segment_end = 6;
    case kSegmentEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.segment_end_);
      break;
    }
    // .speechly.slu.v1.SLUTentativeTranscript tentative_transcript = 7;
    case kTentativeTranscript: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.tentative_transcript_);
      break;
    }
    // .speechly.slu.v1.SLUTentativeEntities tentative_entities = 8;
    case kTentativeEntities: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.tentative_entities_);
      break;
    }
    // .speechly.slu.v1.SLUIntent tentative_intent = 9;
    case kTentativeIntent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.tentative_intent_);
      break;
    }
    // .speechly.slu.v1.SLUStarted started = 10;
    case kStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.started_);
      break;
    }
    // .speechly.slu.v1.SLUFinished finished = 11;
    case kFinished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.finished_);
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUResponse)
    MergeFrom(*source);
  }
}

void SLUResponse::MergeFrom(const SLUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio_context().size() > 0) {

    audio_context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_context_);
  }
  if (from.segment_id() != 0) {
    _internal_set_segment_id(from._internal_segment_id());
  }
  switch (from.streaming_response_case()) {
    case kTranscript: {
      _internal_mutable_transcript()->::speechly::slu::v1::SLUTranscript::MergeFrom(from._internal_transcript());
      break;
    }
    case kEntity: {
      _internal_mutable_entity()->::speechly::slu::v1::SLUEntity::MergeFrom(from._internal_entity());
      break;
    }
    case kIntent: {
      _internal_mutable_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_intent());
      break;
    }
    case kSegmentEnd: {
      _internal_mutable_segment_end()->::speechly::slu::v1::SLUSegmentEnd::MergeFrom(from._internal_segment_end());
      break;
    }
    case kTentativeTranscript: {
      _internal_mutable_tentative_transcript()->::speechly::slu::v1::SLUTentativeTranscript::MergeFrom(from._internal_tentative_transcript());
      break;
    }
    case kTentativeEntities: {
      _internal_mutable_tentative_entities()->::speechly::slu::v1::SLUTentativeEntities::MergeFrom(from._internal_tentative_entities());
      break;
    }
    case kTentativeIntent: {
      _internal_mutable_tentative_intent()->::speechly::slu::v1::SLUIntent::MergeFrom(from._internal_tentative_intent());
      break;
    }
    case kStarted: {
      _internal_mutable_started()->::speechly::slu::v1::SLUStarted::MergeFrom(from._internal_started());
      break;
    }
    case kFinished: {
      _internal_mutable_finished()->::speechly::slu::v1::SLUFinished::MergeFrom(from._internal_finished());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
}

void SLUResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUResponse::CopyFrom(const SLUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUResponse::IsInitialized() const {
  return true;
}

void SLUResponse::InternalSwap(SLUResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audio_context_.Swap(&other->audio_context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(segment_id_, other->segment_id_);
  swap(streaming_response_, other->streaming_response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUTranscript::InitAsDefaultInstance() {
}
class SLUTranscript::_Internal {
 public:
};

SLUTranscript::SLUTranscript()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUTranscript)
}
SLUTranscript::SLUTranscript(const SLUTranscript& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_word().empty()) {
    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUTranscript)
}

void SLUTranscript::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
}

SLUTranscript::~SLUTranscript() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUTranscript)
  SharedDtor();
}

void SLUTranscript::SharedDtor() {
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUTranscript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUTranscript& SLUTranscript::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUTranscript::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&index_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

const char* SLUTranscript::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUTranscript.word"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUTranscript::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUTranscript.word");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 start_time = 3;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_time(), target);
  }

  // int32 end_time = 4;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUTranscript)
  return target;
}

size_t SLUTranscript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUTranscript)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_time());
  }

  // int32 end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUTranscript::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUTranscript)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUTranscript* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUTranscript>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUTranscript)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUTranscript)
    MergeFrom(*source);
  }
}

void SLUTranscript::MergeFrom(const SLUTranscript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUTranscript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {

    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void SLUTranscript::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUTranscript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUTranscript::CopyFrom(const SLUTranscript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUTranscript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUTranscript::IsInitialized() const {
  return true;
}

void SLUTranscript::InternalSwap(SLUTranscript* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUTranscript::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUEntity::InitAsDefaultInstance() {
}
class SLUEntity::_Internal {
 public:
};

SLUEntity::SLUEntity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUEntity)
}
SLUEntity::SLUEntity(const SLUEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity().empty()) {
    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&start_position_, &from.start_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_position_) -
    reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUEntity)
}

void SLUEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto.base);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_position_) -
      reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
}

SLUEntity::~SLUEntity() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUEntity)
  SharedDtor();
}

void SLUEntity::SharedDtor() {
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUEntity& SLUEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUEntity_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_position_) -
      reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  _internal_metadata_.Clear();
}

const char* SLUEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUEntity.entity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUEntity.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUEntity.entity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUEntity.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int32 start_position = 3;
  if (this->start_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_position(), target);
  }

  // int32 end_position = 4;
  if (this->end_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUEntity)
  return target;
}

size_t SLUEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 start_position = 3;
  if (this->start_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_position());
  }

  // int32 end_position = 4;
  if (this->end_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUEntity)
    MergeFrom(*source);
  }
}

void SLUEntity::MergeFrom(const SLUEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity().size() > 0) {

    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.start_position() != 0) {
    _internal_set_start_position(from._internal_start_position());
  }
  if (from.end_position() != 0) {
    _internal_set_end_position(from._internal_end_position());
  }
}

void SLUEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUEntity::CopyFrom(const SLUEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUEntity::IsInitialized() const {
  return true;
}

void SLUEntity::InternalSwap(SLUEntity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_.Swap(&other->entity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_position_, other->start_position_);
  swap(end_position_, other->end_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUIntent::InitAsDefaultInstance() {
}
class SLUIntent::_Internal {
 public:
};

SLUIntent::SLUIntent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUIntent)
}
SLUIntent::SLUIntent(const SLUIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUIntent)
}

void SLUIntent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto.base);
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLUIntent::~SLUIntent() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUIntent)
  SharedDtor();
}

void SLUIntent::SharedDtor() {
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUIntent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUIntent& SLUIntent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUIntent_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SLUIntent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string intent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_intent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUIntent.intent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUIntent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string intent = 1;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUIntent.intent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_intent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUIntent)
  return target;
}

size_t SLUIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUIntent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string intent = 1;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUIntent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUIntent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUIntent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUIntent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUIntent)
    MergeFrom(*source);
  }
}

void SLUIntent::MergeFrom(const SLUIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
}

void SLUIntent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUIntent::CopyFrom(const SLUIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUIntent::IsInitialized() const {
  return true;
}

void SLUIntent::InternalSwap(SLUIntent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUIntent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUSegmentEnd::InitAsDefaultInstance() {
}
class SLUSegmentEnd::_Internal {
 public:
};

SLUSegmentEnd::SLUSegmentEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUSegmentEnd)
}
SLUSegmentEnd::SLUSegmentEnd(const SLUSegmentEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUSegmentEnd)
}

void SLUSegmentEnd::SharedCtor() {
}

SLUSegmentEnd::~SLUSegmentEnd() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUSegmentEnd)
  SharedDtor();
}

void SLUSegmentEnd::SharedDtor() {
}

void SLUSegmentEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUSegmentEnd& SLUSegmentEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUSegmentEnd_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUSegmentEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUSegmentEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SLUSegmentEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUSegmentEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUSegmentEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUSegmentEnd)
  return target;
}

size_t SLUSegmentEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUSegmentEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUSegmentEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUSegmentEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUSegmentEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUSegmentEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUSegmentEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUSegmentEnd)
    MergeFrom(*source);
  }
}

void SLUSegmentEnd::MergeFrom(const SLUSegmentEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUSegmentEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SLUSegmentEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUSegmentEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUSegmentEnd::CopyFrom(const SLUSegmentEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUSegmentEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUSegmentEnd::IsInitialized() const {
  return true;
}

void SLUSegmentEnd::InternalSwap(SLUSegmentEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUSegmentEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUTentativeTranscript::InitAsDefaultInstance() {
}
class SLUTentativeTranscript::_Internal {
 public:
};

SLUTentativeTranscript::SLUTentativeTranscript()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUTentativeTranscript)
}
SLUTentativeTranscript::SLUTentativeTranscript(const SLUTentativeTranscript& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tentative_words_(from.tentative_words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tentative_transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tentative_transcript().empty()) {
    tentative_transcript_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tentative_transcript_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUTentativeTranscript)
}

void SLUTentativeTranscript::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base);
  tentative_transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLUTentativeTranscript::~SLUTentativeTranscript() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUTentativeTranscript)
  SharedDtor();
}

void SLUTentativeTranscript::SharedDtor() {
  tentative_transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUTentativeTranscript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUTentativeTranscript& SLUTentativeTranscript::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUTentativeTranscript_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUTentativeTranscript::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUTentativeTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tentative_words_.Clear();
  tentative_transcript_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SLUTentativeTranscript::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tentative_transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tentative_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUTentativeTranscript.tentative_transcript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v1.SLUTranscript tentative_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tentative_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUTentativeTranscript::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUTentativeTranscript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tentative_transcript = 1;
  if (this->tentative_transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tentative_transcript().data(), static_cast<int>(this->_internal_tentative_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUTentativeTranscript.tentative_transcript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tentative_transcript(), target);
  }

  // repeated .speechly.slu.v1.SLUTranscript tentative_words = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tentative_words_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tentative_words(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUTentativeTranscript)
  return target;
}

size_t SLUTentativeTranscript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUTentativeTranscript)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.SLUTranscript tentative_words = 2;
  total_size += 1UL * this->_internal_tentative_words_size();
  for (const auto& msg : this->tentative_words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tentative_transcript = 1;
  if (this->tentative_transcript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tentative_transcript());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUTentativeTranscript::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUTentativeTranscript)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUTentativeTranscript* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUTentativeTranscript>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUTentativeTranscript)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUTentativeTranscript)
    MergeFrom(*source);
  }
}

void SLUTentativeTranscript::MergeFrom(const SLUTentativeTranscript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUTentativeTranscript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tentative_words_.MergeFrom(from.tentative_words_);
  if (from.tentative_transcript().size() > 0) {

    tentative_transcript_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tentative_transcript_);
  }
}

void SLUTentativeTranscript::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUTentativeTranscript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUTentativeTranscript::CopyFrom(const SLUTentativeTranscript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUTentativeTranscript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUTentativeTranscript::IsInitialized() const {
  return true;
}

void SLUTentativeTranscript::InternalSwap(SLUTentativeTranscript* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tentative_words_.InternalSwap(&other->tentative_words_);
  tentative_transcript_.Swap(&other->tentative_transcript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUTentativeTranscript::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUTentativeEntities::InitAsDefaultInstance() {
}
class SLUTentativeEntities::_Internal {
 public:
};

SLUTentativeEntities::SLUTentativeEntities()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUTentativeEntities)
}
SLUTentativeEntities::SLUTentativeEntities(const SLUTentativeEntities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tentative_entities_(from.tentative_entities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUTentativeEntities)
}

void SLUTentativeEntities::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto.base);
}

SLUTentativeEntities::~SLUTentativeEntities() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUTentativeEntities)
  SharedDtor();
}

void SLUTentativeEntities::SharedDtor() {
}

void SLUTentativeEntities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUTentativeEntities& SLUTentativeEntities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUTentativeEntities_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUTentativeEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUTentativeEntities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tentative_entities_.Clear();
  _internal_metadata_.Clear();
}

const char* SLUTentativeEntities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speechly.slu.v1.SLUEntity tentative_entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tentative_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUTentativeEntities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUTentativeEntities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.SLUEntity tentative_entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tentative_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tentative_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUTentativeEntities)
  return target;
}

size_t SLUTentativeEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUTentativeEntities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.SLUEntity tentative_entities = 1;
  total_size += 1UL * this->_internal_tentative_entities_size();
  for (const auto& msg : this->tentative_entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUTentativeEntities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUTentativeEntities)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUTentativeEntities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUTentativeEntities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUTentativeEntities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUTentativeEntities)
    MergeFrom(*source);
  }
}

void SLUTentativeEntities::MergeFrom(const SLUTentativeEntities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUTentativeEntities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tentative_entities_.MergeFrom(from.tentative_entities_);
}

void SLUTentativeEntities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUTentativeEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUTentativeEntities::CopyFrom(const SLUTentativeEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUTentativeEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUTentativeEntities::IsInitialized() const {
  return true;
}

void SLUTentativeEntities::InternalSwap(SLUTentativeEntities* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tentative_entities_.InternalSwap(&other->tentative_entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUTentativeEntities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUStarted::InitAsDefaultInstance() {
}
class SLUStarted::_Internal {
 public:
};

SLUStarted::SLUStarted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUStarted)
}
SLUStarted::SLUStarted(const SLUStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUStarted)
}

void SLUStarted::SharedCtor() {
}

SLUStarted::~SLUStarted() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUStarted)
  SharedDtor();
}

void SLUStarted::SharedDtor() {
}

void SLUStarted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUStarted& SLUStarted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUStarted_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SLUStarted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUStarted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUStarted)
  return target;
}

size_t SLUStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUStarted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUStarted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUStarted)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUStarted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUStarted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUStarted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUStarted)
    MergeFrom(*source);
  }
}

void SLUStarted::MergeFrom(const SLUStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUStarted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SLUStarted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUStarted::CopyFrom(const SLUStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUStarted::IsInitialized() const {
  return true;
}

void SLUStarted::InternalSwap(SLUStarted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUStarted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUFinished::InitAsDefaultInstance() {
  ::speechly::slu::v1::_SLUFinished_default_instance_._instance.get_mutable()->error_ = const_cast< ::speechly::slu::v1::SLUError*>(
      ::speechly::slu::v1::SLUError::internal_default_instance());
}
class SLUFinished::_Internal {
 public:
  static const ::speechly::slu::v1::SLUError& error(const SLUFinished* msg);
};

const ::speechly::slu::v1::SLUError&
SLUFinished::_Internal::error(const SLUFinished* msg) {
  return *msg->error_;
}
SLUFinished::SLUFinished()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUFinished)
}
SLUFinished::SLUFinished(const SLUFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::speechly::slu::v1::SLUError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUFinished)
}

void SLUFinished::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto.base);
  error_ = nullptr;
}

SLUFinished::~SLUFinished() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUFinished)
  SharedDtor();
}

void SLUFinished::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void SLUFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUFinished& SLUFinished::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUFinished_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SLUFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.slu.v1.SLUError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUError error = 2;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUFinished)
  return target;
}

size_t SLUFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.slu.v1.SLUError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUFinished)
    MergeFrom(*source);
  }
}

void SLUFinished::MergeFrom(const SLUFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    _internal_mutable_error()->::speechly::slu::v1::SLUError::MergeFrom(from._internal_error());
  }
}

void SLUFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUFinished::CopyFrom(const SLUFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUFinished::IsInitialized() const {
  return true;
}

void SLUFinished::InternalSwap(SLUFinished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUFinished::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLUError::InitAsDefaultInstance() {
}
class SLUError::_Internal {
 public:
};

SLUError::SLUError()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.SLUError)
}
SLUError::SLUError(const SLUError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.SLUError)
}

void SLUError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLUError::~SLUError() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.SLUError)
  SharedDtor();
}

void SLUError::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLUError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLUError& SLUError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLUError_speechly_2fslu_2fv1_2fslu_2eproto.base);
  return *internal_default_instance();
}


void SLUError::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.SLUError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SLUError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUError.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.SLUError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLUError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.SLUError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUError.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.SLUError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.SLUError)
  return target;
}

size_t SLUError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.SLUError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLUError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.SLUError)
  GOOGLE_DCHECK_NE(&from, this);
  const SLUError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLUError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.SLUError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.SLUError)
    MergeFrom(*source);
  }
}

void SLUError::MergeFrom(const SLUError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.SLUError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SLUError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.SLUError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLUError::CopyFrom(const SLUError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.SLUError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLUError::IsInitialized() const {
  return true;
}

void SLUError::InternalSwap(SLUError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SLUError::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLURequest* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLURequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUConfig* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUConfig >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUEvent* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUEvent >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUResponse* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUTranscript* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUTranscript >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUTranscript >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUEntity* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUEntity >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUIntent* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUIntent >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUIntent >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUSegmentEnd* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUSegmentEnd >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUSegmentEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUTentativeTranscript* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUTentativeTranscript >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUTentativeTranscript >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUTentativeEntities* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUTentativeEntities >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUTentativeEntities >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUStarted* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUStarted >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUFinished* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUFinished >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::SLUError* Arena::CreateMaybeMessage< ::speechly::slu::v1::SLUError >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::SLUError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
