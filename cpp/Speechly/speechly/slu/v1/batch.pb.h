// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/batch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fbatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv1_2fbatch_2eproto;
namespace speechly {
namespace slu {
namespace v1 {
class AudioConfiguration;
struct AudioConfigurationDefaultTypeInternal;
extern AudioConfigurationDefaultTypeInternal _AudioConfiguration_default_instance_;
class HttpResource;
struct HttpResourceDefaultTypeInternal;
extern HttpResourceDefaultTypeInternal _HttpResource_default_instance_;
class HttpResource_Header;
struct HttpResource_HeaderDefaultTypeInternal;
extern HttpResource_HeaderDefaultTypeInternal _HttpResource_Header_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Option;
struct OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class Transcript;
struct TranscriptDefaultTypeInternal;
extern TranscriptDefaultTypeInternal _Transcript_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::slu::v1::AudioConfiguration* Arena::CreateMaybeMessage<::speechly::slu::v1::AudioConfiguration>(Arena*);
template<> ::speechly::slu::v1::HttpResource* Arena::CreateMaybeMessage<::speechly::slu::v1::HttpResource>(Arena*);
template<> ::speechly::slu::v1::HttpResource_Header* Arena::CreateMaybeMessage<::speechly::slu::v1::HttpResource_Header>(Arena*);
template<> ::speechly::slu::v1::Operation* Arena::CreateMaybeMessage<::speechly::slu::v1::Operation>(Arena*);
template<> ::speechly::slu::v1::Option* Arena::CreateMaybeMessage<::speechly::slu::v1::Option>(Arena*);
template<> ::speechly::slu::v1::Transcript* Arena::CreateMaybeMessage<::speechly::slu::v1::Transcript>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace slu {
namespace v1 {

enum AudioConfiguration_Encoding : int {
  AudioConfiguration_Encoding_ENCODING_INVALID = 0,
  AudioConfiguration_Encoding_ENCODING_LINEAR16 = 1,
  AudioConfiguration_Encoding_AudioConfiguration_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AudioConfiguration_Encoding_AudioConfiguration_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AudioConfiguration_Encoding_IsValid(int value);
constexpr AudioConfiguration_Encoding AudioConfiguration_Encoding_Encoding_MIN = AudioConfiguration_Encoding_ENCODING_INVALID;
constexpr AudioConfiguration_Encoding AudioConfiguration_Encoding_Encoding_MAX = AudioConfiguration_Encoding_ENCODING_LINEAR16;
constexpr int AudioConfiguration_Encoding_Encoding_ARRAYSIZE = AudioConfiguration_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioConfiguration_Encoding_descriptor();
template<typename T>
inline const std::string& AudioConfiguration_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioConfiguration_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioConfiguration_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioConfiguration_Encoding_descriptor(), enum_t_value);
}
inline bool AudioConfiguration_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioConfiguration_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioConfiguration_Encoding>(
    AudioConfiguration_Encoding_descriptor(), name, value);
}
enum HttpResource_Method : int {
  HttpResource_Method_METHOD_INVALID = 0,
  HttpResource_Method_METHOD_GET = 1,
  HttpResource_Method_METHOD_POST = 2,
  HttpResource_Method_METHOD_PUT = 3,
  HttpResource_Method_HttpResource_Method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HttpResource_Method_HttpResource_Method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HttpResource_Method_IsValid(int value);
constexpr HttpResource_Method HttpResource_Method_Method_MIN = HttpResource_Method_METHOD_INVALID;
constexpr HttpResource_Method HttpResource_Method_Method_MAX = HttpResource_Method_METHOD_PUT;
constexpr int HttpResource_Method_Method_ARRAYSIZE = HttpResource_Method_Method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HttpResource_Method_descriptor();
template<typename T>
inline const std::string& HttpResource_Method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HttpResource_Method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HttpResource_Method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HttpResource_Method_descriptor(), enum_t_value);
}
inline bool HttpResource_Method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HttpResource_Method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HttpResource_Method>(
    HttpResource_Method_descriptor(), name, value);
}
enum Operation_Status : int {
  Operation_Status_STATUS_INVALID = 0,
  Operation_Status_STATUS_QUEUED = 1,
  Operation_Status_STATUS_PROCESSING = 2,
  Operation_Status_STATUS_DONE = 3,
  Operation_Status_STATUS_ERROR = 4,
  Operation_Status_STATUS_ANALYSING = 5,
  Operation_Status_STATUS_WAITING_DECODER = 6,
  Operation_Status_Operation_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Operation_Status_Operation_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Operation_Status_IsValid(int value);
constexpr Operation_Status Operation_Status_Status_MIN = Operation_Status_STATUS_INVALID;
constexpr Operation_Status Operation_Status_Status_MAX = Operation_Status_STATUS_WAITING_DECODER;
constexpr int Operation_Status_Status_ARRAYSIZE = Operation_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_Status_descriptor();
template<typename T>
inline const std::string& Operation_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_Status_descriptor(), enum_t_value);
}
inline bool Operation_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operation_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_Status>(
    Operation_Status_descriptor(), name, value);
}
// ===================================================================

class AudioConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.AudioConfiguration) */ {
 public:
  inline AudioConfiguration() : AudioConfiguration(nullptr) {}
  ~AudioConfiguration() override;
  explicit constexpr AudioConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioConfiguration(const AudioConfiguration& from);
  AudioConfiguration(AudioConfiguration&& from) noexcept
    : AudioConfiguration() {
    *this = ::std::move(from);
  }

  inline AudioConfiguration& operator=(const AudioConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioConfiguration& operator=(AudioConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioConfiguration* internal_default_instance() {
    return reinterpret_cast<const AudioConfiguration*>(
               &_AudioConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioConfiguration& a, AudioConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioConfiguration* New() const final {
    return new AudioConfiguration();
  }

  AudioConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.AudioConfiguration";
  }
  protected:
  explicit AudioConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioConfiguration_Encoding Encoding;
  static constexpr Encoding ENCODING_INVALID =
    AudioConfiguration_Encoding_ENCODING_INVALID;
  static constexpr Encoding ENCODING_LINEAR16 =
    AudioConfiguration_Encoding_ENCODING_LINEAR16;
  static inline bool Encoding_IsValid(int value) {
    return AudioConfiguration_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    AudioConfiguration_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    AudioConfiguration_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    AudioConfiguration_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return AudioConfiguration_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return AudioConfiguration_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return AudioConfiguration_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 4,
    kEncodingFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kSampleRateHertzFieldNumber = 3,
  };
  // repeated string language_codes = 4;
  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;
  public:
  void clear_language_codes();
  const std::string& language_codes(int index) const;
  std::string* mutable_language_codes(int index);
  void set_language_codes(int index, const std::string& value);
  void set_language_codes(int index, std::string&& value);
  void set_language_codes(int index, const char* value);
  void set_language_codes(int index, const char* value, size_t size);
  std::string* add_language_codes();
  void add_language_codes(const std::string& value);
  void add_language_codes(std::string&& value);
  void add_language_codes(const char* value);
  void add_language_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& language_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_language_codes();
  private:
  const std::string& _internal_language_codes(int index) const;
  std::string* _internal_add_language_codes();
  public:

  // .speechly.slu.v1.AudioConfiguration.Encoding encoding = 1;
  void clear_encoding();
  ::speechly::slu::v1::AudioConfiguration_Encoding encoding() const;
  void set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value);
  private:
  ::speechly::slu::v1::AudioConfiguration_Encoding _internal_encoding() const;
  void _internal_set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value);
  public:

  // int32 channels = 2;
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sample_rate_hertz = 3;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.AudioConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> language_codes_;
  int encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};
// -------------------------------------------------------------------

class HttpResource_Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.HttpResource.Header) */ {
 public:
  inline HttpResource_Header() : HttpResource_Header(nullptr) {}
  ~HttpResource_Header() override;
  explicit constexpr HttpResource_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpResource_Header(const HttpResource_Header& from);
  HttpResource_Header(HttpResource_Header&& from) noexcept
    : HttpResource_Header() {
    *this = ::std::move(from);
  }

  inline HttpResource_Header& operator=(const HttpResource_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResource_Header& operator=(HttpResource_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpResource_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpResource_Header* internal_default_instance() {
    return reinterpret_cast<const HttpResource_Header*>(
               &_HttpResource_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HttpResource_Header& a, HttpResource_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResource_Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResource_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HttpResource_Header* New() const final {
    return new HttpResource_Header();
  }

  HttpResource_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpResource_Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpResource_Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HttpResource_Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResource_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.HttpResource.Header";
  }
  protected:
  explicit HttpResource_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.HttpResource.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};
// -------------------------------------------------------------------

class HttpResource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.HttpResource) */ {
 public:
  inline HttpResource() : HttpResource(nullptr) {}
  ~HttpResource() override;
  explicit constexpr HttpResource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpResource(const HttpResource& from);
  HttpResource(HttpResource&& from) noexcept
    : HttpResource() {
    *this = ::std::move(from);
  }

  inline HttpResource& operator=(const HttpResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResource& operator=(HttpResource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpResource& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpResource* internal_default_instance() {
    return reinterpret_cast<const HttpResource*>(
               &_HttpResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HttpResource& a, HttpResource& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResource* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HttpResource* New() const final {
    return new HttpResource();
  }

  HttpResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpResource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpResource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HttpResource& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.HttpResource";
  }
  protected:
  explicit HttpResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HttpResource_Header Header;

  typedef HttpResource_Method Method;
  static constexpr Method METHOD_INVALID =
    HttpResource_Method_METHOD_INVALID;
  static constexpr Method METHOD_GET =
    HttpResource_Method_METHOD_GET;
  static constexpr Method METHOD_POST =
    HttpResource_Method_METHOD_POST;
  static constexpr Method METHOD_PUT =
    HttpResource_Method_METHOD_PUT;
  static inline bool Method_IsValid(int value) {
    return HttpResource_Method_IsValid(value);
  }
  static constexpr Method Method_MIN =
    HttpResource_Method_Method_MIN;
  static constexpr Method Method_MAX =
    HttpResource_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE =
    HttpResource_Method_Method_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Method_descriptor() {
    return HttpResource_Method_descriptor();
  }
  template<typename T>
  static inline const std::string& Method_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Method>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Method_Name.");
    return HttpResource_Method_Name(enum_t_value);
  }
  static inline bool Method_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Method* value) {
    return HttpResource_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kUrlFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // repeated .speechly.slu.v1.HttpResource.Header headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::speechly::slu::v1::HttpResource_Header* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >*
      mutable_headers();
  private:
  const ::speechly::slu::v1::HttpResource_Header& _internal_headers(int index) const;
  ::speechly::slu::v1::HttpResource_Header* _internal_add_headers();
  public:
  const ::speechly::slu::v1::HttpResource_Header& headers(int index) const;
  ::speechly::slu::v1::HttpResource_Header* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >&
      headers() const;

  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .speechly.slu.v1.HttpResource.Method method = 2;
  void clear_method();
  ::speechly::slu::v1::HttpResource_Method method() const;
  void set_method(::speechly::slu::v1::HttpResource_Method value);
  private:
  ::speechly::slu::v1::HttpResource_Method _internal_method() const;
  void _internal_set_method(::speechly::slu::v1::HttpResource_Method value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.HttpResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit constexpr Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return new Operation();
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operation_Status Status;
  static constexpr Status STATUS_INVALID =
    Operation_Status_STATUS_INVALID;
  static constexpr Status STATUS_QUEUED =
    Operation_Status_STATUS_QUEUED;
  static constexpr Status STATUS_PROCESSING =
    Operation_Status_STATUS_PROCESSING;
  static constexpr Status STATUS_DONE =
    Operation_Status_STATUS_DONE;
  static constexpr Status STATUS_ERROR =
    Operation_Status_STATUS_ERROR;
  static constexpr Status STATUS_ANALYSING =
    Operation_Status_STATUS_ANALYSING;
  static constexpr Status STATUS_WAITING_DECODER =
    Operation_Status_STATUS_WAITING_DECODER;
  static inline bool Status_IsValid(int value) {
    return Operation_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Operation_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Operation_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Operation_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Operation_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Operation_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Operation_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptsFieldNumber = 7,
    kIdFieldNumber = 1,
    kReferenceFieldNumber = 2,
    kLanguageCodeFieldNumber = 4,
    kAppIdFieldNumber = 5,
    kDeviceIdFieldNumber = 6,
    kErrorFieldNumber = 8,
    kDurationFieldNumber = 9,
    kStatusFieldNumber = 3,
  };
  // repeated .speechly.slu.v1.Transcript transcripts = 7;
  int transcripts_size() const;
  private:
  int _internal_transcripts_size() const;
  public:
  void clear_transcripts();
  ::speechly::slu::v1::Transcript* mutable_transcripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::Transcript >*
      mutable_transcripts();
  private:
  const ::speechly::slu::v1::Transcript& _internal_transcripts(int index) const;
  ::speechly::slu::v1::Transcript* _internal_add_transcripts();
  public:
  const ::speechly::slu::v1::Transcript& transcripts(int index) const;
  ::speechly::slu::v1::Transcript* add_transcripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::Transcript >&
      transcripts() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string reference = 2;
  void clear_reference();
  const std::string& reference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference();
  PROTOBUF_MUST_USE_RESULT std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // string language_code = 4;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string app_id = 5;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string device_id = 6;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string error = 8;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .google.protobuf.Duration duration = 9;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .speechly.slu.v1.Operation.Status status = 3;
  void clear_status();
  ::speechly::slu::v1::Operation_Status status() const;
  void set_status(::speechly::slu::v1::Operation_Status value);
  private:
  ::speechly::slu::v1::Operation_Status _internal_status() const;
  void _internal_set_status(::speechly::slu::v1::Operation_Status value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::Transcript > transcripts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};
// -------------------------------------------------------------------

class Transcript final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.Transcript) */ {
 public:
  inline Transcript() : Transcript(nullptr) {}
  ~Transcript() override;
  explicit constexpr Transcript(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transcript(const Transcript& from);
  Transcript(Transcript&& from) noexcept
    : Transcript() {
    *this = ::std::move(from);
  }

  inline Transcript& operator=(const Transcript& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transcript& operator=(Transcript&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transcript& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transcript* internal_default_instance() {
    return reinterpret_cast<const Transcript*>(
               &_Transcript_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transcript& a, Transcript& b) {
    a.Swap(&b);
  }
  inline void Swap(Transcript* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transcript* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transcript* New() const final {
    return new Transcript();
  }

  Transcript* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transcript>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transcript& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transcript& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transcript* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.Transcript";
  }
  protected:
  explicit Transcript(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kIndexFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // string word = 1;
  void clear_word();
  const std::string& word() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_word(ArgT0&& arg0, ArgT... args);
  std::string* mutable_word();
  PROTOBUF_MUST_USE_RESULT std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.Transcript)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};
// -------------------------------------------------------------------

class Option final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.Option) */ {
 public:
  inline Option() : Option(nullptr) {}
  ~Option() override;
  explicit constexpr Option(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Option* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Option* New() const final {
    return new Option();
  }

  Option* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Option& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Option& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.slu.v1.Option";
  }
  protected:
  explicit Option(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:speechly.slu.v1.Option)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioConfiguration

// .speechly.slu.v1.AudioConfiguration.Encoding encoding = 1;
inline void AudioConfiguration::clear_encoding() {
  encoding_ = 0;
}
inline ::speechly::slu::v1::AudioConfiguration_Encoding AudioConfiguration::_internal_encoding() const {
  return static_cast< ::speechly::slu::v1::AudioConfiguration_Encoding >(encoding_);
}
inline ::speechly::slu::v1::AudioConfiguration_Encoding AudioConfiguration::encoding() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.encoding)
  return _internal_encoding();
}
inline void AudioConfiguration::_internal_set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value) {
  
  encoding_ = value;
}
inline void AudioConfiguration::set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.encoding)
}

// int32 channels = 2;
inline void AudioConfiguration::clear_channels() {
  channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfiguration::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfiguration::channels() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.channels)
  return _internal_channels();
}
inline void AudioConfiguration::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channels_ = value;
}
inline void AudioConfiguration::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.channels)
}

// int32 sample_rate_hertz = 3;
inline void AudioConfiguration::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfiguration::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfiguration::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void AudioConfiguration::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void AudioConfiguration::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.sample_rate_hertz)
}

// repeated string language_codes = 4;
inline int AudioConfiguration::_internal_language_codes_size() const {
  return language_codes_.size();
}
inline int AudioConfiguration::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void AudioConfiguration::clear_language_codes() {
  language_codes_.Clear();
}
inline std::string* AudioConfiguration::add_language_codes() {
  std::string* _s = _internal_add_language_codes();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v1.AudioConfiguration.language_codes)
  return _s;
}
inline const std::string& AudioConfiguration::_internal_language_codes(int index) const {
  return language_codes_.Get(index);
}
inline const std::string& AudioConfiguration::language_codes(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.language_codes)
  return _internal_language_codes(index);
}
inline std::string* AudioConfiguration::mutable_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.AudioConfiguration.language_codes)
  return language_codes_.Mutable(index);
}
inline void AudioConfiguration::set_language_codes(int index, const std::string& value) {
  language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::set_language_codes(int index, std::string&& value) {
  language_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::set_language_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::set_language_codes(int index, const char* value, size_t size) {
  language_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline std::string* AudioConfiguration::_internal_add_language_codes() {
  return language_codes_.Add();
}
inline void AudioConfiguration::add_language_codes(const std::string& value) {
  language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(std::string&& value) {
  language_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(const char* value, size_t size) {
  language_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AudioConfiguration::language_codes() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.AudioConfiguration.language_codes)
  return language_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AudioConfiguration::mutable_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.AudioConfiguration.language_codes)
  return &language_codes_;
}

// -------------------------------------------------------------------

// HttpResource_Header

// string name = 1;
inline void HttpResource_Header::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HttpResource_Header::name() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.Header.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpResource_Header::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.Header.name)
}
inline std::string* HttpResource_Header::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.Header.name)
  return _s;
}
inline const std::string& HttpResource_Header::_internal_name() const {
  return name_.Get();
}
inline void HttpResource_Header::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::release_name() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.HttpResource.Header.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HttpResource_Header::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.HttpResource.Header.name)
}

// string value = 2;
inline void HttpResource_Header::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& HttpResource_Header::value() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.Header.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpResource_Header::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.Header.value)
}
inline std::string* HttpResource_Header::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.Header.value)
  return _s;
}
inline const std::string& HttpResource_Header::_internal_value() const {
  return value_.Get();
}
inline void HttpResource_Header::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::release_value() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.HttpResource.Header.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HttpResource_Header::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.HttpResource.Header.value)
}

// -------------------------------------------------------------------

// HttpResource

// string url = 1;
inline void HttpResource::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& HttpResource::url() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpResource::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.url)
}
inline std::string* HttpResource::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.url)
  return _s;
}
inline const std::string& HttpResource::_internal_url() const {
  return url_.Get();
}
inline void HttpResource::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HttpResource::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HttpResource::release_url() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.HttpResource.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HttpResource::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.HttpResource.url)
}

// .speechly.slu.v1.HttpResource.Method method = 2;
inline void HttpResource::clear_method() {
  method_ = 0;
}
inline ::speechly::slu::v1::HttpResource_Method HttpResource::_internal_method() const {
  return static_cast< ::speechly::slu::v1::HttpResource_Method >(method_);
}
inline ::speechly::slu::v1::HttpResource_Method HttpResource::method() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.method)
  return _internal_method();
}
inline void HttpResource::_internal_set_method(::speechly::slu::v1::HttpResource_Method value) {
  
  method_ = value;
}
inline void HttpResource::set_method(::speechly::slu::v1::HttpResource_Method value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.method)
}

// repeated .speechly.slu.v1.HttpResource.Header headers = 3;
inline int HttpResource::_internal_headers_size() const {
  return headers_.size();
}
inline int HttpResource::headers_size() const {
  return _internal_headers_size();
}
inline void HttpResource::clear_headers() {
  headers_.Clear();
}
inline ::speechly::slu::v1::HttpResource_Header* HttpResource::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >*
HttpResource::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.HttpResource.headers)
  return &headers_;
}
inline const ::speechly::slu::v1::HttpResource_Header& HttpResource::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::speechly::slu::v1::HttpResource_Header& HttpResource::headers(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.headers)
  return _internal_headers(index);
}
inline ::speechly::slu::v1::HttpResource_Header* HttpResource::_internal_add_headers() {
  return headers_.Add();
}
inline ::speechly::slu::v1::HttpResource_Header* HttpResource::add_headers() {
  ::speechly::slu::v1::HttpResource_Header* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.HttpResource.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >&
HttpResource::headers() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.HttpResource.headers)
  return headers_;
}

// -------------------------------------------------------------------

// Operation

// string id = 1;
inline void Operation::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Operation::id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.id)
}
inline std::string* Operation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.id)
  return _s;
}
inline const std::string& Operation::_internal_id() const {
  return id_.Get();
}
inline void Operation::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_id() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.id)
}

// string reference = 2;
inline void Operation::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& Operation::reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.reference)
  return _internal_reference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_reference(ArgT0&& arg0, ArgT... args) {
 
 reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.reference)
}
inline std::string* Operation::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.reference)
  return _s;
}
inline const std::string& Operation::_internal_reference() const {
  return reference_.Get();
}
inline void Operation::_internal_set_reference(const std::string& value) {
  
  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_reference() {
  
  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_reference() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.reference)
}

// .speechly.slu.v1.Operation.Status status = 3;
inline void Operation::clear_status() {
  status_ = 0;
}
inline ::speechly::slu::v1::Operation_Status Operation::_internal_status() const {
  return static_cast< ::speechly::slu::v1::Operation_Status >(status_);
}
inline ::speechly::slu::v1::Operation_Status Operation::status() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.status)
  return _internal_status();
}
inline void Operation::_internal_set_status(::speechly::slu::v1::Operation_Status value) {
  
  status_ = value;
}
inline void Operation::set_status(::speechly::slu::v1::Operation_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.status)
}

// string language_code = 4;
inline void Operation::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& Operation::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.language_code)
}
inline std::string* Operation::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.language_code)
  return _s;
}
inline const std::string& Operation::_internal_language_code() const {
  return language_code_.Get();
}
inline void Operation::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_language_code() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.language_code)
}

// string app_id = 5;
inline void Operation::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& Operation::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.app_id)
}
inline std::string* Operation::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.app_id)
  return _s;
}
inline const std::string& Operation::_internal_app_id() const {
  return app_id_.Get();
}
inline void Operation::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.app_id)
}

// string device_id = 6;
inline void Operation::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& Operation::device_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.device_id)
}
inline std::string* Operation::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.device_id)
  return _s;
}
inline const std::string& Operation::_internal_device_id() const {
  return device_id_.Get();
}
inline void Operation::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_device_id() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.device_id)
}

// repeated .speechly.slu.v1.Transcript transcripts = 7;
inline int Operation::_internal_transcripts_size() const {
  return transcripts_.size();
}
inline int Operation::transcripts_size() const {
  return _internal_transcripts_size();
}
inline void Operation::clear_transcripts() {
  transcripts_.Clear();
}
inline ::speechly::slu::v1::Transcript* Operation::mutable_transcripts(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.transcripts)
  return transcripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::Transcript >*
Operation::mutable_transcripts() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.Operation.transcripts)
  return &transcripts_;
}
inline const ::speechly::slu::v1::Transcript& Operation::_internal_transcripts(int index) const {
  return transcripts_.Get(index);
}
inline const ::speechly::slu::v1::Transcript& Operation::transcripts(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.transcripts)
  return _internal_transcripts(index);
}
inline ::speechly::slu::v1::Transcript* Operation::_internal_add_transcripts() {
  return transcripts_.Add();
}
inline ::speechly::slu::v1::Transcript* Operation::add_transcripts() {
  ::speechly::slu::v1::Transcript* _add = _internal_add_transcripts();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.Operation.transcripts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::slu::v1::Transcript >&
Operation::transcripts() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.Operation.transcripts)
  return transcripts_;
}

// string error = 8;
inline void Operation::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& Operation::error() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.error)
}
inline std::string* Operation::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.error)
  return _s;
}
inline const std::string& Operation::_internal_error() const {
  return error_.Get();
}
inline void Operation::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_error() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.error)
}

// .google.protobuf.Duration duration = 9;
inline bool Operation::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool Operation::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Operation::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Operation::duration() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.duration)
  return _internal_duration();
}
inline void Operation::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.Operation.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* Operation::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Operation::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Operation::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Operation::mutable_duration() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.duration)
  return _msg;
}
inline void Operation::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.duration)
}

// -------------------------------------------------------------------

// Transcript

// string word = 1;
inline void Transcript::clear_word() {
  word_.ClearToEmpty();
}
inline const std::string& Transcript::word() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.word)
  return _internal_word();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transcript::set_word(ArgT0&& arg0, ArgT... args) {
 
 word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.word)
}
inline std::string* Transcript::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Transcript.word)
  return _s;
}
inline const std::string& Transcript::_internal_word() const {
  return word_.Get();
}
inline void Transcript::_internal_set_word(const std::string& value) {
  
  word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transcript::_internal_mutable_word() {
  
  return word_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transcript::release_word() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Transcript.word)
  return word_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transcript::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Transcript.word)
}

// int32 index = 2;
inline void Transcript::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transcript::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transcript::index() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.index)
  return _internal_index();
}
inline void Transcript::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Transcript::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.index)
}

// int32 start_time = 3;
inline void Transcript::clear_start_time() {
  start_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transcript::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transcript::start_time() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.start_time)
  return _internal_start_time();
}
inline void Transcript::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_time_ = value;
}
inline void Transcript::set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.start_time)
}

// int32 end_time = 4;
inline void Transcript::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transcript::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transcript::end_time() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.end_time)
  return _internal_end_time();
}
inline void Transcript::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void Transcript::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.end_time)
}

// -------------------------------------------------------------------

// Option

// string key = 1;
inline void Option::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Option::key() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Option.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Option::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Option.key)
}
inline std::string* Option::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Option.key)
  return _s;
}
inline const std::string& Option::_internal_key() const {
  return key_.Get();
}
inline void Option::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Option::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Option::release_key() {
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Option.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Option::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Option.key)
}

// repeated string value = 2;
inline int Option::_internal_value_size() const {
  return value_.size();
}
inline int Option::value_size() const {
  return _internal_value_size();
}
inline void Option::clear_value() {
  value_.Clear();
}
inline std::string* Option::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v1.Option.value)
  return _s;
}
inline const std::string& Option::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& Option::value(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Option.value)
  return _internal_value(index);
}
inline std::string* Option::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Option.value)
  return value_.Mutable(index);
}
inline void Option::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Option.value)
}
inline void Option::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Option.value)
}
inline void Option::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.Option.value)
}
inline void Option::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.Option.value)
}
inline std::string* Option::_internal_add_value() {
  return value_.Add();
}
inline void Option::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v1.Option.value)
}
inline void Option::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v1.Option.value)
}
inline void Option::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v1.Option.value)
}
inline void Option::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v1.Option.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Option::value() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.Option.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Option::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.Option.value)
  return &value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace slu
}  // namespace speechly

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::speechly::slu::v1::AudioConfiguration_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::slu::v1::AudioConfiguration_Encoding>() {
  return ::speechly::slu::v1::AudioConfiguration_Encoding_descriptor();
}
template <> struct is_proto_enum< ::speechly::slu::v1::HttpResource_Method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::slu::v1::HttpResource_Method>() {
  return ::speechly::slu::v1::HttpResource_Method_descriptor();
}
template <> struct is_proto_enum< ::speechly::slu::v1::Operation_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::slu::v1::Operation_Status>() {
  return ::speechly::slu::v1::Operation_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_2eproto
