// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/batch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fbatch_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fslu_2fv1_2fbatch_2eproto;
namespace speechly {
namespace slu {
namespace v1 {
class AudioConfiguration;
struct AudioConfigurationDefaultTypeInternal;
extern AudioConfigurationDefaultTypeInternal _AudioConfiguration_default_instance_;
class HttpResource;
struct HttpResourceDefaultTypeInternal;
extern HttpResourceDefaultTypeInternal _HttpResource_default_instance_;
class HttpResource_Header;
struct HttpResource_HeaderDefaultTypeInternal;
extern HttpResource_HeaderDefaultTypeInternal _HttpResource_Header_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Option;
struct OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class Transcript;
struct TranscriptDefaultTypeInternal;
extern TranscriptDefaultTypeInternal _Transcript_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace slu {
namespace v1 {
enum AudioConfiguration_Encoding : int {
  AudioConfiguration_Encoding_ENCODING_INVALID = 0,
  AudioConfiguration_Encoding_ENCODING_LINEAR16 = 1,
  AudioConfiguration_Encoding_AudioConfiguration_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AudioConfiguration_Encoding_AudioConfiguration_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AudioConfiguration_Encoding_IsValid(int value);
constexpr AudioConfiguration_Encoding AudioConfiguration_Encoding_Encoding_MIN = static_cast<AudioConfiguration_Encoding>(0);
constexpr AudioConfiguration_Encoding AudioConfiguration_Encoding_Encoding_MAX = static_cast<AudioConfiguration_Encoding>(1);
constexpr int AudioConfiguration_Encoding_Encoding_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
AudioConfiguration_Encoding_descriptor();
template <typename T>
const std::string& AudioConfiguration_Encoding_Name(T value) {
  static_assert(std::is_same<T, AudioConfiguration_Encoding>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Encoding_Name().");
  return AudioConfiguration_Encoding_Name(static_cast<AudioConfiguration_Encoding>(value));
}
template <>
inline const std::string& AudioConfiguration_Encoding_Name(AudioConfiguration_Encoding value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AudioConfiguration_Encoding_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool AudioConfiguration_Encoding_Parse(absl::string_view name, AudioConfiguration_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioConfiguration_Encoding>(
      AudioConfiguration_Encoding_descriptor(), name, value);
}
enum HttpResource_Method : int {
  HttpResource_Method_METHOD_INVALID = 0,
  HttpResource_Method_METHOD_GET = 1,
  HttpResource_Method_METHOD_POST = 2,
  HttpResource_Method_METHOD_PUT = 3,
  HttpResource_Method_HttpResource_Method_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HttpResource_Method_HttpResource_Method_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HttpResource_Method_IsValid(int value);
constexpr HttpResource_Method HttpResource_Method_Method_MIN = static_cast<HttpResource_Method>(0);
constexpr HttpResource_Method HttpResource_Method_Method_MAX = static_cast<HttpResource_Method>(3);
constexpr int HttpResource_Method_Method_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
HttpResource_Method_descriptor();
template <typename T>
const std::string& HttpResource_Method_Name(T value) {
  static_assert(std::is_same<T, HttpResource_Method>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Method_Name().");
  return HttpResource_Method_Name(static_cast<HttpResource_Method>(value));
}
template <>
inline const std::string& HttpResource_Method_Name(HttpResource_Method value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HttpResource_Method_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool HttpResource_Method_Parse(absl::string_view name, HttpResource_Method* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpResource_Method>(
      HttpResource_Method_descriptor(), name, value);
}
enum Operation_Status : int {
  Operation_Status_STATUS_INVALID = 0,
  Operation_Status_STATUS_QUEUED = 1,
  Operation_Status_STATUS_PROCESSING = 2,
  Operation_Status_STATUS_DONE = 3,
  Operation_Status_STATUS_ERROR = 4,
  Operation_Status_STATUS_ANALYSING = 5,
  Operation_Status_STATUS_WAITING_DECODER = 6,
  Operation_Status_Operation_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Operation_Status_Operation_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Operation_Status_IsValid(int value);
constexpr Operation_Status Operation_Status_Status_MIN = static_cast<Operation_Status>(0);
constexpr Operation_Status Operation_Status_Status_MAX = static_cast<Operation_Status>(6);
constexpr int Operation_Status_Status_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Operation_Status_descriptor();
template <typename T>
const std::string& Operation_Status_Name(T value) {
  static_assert(std::is_same<T, Operation_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Operation_Status_Name(static_cast<Operation_Status>(value));
}
template <>
inline const std::string& Operation_Status_Name(Operation_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Operation_Status_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Operation_Status_Parse(absl::string_view name, Operation_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Status>(
      Operation_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AudioConfiguration final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.AudioConfiguration) */ {
 public:
  inline AudioConfiguration() : AudioConfiguration(nullptr) {}
  ~AudioConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AudioConfiguration(::google::protobuf::internal::ConstantInitialized);

  AudioConfiguration(const AudioConfiguration& from);
  AudioConfiguration(AudioConfiguration&& from) noexcept
    : AudioConfiguration() {
    *this = ::std::move(from);
  }

  inline AudioConfiguration& operator=(const AudioConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioConfiguration& operator=(AudioConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioConfiguration* internal_default_instance() {
    return reinterpret_cast<const AudioConfiguration*>(
               &_AudioConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioConfiguration& a, AudioConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioConfiguration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioConfiguration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioConfiguration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AudioConfiguration& from) {
    AudioConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioConfiguration* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.AudioConfiguration";
  }
  protected:
  explicit AudioConfiguration(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Encoding = AudioConfiguration_Encoding;
  static constexpr Encoding ENCODING_INVALID = AudioConfiguration_Encoding_ENCODING_INVALID;
  static constexpr Encoding ENCODING_LINEAR16 = AudioConfiguration_Encoding_ENCODING_LINEAR16;
  static inline bool Encoding_IsValid(int value) {
    return AudioConfiguration_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN = AudioConfiguration_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX = AudioConfiguration_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE = AudioConfiguration_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Encoding_descriptor() {
    return AudioConfiguration_Encoding_descriptor();
  }
  template <typename T>
  static inline const std::string& Encoding_Name(T value) {
    return AudioConfiguration_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(absl::string_view name, Encoding* value) {
    return AudioConfiguration_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 4,
    kEncodingFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kSampleRateHertzFieldNumber = 3,
  };
  // repeated string language_codes = 4;
  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;

  public:
  void clear_language_codes() ;
  const std::string& language_codes(int index) const;
  std::string* mutable_language_codes(int index);
  void set_language_codes(int index, const std::string& value);
  void set_language_codes(int index, std::string&& value);
  void set_language_codes(int index, const char* value);
  void set_language_codes(int index, const char* value, std::size_t size);
  void set_language_codes(int index, absl::string_view value);
  std::string* add_language_codes();
  void add_language_codes(const std::string& value);
  void add_language_codes(std::string&& value);
  void add_language_codes(const char* value);
  void add_language_codes(const char* value, std::size_t size);
  void add_language_codes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_language_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_language_codes();

  public:
  // .speechly.slu.v1.AudioConfiguration.Encoding encoding = 1;
  void clear_encoding() ;
  ::speechly::slu::v1::AudioConfiguration_Encoding encoding() const;
  void set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value);

  private:
  ::speechly::slu::v1::AudioConfiguration_Encoding _internal_encoding() const;
  void _internal_set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value);

  public:
  // int32 channels = 2;
  void clear_channels() ;
  ::int32_t channels() const;
  void set_channels(::int32_t value);

  private:
  ::int32_t _internal_channels() const;
  void _internal_set_channels(::int32_t value);

  public:
  // int32 sample_rate_hertz = 3;
  void clear_sample_rate_hertz() ;
  ::int32_t sample_rate_hertz() const;
  void set_sample_rate_hertz(::int32_t value);

  private:
  ::int32_t _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.AudioConfiguration)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 57, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> language_codes_;
    int encoding_;
    ::int32_t channels_;
    ::int32_t sample_rate_hertz_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};// -------------------------------------------------------------------

class HttpResource_Header final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.HttpResource.Header) */ {
 public:
  inline HttpResource_Header() : HttpResource_Header(nullptr) {}
  ~HttpResource_Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HttpResource_Header(::google::protobuf::internal::ConstantInitialized);

  HttpResource_Header(const HttpResource_Header& from);
  HttpResource_Header(HttpResource_Header&& from) noexcept
    : HttpResource_Header() {
    *this = ::std::move(from);
  }

  inline HttpResource_Header& operator=(const HttpResource_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResource_Header& operator=(HttpResource_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpResource_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpResource_Header* internal_default_instance() {
    return reinterpret_cast<const HttpResource_Header*>(
               &_HttpResource_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HttpResource_Header& a, HttpResource_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResource_Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResource_Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpResource_Header* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpResource_Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HttpResource_Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HttpResource_Header& from) {
    HttpResource_Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResource_Header* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.HttpResource.Header";
  }
  protected:
  explicit HttpResource_Header(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.HttpResource.Header)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};// -------------------------------------------------------------------

class HttpResource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.HttpResource) */ {
 public:
  inline HttpResource() : HttpResource(nullptr) {}
  ~HttpResource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HttpResource(::google::protobuf::internal::ConstantInitialized);

  HttpResource(const HttpResource& from);
  HttpResource(HttpResource&& from) noexcept
    : HttpResource() {
    *this = ::std::move(from);
  }

  inline HttpResource& operator=(const HttpResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResource& operator=(HttpResource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpResource& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpResource* internal_default_instance() {
    return reinterpret_cast<const HttpResource*>(
               &_HttpResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HttpResource& a, HttpResource& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpResource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpResource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HttpResource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HttpResource& from) {
    HttpResource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResource* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.HttpResource";
  }
  protected:
  explicit HttpResource(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HttpResource_Header Header;

  using Method = HttpResource_Method;
  static constexpr Method METHOD_INVALID = HttpResource_Method_METHOD_INVALID;
  static constexpr Method METHOD_GET = HttpResource_Method_METHOD_GET;
  static constexpr Method METHOD_POST = HttpResource_Method_METHOD_POST;
  static constexpr Method METHOD_PUT = HttpResource_Method_METHOD_PUT;
  static inline bool Method_IsValid(int value) {
    return HttpResource_Method_IsValid(value);
  }
  static constexpr Method Method_MIN = HttpResource_Method_Method_MIN;
  static constexpr Method Method_MAX = HttpResource_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE = HttpResource_Method_Method_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Method_descriptor() {
    return HttpResource_Method_descriptor();
  }
  template <typename T>
  static inline const std::string& Method_Name(T value) {
    return HttpResource_Method_Name(value);
  }
  static inline bool Method_Parse(absl::string_view name, Method* value) {
    return HttpResource_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kUrlFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // repeated .speechly.slu.v1.HttpResource.Header headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  ::speechly::slu::v1::HttpResource_Header* mutable_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >*
      mutable_headers();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::HttpResource_Header>& _internal_headers() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::HttpResource_Header>* _internal_mutable_headers();
  public:
  const ::speechly::slu::v1::HttpResource_Header& headers(int index) const;
  ::speechly::slu::v1::HttpResource_Header* add_headers();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >&
      headers() const;
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // .speechly.slu.v1.HttpResource.Method method = 2;
  void clear_method() ;
  ::speechly::slu::v1::HttpResource_Method method() const;
  void set_method(::speechly::slu::v1::HttpResource_Method value);

  private:
  ::speechly::slu::v1::HttpResource_Method _internal_method() const;
  void _internal_set_method(::speechly::slu::v1::HttpResource_Method value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.HttpResource)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header > headers_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    int method_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};// -------------------------------------------------------------------

class Operation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Operation(::google::protobuf::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Operation& from) {
    Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.Operation";
  }
  protected:
  explicit Operation(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Status = Operation_Status;
  static constexpr Status STATUS_INVALID = Operation_Status_STATUS_INVALID;
  static constexpr Status STATUS_QUEUED = Operation_Status_STATUS_QUEUED;
  static constexpr Status STATUS_PROCESSING = Operation_Status_STATUS_PROCESSING;
  static constexpr Status STATUS_DONE = Operation_Status_STATUS_DONE;
  static constexpr Status STATUS_ERROR = Operation_Status_STATUS_ERROR;
  static constexpr Status STATUS_ANALYSING = Operation_Status_STATUS_ANALYSING;
  static constexpr Status STATUS_WAITING_DECODER = Operation_Status_STATUS_WAITING_DECODER;
  static inline bool Status_IsValid(int value) {
    return Operation_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = Operation_Status_Status_MIN;
  static constexpr Status Status_MAX = Operation_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = Operation_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return Operation_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return Operation_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return Operation_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptsFieldNumber = 7,
    kIdFieldNumber = 1,
    kReferenceFieldNumber = 2,
    kLanguageCodeFieldNumber = 4,
    kAppIdFieldNumber = 5,
    kDeviceIdFieldNumber = 6,
    kErrorFieldNumber = 8,
    kDurationFieldNumber = 9,
    kStatusFieldNumber = 3,
  };
  // repeated .speechly.slu.v1.Transcript transcripts = 7;
  int transcripts_size() const;
  private:
  int _internal_transcripts_size() const;

  public:
  void clear_transcripts() ;
  ::speechly::slu::v1::Transcript* mutable_transcripts(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Transcript >*
      mutable_transcripts();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Transcript>& _internal_transcripts() const;
  ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Transcript>* _internal_mutable_transcripts();
  public:
  const ::speechly::slu::v1::Transcript& transcripts(int index) const;
  ::speechly::slu::v1::Transcript* add_transcripts();
  const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Transcript >&
      transcripts() const;
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string reference = 2;
  void clear_reference() ;
  const std::string& reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reference(Arg_&& arg, Args_... args);
  std::string* mutable_reference();
  PROTOBUF_NODISCARD std::string* release_reference();
  void set_allocated_reference(std::string* ptr);

  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(
      const std::string& value);
  std::string* _internal_mutable_reference();

  public:
  // string language_code = 4;
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* ptr);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // string app_id = 5;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string device_id = 6;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* ptr);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string error = 8;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* ptr);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // .google.protobuf.Duration duration = 9;
  bool has_duration() const;
  void clear_duration() ;
  const ::google::protobuf::Duration& duration() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_duration(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_duration();

  private:
  const ::google::protobuf::Duration& _internal_duration() const;
  ::google::protobuf::Duration* _internal_mutable_duration();

  public:
  // .speechly.slu.v1.Operation.Status status = 3;
  void clear_status() ;
  ::speechly::slu::v1::Operation_Status status() const;
  void set_status(::speechly::slu::v1::Operation_Status value);

  private:
  ::speechly::slu::v1::Operation_Status _internal_status() const;
  void _internal_set_status(::speechly::slu::v1::Operation_Status value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.Operation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 2, 86, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Transcript > transcripts_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr reference_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::Duration* duration_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};// -------------------------------------------------------------------

class Transcript final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.Transcript) */ {
 public:
  inline Transcript() : Transcript(nullptr) {}
  ~Transcript() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Transcript(::google::protobuf::internal::ConstantInitialized);

  Transcript(const Transcript& from);
  Transcript(Transcript&& from) noexcept
    : Transcript() {
    *this = ::std::move(from);
  }

  inline Transcript& operator=(const Transcript& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transcript& operator=(Transcript&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transcript& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transcript* internal_default_instance() {
    return reinterpret_cast<const Transcript*>(
               &_Transcript_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transcript& a, Transcript& b) {
    a.Swap(&b);
  }
  inline void Swap(Transcript* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transcript* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transcript* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transcript>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transcript& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Transcript& from) {
    Transcript::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transcript* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.Transcript";
  }
  protected:
  explicit Transcript(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kIndexFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // string word = 1;
  void clear_word() ;
  const std::string& word() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_word(Arg_&& arg, Args_... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* ptr);

  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(
      const std::string& value);
  std::string* _internal_mutable_word();

  public:
  // int32 index = 2;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 start_time = 3;
  void clear_start_time() ;
  ::int32_t start_time() const;
  void set_start_time(::int32_t value);

  private:
  ::int32_t _internal_start_time() const;
  void _internal_set_start_time(::int32_t value);

  public:
  // int32 end_time = 4;
  void clear_end_time() ;
  ::int32_t end_time() const;
  void set_end_time(::int32_t value);

  private:
  ::int32_t _internal_end_time() const;
  void _internal_set_end_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.Transcript)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr word_;
    ::int32_t index_;
    ::int32_t start_time_;
    ::int32_t end_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};// -------------------------------------------------------------------

class Option final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.slu.v1.Option) */ {
 public:
  inline Option() : Option(nullptr) {}
  ~Option() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Option(::google::protobuf::internal::ConstantInitialized);

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Option* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Option* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Option& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Option& from) {
    Option::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.slu.v1.Option";
  }
  protected:
  explicit Option(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, std::size_t size);
  void set_value(int index, absl::string_view value);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, std::size_t size);
  void add_value(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_value();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_value();

  public:
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:speechly.slu.v1.Option)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> value_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fslu_2fv1_2fbatch_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AudioConfiguration

// .speechly.slu.v1.AudioConfiguration.Encoding encoding = 1;
inline void AudioConfiguration::clear_encoding() {
  _impl_.encoding_ = 0;
}
inline ::speechly::slu::v1::AudioConfiguration_Encoding AudioConfiguration::encoding() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.encoding)
  return _internal_encoding();
}
inline void AudioConfiguration::set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.encoding)
}
inline ::speechly::slu::v1::AudioConfiguration_Encoding AudioConfiguration::_internal_encoding() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::slu::v1::AudioConfiguration_Encoding>(_impl_.encoding_);
}
inline void AudioConfiguration::_internal_set_encoding(::speechly::slu::v1::AudioConfiguration_Encoding value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.encoding_ = value;
}

// int32 channels = 2;
inline void AudioConfiguration::clear_channels() {
  _impl_.channels_ = 0;
}
inline ::int32_t AudioConfiguration::channels() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.channels)
  return _internal_channels();
}
inline void AudioConfiguration::set_channels(::int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.channels)
}
inline ::int32_t AudioConfiguration::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline void AudioConfiguration::_internal_set_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channels_ = value;
}

// int32 sample_rate_hertz = 3;
inline void AudioConfiguration::clear_sample_rate_hertz() {
  _impl_.sample_rate_hertz_ = 0;
}
inline ::int32_t AudioConfiguration::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void AudioConfiguration::set_sample_rate_hertz(::int32_t value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.sample_rate_hertz)
}
inline ::int32_t AudioConfiguration::_internal_sample_rate_hertz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sample_rate_hertz_;
}
inline void AudioConfiguration::_internal_set_sample_rate_hertz(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sample_rate_hertz_ = value;
}

// repeated string language_codes = 4;
inline int AudioConfiguration::_internal_language_codes_size() const {
  return _internal_language_codes().size();
}
inline int AudioConfiguration::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void AudioConfiguration::clear_language_codes() {
  _internal_mutable_language_codes()->Clear();
}
inline std::string* AudioConfiguration::add_language_codes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_language_codes()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v1.AudioConfiguration.language_codes)
  return _s;
}
inline const std::string& AudioConfiguration::language_codes(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.AudioConfiguration.language_codes)
  return _internal_language_codes().Get(index);
}
inline std::string* AudioConfiguration::mutable_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.AudioConfiguration.language_codes)
  return _internal_mutable_language_codes()->Mutable(index);
}
inline void AudioConfiguration::set_language_codes(int index, const std::string& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::set_language_codes(int index, std::string&& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::set_language_codes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::set_language_codes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_language_codes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::set_language_codes(int index, absl::string_view value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline void AudioConfiguration::add_language_codes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.slu.v1.AudioConfiguration.language_codes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AudioConfiguration::language_codes() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.AudioConfiguration.language_codes)
  return _internal_language_codes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* AudioConfiguration::mutable_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.AudioConfiguration.language_codes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_language_codes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AudioConfiguration::_internal_language_codes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_codes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AudioConfiguration::_internal_mutable_language_codes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.language_codes_;
}

// -------------------------------------------------------------------

// HttpResource_Header

// string name = 1;
inline void HttpResource_Header::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HttpResource_Header::name() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.Header.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResource_Header::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.Header.name)
}
inline std::string* HttpResource_Header::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.Header.name)
  return _s;
}
inline const std::string& HttpResource_Header::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void HttpResource_Header::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResource_Header::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.HttpResource.Header.name)
  return _impl_.name_.Release();
}
inline void HttpResource_Header::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.HttpResource.Header.name)
}

// string value = 2;
inline void HttpResource_Header::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& HttpResource_Header::value() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.Header.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResource_Header::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.Header.value)
}
inline std::string* HttpResource_Header::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.Header.value)
  return _s;
}
inline const std::string& HttpResource_Header::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void HttpResource_Header::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResource_Header::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResource_Header::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.HttpResource.Header.value)
  return _impl_.value_.Release();
}
inline void HttpResource_Header::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.HttpResource.Header.value)
}

// -------------------------------------------------------------------

// HttpResource

// string url = 1;
inline void HttpResource::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& HttpResource::url() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResource::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.url)
}
inline std::string* HttpResource::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.url)
  return _s;
}
inline const std::string& HttpResource::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void HttpResource::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResource::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResource::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.HttpResource.url)
  return _impl_.url_.Release();
}
inline void HttpResource::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.HttpResource.url)
}

// .speechly.slu.v1.HttpResource.Method method = 2;
inline void HttpResource::clear_method() {
  _impl_.method_ = 0;
}
inline ::speechly::slu::v1::HttpResource_Method HttpResource::method() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.method)
  return _internal_method();
}
inline void HttpResource::set_method(::speechly::slu::v1::HttpResource_Method value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.HttpResource.method)
}
inline ::speechly::slu::v1::HttpResource_Method HttpResource::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::slu::v1::HttpResource_Method>(_impl_.method_);
}
inline void HttpResource::_internal_set_method(::speechly::slu::v1::HttpResource_Method value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_ = value;
}

// repeated .speechly.slu.v1.HttpResource.Header headers = 3;
inline int HttpResource::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int HttpResource::headers_size() const {
  return _internal_headers_size();
}
inline void HttpResource::clear_headers() {
  _internal_mutable_headers()->Clear();
}
inline ::speechly::slu::v1::HttpResource_Header* HttpResource::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.HttpResource.headers)
  return _internal_mutable_headers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >*
HttpResource::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.HttpResource.headers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_headers();
}
inline const ::speechly::slu::v1::HttpResource_Header& HttpResource::headers(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.HttpResource.headers)
    return _internal_headers().Get(index);
}
inline ::speechly::slu::v1::HttpResource_Header* HttpResource::add_headers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::HttpResource_Header* _add = _internal_mutable_headers()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.HttpResource.headers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::HttpResource_Header >&
HttpResource::headers() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.HttpResource.headers)
  return _internal_headers();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::HttpResource_Header>&
HttpResource::_internal_headers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.headers_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::HttpResource_Header>*
HttpResource::_internal_mutable_headers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.headers_;
}

// -------------------------------------------------------------------

// Operation

// string id = 1;
inline void Operation::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Operation::id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.id)
}
inline std::string* Operation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.id)
  return _s;
}
inline const std::string& Operation::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Operation::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.id)
  return _impl_.id_.Release();
}
inline void Operation::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.id)
}

// string reference = 2;
inline void Operation::clear_reference() {
  _impl_.reference_.ClearToEmpty();
}
inline const std::string& Operation::reference() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.reference)
  return _internal_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_reference(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.reference)
}
inline std::string* Operation::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.reference)
  return _s;
}
inline const std::string& Operation::_internal_reference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reference_.Get();
}
inline void Operation::_internal_set_reference(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reference_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reference_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_reference() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.reference)
  return _impl_.reference_.Release();
}
inline void Operation::set_allocated_reference(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reference_.IsDefault()) {
          _impl_.reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.reference)
}

// .speechly.slu.v1.Operation.Status status = 3;
inline void Operation::clear_status() {
  _impl_.status_ = 0;
}
inline ::speechly::slu::v1::Operation_Status Operation::status() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.status)
  return _internal_status();
}
inline void Operation::set_status(::speechly::slu::v1::Operation_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.status)
}
inline ::speechly::slu::v1::Operation_Status Operation::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::slu::v1::Operation_Status>(_impl_.status_);
}
inline void Operation::_internal_set_status(::speechly::slu::v1::Operation_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// string language_code = 4;
inline void Operation::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& Operation::language_code() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.language_code)
}
inline std::string* Operation::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.language_code)
  return _s;
}
inline const std::string& Operation::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void Operation::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.language_code)
  return _impl_.language_code_.Release();
}
inline void Operation::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.language_code)
}

// string app_id = 5;
inline void Operation::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& Operation::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.app_id)
}
inline std::string* Operation::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.app_id)
  return _s;
}
inline const std::string& Operation::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void Operation::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.app_id)
  return _impl_.app_id_.Release();
}
inline void Operation::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.app_id)
}

// string device_id = 6;
inline void Operation::clear_device_id() {
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& Operation::device_id() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.device_id)
}
inline std::string* Operation::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.device_id)
  return _s;
}
inline const std::string& Operation::_internal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_id_.Get();
}
inline void Operation::_internal_set_device_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.device_id)
  return _impl_.device_id_.Release();
}
inline void Operation::set_allocated_device_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_id_.IsDefault()) {
          _impl_.device_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.device_id)
}

// repeated .speechly.slu.v1.Transcript transcripts = 7;
inline int Operation::_internal_transcripts_size() const {
  return _internal_transcripts().size();
}
inline int Operation::transcripts_size() const {
  return _internal_transcripts_size();
}
inline void Operation::clear_transcripts() {
  _internal_mutable_transcripts()->Clear();
}
inline ::speechly::slu::v1::Transcript* Operation::mutable_transcripts(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.transcripts)
  return _internal_mutable_transcripts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Transcript >*
Operation::mutable_transcripts() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.Operation.transcripts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_transcripts();
}
inline const ::speechly::slu::v1::Transcript& Operation::transcripts(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.transcripts)
    return _internal_transcripts().Get(index);
}
inline ::speechly::slu::v1::Transcript* Operation::add_transcripts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::slu::v1::Transcript* _add = _internal_mutable_transcripts()->Add();
  // @@protoc_insertion_point(field_add:speechly.slu.v1.Operation.transcripts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::slu::v1::Transcript >&
Operation::transcripts() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.Operation.transcripts)
  return _internal_transcripts();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Transcript>&
Operation::_internal_transcripts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transcripts_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::slu::v1::Transcript>*
Operation::_internal_mutable_transcripts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.transcripts_;
}

// string error = 8;
inline void Operation::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& Operation::error() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Operation.error)
}
inline std::string* Operation::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.error)
  return _s;
}
inline const std::string& Operation::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void Operation::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArenaForAllocation());
}
inline std::string* Operation::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.error)
  return _impl_.error_.Release();
}
inline void Operation::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.error)
}

// .google.protobuf.Duration duration = 9;
inline bool Operation::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.duration_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& Operation::_internal_duration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& Operation::duration() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Operation.duration)
  return _internal_duration();
}
inline void Operation::unsafe_arena_set_allocated_duration(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.slu.v1.Operation.duration)
}
inline ::google::protobuf::Duration* Operation::release_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* Operation::unsafe_arena_release_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Operation.duration)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* Operation::_internal_mutable_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
    _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.duration_;
}
inline ::google::protobuf::Duration* Operation::mutable_duration() {
  ::google::protobuf::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Operation.duration)
  return _msg;
}
inline void Operation::set_allocated_duration(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Operation.duration)
}

// -------------------------------------------------------------------

// Transcript

// string word = 1;
inline void Transcript::clear_word() {
  _impl_.word_.ClearToEmpty();
}
inline const std::string& Transcript::word() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.word)
  return _internal_word();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transcript::set_word(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.word)
}
inline std::string* Transcript::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Transcript.word)
  return _s;
}
inline const std::string& Transcript::_internal_word() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.word_.Get();
}
inline void Transcript::_internal_set_word(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word_.Set(value, GetArenaForAllocation());
}
inline std::string* Transcript::_internal_mutable_word() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.word_.Mutable( GetArenaForAllocation());
}
inline std::string* Transcript::release_word() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Transcript.word)
  return _impl_.word_.Release();
}
inline void Transcript::set_allocated_word(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.word_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.word_.IsDefault()) {
          _impl_.word_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Transcript.word)
}

// int32 index = 2;
inline void Transcript::clear_index() {
  _impl_.index_ = 0;
}
inline ::int32_t Transcript::index() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.index)
  return _internal_index();
}
inline void Transcript::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.index)
}
inline ::int32_t Transcript::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void Transcript::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// int32 start_time = 3;
inline void Transcript::clear_start_time() {
  _impl_.start_time_ = 0;
}
inline ::int32_t Transcript::start_time() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.start_time)
  return _internal_start_time();
}
inline void Transcript::set_start_time(::int32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.start_time)
}
inline ::int32_t Transcript::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_;
}
inline void Transcript::_internal_set_start_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_ = value;
}

// int32 end_time = 4;
inline void Transcript::clear_end_time() {
  _impl_.end_time_ = 0;
}
inline ::int32_t Transcript::end_time() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Transcript.end_time)
  return _internal_end_time();
}
inline void Transcript::set_end_time(::int32_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Transcript.end_time)
}
inline ::int32_t Transcript::_internal_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_time_;
}
inline void Transcript::_internal_set_end_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_time_ = value;
}

// -------------------------------------------------------------------

// Option

// string key = 1;
inline void Option::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Option::key() const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Option.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Option.key)
}
inline std::string* Option::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Option.key)
  return _s;
}
inline const std::string& Option::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void Option::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Option::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* Option::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.slu.v1.Option.key)
  return _impl_.key_.Release();
}
inline void Option::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.slu.v1.Option.key)
}

// repeated string value = 2;
inline int Option::_internal_value_size() const {
  return _internal_value().size();
}
inline int Option::value_size() const {
  return _internal_value_size();
}
inline void Option::clear_value() {
  _internal_mutable_value()->Clear();
}
inline std::string* Option::add_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_value()->Add();
  // @@protoc_insertion_point(field_add_mutable:speechly.slu.v1.Option.value)
  return _s;
}
inline const std::string& Option::value(int index) const {
  // @@protoc_insertion_point(field_get:speechly.slu.v1.Option.value)
  return _internal_value().Get(index);
}
inline std::string* Option::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.slu.v1.Option.value)
  return _internal_mutable_value()->Mutable(index);
}
inline void Option::set_value(int index, const std::string& value) {
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Option.value)
}
inline void Option::set_value(int index, std::string&& value) {
  _internal_mutable_value()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:speechly.slu.v1.Option.value)
}
inline void Option::set_value(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speechly.slu.v1.Option.value)
}
inline void Option::set_value(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_value()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speechly.slu.v1.Option.value)
}
inline void Option::set_value(int index, absl::string_view value) {
  _internal_mutable_value()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:speechly.slu.v1.Option.value)
}
inline void Option::add_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:speechly.slu.v1.Option.value)
}
inline void Option::add_value(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:speechly.slu.v1.Option.value)
}
inline void Option::add_value(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speechly.slu.v1.Option.value)
}
inline void Option::add_value(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speechly.slu.v1.Option.value)
}
inline void Option::add_value(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:speechly.slu.v1.Option.value)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Option::value() const {
  // @@protoc_insertion_point(field_list:speechly.slu.v1.Option.value)
  return _internal_value();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Option::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:speechly.slu.v1.Option.value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_value();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Option::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Option::_internal_mutable_value() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.value_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slu
}  // namespace speechly


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::speechly::slu::v1::AudioConfiguration_Encoding> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::slu::v1::AudioConfiguration_Encoding>() {
  return ::speechly::slu::v1::AudioConfiguration_Encoding_descriptor();
}
template <>
struct is_proto_enum<::speechly::slu::v1::HttpResource_Method> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::slu::v1::HttpResource_Method>() {
  return ::speechly::slu::v1::HttpResource_Method_descriptor();
}
template <>
struct is_proto_enum<::speechly::slu::v1::Operation_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::slu::v1::Operation_Status>() {
  return ::speechly::slu::v1::Operation_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fslu_2fv1_2fbatch_2eproto_2epb_2eh
