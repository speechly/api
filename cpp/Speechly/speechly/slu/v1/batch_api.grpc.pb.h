// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/slu/v1/batch_api.proto
#ifndef GRPC_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto__INCLUDED
#define GRPC_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto__INCLUDED

#include "speechly/slu/v1/batch_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace speechly {
namespace slu {
namespace v1 {

// Run SLU operations on audio sources without actively waiting the results.
class BatchAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "speechly.slu.v1.BatchAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a new background SLU operation for a single audio source.
    // An audio source can be
    //  - audio chunks sent via repeated ProcessAudioRequests, or
    //  - URI of a file, reachable from the API
    //  The response includes an `id` that is used to match the operation to the
    //  results. A `reference` identifier can also be set.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>> ProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>>(ProcessAudioRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>> AsyncProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>>(AsyncProcessAudioRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>> PrepareAsyncProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>>(PrepareAsyncProcessAudioRaw(context, response, cq));
    }
    // Query the status of a given batch operation.
    virtual ::grpc::Status QueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::speechly::slu::v1::QueryStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::slu::v1::QueryStatusResponse>> AsyncQueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::slu::v1::QueryStatusResponse>>(AsyncQueryStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::slu::v1::QueryStatusResponse>> PrepareAsyncQueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::slu::v1::QueryStatusResponse>>(PrepareAsyncQueryStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a new background SLU operation for a single audio source.
      // An audio source can be
      //  - audio chunks sent via repeated ProcessAudioRequests, or
      //  - URI of a file, reachable from the API
      //  The response includes an `id` that is used to match the operation to the
      //  results. A `reference` identifier can also be set.
      virtual void ProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::experimental::ClientWriteReactor< ::speechly::slu::v1::ProcessAudioRequest>* reactor) = 0;
      // Query the status of a given batch operation.
      virtual void QueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest* request, ::speechly::slu::v1::QueryStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::QueryStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest* request, ::speechly::slu::v1::QueryStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void QueryStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::QueryStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>* ProcessAudioRaw(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>* AsyncProcessAudioRaw(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::slu::v1::ProcessAudioRequest>* PrepareAsyncProcessAudioRaw(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::slu::v1::QueryStatusResponse>* AsyncQueryStatusRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::slu::v1::QueryStatusResponse>* PrepareAsyncQueryStatusRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::speechly::slu::v1::ProcessAudioRequest>> ProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::speechly::slu::v1::ProcessAudioRequest>>(ProcessAudioRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::slu::v1::ProcessAudioRequest>> AsyncProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::slu::v1::ProcessAudioRequest>>(AsyncProcessAudioRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::slu::v1::ProcessAudioRequest>> PrepareAsyncProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::slu::v1::ProcessAudioRequest>>(PrepareAsyncProcessAudioRaw(context, response, cq));
    }
    ::grpc::Status QueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::speechly::slu::v1::QueryStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::QueryStatusResponse>> AsyncQueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::QueryStatusResponse>>(AsyncQueryStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::QueryStatusResponse>> PrepareAsyncQueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::QueryStatusResponse>>(PrepareAsyncQueryStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ProcessAudio(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::experimental::ClientWriteReactor< ::speechly::slu::v1::ProcessAudioRequest>* reactor) override;
      void QueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest* request, ::speechly::slu::v1::QueryStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::QueryStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryStatus(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest* request, ::speechly::slu::v1::QueryStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void QueryStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::slu::v1::QueryStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::speechly::slu::v1::ProcessAudioRequest>* ProcessAudioRaw(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response) override;
    ::grpc::ClientAsyncWriter< ::speechly::slu::v1::ProcessAudioRequest>* AsyncProcessAudioRaw(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::speechly::slu::v1::ProcessAudioRequest>* PrepareAsyncProcessAudioRaw(::grpc::ClientContext* context, ::speechly::slu::v1::ProcessAudioResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::QueryStatusResponse>* AsyncQueryStatusRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::slu::v1::QueryStatusResponse>* PrepareAsyncQueryStatusRaw(::grpc::ClientContext* context, const ::speechly::slu::v1::QueryStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessAudio_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a new background SLU operation for a single audio source.
    // An audio source can be
    //  - audio chunks sent via repeated ProcessAudioRequests, or
    //  - URI of a file, reachable from the API
    //  The response includes an `id` that is used to match the operation to the
    //  results. A `reference` identifier can also be set.
    virtual ::grpc::Status ProcessAudio(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::slu::v1::ProcessAudioRequest>* reader, ::speechly::slu::v1::ProcessAudioResponse* response);
    // Query the status of a given batch operation.
    virtual ::grpc::Status QueryStatus(::grpc::ServerContext* context, const ::speechly::slu::v1::QueryStatusRequest* request, ::speechly::slu::v1::QueryStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessAudio() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::slu::v1::ProcessAudioRequest>* /*reader*/, ::speechly::slu::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessAudio(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::speechly::slu::v1::ProcessAudioResponse, ::speechly::slu::v1::ProcessAudioRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStatus(::grpc::ServerContext* /*context*/, const ::speechly::slu::v1::QueryStatusRequest* /*request*/, ::speechly::slu::v1::QueryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryStatus(::grpc::ServerContext* context, ::speechly::slu::v1::QueryStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::slu::v1::QueryStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessAudio<WithAsyncMethod_QueryStatus<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProcessAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProcessAudio() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::speechly::slu::v1::ProcessAudioRequest, ::speechly::slu::v1::ProcessAudioResponse>(
          [this] { return this->ProcessAudio(); }));
    }
    ~ExperimentalWithCallbackMethod_ProcessAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::slu::v1::ProcessAudioRequest>* /*reader*/, ::speechly::slu::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::speechly::slu::v1::ProcessAudioRequest, ::speechly::slu::v1::ProcessAudioResponse>* ProcessAudio() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::speechly::slu::v1::ProcessAudioRequest, ::speechly::slu::v1::ProcessAudioResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::slu::v1::QueryStatusRequest, ::speechly::slu::v1::QueryStatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::slu::v1::QueryStatusRequest* request,
                 ::speechly::slu::v1::QueryStatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->QueryStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_QueryStatus(
        ::grpc::experimental::MessageAllocator< ::speechly::slu::v1::QueryStatusRequest, ::speechly::slu::v1::QueryStatusResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::slu::v1::QueryStatusRequest, ::speechly::slu::v1::QueryStatusResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStatus(::grpc::ServerContext* /*context*/, const ::speechly::slu::v1::QueryStatusRequest* /*request*/, ::speechly::slu::v1::QueryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueryStatus(::grpc::ServerContext* /*context*/, const ::speechly::slu::v1::QueryStatusRequest* /*request*/, ::speechly::slu::v1::QueryStatusResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ProcessAudio<ExperimentalWithCallbackMethod_QueryStatus<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessAudio() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::slu::v1::ProcessAudioRequest>* /*reader*/, ::speechly::slu::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStatus(::grpc::ServerContext* /*context*/, const ::speechly::slu::v1::QueryStatusRequest* /*request*/, ::speechly::slu::v1::QueryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessAudio() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::slu::v1::ProcessAudioRequest>* /*reader*/, ::speechly::slu::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessAudio(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStatus(::grpc::ServerContext* /*context*/, const ::speechly::slu::v1::QueryStatusRequest* /*request*/, ::speechly::slu::v1::QueryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProcessAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProcessAudio() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ProcessAudio(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProcessAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::slu::v1::ProcessAudioRequest>* /*reader*/, ::speechly::slu::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ProcessAudio() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->QueryStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStatus(::grpc::ServerContext* /*context*/, const ::speechly::slu::v1::QueryStatusRequest* /*request*/, ::speechly::slu::v1::QueryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueryStatus(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::slu::v1::QueryStatusRequest, ::speechly::slu::v1::QueryStatusResponse>(std::bind(&WithStreamedUnaryMethod_QueryStatus<BaseClass>::StreamedQueryStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryStatus(::grpc::ServerContext* /*context*/, const ::speechly::slu::v1::QueryStatusRequest* /*request*/, ::speechly::slu::v1::QueryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::slu::v1::QueryStatusRequest,::speechly::slu::v1::QueryStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QueryStatus<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QueryStatus<Service > StreamedService;
};

}  // namespace v1
}  // namespace slu
}  // namespace speechly


#endif  // GRPC_speechly_2fslu_2fv1_2fbatch_5fapi_2eproto__INCLUDED
