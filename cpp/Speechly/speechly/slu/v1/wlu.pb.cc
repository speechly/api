// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/wlu.proto

#include "speechly/slu/v1/wlu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace slu {
namespace v1 {
constexpr TextsRequest::TextsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_(){}
struct TextsRequestDefaultTypeInternal {
  constexpr TextsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextsRequestDefaultTypeInternal() {}
  union {
    TextsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextsRequestDefaultTypeInternal _TextsRequest_default_instance_;
constexpr TextsResponse::TextsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_(){}
struct TextsResponseDefaultTypeInternal {
  constexpr TextsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextsResponseDefaultTypeInternal() {}
  union {
    TextsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextsResponseDefaultTypeInternal _TextsResponse_default_instance_;
constexpr WLURequest::WLURequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WLURequestDefaultTypeInternal {
  constexpr WLURequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WLURequestDefaultTypeInternal() {}
  union {
    WLURequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WLURequestDefaultTypeInternal _WLURequest_default_instance_;
constexpr WLUResponse::WLUResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_(){}
struct WLUResponseDefaultTypeInternal {
  constexpr WLUResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WLUResponseDefaultTypeInternal() {}
  union {
    WLUResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WLUResponseDefaultTypeInternal _WLUResponse_default_instance_;
constexpr WLUSegment::WLUSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tokens_()
  , entities_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , annotated_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , intent_(nullptr){}
struct WLUSegmentDefaultTypeInternal {
  constexpr WLUSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WLUSegmentDefaultTypeInternal() {}
  union {
    WLUSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WLUSegmentDefaultTypeInternal _WLUSegment_default_instance_;
constexpr WLUToken::WLUToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0){}
struct WLUTokenDefaultTypeInternal {
  constexpr WLUTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WLUTokenDefaultTypeInternal() {}
  union {
    WLUToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WLUTokenDefaultTypeInternal _WLUToken_default_instance_;
constexpr WLUEntity::WLUEntity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_position_(0)
  , end_position_(0){}
struct WLUEntityDefaultTypeInternal {
  constexpr WLUEntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WLUEntityDefaultTypeInternal() {}
  union {
    WLUEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WLUEntityDefaultTypeInternal _WLUEntity_default_instance_;
constexpr WLUIntent::WLUIntent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WLUIntentDefaultTypeInternal {
  constexpr WLUIntentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WLUIntentDefaultTypeInternal() {}
  union {
    WLUIntent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WLUIntentDefaultTypeInternal _WLUIntent_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLURequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLURequest, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUResponse, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, text_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, tokens_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, entities_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, intent_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, annotated_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUToken, word_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUToken, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, entity_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, value_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, start_position_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, end_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUIntent, intent_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::slu::v1::TextsRequest)},
  { 6, -1, sizeof(::speechly::slu::v1::TextsResponse)},
  { 12, -1, sizeof(::speechly::slu::v1::WLURequest)},
  { 19, -1, sizeof(::speechly::slu::v1::WLUResponse)},
  { 25, -1, sizeof(::speechly::slu::v1::WLUSegment)},
  { 35, -1, sizeof(::speechly::slu::v1::WLUToken)},
  { 42, -1, sizeof(::speechly::slu::v1::WLUEntity)},
  { 51, -1, sizeof(::speechly::slu::v1::WLUIntent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_TextsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_TextsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLURequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUIntent_default_instance_),
};

const char descriptor_table_protodef_speechly_2fslu_2fv1_2fwlu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031speechly/slu/v1/wlu.proto\022\017speechly.sl"
  "u.v1\"=\n\014TextsRequest\022-\n\010requests\030\001 \003(\0132\033"
  ".speechly.slu.v1.WLURequest\"@\n\rTextsResp"
  "onse\022/\n\tresponses\030\001 \003(\0132\034.speechly.slu.v"
  "1.WLUResponse\"1\n\nWLURequest\022\025\n\rlanguage_"
  "code\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\"<\n\013WLUResponse\022"
  "-\n\010segments\030\001 \003(\0132\033.speechly.slu.v1.WLUS"
  "egment\"\267\001\n\nWLUSegment\022\014\n\004text\030\001 \001(\t\022)\n\006t"
  "okens\030\002 \003(\0132\031.speechly.slu.v1.WLUToken\022,"
  "\n\010entities\030\003 \003(\0132\032.speechly.slu.v1.WLUEn"
  "tity\022*\n\006intent\030\004 \001(\0132\032.speechly.slu.v1.W"
  "LUIntent\022\026\n\016annotated_text\030\005 \001(\t\"\'\n\010WLUT"
  "oken\022\014\n\004word\030\001 \001(\t\022\r\n\005index\030\002 \001(\005\"X\n\tWLU"
  "Entity\022\016\n\006entity\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\026\n"
  "\016start_position\030\003 \001(\005\022\024\n\014end_position\030\004 "
  "\001(\005\"\033\n\tWLUIntent\022\016\n\006intent\030\001 \001(\t2\220\001\n\003WLU"
  "\022A\n\004Text\022\033.speechly.slu.v1.WLURequest\032\034."
  "speechly.slu.v1.WLUResponse\022F\n\005Texts\022\035.s"
  "peechly.slu.v1.TextsRequest\032\036.speechly.s"
  "lu.v1.TextsResponseBf\n\027com.speechly.api."
  "slu.v1B\010WluProtoP\001Z\025speechly/slu/v1;sluv"
  "1\242\002\003SSX\252\002\017Speechly.Slu.V1\312\002\017Speechly\\Slu"
  "\\V1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto = {
  false, false, 891, descriptor_table_protodef_speechly_2fslu_2fv1_2fwlu_2eproto, "speechly/slu/v1/wlu.proto", 
  &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto::offsets,
  file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto, file_level_enum_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto, file_level_service_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter() {
  return &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fslu_2fv1_2fwlu_2eproto(&descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto);
namespace speechly {
namespace slu {
namespace v1 {

// ===================================================================

class TextsRequest::_Internal {
 public:
};

TextsRequest::TextsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.TextsRequest)
}
TextsRequest::TextsRequest(const TextsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.TextsRequest)
}

inline void TextsRequest::SharedCtor() {
}

TextsRequest::~TextsRequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.TextsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TextsRequest::ArenaDtor(void* object) {
  TextsRequest* _this = reinterpret_cast< TextsRequest* >(object);
  (void)_this;
}
void TextsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.TextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.slu.v1.WLURequest requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.TextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLURequest requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.TextsRequest)
  return target;
}

size_t TextsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.TextsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLURequest requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextsRequest::GetClassData() const { return &_class_data_; }

void TextsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TextsRequest *>(to)->MergeFrom(
      static_cast<const TextsRequest &>(from));
}


void TextsRequest::MergeFrom(const TextsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.TextsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextsRequest::CopyFrom(const TextsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.TextsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextsRequest::IsInitialized() const {
  return true;
}

void TextsRequest::InternalSwap(TextsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[0]);
}

// ===================================================================

class TextsResponse::_Internal {
 public:
};

TextsResponse::TextsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.TextsResponse)
}
TextsResponse::TextsResponse(const TextsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.TextsResponse)
}

inline void TextsResponse::SharedCtor() {
}

TextsResponse::~TextsResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.TextsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TextsResponse::ArenaDtor(void* object) {
  TextsResponse* _this = reinterpret_cast< TextsResponse* >(object);
  (void)_this;
}
void TextsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.TextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.slu.v1.WLUResponse responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.TextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUResponse responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.TextsResponse)
  return target;
}

size_t TextsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.TextsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUResponse responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextsResponse::GetClassData() const { return &_class_data_; }

void TextsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TextsResponse *>(to)->MergeFrom(
      static_cast<const TextsResponse &>(from));
}


void TextsResponse::MergeFrom(const TextsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.TextsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextsResponse::CopyFrom(const TextsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.TextsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextsResponse::IsInitialized() const {
  return true;
}

void TextsResponse::InternalSwap(TextsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[1]);
}

// ===================================================================

class WLURequest::_Internal {
 public:
};

WLURequest::WLURequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.WLURequest)
}
WLURequest::WLURequest(const WLURequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLURequest)
}

inline void WLURequest::SharedCtor() {
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WLURequest::~WLURequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLURequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WLURequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WLURequest::ArenaDtor(void* object) {
  WLURequest* _this = reinterpret_cast< WLURequest* >(object);
  (void)_this;
}
void WLURequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WLURequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WLURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmpty();
  text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WLURequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string language_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLURequest.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLURequest.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WLURequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLURequest.language_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_code(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLURequest.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLURequest)
  return target;
}

size_t WLURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLURequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language_code = 1;
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WLURequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WLURequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WLURequest::GetClassData() const { return &_class_data_; }

void WLURequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WLURequest *>(to)->MergeFrom(
      static_cast<const WLURequest &>(from));
}


void WLURequest::MergeFrom(const WLURequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLURequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WLURequest::CopyFrom(const WLURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLURequest::IsInitialized() const {
  return true;
}

void WLURequest::InternalSwap(WLURequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, GetArenaForAllocation(),
      &other->language_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, GetArenaForAllocation(),
      &other->text_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WLURequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[2]);
}

// ===================================================================

class WLUResponse::_Internal {
 public:
};

WLUResponse::WLUResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.WLUResponse)
}
WLUResponse::WLUResponse(const WLUResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUResponse)
}

inline void WLUResponse::SharedCtor() {
}

WLUResponse::~WLUResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WLUResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WLUResponse::ArenaDtor(void* object) {
  WLUResponse* _this = reinterpret_cast< WLUResponse* >(object);
  (void)_this;
}
void WLUResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WLUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WLUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WLUResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.slu.v1.WLUSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUResponse)
  return target;
}

size_t WLUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WLUResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WLUResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WLUResponse::GetClassData() const { return &_class_data_; }

void WLUResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WLUResponse *>(to)->MergeFrom(
      static_cast<const WLUResponse &>(from));
}


void WLUResponse::MergeFrom(const WLUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WLUResponse::CopyFrom(const WLUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUResponse::IsInitialized() const {
  return true;
}

void WLUResponse::InternalSwap(WLUResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[3]);
}

// ===================================================================

class WLUSegment::_Internal {
 public:
  static const ::speechly::slu::v1::WLUIntent& intent(const WLUSegment* msg);
};

const ::speechly::slu::v1::WLUIntent&
WLUSegment::_Internal::intent(const WLUSegment* msg) {
  return *msg->intent_;
}
WLUSegment::WLUSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tokens_(arena),
  entities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.WLUSegment)
}
WLUSegment::WLUSegment(const WLUSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tokens_(from.tokens_),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  annotated_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotated_text().empty()) {
    annotated_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotated_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_intent()) {
    intent_ = new ::speechly::slu::v1::WLUIntent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUSegment)
}

inline void WLUSegment::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
annotated_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
intent_ = nullptr;
}

WLUSegment::~WLUSegment() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WLUSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
}

void WLUSegment::ArenaDtor(void* object) {
  WLUSegment* _this = reinterpret_cast< WLUSegment* >(object);
  (void)_this;
}
void WLUSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WLUSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WLUSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  entities_.Clear();
  text_.ClearToEmpty();
  annotated_text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && intent_ != nullptr) {
    delete intent_;
  }
  intent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WLUSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLUSegment.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v1.WLUToken tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v1.WLUEntity entities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.WLUIntent intent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string annotated_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_annotated_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLUSegment.annotated_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUSegment.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // repeated .speechly.slu.v1.WLUToken tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tokens(i), target, stream);
  }

  // repeated .speechly.slu.v1.WLUEntity entities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entities(i), target, stream);
  }

  // .speechly.slu.v1.WLUIntent intent = 4;
  if (this->_internal_has_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::intent(this), target, stream);
  }

  // string annotated_text = 5;
  if (!this->_internal_annotated_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotated_text().data(), static_cast<int>(this->_internal_annotated_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUSegment.annotated_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_annotated_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUSegment)
  return target;
}

size_t WLUSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUToken tokens = 2;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .speechly.slu.v1.WLUEntity entities = 3;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string annotated_text = 5;
  if (!this->_internal_annotated_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotated_text());
  }

  // .speechly.slu.v1.WLUIntent intent = 4;
  if (this->_internal_has_intent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WLUSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WLUSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WLUSegment::GetClassData() const { return &_class_data_; }

void WLUSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WLUSegment *>(to)->MergeFrom(
      static_cast<const WLUSegment &>(from));
}


void WLUSegment::MergeFrom(const WLUSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUSegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  entities_.MergeFrom(from.entities_);
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_annotated_text().empty()) {
    _internal_set_annotated_text(from._internal_annotated_text());
  }
  if (from._internal_has_intent()) {
    _internal_mutable_intent()->::speechly::slu::v1::WLUIntent::MergeFrom(from._internal_intent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WLUSegment::CopyFrom(const WLUSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUSegment::IsInitialized() const {
  return true;
}

void WLUSegment::InternalSwap(WLUSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tokens_.InternalSwap(&other->tokens_);
  entities_.InternalSwap(&other->entities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, GetArenaForAllocation(),
      &other->text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &annotated_text_, GetArenaForAllocation(),
      &other->annotated_text_, other->GetArenaForAllocation()
  );
  swap(intent_, other->intent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[4]);
}

// ===================================================================

class WLUToken::_Internal {
 public:
};

WLUToken::WLUToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.WLUToken)
}
WLUToken::WLUToken(const WLUToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_word().empty()) {
    word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_word(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUToken)
}

inline void WLUToken::SharedCtor() {
word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
index_ = 0;
}

WLUToken::~WLUToken() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WLUToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WLUToken::ArenaDtor(void* object) {
  WLUToken* _this = reinterpret_cast< WLUToken* >(object);
  (void)_this;
}
void WLUToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WLUToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WLUToken::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WLUToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLUToken.word"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUToken.word");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUToken)
  return target;
}

size_t WLUToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WLUToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WLUToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WLUToken::GetClassData() const { return &_class_data_; }

void WLUToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WLUToken *>(to)->MergeFrom(
      static_cast<const WLUToken &>(from));
}


void WLUToken::MergeFrom(const WLUToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUToken)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_word().empty()) {
    _internal_set_word(from._internal_word());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WLUToken::CopyFrom(const WLUToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUToken::IsInitialized() const {
  return true;
}

void WLUToken::InternalSwap(WLUToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &word_, GetArenaForAllocation(),
      &other->word_, other->GetArenaForAllocation()
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[5]);
}

// ===================================================================

class WLUEntity::_Internal {
 public:
};

WLUEntity::WLUEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.WLUEntity)
}
WLUEntity::WLUEntity(const WLUEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity().empty()) {
    entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_position_, &from.start_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_position_) -
    reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUEntity)
}

inline void WLUEntity::SharedCtor() {
entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_position_) -
    reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
}

WLUEntity::~WLUEntity() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUEntity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WLUEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WLUEntity::ArenaDtor(void* object) {
  WLUEntity* _this = reinterpret_cast< WLUEntity* >(object);
  (void)_this;
}
void WLUEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WLUEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WLUEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_position_) -
      reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WLUEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLUEntity.entity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLUEntity.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (!this->_internal_entity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUEntity.entity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUEntity.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int32 start_position = 3;
  if (this->_internal_start_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_position(), target);
  }

  // int32 end_position = 4;
  if (this->_internal_end_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUEntity)
  return target;
}

size_t WLUEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 1;
  if (!this->_internal_entity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 start_position = 3;
  if (this->_internal_start_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_position());
  }

  // int32 end_position = 4;
  if (this->_internal_end_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WLUEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WLUEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WLUEntity::GetClassData() const { return &_class_data_; }

void WLUEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WLUEntity *>(to)->MergeFrom(
      static_cast<const WLUEntity &>(from));
}


void WLUEntity::MergeFrom(const WLUEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUEntity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity().empty()) {
    _internal_set_entity(from._internal_entity());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_start_position() != 0) {
    _internal_set_start_position(from._internal_start_position());
  }
  if (from._internal_end_position() != 0) {
    _internal_set_end_position(from._internal_end_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WLUEntity::CopyFrom(const WLUEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUEntity::IsInitialized() const {
  return true;
}

void WLUEntity::InternalSwap(WLUEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entity_, GetArenaForAllocation(),
      &other->entity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WLUEntity, end_position_)
      + sizeof(WLUEntity::end_position_)
      - PROTOBUF_FIELD_OFFSET(WLUEntity, start_position_)>(
          reinterpret_cast<char*>(&start_position_),
          reinterpret_cast<char*>(&other->start_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUEntity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[6]);
}

// ===================================================================

class WLUIntent::_Internal {
 public:
};

WLUIntent::WLUIntent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v1.WLUIntent)
}
WLUIntent::WLUIntent(const WLUIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_intent(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUIntent)
}

inline void WLUIntent::SharedCtor() {
intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WLUIntent::~WLUIntent() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUIntent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WLUIntent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WLUIntent::ArenaDtor(void* object) {
  WLUIntent* _this = reinterpret_cast< WLUIntent* >(object);
  (void)_this;
}
void WLUIntent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WLUIntent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WLUIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WLUIntent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string intent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_intent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.slu.v1.WLUIntent.intent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUIntent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string intent = 1;
  if (!this->_internal_intent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUIntent.intent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_intent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUIntent)
  return target;
}

size_t WLUIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUIntent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string intent = 1;
  if (!this->_internal_intent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WLUIntent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WLUIntent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WLUIntent::GetClassData() const { return &_class_data_; }

void WLUIntent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WLUIntent *>(to)->MergeFrom(
      static_cast<const WLUIntent &>(from));
}


void WLUIntent::MergeFrom(const WLUIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUIntent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_intent().empty()) {
    _internal_set_intent(from._internal_intent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WLUIntent::CopyFrom(const WLUIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUIntent::IsInitialized() const {
  return true;
}

void WLUIntent::InternalSwap(WLUIntent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &intent_, GetArenaForAllocation(),
      &other->intent_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUIntent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_getter, &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::TextsRequest* Arena::CreateMaybeMessage< ::speechly::slu::v1::TextsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::TextsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::TextsResponse* Arena::CreateMaybeMessage< ::speechly::slu::v1::TextsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::TextsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLURequest* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLURequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::WLURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUResponse* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::WLUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUSegment* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::WLUSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUToken* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::WLUToken >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUEntity* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::WLUEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUIntent* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUIntent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::slu::v1::WLUIntent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
