// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/slu/v1/slu.proto

#include "speechly/slu/v1/slu.pb.h"
#include "speechly/slu/v1/slu.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace speechly {
namespace slu {
namespace v1 {

static const char* SLU_method_names[] = {
  "/speechly.slu.v1.SLU/Stream",
};

std::unique_ptr< SLU::Stub> SLU::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLU::Stub> stub(new SLU::Stub(channel));
  return stub;
}

SLU::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Stream_(SLU_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::speechly::slu::v1::SLURequest, ::speechly::slu::v1::SLUResponse>* SLU::Stub::StreamRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::speechly::slu::v1::SLURequest, ::speechly::slu::v1::SLUResponse>::Create(channel_.get(), rpcmethod_Stream_, context);
}

void SLU::Stub::experimental_async::Stream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::speechly::slu::v1::SLURequest,::speechly::slu::v1::SLUResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::speechly::slu::v1::SLURequest,::speechly::slu::v1::SLUResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Stream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::speechly::slu::v1::SLURequest, ::speechly::slu::v1::SLUResponse>* SLU::Stub::AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::speechly::slu::v1::SLURequest, ::speechly::slu::v1::SLUResponse>::Create(channel_.get(), cq, rpcmethod_Stream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::speechly::slu::v1::SLURequest, ::speechly::slu::v1::SLUResponse>* SLU::Stub::PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::speechly::slu::v1::SLURequest, ::speechly::slu::v1::SLUResponse>::Create(channel_.get(), cq, rpcmethod_Stream_, context, false, nullptr);
}

SLU::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLU_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SLU::Service, ::speechly::slu::v1::SLURequest, ::speechly::slu::v1::SLUResponse>(
          std::mem_fn(&SLU::Service::Stream), this)));
}

SLU::Service::~Service() {
}

::grpc::Status SLU::Service::Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechly::slu::v1::SLUResponse, ::speechly::slu::v1::SLURequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speechly
}  // namespace slu
}  // namespace v1

