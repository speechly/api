// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v2beta1/batch_api.proto

#include "speechly/slu/v2beta1/batch_api.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace speechly {
namespace slu {
namespace v2beta1 {
        template <typename>
PROTOBUF_CONSTEXPR ProcessAudioSourceRequest::ProcessAudioSourceRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.source_)*/ {},
      /*decltype(_impl_.config_)*/ nullptr,
    } {}
struct ProcessAudioSourceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessAudioSourceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessAudioSourceRequestDefaultTypeInternal() {}
  union {
    ProcessAudioSourceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessAudioSourceRequestDefaultTypeInternal _ProcessAudioSourceRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ProcessAudioSourceResponse::ProcessAudioSourceResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.operation_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ProcessAudioSourceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessAudioSourceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessAudioSourceResponseDefaultTypeInternal() {}
  union {
    ProcessAudioSourceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessAudioSourceResponseDefaultTypeInternal _ProcessAudioSourceResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR QueryStatusRequest::QueryStatusRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.operation_ids_)*/ {},
      /*decltype(_impl_.operation_references_)*/ {},
      /*decltype(_impl_.batch_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.batch_reference_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct QueryStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryStatusRequestDefaultTypeInternal() {}
  union {
    QueryStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryStatusRequestDefaultTypeInternal _QueryStatusRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR QueryStatusResponse::QueryStatusResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.operation_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct QueryStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryStatusResponseDefaultTypeInternal() {}
  union {
    QueryStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
}  // namespace v2beta1
}  // namespace slu
}  // namespace speechly
static ::_pb::Metadata file_level_metadata_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto = nullptr;
const ::uint32_t TableStruct_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::ProcessAudioSourceRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::ProcessAudioSourceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::ProcessAudioSourceRequest, _impl_.config_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::ProcessAudioSourceRequest, _impl_.source_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::ProcessAudioSourceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::ProcessAudioSourceResponse, _impl_.operation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::QueryStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::QueryStatusRequest, _impl_.operation_ids_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::QueryStatusRequest, _impl_.operation_references_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::QueryStatusRequest, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::QueryStatusRequest, _impl_.batch_reference_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::QueryStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::slu::v2beta1::QueryStatusResponse, _impl_.operation_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::speechly::slu::v2beta1::ProcessAudioSourceRequest)},
        {12, -1, -1, sizeof(::speechly::slu::v2beta1::ProcessAudioSourceResponse)},
        {21, -1, -1, sizeof(::speechly::slu::v2beta1::QueryStatusRequest)},
        {33, -1, -1, sizeof(::speechly::slu::v2beta1::QueryStatusResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::speechly::slu::v2beta1::_ProcessAudioSourceRequest_default_instance_._instance,
    &::speechly::slu::v2beta1::_ProcessAudioSourceResponse_default_instance_._instance,
    &::speechly::slu::v2beta1::_QueryStatusRequest_default_instance_._instance,
    &::speechly::slu::v2beta1::_QueryStatusResponse_default_instance_._instance,
};
const char descriptor_table_protodef_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$speechly/slu/v2beta1/batch_api.proto\022\024"
    "speechly.slu.v2beta1\032 speechly/slu/v2bet"
    "a1/batch.proto\"\237\001\n\031ProcessAudioSourceReq"
    "uest\022=\n\006config\030\001 \001(\0132-.speechly.slu.v2be"
    "ta1.ProcessAudioBatchConfig\022C\n\006source\030\002 "
    "\003(\01323.speechly.slu.v2beta1.ProcessAudioS"
    "ourceRequestItem\"P\n\032ProcessAudioSourceRe"
    "sponse\0222\n\toperation\030\001 \003(\0132\037.speechly.slu"
    ".v2beta1.Operation\"t\n\022QueryStatusRequest"
    "\022\025\n\roperation_ids\030\001 \003(\t\022\034\n\024operation_ref"
    "erences\030\002 \003(\t\022\020\n\010batch_id\030\003 \001(\t\022\027\n\017batch"
    "_reference\030\004 \001(\t\"I\n\023QueryStatusResponse\022"
    "2\n\toperation\030\001 \003(\0132\037.speechly.slu.v2beta"
    "1.Operation2\347\001\n\010BatchAPI\022w\n\022ProcessAudio"
    "Source\022/.speechly.slu.v2beta1.ProcessAud"
    "ioSourceRequest\0320.speechly.slu.v2beta1.P"
    "rocessAudioSourceResponse\022b\n\013QueryStatus"
    "\022(.speechly.slu.v2beta1.QueryStatusReque"
    "st\032).speechly.slu.v2beta1.QueryStatusRes"
    "ponseB\200\001\n\030com.speechly.slu.v2beta1B\rBatc"
    "hApiProtoP\001Z\037speechly/slu/v2beta1;sluv2b"
    "eta1\242\002\003SSX\252\002\024Speechly.Slu.V2Beta1\312\002\024Spee"
    "chly\\Slu\\V2Beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_deps[1] =
    {
        &::descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_2eproto,
};
static ::absl::once_flag descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto = {
    false,
    false,
    904,
    descriptor_table_protodef_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto,
    "speechly/slu/v2beta1/batch_api.proto",
    &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_once,
    descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto::offsets,
    file_level_metadata_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto,
    file_level_enum_descriptors_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto,
    file_level_service_descriptors_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto(&descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto);
namespace speechly {
namespace slu {
namespace v2beta1 {
// ===================================================================

class ProcessAudioSourceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessAudioSourceRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, _impl_._has_bits_);
  static const ::speechly::slu::v2beta1::ProcessAudioBatchConfig& config(const ProcessAudioSourceRequest* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::speechly::slu::v2beta1::ProcessAudioBatchConfig& ProcessAudioSourceRequest::_Internal::config(const ProcessAudioSourceRequest* msg) {
  return *msg->_impl_.config_;
}
void ProcessAudioSourceRequest::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ProcessAudioSourceRequest::clear_source() {
  _internal_mutable_source()->Clear();
}
ProcessAudioSourceRequest::ProcessAudioSourceRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta1.ProcessAudioSourceRequest)
}
ProcessAudioSourceRequest::ProcessAudioSourceRequest(const ProcessAudioSourceRequest& from) : ::google::protobuf::Message() {
  ProcessAudioSourceRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.source_){from._impl_.source_},
      decltype(_impl_.config_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.config_ = new ::speechly::slu::v2beta1::ProcessAudioBatchConfig(*from._impl_.config_);
  }

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta1.ProcessAudioSourceRequest)
}
inline void ProcessAudioSourceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.source_){arena},
      decltype(_impl_.config_){nullptr},
  };
}
ProcessAudioSourceRequest::~ProcessAudioSourceRequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta1.ProcessAudioSourceRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProcessAudioSourceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.config_;
}
void ProcessAudioSourceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ProcessAudioSourceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta1.ProcessAudioSourceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_source()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProcessAudioSourceRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> ProcessAudioSourceRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ProcessAudioSourceRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .speechly.slu.v2beta1.ProcessAudioSourceRequestItem source = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, _impl_.source_)}},
    // .speechly.slu.v2beta1.ProcessAudioBatchConfig config = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .speechly.slu.v2beta1.ProcessAudioBatchConfig config = 1;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .speechly.slu.v2beta1.ProcessAudioSourceRequestItem source = 2;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceRequest, _impl_.source_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta1::ProcessAudioBatchConfig>()},
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta1::ProcessAudioSourceRequestItem>()},
  }}, {{
  }},
};

::uint8_t* ProcessAudioSourceRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta1.ProcessAudioSourceRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .speechly.slu.v2beta1.ProcessAudioBatchConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // repeated .speechly.slu.v2beta1.ProcessAudioSourceRequestItem source = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_size()); i < n; i++) {
    const auto& repfield = this->_internal_source().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta1.ProcessAudioSourceRequest)
  return target;
}

::size_t ProcessAudioSourceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta1.ProcessAudioSourceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta1.ProcessAudioSourceRequestItem source = 2;
  total_size += 1UL * this->_internal_source_size();
  for (const auto& msg : this->_internal_source()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .speechly.slu.v2beta1.ProcessAudioBatchConfig config = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProcessAudioSourceRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ProcessAudioSourceRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*ProcessAudioSourceRequest::GetClassData() const { return &_class_data_; }


void ProcessAudioSourceRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProcessAudioSourceRequest*>(&to_msg);
  auto& from = static_cast<const ProcessAudioSourceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta1.ProcessAudioSourceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_source()->MergeFrom(from._internal_source());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_config()->::speechly::slu::v2beta1::ProcessAudioBatchConfig::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioSourceRequest::CopyFrom(const ProcessAudioSourceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta1.ProcessAudioSourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProcessAudioSourceRequest::IsInitialized() const {
  return true;
}

void ProcessAudioSourceRequest::InternalSwap(ProcessAudioSourceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.source_.InternalSwap(&other->_impl_.source_);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata ProcessAudioSourceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto[0]);
}
// ===================================================================

class ProcessAudioSourceResponse::_Internal {
 public:
};

void ProcessAudioSourceResponse::clear_operation() {
  _internal_mutable_operation()->Clear();
}
ProcessAudioSourceResponse::ProcessAudioSourceResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta1.ProcessAudioSourceResponse)
}
ProcessAudioSourceResponse::ProcessAudioSourceResponse(const ProcessAudioSourceResponse& from) : ::google::protobuf::Message() {
  ProcessAudioSourceResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){from._impl_.operation_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta1.ProcessAudioSourceResponse)
}
inline void ProcessAudioSourceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ProcessAudioSourceResponse::~ProcessAudioSourceResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta1.ProcessAudioSourceResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProcessAudioSourceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_.~RepeatedPtrField();
}
void ProcessAudioSourceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ProcessAudioSourceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta1.ProcessAudioSourceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_operation()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProcessAudioSourceResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ProcessAudioSourceResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ProcessAudioSourceResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .speechly.slu.v2beta1.Operation operation = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioSourceResponse, _impl_.operation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .speechly.slu.v2beta1.Operation operation = 1;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioSourceResponse, _impl_.operation_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta1::Operation>()},
  }}, {{
  }},
};

::uint8_t* ProcessAudioSourceResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta1.ProcessAudioSourceResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .speechly.slu.v2beta1.Operation operation = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operation_size()); i < n; i++) {
    const auto& repfield = this->_internal_operation().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta1.ProcessAudioSourceResponse)
  return target;
}

::size_t ProcessAudioSourceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta1.ProcessAudioSourceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta1.Operation operation = 1;
  total_size += 1UL * this->_internal_operation_size();
  for (const auto& msg : this->_internal_operation()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProcessAudioSourceResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ProcessAudioSourceResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*ProcessAudioSourceResponse::GetClassData() const { return &_class_data_; }


void ProcessAudioSourceResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProcessAudioSourceResponse*>(&to_msg);
  auto& from = static_cast<const ProcessAudioSourceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta1.ProcessAudioSourceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_operation()->MergeFrom(from._internal_operation());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioSourceResponse::CopyFrom(const ProcessAudioSourceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta1.ProcessAudioSourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProcessAudioSourceResponse::IsInitialized() const {
  return true;
}

void ProcessAudioSourceResponse::InternalSwap(ProcessAudioSourceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operation_.InternalSwap(&other->_impl_.operation_);
}

::google::protobuf::Metadata ProcessAudioSourceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto[1]);
}
// ===================================================================

class QueryStatusRequest::_Internal {
 public:
};

QueryStatusRequest::QueryStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta1.QueryStatusRequest)
}
QueryStatusRequest::QueryStatusRequest(const QueryStatusRequest& from) : ::google::protobuf::Message() {
  QueryStatusRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_ids_){from._impl_.operation_ids_},
      decltype(_impl_.operation_references_){from._impl_.operation_references_},
      decltype(_impl_.batch_id_){},
      decltype(_impl_.batch_reference_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_id().empty()) {
    _this->_impl_.batch_id_.Set(from._internal_batch_id(), _this->GetArenaForAllocation());
  }
  _impl_.batch_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_reference().empty()) {
    _this->_impl_.batch_reference_.Set(from._internal_batch_reference(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta1.QueryStatusRequest)
}
inline void QueryStatusRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_ids_){arena},
      decltype(_impl_.operation_references_){arena},
      decltype(_impl_.batch_id_){},
      decltype(_impl_.batch_reference_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.batch_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
QueryStatusRequest::~QueryStatusRequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta1.QueryStatusRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QueryStatusRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_operation_ids()->~RepeatedPtrField();
  _internal_mutable_operation_references()->~RepeatedPtrField();
  _impl_.batch_id_.Destroy();
  _impl_.batch_reference_.Destroy();
}
void QueryStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void QueryStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta1.QueryStatusRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_operation_ids()->Clear();
  _internal_mutable_operation_references()->Clear();
  _impl_.batch_id_.ClearToEmpty();
  _impl_.batch_reference_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QueryStatusRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 104, 2> QueryStatusRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_QueryStatusRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string batch_reference = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.batch_reference_)}},
    // repeated string operation_ids = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.operation_ids_)}},
    // repeated string operation_references = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.operation_references_)}},
    // string batch_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.batch_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string operation_ids = 1;
    {PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.operation_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string operation_references = 2;
    {PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.operation_references_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string batch_id = 3;
    {PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.batch_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string batch_reference = 4;
    {PROTOBUF_FIELD_OFFSET(QueryStatusRequest, _impl_.batch_reference_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\15\24\10\17\0\0\0"
    "speechly.slu.v2beta1.QueryStatusRequest"
    "operation_ids"
    "operation_references"
    "batch_id"
    "batch_reference"
  }},
};

::uint8_t* QueryStatusRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta1.QueryStatusRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string operation_ids = 1;
  for (int i = 0, n = this->_internal_operation_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_operation_ids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta1.QueryStatusRequest.operation_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string operation_references = 2;
  for (int i = 0, n = this->_internal_operation_references_size(); i < n; ++i) {
    const auto& s = this->_internal_operation_references().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta1.QueryStatusRequest.operation_references");
    target = stream->WriteString(2, s, target);
  }

  // string batch_id = 3;
  if (!this->_internal_batch_id().empty()) {
    const std::string& _s = this->_internal_batch_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta1.QueryStatusRequest.batch_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    const std::string& _s = this->_internal_batch_reference();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.slu.v2beta1.QueryStatusRequest.batch_reference");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta1.QueryStatusRequest)
  return target;
}

::size_t QueryStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta1.QueryStatusRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string operation_ids = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_operation_ids().size());
  for (int i = 0, n = _internal_operation_ids().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_operation_ids().Get(i));
  }
  // repeated string operation_references = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_operation_references().size());
  for (int i = 0, n = _internal_operation_references().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_operation_references().Get(i));
  }
  // string batch_id = 3;
  if (!this->_internal_batch_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_batch_id());
  }

  // string batch_reference = 4;
  if (!this->_internal_batch_reference().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_batch_reference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData QueryStatusRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    QueryStatusRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*QueryStatusRequest::GetClassData() const { return &_class_data_; }


void QueryStatusRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<QueryStatusRequest*>(&to_msg);
  auto& from = static_cast<const QueryStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta1.QueryStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_operation_ids()->MergeFrom(from._internal_operation_ids());
  _this->_internal_mutable_operation_references()->MergeFrom(from._internal_operation_references());
  if (!from._internal_batch_id().empty()) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  if (!from._internal_batch_reference().empty()) {
    _this->_internal_set_batch_reference(from._internal_batch_reference());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryStatusRequest::CopyFrom(const QueryStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta1.QueryStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryStatusRequest::IsInitialized() const {
  return true;
}

void QueryStatusRequest::InternalSwap(QueryStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operation_ids_.InternalSwap(&other->_impl_.operation_ids_);
  _impl_.operation_references_.InternalSwap(&other->_impl_.operation_references_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.batch_id_, lhs_arena,
                                       &other->_impl_.batch_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.batch_reference_, lhs_arena,
                                       &other->_impl_.batch_reference_, rhs_arena);
}

::google::protobuf::Metadata QueryStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto[2]);
}
// ===================================================================

class QueryStatusResponse::_Internal {
 public:
};

void QueryStatusResponse::clear_operation() {
  _internal_mutable_operation()->Clear();
}
QueryStatusResponse::QueryStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.slu.v2beta1.QueryStatusResponse)
}
QueryStatusResponse::QueryStatusResponse(const QueryStatusResponse& from) : ::google::protobuf::Message() {
  QueryStatusResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){from._impl_.operation_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:speechly.slu.v2beta1.QueryStatusResponse)
}
inline void QueryStatusResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
QueryStatusResponse::~QueryStatusResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v2beta1.QueryStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QueryStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_.~RepeatedPtrField();
}
void QueryStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void QueryStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v2beta1.QueryStatusResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_operation()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QueryStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> QueryStatusResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_QueryStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .speechly.slu.v2beta1.Operation operation = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(QueryStatusResponse, _impl_.operation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .speechly.slu.v2beta1.Operation operation = 1;
    {PROTOBUF_FIELD_OFFSET(QueryStatusResponse, _impl_.operation_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::speechly::slu::v2beta1::Operation>()},
  }}, {{
  }},
};

::uint8_t* QueryStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v2beta1.QueryStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .speechly.slu.v2beta1.Operation operation = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operation_size()); i < n; i++) {
    const auto& repfield = this->_internal_operation().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v2beta1.QueryStatusResponse)
  return target;
}

::size_t QueryStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v2beta1.QueryStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v2beta1.Operation operation = 1;
  total_size += 1UL * this->_internal_operation_size();
  for (const auto& msg : this->_internal_operation()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData QueryStatusResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    QueryStatusResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*QueryStatusResponse::GetClassData() const { return &_class_data_; }


void QueryStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<QueryStatusResponse*>(&to_msg);
  auto& from = static_cast<const QueryStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v2beta1.QueryStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_operation()->MergeFrom(from._internal_operation());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryStatusResponse::CopyFrom(const QueryStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v2beta1.QueryStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryStatusResponse::IsInitialized() const {
  return true;
}

void QueryStatusResponse::InternalSwap(QueryStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operation_.InternalSwap(&other->_impl_.operation_);
}

::google::protobuf::Metadata QueryStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_getter, &descriptor_table_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto_once,
      file_level_metadata_speechly_2fslu_2fv2beta1_2fbatch_5fapi_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta1
}  // namespace slu
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
