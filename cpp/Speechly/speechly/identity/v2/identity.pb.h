// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/identity/v2/identity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fidentity_2fv2_2fidentity_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fidentity_2fv2_2fidentity_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fidentity_2fv2_2fidentity_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fidentity_2fv2_2fidentity_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto;
namespace speechly {
namespace identity {
namespace v2 {
class ApplicationScope;
struct ApplicationScopeDefaultTypeInternal;
extern ApplicationScopeDefaultTypeInternal _ApplicationScope_default_instance_;
class ProjectScope;
struct ProjectScopeDefaultTypeInternal;
extern ProjectScopeDefaultTypeInternal _ProjectScope_default_instance_;
}  // namespace v2
}  // namespace identity
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace identity {
namespace v2 {

// ===================================================================


// -------------------------------------------------------------------

class ApplicationScope final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.identity.v2.ApplicationScope) */ {
 public:
  inline ApplicationScope() : ApplicationScope(nullptr) {}
  ~ApplicationScope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApplicationScope(::google::protobuf::internal::ConstantInitialized);

  ApplicationScope(const ApplicationScope& from);
  ApplicationScope(ApplicationScope&& from) noexcept
    : ApplicationScope() {
    *this = ::std::move(from);
  }

  inline ApplicationScope& operator=(const ApplicationScope& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationScope& operator=(ApplicationScope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplicationScope& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplicationScope* internal_default_instance() {
    return reinterpret_cast<const ApplicationScope*>(
               &_ApplicationScope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApplicationScope& a, ApplicationScope& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationScope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationScope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplicationScope* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplicationScope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ApplicationScope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ApplicationScope& from) {
    ApplicationScope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationScope* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.identity.v2.ApplicationScope";
  }
  protected:
  explicit ApplicationScope(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kConfigIdFieldNumber = 3,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string config_id = 3;
  void clear_config_id() ;
  const std::string& config_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_config_id(Arg_&& arg, Args_... args);
  std::string* mutable_config_id();
  PROTOBUF_NODISCARD std::string* release_config_id();
  void set_allocated_config_id(std::string* ptr);

  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(
      const std::string& value);
  std::string* _internal_mutable_config_id();

  public:
  // @@protoc_insertion_point(class_scope:speechly.identity.v2.ApplicationScope)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 2, 0, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr config_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fidentity_2fv2_2fidentity_2eproto;
};// -------------------------------------------------------------------

class ProjectScope final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.identity.v2.ProjectScope) */ {
 public:
  inline ProjectScope() : ProjectScope(nullptr) {}
  ~ProjectScope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProjectScope(::google::protobuf::internal::ConstantInitialized);

  ProjectScope(const ProjectScope& from);
  ProjectScope(ProjectScope&& from) noexcept
    : ProjectScope() {
    *this = ::std::move(from);
  }

  inline ProjectScope& operator=(const ProjectScope& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectScope& operator=(ProjectScope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectScope& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectScope* internal_default_instance() {
    return reinterpret_cast<const ProjectScope*>(
               &_ProjectScope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProjectScope& a, ProjectScope& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectScope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectScope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectScope* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectScope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProjectScope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProjectScope& from) {
    ProjectScope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectScope* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.identity.v2.ProjectScope";
  }
  protected:
  explicit ProjectScope(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
  };
  // string project_id = 1;
  void clear_project_id() ;
  const std::string& project_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_project_id(Arg_&& arg, Args_... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* ptr);

  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(
      const std::string& value);
  std::string* _internal_mutable_project_id();

  public:
  // @@protoc_insertion_point(class_scope:speechly.identity.v2.ProjectScope)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 52, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr project_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fidentity_2fv2_2fidentity_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ApplicationScope

// string app_id = 1;
inline void ApplicationScope::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& ApplicationScope::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.ApplicationScope.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApplicationScope::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.identity.v2.ApplicationScope.app_id)
}
inline std::string* ApplicationScope::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.ApplicationScope.app_id)
  return _s;
}
inline const std::string& ApplicationScope::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void ApplicationScope::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ApplicationScope::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ApplicationScope::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.identity.v2.ApplicationScope.app_id)
  return _impl_.app_id_.Release();
}
inline void ApplicationScope::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.ApplicationScope.app_id)
}

// string config_id = 3;
inline void ApplicationScope::clear_config_id() {
  _impl_.config_id_.ClearToEmpty();
}
inline const std::string& ApplicationScope::config_id() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.ApplicationScope.config_id)
  return _internal_config_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApplicationScope::set_config_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.config_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.identity.v2.ApplicationScope.config_id)
}
inline std::string* ApplicationScope::mutable_config_id() {
  std::string* _s = _internal_mutable_config_id();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.ApplicationScope.config_id)
  return _s;
}
inline const std::string& ApplicationScope::_internal_config_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.config_id_.Get();
}
inline void ApplicationScope::_internal_set_config_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.config_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ApplicationScope::_internal_mutable_config_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.config_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ApplicationScope::release_config_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.identity.v2.ApplicationScope.config_id)
  return _impl_.config_id_.Release();
}
inline void ApplicationScope::set_allocated_config_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.config_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.config_id_.IsDefault()) {
          _impl_.config_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.ApplicationScope.config_id)
}

// -------------------------------------------------------------------

// ProjectScope

// string project_id = 1;
inline void ProjectScope::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& ProjectScope::project_id() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.ProjectScope.project_id)
  return _internal_project_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProjectScope::set_project_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.project_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.identity.v2.ProjectScope.project_id)
}
inline std::string* ProjectScope::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.ProjectScope.project_id)
  return _s;
}
inline const std::string& ProjectScope::_internal_project_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.project_id_.Get();
}
inline void ProjectScope::_internal_set_project_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectScope::_internal_mutable_project_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.project_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ProjectScope::release_project_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.identity.v2.ProjectScope.project_id)
  return _impl_.project_id_.Release();
}
inline void ProjectScope::set_allocated_project_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.project_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.project_id_.IsDefault()) {
          _impl_.project_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.ProjectScope.project_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace identity
}  // namespace speechly


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fidentity_2fv2_2fidentity_2eproto_2epb_2eh
