// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/identity/v2/identity_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "speechly/identity/v2/identity.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto;
namespace speechly {
namespace identity {
namespace v2 {
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
}  // namespace v2
}  // namespace identity
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::identity::v2::LoginRequest* Arena::CreateMaybeMessage<::speechly::identity::v2::LoginRequest>(Arena*);
template<> ::speechly::identity::v2::LoginResponse* Arena::CreateMaybeMessage<::speechly::identity::v2::LoginResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace identity {
namespace v2 {

// ===================================================================

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.identity.v2.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit constexpr LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ScopeCase {
    kApplication = 2,
    kProject = 3,
    SCOPE_NOT_SET = 0,
  };

  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return new LoginRequest();
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.identity.v2.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kApplicationFieldNumber = 2,
    kProjectFieldNumber = 3,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .speechly.identity.v2.ApplicationScope application = 2;
  bool has_application() const;
  private:
  bool _internal_has_application() const;
  public:
  void clear_application();
  const ::speechly::identity::v2::ApplicationScope& application() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::identity::v2::ApplicationScope* release_application();
  ::speechly::identity::v2::ApplicationScope* mutable_application();
  void set_allocated_application(::speechly::identity::v2::ApplicationScope* application);
  private:
  const ::speechly::identity::v2::ApplicationScope& _internal_application() const;
  ::speechly::identity::v2::ApplicationScope* _internal_mutable_application();
  public:
  void unsafe_arena_set_allocated_application(
      ::speechly::identity::v2::ApplicationScope* application);
  ::speechly::identity::v2::ApplicationScope* unsafe_arena_release_application();

  // .speechly.identity.v2.ProjectScope project = 3;
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const ::speechly::identity::v2::ProjectScope& project() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::identity::v2::ProjectScope* release_project();
  ::speechly::identity::v2::ProjectScope* mutable_project();
  void set_allocated_project(::speechly::identity::v2::ProjectScope* project);
  private:
  const ::speechly::identity::v2::ProjectScope& _internal_project() const;
  ::speechly::identity::v2::ProjectScope* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::speechly::identity::v2::ProjectScope* project);
  ::speechly::identity::v2::ProjectScope* unsafe_arena_release_project();

  void clear_scope();
  ScopeCase scope_case() const;
  // @@protoc_insertion_point(class_scope:speechly.identity.v2.LoginRequest)
 private:
  class _Internal;
  void set_has_application();
  void set_has_project();

  inline bool has_scope() const;
  inline void clear_has_scope();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  union ScopeUnion {
    constexpr ScopeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::speechly::identity::v2::ApplicationScope* application_;
    ::speechly::identity::v2::ProjectScope* project_;
  } scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.identity.v2.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit constexpr LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return new LoginResponse();
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.identity.v2.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kExpiresAtFieldNumber = 4,
    kExpiresAtEpochFieldNumber = 3,
    kValidForSFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string expires_at = 4;
  void clear_expires_at();
  const std::string& expires_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expires_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expires_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_expires_at();
  void set_allocated_expires_at(std::string* expires_at);
  private:
  const std::string& _internal_expires_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expires_at(const std::string& value);
  std::string* _internal_mutable_expires_at();
  public:

  // uint64 expires_at_epoch = 3;
  void clear_expires_at_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 expires_at_epoch() const;
  void set_expires_at_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expires_at_epoch() const;
  void _internal_set_expires_at_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 valid_for_s = 2;
  void clear_valid_for_s();
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_for_s() const;
  void set_valid_for_s(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_valid_for_s() const;
  void _internal_set_valid_for_s(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.identity.v2.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expires_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expires_at_epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_for_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// string device_id = 1;
inline void LoginRequest::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& LoginRequest::device_id() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.LoginRequest.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.identity.v2.LoginRequest.device_id)
}
inline std::string* LoginRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.LoginRequest.device_id)
  return _s;
}
inline const std::string& LoginRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void LoginRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:speechly.identity.v2.LoginRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.LoginRequest.device_id)
}

// .speechly.identity.v2.ApplicationScope application = 2;
inline bool LoginRequest::_internal_has_application() const {
  return scope_case() == kApplication;
}
inline bool LoginRequest::has_application() const {
  return _internal_has_application();
}
inline void LoginRequest::set_has_application() {
  _oneof_case_[0] = kApplication;
}
inline ::speechly::identity::v2::ApplicationScope* LoginRequest::release_application() {
  // @@protoc_insertion_point(field_release:speechly.identity.v2.LoginRequest.application)
  if (_internal_has_application()) {
    clear_has_scope();
      ::speechly::identity::v2::ApplicationScope* temp = scope_.application_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    scope_.application_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::speechly::identity::v2::ApplicationScope& LoginRequest::_internal_application() const {
  return _internal_has_application()
      ? *scope_.application_
      : reinterpret_cast< ::speechly::identity::v2::ApplicationScope&>(::speechly::identity::v2::_ApplicationScope_default_instance_);
}
inline const ::speechly::identity::v2::ApplicationScope& LoginRequest::application() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.LoginRequest.application)
  return _internal_application();
}
inline ::speechly::identity::v2::ApplicationScope* LoginRequest::unsafe_arena_release_application() {
  // @@protoc_insertion_point(field_unsafe_arena_release:speechly.identity.v2.LoginRequest.application)
  if (_internal_has_application()) {
    clear_has_scope();
    ::speechly::identity::v2::ApplicationScope* temp = scope_.application_;
    scope_.application_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoginRequest::unsafe_arena_set_allocated_application(::speechly::identity::v2::ApplicationScope* application) {
  clear_scope();
  if (application) {
    set_has_application();
    scope_.application_ = application;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.identity.v2.LoginRequest.application)
}
inline ::speechly::identity::v2::ApplicationScope* LoginRequest::_internal_mutable_application() {
  if (!_internal_has_application()) {
    clear_scope();
    set_has_application();
    scope_.application_ = CreateMaybeMessage< ::speechly::identity::v2::ApplicationScope >(GetArenaForAllocation());
  }
  return scope_.application_;
}
inline ::speechly::identity::v2::ApplicationScope* LoginRequest::mutable_application() {
  ::speechly::identity::v2::ApplicationScope* _msg = _internal_mutable_application();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.LoginRequest.application)
  return _msg;
}

// .speechly.identity.v2.ProjectScope project = 3;
inline bool LoginRequest::_internal_has_project() const {
  return scope_case() == kProject;
}
inline bool LoginRequest::has_project() const {
  return _internal_has_project();
}
inline void LoginRequest::set_has_project() {
  _oneof_case_[0] = kProject;
}
inline ::speechly::identity::v2::ProjectScope* LoginRequest::release_project() {
  // @@protoc_insertion_point(field_release:speechly.identity.v2.LoginRequest.project)
  if (_internal_has_project()) {
    clear_has_scope();
      ::speechly::identity::v2::ProjectScope* temp = scope_.project_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    scope_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::speechly::identity::v2::ProjectScope& LoginRequest::_internal_project() const {
  return _internal_has_project()
      ? *scope_.project_
      : reinterpret_cast< ::speechly::identity::v2::ProjectScope&>(::speechly::identity::v2::_ProjectScope_default_instance_);
}
inline const ::speechly::identity::v2::ProjectScope& LoginRequest::project() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.LoginRequest.project)
  return _internal_project();
}
inline ::speechly::identity::v2::ProjectScope* LoginRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:speechly.identity.v2.LoginRequest.project)
  if (_internal_has_project()) {
    clear_has_scope();
    ::speechly::identity::v2::ProjectScope* temp = scope_.project_;
    scope_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoginRequest::unsafe_arena_set_allocated_project(::speechly::identity::v2::ProjectScope* project) {
  clear_scope();
  if (project) {
    set_has_project();
    scope_.project_ = project;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.identity.v2.LoginRequest.project)
}
inline ::speechly::identity::v2::ProjectScope* LoginRequest::_internal_mutable_project() {
  if (!_internal_has_project()) {
    clear_scope();
    set_has_project();
    scope_.project_ = CreateMaybeMessage< ::speechly::identity::v2::ProjectScope >(GetArenaForAllocation());
  }
  return scope_.project_;
}
inline ::speechly::identity::v2::ProjectScope* LoginRequest::mutable_project() {
  ::speechly::identity::v2::ProjectScope* _msg = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.LoginRequest.project)
  return _msg;
}

inline bool LoginRequest::has_scope() const {
  return scope_case() != SCOPE_NOT_SET;
}
inline void LoginRequest::clear_has_scope() {
  _oneof_case_[0] = SCOPE_NOT_SET;
}
inline LoginRequest::ScopeCase LoginRequest::scope_case() const {
  return LoginRequest::ScopeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LoginResponse

// string token = 1;
inline void LoginResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.LoginResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.identity.v2.LoginResponse.token)
}
inline std::string* LoginResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.LoginResponse.token)
  return _s;
}
inline const std::string& LoginResponse::_internal_token() const {
  return token_.Get();
}
inline void LoginResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:speechly.identity.v2.LoginResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.LoginResponse.token)
}

// uint32 valid_for_s = 2;
inline void LoginResponse::clear_valid_for_s() {
  valid_for_s_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginResponse::_internal_valid_for_s() const {
  return valid_for_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginResponse::valid_for_s() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.LoginResponse.valid_for_s)
  return _internal_valid_for_s();
}
inline void LoginResponse::_internal_set_valid_for_s(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  valid_for_s_ = value;
}
inline void LoginResponse::set_valid_for_s(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_valid_for_s(value);
  // @@protoc_insertion_point(field_set:speechly.identity.v2.LoginResponse.valid_for_s)
}

// uint64 expires_at_epoch = 3;
inline void LoginResponse::clear_expires_at_epoch() {
  expires_at_epoch_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::_internal_expires_at_epoch() const {
  return expires_at_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::expires_at_epoch() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.LoginResponse.expires_at_epoch)
  return _internal_expires_at_epoch();
}
inline void LoginResponse::_internal_set_expires_at_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expires_at_epoch_ = value;
}
inline void LoginResponse::set_expires_at_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expires_at_epoch(value);
  // @@protoc_insertion_point(field_set:speechly.identity.v2.LoginResponse.expires_at_epoch)
}

// string expires_at = 4;
inline void LoginResponse::clear_expires_at() {
  expires_at_.ClearToEmpty();
}
inline const std::string& LoginResponse::expires_at() const {
  // @@protoc_insertion_point(field_get:speechly.identity.v2.LoginResponse.expires_at)
  return _internal_expires_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_expires_at(ArgT0&& arg0, ArgT... args) {
 
 expires_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.identity.v2.LoginResponse.expires_at)
}
inline std::string* LoginResponse::mutable_expires_at() {
  std::string* _s = _internal_mutable_expires_at();
  // @@protoc_insertion_point(field_mutable:speechly.identity.v2.LoginResponse.expires_at)
  return _s;
}
inline const std::string& LoginResponse::_internal_expires_at() const {
  return expires_at_.Get();
}
inline void LoginResponse::_internal_set_expires_at(const std::string& value) {
  
  expires_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_expires_at() {
  
  return expires_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginResponse::release_expires_at() {
  // @@protoc_insertion_point(field_release:speechly.identity.v2.LoginResponse.expires_at)
  return expires_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginResponse::set_allocated_expires_at(std::string* expires_at) {
  if (expires_at != nullptr) {
    
  } else {
    
  }
  expires_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expires_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.LoginResponse.expires_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace identity
}  // namespace speechly

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto
