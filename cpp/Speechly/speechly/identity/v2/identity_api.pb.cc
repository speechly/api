// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/identity/v2/identity_api.proto

#include "speechly/identity/v2/identity_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fidentity_2fv2_2fidentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fidentity_2fv2_2fidentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto;
namespace speechly {
namespace identity {
namespace v2 {
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
  const ::speechly::identity::v2::ApplicationScope* application_;
  const ::speechly::identity::v2::ProjectScope* project_;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
}  // namespace v2
}  // namespace identity
}  // namespace speechly
static void InitDefaultsscc_info_LoginRequest_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::identity::v2::_LoginRequest_default_instance_;
    new (ptr) ::speechly::identity::v2::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::identity::v2::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoginRequest_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoginRequest_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto}, {
      &scc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base,
      &scc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base,}};

static void InitDefaultsscc_info_LoginResponse_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::identity::v2::_LoginResponse_default_instance_;
    new (ptr) ::speechly::identity::v2::LoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::identity::v2::LoginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginResponse_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginResponse_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginRequest, device_id_),
  offsetof(::speechly::identity::v2::LoginRequestDefaultTypeInternal, application_),
  offsetof(::speechly::identity::v2::LoginRequestDefaultTypeInternal, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginRequest, scope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginResponse, token_),
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginResponse, valid_for_s_),
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginResponse, expires_at_epoch_),
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::LoginResponse, expires_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::identity::v2::LoginRequest)},
  { 9, -1, sizeof(::speechly::identity::v2::LoginResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::identity::v2::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::identity::v2::_LoginResponse_default_instance_),
};

const char descriptor_table_protodef_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'speechly/identity/v2/identity_api.prot"
  "o\022\024speechly.identity.v2\032#speechly/identi"
  "ty/v2/identity.proto\"\240\001\n\014LoginRequest\022\021\n"
  "\tdevice_id\030\001 \001(\t\022=\n\013application\030\002 \001(\0132&."
  "speechly.identity.v2.ApplicationScopeH\000\022"
  "5\n\007project\030\003 \001(\0132\".speechly.identity.v2."
  "ProjectScopeH\000B\007\n\005scope\"a\n\rLoginResponse"
  "\022\r\n\005token\030\001 \001(\t\022\023\n\013valid_for_s\030\002 \001(\r\022\030\n\020"
  "expires_at_epoch\030\003 \001(\004\022\022\n\nexpires_at\030\004 \001"
  "(\t2_\n\013IdentityAPI\022P\n\005Login\022\".speechly.id"
  "entity.v2.LoginRequest\032#.speechly.identi"
  "ty.v2.LoginResponseB\203\001\n\030com.speechly.ide"
  "ntity.v2B\020IdentityApiProtoP\001Z\037speechly/i"
  "dentity/v2;identityv2\242\002\003SIX\252\002\024Speechly.I"
  "dentity.V2\312\002\024Speechly\\Identity\\V2b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_deps[1] = {
  &::descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_sccs[2] = {
  &scc_info_LoginRequest_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto.base,
  &scc_info_LoginResponse_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_once;
static bool descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto = {
  &descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_initialized, descriptor_table_protodef_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto, "speechly/identity/v2/identity_api.proto", 601,
  &descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_once, descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_sccs, descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto, 2, file_level_enum_descriptors_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto, file_level_service_descriptors_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto), true);
namespace speechly {
namespace identity {
namespace v2 {

// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
  ::speechly::identity::v2::_LoginRequest_default_instance_.application_ = const_cast< ::speechly::identity::v2::ApplicationScope*>(
      ::speechly::identity::v2::ApplicationScope::internal_default_instance());
  ::speechly::identity::v2::_LoginRequest_default_instance_.project_ = const_cast< ::speechly::identity::v2::ProjectScope*>(
      ::speechly::identity::v2::ProjectScope::internal_default_instance());
}
class LoginRequest::_Internal {
 public:
  static const ::speechly::identity::v2::ApplicationScope& application(const LoginRequest* msg);
  static const ::speechly::identity::v2::ProjectScope& project(const LoginRequest* msg);
};

const ::speechly::identity::v2::ApplicationScope&
LoginRequest::_Internal::application(const LoginRequest* msg) {
  return *msg->scope_.application_;
}
const ::speechly::identity::v2::ProjectScope&
LoginRequest::_Internal::project(const LoginRequest* msg) {
  return *msg->scope_.project_;
}
void LoginRequest::set_allocated_application(::speechly::identity::v2::ApplicationScope* application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scope();
  if (application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    set_has_application();
    scope_.application_ = application;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.LoginRequest.application)
}
void LoginRequest::clear_application() {
  if (_internal_has_application()) {
    delete scope_.application_;
    clear_has_scope();
  }
}
void LoginRequest::set_allocated_project(::speechly::identity::v2::ProjectScope* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scope();
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    set_has_project();
    scope_.project_ = project;
  }
  // @@protoc_insertion_point(field_set_allocated:speechly.identity.v2.LoginRequest.project)
}
void LoginRequest::clear_project() {
  if (_internal_has_project()) {
    delete scope_.project_;
    clear_has_scope();
  }
}
LoginRequest::LoginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.identity.v2.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  clear_has_scope();
  switch (from.scope_case()) {
    case kApplication: {
      _internal_mutable_application()->::speechly::identity::v2::ApplicationScope::MergeFrom(from._internal_application());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::speechly::identity::v2::ProjectScope::MergeFrom(from._internal_project());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechly.identity.v2.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_scope();
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:speechly.identity.v2.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_scope()) {
    clear_scope();
  }
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::clear_scope() {
// @@protoc_insertion_point(one_of_clear_start:speechly.identity.v2.LoginRequest)
  switch (scope_case()) {
    case kApplication: {
      delete scope_.application_;
      break;
    }
    case kProject: {
      delete scope_.project_;
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCOPE_NOT_SET;
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.identity.v2.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_scope();
  _internal_metadata_.Clear();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.identity.v2.LoginRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.identity.v2.ApplicationScope application = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_application(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.identity.v2.ProjectScope project = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_project(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.identity.v2.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.identity.v2.LoginRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // .speechly.identity.v2.ApplicationScope application = 2;
  if (_internal_has_application()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::application(this), target, stream);
  }

  // .speechly.identity.v2.ProjectScope project = 3;
  if (_internal_has_project()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::project(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.identity.v2.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.identity.v2.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  switch (scope_case()) {
    // .speechly.identity.v2.ApplicationScope application = 2;
    case kApplication: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scope_.application_);
      break;
    }
    // .speechly.identity.v2.ProjectScope project = 3;
    case kProject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scope_.project_);
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.identity.v2.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.identity.v2.LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.identity.v2.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.identity.v2.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  switch (from.scope_case()) {
    case kApplication: {
      _internal_mutable_application()->::speechly::identity::v2::ApplicationScope::MergeFrom(from._internal_application());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::speechly::identity::v2::ProjectScope::MergeFrom(from._internal_project());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.identity.v2.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.identity.v2.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_, other->scope_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
}
class LoginResponse::_Internal {
 public:
};

LoginResponse::LoginResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.identity.v2.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  expires_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expires_at().empty()) {
    expires_at_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expires_at_);
  }
  ::memcpy(&expires_at_epoch_, &from.expires_at_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_for_s_) -
    reinterpret_cast<char*>(&expires_at_epoch_)) + sizeof(valid_for_s_));
  // @@protoc_insertion_point(copy_constructor:speechly.identity.v2.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginResponse_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expires_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expires_at_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_for_s_) -
      reinterpret_cast<char*>(&expires_at_epoch_)) + sizeof(valid_for_s_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:speechly.identity.v2.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expires_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginResponse_speechly_2fidentity_2fv2_2fidentity_5fapi_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.identity.v2.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expires_at_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expires_at_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_for_s_) -
      reinterpret_cast<char*>(&expires_at_epoch_)) + sizeof(valid_for_s_));
  _internal_metadata_.Clear();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.identity.v2.LoginResponse.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 valid_for_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          valid_for_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 expires_at_epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expires_at_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expires_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_expires_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.identity.v2.LoginResponse.expires_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.identity.v2.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.identity.v2.LoginResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 valid_for_s = 2;
  if (this->valid_for_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_valid_for_s(), target);
  }

  // uint64 expires_at_epoch = 3;
  if (this->expires_at_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_expires_at_epoch(), target);
  }

  // string expires_at = 4;
  if (this->expires_at().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expires_at().data(), static_cast<int>(this->_internal_expires_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.identity.v2.LoginResponse.expires_at");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_expires_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.identity.v2.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.identity.v2.LoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string expires_at = 4;
  if (this->expires_at().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expires_at());
  }

  // uint64 expires_at_epoch = 3;
  if (this->expires_at_epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expires_at_epoch());
  }

  // uint32 valid_for_s = 2;
  if (this->valid_for_s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_valid_for_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.identity.v2.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.identity.v2.LoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.identity.v2.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.identity.v2.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.expires_at().size() > 0) {

    expires_at_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expires_at_);
  }
  if (from.expires_at_epoch() != 0) {
    _internal_set_expires_at_epoch(from._internal_expires_at_epoch());
  }
  if (from.valid_for_s() != 0) {
    _internal_set_valid_for_s(from._internal_valid_for_s());
  }
}

void LoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.identity.v2.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.identity.v2.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expires_at_.Swap(&other->expires_at_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expires_at_epoch_, other->expires_at_epoch_);
  swap(valid_for_s_, other->valid_for_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace identity
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::identity::v2::LoginRequest* Arena::CreateMaybeMessage< ::speechly::identity::v2::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::identity::v2::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::identity::v2::LoginResponse* Arena::CreateMaybeMessage< ::speechly::identity::v2::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::identity::v2::LoginResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
