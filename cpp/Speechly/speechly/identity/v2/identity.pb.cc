// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/identity/v2/identity.proto

#include "speechly/identity/v2/identity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace speechly {
namespace identity {
namespace v2 {
class ApplicationScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationScope> _instance;
} _ApplicationScope_default_instance_;
class ProjectScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectScope> _instance;
} _ProjectScope_default_instance_;
}  // namespace v2
}  // namespace identity
}  // namespace speechly
static void InitDefaultsscc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::identity::v2::_ApplicationScope_default_instance_;
    new (ptr) ::speechly::identity::v2::ApplicationScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::identity::v2::ApplicationScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto}, {}};

static void InitDefaultsscc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::identity::v2::_ProjectScope_default_instance_;
    new (ptr) ::speechly::identity::v2::ProjectScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::identity::v2::ProjectScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fidentity_2fv2_2fidentity_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_speechly_2fidentity_2fv2_2fidentity_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fidentity_2fv2_2fidentity_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fidentity_2fv2_2fidentity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::ApplicationScope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::ApplicationScope, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::ApplicationScope, config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::ProjectScope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::identity::v2::ProjectScope, project_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::identity::v2::ApplicationScope)},
  { 7, -1, sizeof(::speechly::identity::v2::ProjectScope)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::identity::v2::_ApplicationScope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::identity::v2::_ProjectScope_default_instance_),
};

const char descriptor_table_protodef_speechly_2fidentity_2fv2_2fidentity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#speechly/identity/v2/identity.proto\022\024s"
  "peechly.identity.v2\"5\n\020ApplicationScope\022"
  "\016\n\006app_id\030\001 \001(\t\022\021\n\tconfig_id\030\003 \001(\t\"\"\n\014Pr"
  "ojectScope\022\022\n\nproject_id\030\001 \001(\tB\200\001\n\030com.s"
  "peechly.identity.v2B\rIdentityProtoP\001Z\037sp"
  "eechly/identity/v2;identityv2\242\002\003SIX\252\002\024Sp"
  "eechly.Identity.V2\312\002\024Speechly\\Identity\\V"
  "2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_sccs[2] = {
  &scc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base,
  &scc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_once;
static bool descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto = {
  &descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_initialized, descriptor_table_protodef_speechly_2fidentity_2fv2_2fidentity_2eproto, "speechly/identity/v2/identity.proto", 289,
  &descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_once, descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_sccs, descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_speechly_2fidentity_2fv2_2fidentity_2eproto::offsets,
  file_level_metadata_speechly_2fidentity_2fv2_2fidentity_2eproto, 2, file_level_enum_descriptors_speechly_2fidentity_2fv2_2fidentity_2eproto, file_level_service_descriptors_speechly_2fidentity_2fv2_2fidentity_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_speechly_2fidentity_2fv2_2fidentity_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_speechly_2fidentity_2fv2_2fidentity_2eproto), true);
namespace speechly {
namespace identity {
namespace v2 {

// ===================================================================

void ApplicationScope::InitAsDefaultInstance() {
}
class ApplicationScope::_Internal {
 public:
};

ApplicationScope::ApplicationScope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.identity.v2.ApplicationScope)
}
ApplicationScope::ApplicationScope(const ApplicationScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.identity.v2.ApplicationScope)
}

void ApplicationScope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ApplicationScope::~ApplicationScope() {
  // @@protoc_insertion_point(destructor:speechly.identity.v2.ApplicationScope)
  SharedDtor();
}

void ApplicationScope::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApplicationScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationScope& ApplicationScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base);
  return *internal_default_instance();
}


void ApplicationScope::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.identity.v2.ApplicationScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ApplicationScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.identity.v2.ApplicationScope.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.identity.v2.ApplicationScope.config_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationScope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.identity.v2.ApplicationScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.identity.v2.ApplicationScope.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string config_id = 3;
  if (this->config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_id().data(), static_cast<int>(this->_internal_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.identity.v2.ApplicationScope.config_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.identity.v2.ApplicationScope)
  return target;
}

size_t ApplicationScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.identity.v2.ApplicationScope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string config_id = 3;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.identity.v2.ApplicationScope)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.identity.v2.ApplicationScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.identity.v2.ApplicationScope)
    MergeFrom(*source);
  }
}

void ApplicationScope::MergeFrom(const ApplicationScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.identity.v2.ApplicationScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
}

void ApplicationScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.identity.v2.ApplicationScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationScope::CopyFrom(const ApplicationScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.identity.v2.ApplicationScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationScope::IsInitialized() const {
  return true;
}

void ApplicationScope::InternalSwap(ApplicationScope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_id_.Swap(&other->config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationScope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectScope::InitAsDefaultInstance() {
}
class ProjectScope::_Internal {
 public:
};

ProjectScope::ProjectScope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.identity.v2.ProjectScope)
}
ProjectScope::ProjectScope(const ProjectScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.identity.v2.ProjectScope)
}

void ProjectScope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base);
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProjectScope::~ProjectScope() {
  // @@protoc_insertion_point(destructor:speechly.identity.v2.ProjectScope)
  SharedDtor();
}

void ProjectScope::SharedDtor() {
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectScope& ProjectScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectScope_speechly_2fidentity_2fv2_2fidentity_2eproto.base);
  return *internal_default_instance();
}


void ProjectScope::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.identity.v2.ProjectScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProjectScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.identity.v2.ProjectScope.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectScope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.identity.v2.ProjectScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.identity.v2.ProjectScope.project_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.identity.v2.ProjectScope)
  return target;
}

size_t ProjectScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.identity.v2.ProjectScope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.identity.v2.ProjectScope)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.identity.v2.ProjectScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.identity.v2.ProjectScope)
    MergeFrom(*source);
  }
}

void ProjectScope::MergeFrom(const ProjectScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.identity.v2.ProjectScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
}

void ProjectScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.identity.v2.ProjectScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectScope::CopyFrom(const ProjectScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.identity.v2.ProjectScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectScope::IsInitialized() const {
  return true;
}

void ProjectScope::InternalSwap(ProjectScope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_id_.Swap(&other->project_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectScope::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace identity
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::identity::v2::ApplicationScope* Arena::CreateMaybeMessage< ::speechly::identity::v2::ApplicationScope >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::identity::v2::ApplicationScope >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::identity::v2::ProjectScope* Arena::CreateMaybeMessage< ::speechly::identity::v2::ProjectScope >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::identity::v2::ProjectScope >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
