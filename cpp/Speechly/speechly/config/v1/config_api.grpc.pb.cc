// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/config/v1/config_api.proto

#include "speechly/config/v1/config_api.pb.h"
#include "speechly/config/v1/config_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace speechly {
namespace config {
namespace v1 {

static const char* ConfigAPI_method_names[] = {
  "/speechly.config.v1.ConfigAPI/GetProject",
  "/speechly.config.v1.ConfigAPI/CreateProject",
  "/speechly.config.v1.ConfigAPI/UpdateProject",
  "/speechly.config.v1.ConfigAPI/GetProjectParticipants",
  "/speechly.config.v1.ConfigAPI/Invite",
  "/speechly.config.v1.ConfigAPI/JoinProject",
  "/speechly.config.v1.ConfigAPI/ListApps",
  "/speechly.config.v1.ConfigAPI/GetApp",
  "/speechly.config.v1.ConfigAPI/CreateApp",
  "/speechly.config.v1.ConfigAPI/UpdateApp",
  "/speechly.config.v1.ConfigAPI/DeleteApp",
  "/speechly.config.v1.ConfigAPI/UploadTrainingData",
  "/speechly.config.v1.ConfigAPI/DownloadCurrentTrainingData",
};

std::unique_ptr< ConfigAPI::Stub> ConfigAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigAPI::Stub> stub(new ConfigAPI::Stub(channel));
  return stub;
}

ConfigAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetProject_(ConfigAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProject_(ConfigAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProject_(ConfigAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProjectParticipants_(ConfigAPI_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Invite_(ConfigAPI_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinProject_(ConfigAPI_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListApps_(ConfigAPI_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetApp_(ConfigAPI_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateApp_(ConfigAPI_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateApp_(ConfigAPI_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteApp_(ConfigAPI_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadTrainingData_(ConfigAPI_method_names[11], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DownloadCurrentTrainingData_(ConfigAPI_method_names[12], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ConfigAPI::Stub::GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::speechly::config::v1::GetProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProject_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>* ConfigAPI::Stub::AsyncGetProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::GetProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>* ConfigAPI::Stub::PrepareAsyncGetProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::GetProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetProject_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::speechly::config::v1::CreateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateProject_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::CreateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::CreateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>* ConfigAPI::Stub::AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>* ConfigAPI::Stub::PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::speechly::config::v1::UpdateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProject_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>* ConfigAPI::Stub::AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::UpdateProjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>* ConfigAPI::Stub::PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::UpdateProjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::speechly::config::v1::GetProjectParticipantsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProjectParticipants_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjectParticipants_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::GetProjectParticipants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjectParticipants_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjectParticipants_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::GetProjectParticipants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjectParticipants_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>* ConfigAPI::Stub::AsyncGetProjectParticipantsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::GetProjectParticipantsResponse>::Create(channel_.get(), cq, rpcmethod_GetProjectParticipants_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>* ConfigAPI::Stub::PrepareAsyncGetProjectParticipantsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::GetProjectParticipantsResponse>::Create(channel_.get(), cq, rpcmethod_GetProjectParticipants_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::speechly::config::v1::InviteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Invite_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Invite_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::Invite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::InviteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Invite_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Invite_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::Invite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::InviteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Invite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>* ConfigAPI::Stub::AsyncInviteRaw(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::InviteResponse>::Create(channel_.get(), cq, rpcmethod_Invite_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>* ConfigAPI::Stub::PrepareAsyncInviteRaw(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::InviteResponse>::Create(channel_.get(), cq, rpcmethod_Invite_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::speechly::config::v1::JoinProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_JoinProject_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JoinProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::JoinProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::JoinProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JoinProject_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_JoinProject_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::JoinProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::JoinProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_JoinProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>* ConfigAPI::Stub::AsyncJoinProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::JoinProjectResponse>::Create(channel_.get(), cq, rpcmethod_JoinProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>* ConfigAPI::Stub::PrepareAsyncJoinProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::JoinProjectResponse>::Create(channel_.get(), cq, rpcmethod_JoinProject_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::speechly::config::v1::ListAppsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListApps_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::ListAppsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::ListAppsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>* ConfigAPI::Stub::AsyncListAppsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::ListAppsResponse>::Create(channel_.get(), cq, rpcmethod_ListApps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>* ConfigAPI::Stub::PrepareAsyncListAppsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::ListAppsResponse>::Create(channel_.get(), cq, rpcmethod_ListApps_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::speechly::config::v1::GetAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetApp_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>* ConfigAPI::Stub::AsyncGetAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::GetAppResponse>::Create(channel_.get(), cq, rpcmethod_GetApp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>* ConfigAPI::Stub::PrepareAsyncGetAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::GetAppResponse>::Create(channel_.get(), cq, rpcmethod_GetApp_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::speechly::config::v1::CreateAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateApp_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::CreateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateApp_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::CreateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>* ConfigAPI::Stub::AsyncCreateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::CreateAppResponse>::Create(channel_.get(), cq, rpcmethod_CreateApp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>* ConfigAPI::Stub::PrepareAsyncCreateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::CreateAppResponse>::Create(channel_.get(), cq, rpcmethod_CreateApp_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::speechly::config::v1::UpdateAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateApp_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::UpdateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateApp_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::UpdateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>* ConfigAPI::Stub::AsyncUpdateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::UpdateAppResponse>::Create(channel_.get(), cq, rpcmethod_UpdateApp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>* ConfigAPI::Stub::PrepareAsyncUpdateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::UpdateAppResponse>::Create(channel_.get(), cq, rpcmethod_UpdateApp_, context, request, false);
}

::grpc::Status ConfigAPI::Stub::DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::speechly::config::v1::DeleteAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteApp_, context, request, response);
}

void ConfigAPI::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::DeleteAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, std::move(f));
}

void ConfigAPI::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, reactor);
}

void ConfigAPI::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::DeleteAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>* ConfigAPI::Stub::AsyncDeleteAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::DeleteAppResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>* ConfigAPI::Stub::PrepareAsyncDeleteAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::config::v1::DeleteAppResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApp_, context, request, false);
}

::grpc::ClientWriter< ::speechly::config::v1::UploadTrainingDataRequest>* ConfigAPI::Stub::UploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::speechly::config::v1::UploadTrainingDataRequest>::Create(channel_.get(), rpcmethod_UploadTrainingData_, context, response);
}

void ConfigAPI::Stub::experimental_async::UploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::speechly::config::v1::UploadTrainingDataRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::speechly::config::v1::UploadTrainingDataRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadTrainingData_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>* ConfigAPI::Stub::AsyncUploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::config::v1::UploadTrainingDataRequest>::Create(channel_.get(), cq, rpcmethod_UploadTrainingData_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>* ConfigAPI::Stub::PrepareAsyncUploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::speechly::config::v1::UploadTrainingDataRequest>::Create(channel_.get(), cq, rpcmethod_UploadTrainingData_, context, response, false, nullptr);
}

::grpc::ClientReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* ConfigAPI::Stub::DownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>::Create(channel_.get(), rpcmethod_DownloadCurrentTrainingData_, context, request);
}

void ConfigAPI::Stub::experimental_async::DownloadCurrentTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::DownloadCurrentTrainingDataRequest* request, ::grpc::experimental::ClientReadReactor< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadCurrentTrainingData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* ConfigAPI::Stub::AsyncDownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>::Create(channel_.get(), cq, rpcmethod_DownloadCurrentTrainingData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* ConfigAPI::Stub::PrepareAsyncDownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>::Create(channel_.get(), cq, rpcmethod_DownloadCurrentTrainingData_, context, request, false, nullptr);
}

ConfigAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::GetProjectRequest, ::speechly::config::v1::GetProjectResponse>(
          std::mem_fn(&ConfigAPI::Service::GetProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::CreateProjectRequest, ::speechly::config::v1::CreateProjectResponse>(
          std::mem_fn(&ConfigAPI::Service::CreateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::UpdateProjectRequest, ::speechly::config::v1::UpdateProjectResponse>(
          std::mem_fn(&ConfigAPI::Service::UpdateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::GetProjectParticipantsRequest, ::speechly::config::v1::GetProjectParticipantsResponse>(
          std::mem_fn(&ConfigAPI::Service::GetProjectParticipants), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::InviteRequest, ::speechly::config::v1::InviteResponse>(
          std::mem_fn(&ConfigAPI::Service::Invite), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::JoinProjectRequest, ::speechly::config::v1::JoinProjectResponse>(
          std::mem_fn(&ConfigAPI::Service::JoinProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::ListAppsRequest, ::speechly::config::v1::ListAppsResponse>(
          std::mem_fn(&ConfigAPI::Service::ListApps), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::GetAppRequest, ::speechly::config::v1::GetAppResponse>(
          std::mem_fn(&ConfigAPI::Service::GetApp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::CreateAppRequest, ::speechly::config::v1::CreateAppResponse>(
          std::mem_fn(&ConfigAPI::Service::CreateApp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::UpdateAppRequest, ::speechly::config::v1::UpdateAppResponse>(
          std::mem_fn(&ConfigAPI::Service::UpdateApp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAPI::Service, ::speechly::config::v1::DeleteAppRequest, ::speechly::config::v1::DeleteAppResponse>(
          std::mem_fn(&ConfigAPI::Service::DeleteApp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[11],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ConfigAPI::Service, ::speechly::config::v1::UploadTrainingDataRequest, ::speechly::config::v1::UploadTrainingDataResponse>(
          std::mem_fn(&ConfigAPI::Service::UploadTrainingData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAPI_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConfigAPI::Service, ::speechly::config::v1::DownloadCurrentTrainingDataRequest, ::speechly::config::v1::DownloadCurrentTrainingDataResponse>(
          std::mem_fn(&ConfigAPI::Service::DownloadCurrentTrainingData), this)));
}

ConfigAPI::Service::~Service() {
}

::grpc::Status ConfigAPI::Service::GetProject(::grpc::ServerContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::CreateProject(::grpc::ServerContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::UpdateProject(::grpc::ServerContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::GetProjectParticipants(::grpc::ServerContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::Invite(::grpc::ServerContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::JoinProject(::grpc::ServerContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::ListApps(::grpc::ServerContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::GetApp(::grpc::ServerContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::CreateApp(::grpc::ServerContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::UpdateApp(::grpc::ServerContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::DeleteApp(::grpc::ServerContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::UploadTrainingData(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::config::v1::UploadTrainingDataRequest>* reader, ::speechly::config::v1::UploadTrainingDataResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAPI::Service::DownloadCurrentTrainingData(::grpc::ServerContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* request, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speechly
}  // namespace config
}  // namespace v1

