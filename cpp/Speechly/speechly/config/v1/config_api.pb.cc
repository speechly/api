// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/config/v1/config_api.proto

#include "speechly/config/v1/config_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto;
namespace speechly {
namespace config {
namespace v1 {
class GetProjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectRequest> _instance;
} _GetProjectRequest_default_instance_;
class GetProjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectResponse> _instance;
} _GetProjectResponse_default_instance_;
class CreateProjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateProjectRequest> _instance;
} _CreateProjectRequest_default_instance_;
class CreateProjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateProjectResponse> _instance;
} _CreateProjectResponse_default_instance_;
class UpdateProjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateProjectRequest> _instance;
} _UpdateProjectRequest_default_instance_;
class UpdateProjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateProjectResponse> _instance;
} _UpdateProjectResponse_default_instance_;
class GetProjectParticipantsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectParticipantsRequest> _instance;
} _GetProjectParticipantsRequest_default_instance_;
class GetProjectParticipantsResponse_ParticipantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectParticipantsResponse_Participant> _instance;
} _GetProjectParticipantsResponse_Participant_default_instance_;
class GetProjectParticipantsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectParticipantsResponse> _instance;
} _GetProjectParticipantsResponse_default_instance_;
class InviteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InviteRequest> _instance;
} _InviteRequest_default_instance_;
class InviteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InviteResponse> _instance;
} _InviteResponse_default_instance_;
class JoinProjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinProjectRequest> _instance;
} _JoinProjectRequest_default_instance_;
class JoinProjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinProjectResponse> _instance;
} _JoinProjectResponse_default_instance_;
class ListAppsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppsRequest> _instance;
} _ListAppsRequest_default_instance_;
class ListAppsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppsResponse> _instance;
} _ListAppsResponse_default_instance_;
class GetAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppRequest> _instance;
} _GetAppRequest_default_instance_;
class GetAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppResponse> _instance;
} _GetAppResponse_default_instance_;
class CreateAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAppRequest> _instance;
} _CreateAppRequest_default_instance_;
class CreateAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAppResponse> _instance;
} _CreateAppResponse_default_instance_;
class UpdateAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAppRequest> _instance;
} _UpdateAppRequest_default_instance_;
class UpdateAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAppResponse> _instance;
} _UpdateAppResponse_default_instance_;
class DeleteAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAppRequest> _instance;
} _DeleteAppRequest_default_instance_;
class DeleteAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAppResponse> _instance;
} _DeleteAppResponse_default_instance_;
class UploadTrainingDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadTrainingDataRequest> _instance;
} _UploadTrainingDataRequest_default_instance_;
class UploadTrainingDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadTrainingDataResponse> _instance;
} _UploadTrainingDataResponse_default_instance_;
class DownloadCurrentTrainingDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadCurrentTrainingDataRequest> _instance;
} _DownloadCurrentTrainingDataRequest_default_instance_;
class DownloadCurrentTrainingDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadCurrentTrainingDataResponse> _instance;
} _DownloadCurrentTrainingDataResponse_default_instance_;
class AppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<App> _instance;
} _App_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace speechly
static void InitDefaultsscc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_App_default_instance_;
    new (ptr) ::speechly::config::v1::App();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::App::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_CreateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_CreateAppRequest_default_instance_;
    new (ptr) ::speechly::config::v1::CreateAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::CreateAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {
      &scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_CreateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_CreateAppResponse_default_instance_;
    new (ptr) ::speechly::config::v1::CreateAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::CreateAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {
      &scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_CreateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_CreateProjectRequest_default_instance_;
    new (ptr) ::speechly::config::v1::CreateProjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::CreateProjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_CreateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_CreateProjectResponse_default_instance_;
    new (ptr) ::speechly::config::v1::CreateProjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::CreateProjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_DeleteAppRequest_default_instance_;
    new (ptr) ::speechly::config::v1::DeleteAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::DeleteAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_DeleteAppResponse_default_instance_;
    new (ptr) ::speechly::config::v1::DeleteAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::DeleteAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_DownloadCurrentTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_DownloadCurrentTrainingDataRequest_default_instance_;
    new (ptr) ::speechly::config::v1::DownloadCurrentTrainingDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::DownloadCurrentTrainingDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadCurrentTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DownloadCurrentTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_DownloadCurrentTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_DownloadCurrentTrainingDataResponse_default_instance_;
    new (ptr) ::speechly::config::v1::DownloadCurrentTrainingDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::DownloadCurrentTrainingDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadCurrentTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DownloadCurrentTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GetAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_GetAppRequest_default_instance_;
    new (ptr) ::speechly::config::v1::GetAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::GetAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GetAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_GetAppResponse_default_instance_;
    new (ptr) ::speechly::config::v1::GetAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::GetAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {
      &scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_GetProjectParticipantsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_GetProjectParticipantsRequest_default_instance_;
    new (ptr) ::speechly::config::v1::GetProjectParticipantsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::GetProjectParticipantsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectParticipantsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectParticipantsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GetProjectParticipantsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_GetProjectParticipantsResponse_default_instance_;
    new (ptr) ::speechly::config::v1::GetProjectParticipantsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::GetProjectParticipantsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProjectParticipantsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProjectParticipantsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {
      &scc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_GetProjectParticipantsResponse_Participant_default_instance_;
    new (ptr) ::speechly::config::v1::GetProjectParticipantsResponse_Participant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::GetProjectParticipantsResponse_Participant::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GetProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_GetProjectRequest_default_instance_;
    new (ptr) ::speechly::config::v1::GetProjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::GetProjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_GetProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_GetProjectResponse_default_instance_;
    new (ptr) ::speechly::config::v1::GetProjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::GetProjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_InviteRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_InviteRequest_default_instance_;
    new (ptr) ::speechly::config::v1::InviteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::InviteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InviteRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InviteRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_InviteResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_InviteResponse_default_instance_;
    new (ptr) ::speechly::config::v1::InviteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::InviteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InviteResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InviteResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_JoinProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_JoinProjectRequest_default_instance_;
    new (ptr) ::speechly::config::v1::JoinProjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::JoinProjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_JoinProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_JoinProjectResponse_default_instance_;
    new (ptr) ::speechly::config::v1::JoinProjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::JoinProjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_ListAppsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_ListAppsRequest_default_instance_;
    new (ptr) ::speechly::config::v1::ListAppsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::ListAppsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAppsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAppsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_ListAppsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_ListAppsResponse_default_instance_;
    new (ptr) ::speechly::config::v1::ListAppsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::ListAppsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAppsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAppsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {
      &scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_UpdateAppRequest_default_instance_;
    new (ptr) ::speechly::config::v1::UpdateAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::UpdateAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {
      &scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_UpdateAppResponse_default_instance_;
    new (ptr) ::speechly::config::v1::UpdateAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::UpdateAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_UpdateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_UpdateProjectRequest_default_instance_;
    new (ptr) ::speechly::config::v1::UpdateProjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::UpdateProjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_UpdateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_UpdateProjectResponse_default_instance_;
    new (ptr) ::speechly::config::v1::UpdateProjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::UpdateProjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_UploadTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_UploadTrainingDataRequest_default_instance_;
    new (ptr) ::speechly::config::v1::UploadTrainingDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::UploadTrainingDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_UploadTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::config::v1::_UploadTrainingDataResponse_default_instance_;
    new (ptr) ::speechly::config::v1::UploadTrainingDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::config::v1::UploadTrainingDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectResponse, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectResponse, project_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectResponse, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectResponse, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectRequest, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, name_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, email_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse, participants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteResponse, invitation_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::JoinProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::JoinProjectRequest, invitation_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::JoinProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsResponse, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppRequest, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppResponse, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppRequest, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppRequest, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppResponse, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateAppRequest, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DeleteAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DeleteAppRequest, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DeleteAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, data_chunk_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataRequest, config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataResponse, data_chunk_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataResponse, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, language_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, status_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, name_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, queue_size_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, error_msg_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, estimated_remaining_sec_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, estimated_training_time_sec_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, training_time_sec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::config::v1::GetProjectRequest)},
  { 5, -1, sizeof(::speechly::config::v1::GetProjectResponse)},
  { 12, -1, sizeof(::speechly::config::v1::CreateProjectRequest)},
  { 18, -1, sizeof(::speechly::config::v1::CreateProjectResponse)},
  { 25, -1, sizeof(::speechly::config::v1::UpdateProjectRequest)},
  { 32, -1, sizeof(::speechly::config::v1::UpdateProjectResponse)},
  { 37, -1, sizeof(::speechly::config::v1::GetProjectParticipantsRequest)},
  { 43, -1, sizeof(::speechly::config::v1::GetProjectParticipantsResponse_Participant)},
  { 51, -1, sizeof(::speechly::config::v1::GetProjectParticipantsResponse)},
  { 57, -1, sizeof(::speechly::config::v1::InviteRequest)},
  { 63, -1, sizeof(::speechly::config::v1::InviteResponse)},
  { 69, -1, sizeof(::speechly::config::v1::JoinProjectRequest)},
  { 75, -1, sizeof(::speechly::config::v1::JoinProjectResponse)},
  { 80, -1, sizeof(::speechly::config::v1::ListAppsRequest)},
  { 86, -1, sizeof(::speechly::config::v1::ListAppsResponse)},
  { 92, -1, sizeof(::speechly::config::v1::GetAppRequest)},
  { 98, -1, sizeof(::speechly::config::v1::GetAppResponse)},
  { 104, -1, sizeof(::speechly::config::v1::CreateAppRequest)},
  { 111, -1, sizeof(::speechly::config::v1::CreateAppResponse)},
  { 117, -1, sizeof(::speechly::config::v1::UpdateAppRequest)},
  { 123, -1, sizeof(::speechly::config::v1::UpdateAppResponse)},
  { 128, -1, sizeof(::speechly::config::v1::DeleteAppRequest)},
  { 134, -1, sizeof(::speechly::config::v1::DeleteAppResponse)},
  { 139, -1, sizeof(::speechly::config::v1::UploadTrainingDataRequest)},
  { 147, -1, sizeof(::speechly::config::v1::UploadTrainingDataResponse)},
  { 152, -1, sizeof(::speechly::config::v1::DownloadCurrentTrainingDataRequest)},
  { 159, -1, sizeof(::speechly::config::v1::DownloadCurrentTrainingDataResponse)},
  { 166, -1, sizeof(::speechly::config::v1::App)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectParticipantsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectParticipantsResponse_Participant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectParticipantsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_InviteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_InviteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_JoinProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_JoinProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_ListAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_ListAppsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DeleteAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DeleteAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UploadTrainingDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UploadTrainingDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DownloadCurrentTrainingDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DownloadCurrentTrainingDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_App_default_instance_),
};

const char descriptor_table_protodef_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#speechly/config/v1/config_api.proto\022\022s"
  "peechly.config.v1\"\023\n\021GetProjectRequest\"<"
  "\n\022GetProjectResponse\022\017\n\007project\030\001 \003(\t\022\025\n"
  "\rproject_names\030\002 \003(\t\"$\n\024CreateProjectReq"
  "uest\022\014\n\004name\030\001 \001(\t\"6\n\025CreateProjectRespo"
  "nse\022\017\n\007project\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"5\n\024Up"
  "dateProjectRequest\022\017\n\007project\030\001 \001(\t\022\014\n\004n"
  "ame\030\002 \001(\t\"\027\n\025UpdateProjectResponse\"0\n\035Ge"
  "tProjectParticipantsRequest\022\017\n\007project\030\001"
  " \001(\t\"\256\001\n\036GetProjectParticipantsResponse\022"
  "T\n\014participants\030\001 \003(\0132>.speechly.config."
  "v1.GetProjectParticipantsResponse.Partic"
  "ipant\0326\n\013Participant\022\014\n\004name\030\001 \001(\t\022\r\n\005em"
  "ail\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\" \n\rInviteRequest\022\017"
  "\n\007project\030\001 \001(\t\"*\n\016InviteResponse\022\030\n\020inv"
  "itation_token\030\001 \001(\t\".\n\022JoinProjectReques"
  "t\022\030\n\020invitation_token\030\001 \001(\t\"\025\n\023JoinProje"
  "ctResponse\"\"\n\017ListAppsRequest\022\017\n\007project"
  "\030\001 \001(\t\"9\n\020ListAppsResponse\022%\n\004apps\030\001 \003(\013"
  "2\027.speechly.config.v1.App\"\037\n\rGetAppReque"
  "st\022\016\n\006app_id\030\001 \001(\t\"6\n\016GetAppResponse\022$\n\003"
  "app\030\001 \001(\0132\027.speechly.config.v1.App\"I\n\020Cr"
  "eateAppRequest\022\017\n\007project\030\001 \001(\t\022$\n\003app\030\002"
  " \001(\0132\027.speechly.config.v1.App\"9\n\021CreateA"
  "ppResponse\022$\n\003app\030\001 \001(\0132\027.speechly.confi"
  "g.v1.App\"8\n\020UpdateAppRequest\022$\n\003app\030\001 \001("
  "\0132\027.speechly.config.v1.App\"\023\n\021UpdateAppR"
  "esponse\"\"\n\020DeleteAppRequest\022\016\n\006app_id\030\001 "
  "\001(\t\"\023\n\021DeleteAppResponse\"\352\001\n\031UploadTrain"
  "ingDataRequest\022\016\n\006app_id\030\001 \001(\t\022\022\n\ndata_c"
  "hunk\030\002 \001(\014\022O\n\014content_type\030\003 \001(\01629.speec"
  "hly.config.v1.UploadTrainingDataRequest."
  "ContentType\"X\n\013ContentType\022\034\n\030CONTENT_TY"
  "PE_UNSPECIFIED\020\000\022\025\n\021CONTENT_TYPE_YAML\020\001\022"
  "\024\n\020CONTENT_TYPE_TAR\020\002\"\034\n\032UploadTrainingD"
  "ataResponse\"G\n\"DownloadCurrentTrainingDa"
  "taRequest\022\016\n\006app_id\030\001 \001(\t\022\021\n\tconfig_id\030\002"
  " \001(\t\"\356\001\n#DownloadCurrentTrainingDataResp"
  "onse\022\022\n\ndata_chunk\030\001 \001(\014\022Y\n\014content_type"
  "\030\002 \001(\0162C.speechly.config.v1.DownloadCurr"
  "entTrainingDataResponse.ContentType\"X\n\013C"
  "ontentType\022\034\n\030CONTENT_TYPE_UNSPECIFIED\020\000"
  "\022\025\n\021CONTENT_TYPE_YAML\020\001\022\024\n\020CONTENT_TYPE_"
  "TAR\020\002\"\327\002\n\003App\022\n\n\002id\030\001 \001(\t\022\020\n\010language\030\002 "
  "\001(\t\022.\n\006status\030\003 \001(\0162\036.speechly.config.v1"
  ".App.Status\022\014\n\004name\030\004 \001(\t\022\022\n\nqueue_size\030"
  "\005 \001(\005\022\021\n\terror_msg\030\006 \001(\t\022\037\n\027estimated_re"
  "maining_sec\030\007 \001(\005\022#\n\033estimated_training_"
  "time_sec\030\010 \001(\005\022\031\n\021training_time_sec\030\t \001("
  "\005\"l\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000\022\016\n\nS"
  "TATUS_NEW\020\001\022\023\n\017STATUS_TRAINING\020\002\022\022\n\016STAT"
  "US_TRAINED\020\003\022\021\n\rSTATUS_FAILED\020\0042\246\n\n\tConf"
  "igAPI\022[\n\nGetProject\022%.speechly.config.v1"
  ".GetProjectRequest\032&.speechly.config.v1."
  "GetProjectResponse\022d\n\rCreateProject\022(.sp"
  "eechly.config.v1.CreateProjectRequest\032)."
  "speechly.config.v1.CreateProjectResponse"
  "\022d\n\rUpdateProject\022(.speechly.config.v1.U"
  "pdateProjectRequest\032).speechly.config.v1"
  ".UpdateProjectResponse\022\177\n\026GetProjectPart"
  "icipants\0221.speechly.config.v1.GetProject"
  "ParticipantsRequest\0322.speechly.config.v1"
  ".GetProjectParticipantsResponse\022O\n\006Invit"
  "e\022!.speechly.config.v1.InviteRequest\032\".s"
  "peechly.config.v1.InviteResponse\022^\n\013Join"
  "Project\022&.speechly.config.v1.JoinProject"
  "Request\032\'.speechly.config.v1.JoinProject"
  "Response\022U\n\010ListApps\022#.speechly.config.v"
  "1.ListAppsRequest\032$.speechly.config.v1.L"
  "istAppsResponse\022O\n\006GetApp\022!.speechly.con"
  "fig.v1.GetAppRequest\032\".speechly.config.v"
  "1.GetAppResponse\022X\n\tCreateApp\022$.speechly"
  ".config.v1.CreateAppRequest\032%.speechly.c"
  "onfig.v1.CreateAppResponse\022X\n\tUpdateApp\022"
  "$.speechly.config.v1.UpdateAppRequest\032%."
  "speechly.config.v1.UpdateAppResponse\022X\n\t"
  "DeleteApp\022$.speechly.config.v1.DeleteApp"
  "Request\032%.speechly.config.v1.DeleteAppRe"
  "sponse\022u\n\022UploadTrainingData\022-.speechly."
  "config.v1.UploadTrainingDataRequest\032..sp"
  "eechly.config.v1.UploadTrainingDataRespo"
  "nse(\001\022\220\001\n\033DownloadCurrentTrainingData\0226."
  "speechly.config.v1.DownloadCurrentTraini"
  "ngDataRequest\0327.speechly.config.v1.Downl"
  "oadCurrentTrainingDataResponse0\001B{\n\032com."
  "speechly.api.config.v1B\016ConfigApiProtoP\001"
  "Z\033speechly/config/v1;configv1\242\002\003SCX\252\002\022Sp"
  "eechly.Config.V1\312\002\022Speechly\\Config\\V1b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_sccs[28] = {
  &scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_CreateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_CreateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_CreateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_CreateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_DeleteAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_DeleteAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_DownloadCurrentTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_DownloadCurrentTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_GetAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_GetAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_GetProjectParticipantsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_GetProjectParticipantsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_GetProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_GetProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_InviteRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_InviteResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_JoinProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_JoinProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_ListAppsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_ListAppsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_UpdateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_UpdateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_UpdateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_UpdateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_UploadTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
  &scc_info_UploadTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once;
static bool descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto = {
  &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_initialized, descriptor_table_protodef_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto, "speechly/config/v1/config_api.proto", 3525,
  &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once, descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_sccs, descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_deps, 28, 0,
  schemas, file_default_instances, TableStruct_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto, 28, file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto, file_level_service_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto), true);
namespace speechly {
namespace config {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadTrainingDataRequest_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[0];
}
bool UploadTrainingDataRequest_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::CONTENT_TYPE_UNSPECIFIED;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::CONTENT_TYPE_YAML;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::CONTENT_TYPE_TAR;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::ContentType_MIN;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::ContentType_MAX;
constexpr int UploadTrainingDataRequest::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadCurrentTrainingDataResponse_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[1];
}
bool DownloadCurrentTrainingDataResponse_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::CONTENT_TYPE_UNSPECIFIED;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::CONTENT_TYPE_YAML;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::CONTENT_TYPE_TAR;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::ContentType_MIN;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::ContentType_MAX;
constexpr int DownloadCurrentTrainingDataResponse::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* App_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[2];
}
bool App_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr App_Status App::STATUS_UNSPECIFIED;
constexpr App_Status App::STATUS_NEW;
constexpr App_Status App::STATUS_TRAINING;
constexpr App_Status App::STATUS_TRAINED;
constexpr App_Status App::STATUS_FAILED;
constexpr App_Status App::Status_MIN;
constexpr App_Status App::Status_MAX;
constexpr int App::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GetProjectRequest::InitAsDefaultInstance() {
}
class GetProjectRequest::_Internal {
 public:
};

GetProjectRequest::GetProjectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.GetProjectRequest)
}
GetProjectRequest::GetProjectRequest(const GetProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectRequest)
}

void GetProjectRequest::SharedCtor() {
}

GetProjectRequest::~GetProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectRequest)
  SharedDtor();
}

void GetProjectRequest::SharedDtor() {
}

void GetProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectRequest& GetProjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectRequest)
  return target;
}

size_t GetProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.GetProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.GetProjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.GetProjectRequest)
    MergeFrom(*source);
  }
}

void GetProjectRequest::MergeFrom(const GetProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetProjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.GetProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectRequest::CopyFrom(const GetProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectRequest::IsInitialized() const {
  return true;
}

void GetProjectRequest::InternalSwap(GetProjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectResponse::InitAsDefaultInstance() {
}
class GetProjectResponse::_Internal {
 public:
};

GetProjectResponse::GetProjectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.GetProjectResponse)
}
GetProjectResponse::GetProjectResponse(const GetProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      project_(from.project_),
      project_names_(from.project_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectResponse)
}

void GetProjectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
}

GetProjectResponse::~GetProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectResponse)
  SharedDtor();
}

void GetProjectResponse::SharedDtor() {
}

void GetProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectResponse& GetProjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.Clear();
  project_names_.Clear();
  _internal_metadata_.Clear();
}

const char* GetProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_project();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectResponse.project"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string project_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_project_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectResponse.project_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string project = 1;
  for (int i = 0, n = this->_internal_project_size(); i < n; i++) {
    const auto& s = this->_internal_project(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectResponse.project");
    target = stream->WriteString(1, s, target);
  }

  // repeated string project_names = 2;
  for (int i = 0, n = this->_internal_project_names_size(); i < n; i++) {
    const auto& s = this->_internal_project_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectResponse.project_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectResponse)
  return target;
}

size_t GetProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string project = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(project_.size());
  for (int i = 0, n = project_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      project_.Get(i));
  }

  // repeated string project_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(project_names_.size());
  for (int i = 0, n = project_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      project_names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.GetProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.GetProjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.GetProjectResponse)
    MergeFrom(*source);
  }
}

void GetProjectResponse::MergeFrom(const GetProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  project_.MergeFrom(from.project_);
  project_names_.MergeFrom(from.project_names_);
}

void GetProjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.GetProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectResponse::CopyFrom(const GetProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectResponse::IsInitialized() const {
  return true;
}

void GetProjectResponse::InternalSwap(GetProjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.InternalSwap(&other->project_);
  project_names_.InternalSwap(&other->project_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateProjectRequest::InitAsDefaultInstance() {
}
class CreateProjectRequest::_Internal {
 public:
};

CreateProjectRequest::CreateProjectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.CreateProjectRequest)
}
CreateProjectRequest::CreateProjectRequest(const CreateProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateProjectRequest)
}

void CreateProjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProjectRequest::~CreateProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateProjectRequest)
  SharedDtor();
}

void CreateProjectRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateProjectRequest& CreateProjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void CreateProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateProjectRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateProjectRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateProjectRequest)
  return target;
}

size_t CreateProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateProjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.CreateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateProjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateProjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.CreateProjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.CreateProjectRequest)
    MergeFrom(*source);
  }
}

void CreateProjectRequest::MergeFrom(const CreateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CreateProjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.CreateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateProjectRequest::CopyFrom(const CreateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectRequest::IsInitialized() const {
  return true;
}

void CreateProjectRequest::InternalSwap(CreateProjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateProjectResponse::InitAsDefaultInstance() {
}
class CreateProjectResponse::_Internal {
 public:
};

CreateProjectResponse::CreateProjectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.CreateProjectResponse)
}
CreateProjectResponse::CreateProjectResponse(const CreateProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateProjectResponse)
}

void CreateProjectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProjectResponse::~CreateProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateProjectResponse)
  SharedDtor();
}

void CreateProjectResponse::SharedDtor() {
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateProjectResponse& CreateProjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void CreateProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateProjectResponse.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateProjectResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateProjectResponse.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateProjectResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateProjectResponse)
  return target;
}

size_t CreateProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateProjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.CreateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateProjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateProjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.CreateProjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.CreateProjectResponse)
    MergeFrom(*source);
  }
}

void CreateProjectResponse::MergeFrom(const CreateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CreateProjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.CreateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateProjectResponse::CopyFrom(const CreateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectResponse::IsInitialized() const {
  return true;
}

void CreateProjectResponse::InternalSwap(CreateProjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateProjectRequest::InitAsDefaultInstance() {
}
class UpdateProjectRequest::_Internal {
 public:
};

UpdateProjectRequest::UpdateProjectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.UpdateProjectRequest)
}
UpdateProjectRequest::UpdateProjectRequest(const UpdateProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateProjectRequest)
}

void UpdateProjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateProjectRequest::~UpdateProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateProjectRequest)
  SharedDtor();
}

void UpdateProjectRequest::SharedDtor() {
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateProjectRequest& UpdateProjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void UpdateProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UpdateProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.UpdateProjectRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.UpdateProjectRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.UpdateProjectRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.UpdateProjectRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateProjectRequest)
  return target;
}

size_t UpdateProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateProjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.UpdateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateProjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateProjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.UpdateProjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.UpdateProjectRequest)
    MergeFrom(*source);
  }
}

void UpdateProjectRequest::MergeFrom(const UpdateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void UpdateProjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.UpdateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateProjectRequest::CopyFrom(const UpdateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectRequest::IsInitialized() const {
  return true;
}

void UpdateProjectRequest::InternalSwap(UpdateProjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateProjectResponse::InitAsDefaultInstance() {
}
class UpdateProjectResponse::_Internal {
 public:
};

UpdateProjectResponse::UpdateProjectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.UpdateProjectResponse)
}
UpdateProjectResponse::UpdateProjectResponse(const UpdateProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateProjectResponse)
}

void UpdateProjectResponse::SharedCtor() {
}

UpdateProjectResponse::~UpdateProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateProjectResponse)
  SharedDtor();
}

void UpdateProjectResponse::SharedDtor() {
}

void UpdateProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateProjectResponse& UpdateProjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void UpdateProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UpdateProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateProjectResponse)
  return target;
}

size_t UpdateProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateProjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.UpdateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateProjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateProjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.UpdateProjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.UpdateProjectResponse)
    MergeFrom(*source);
  }
}

void UpdateProjectResponse::MergeFrom(const UpdateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateProjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.UpdateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateProjectResponse::CopyFrom(const UpdateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectResponse::IsInitialized() const {
  return true;
}

void UpdateProjectResponse::InternalSwap(UpdateProjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectParticipantsRequest::InitAsDefaultInstance() {
}
class GetProjectParticipantsRequest::_Internal {
 public:
};

GetProjectParticipantsRequest::GetProjectParticipantsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.GetProjectParticipantsRequest)
}
GetProjectParticipantsRequest::GetProjectParticipantsRequest(const GetProjectParticipantsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectParticipantsRequest)
}

void GetProjectParticipantsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectParticipantsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProjectParticipantsRequest::~GetProjectParticipantsRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectParticipantsRequest)
  SharedDtor();
}

void GetProjectParticipantsRequest::SharedDtor() {
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProjectParticipantsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectParticipantsRequest& GetProjectParticipantsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectParticipantsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetProjectParticipantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectParticipantsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetProjectParticipantsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectParticipantsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectParticipantsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectParticipantsRequest)
  return target;
}

size_t GetProjectParticipantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectParticipantsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectParticipantsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.GetProjectParticipantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectParticipantsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectParticipantsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.GetProjectParticipantsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.GetProjectParticipantsRequest)
    MergeFrom(*source);
  }
}

void GetProjectParticipantsRequest::MergeFrom(const GetProjectParticipantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectParticipantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
}

void GetProjectParticipantsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.GetProjectParticipantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectParticipantsRequest::CopyFrom(const GetProjectParticipantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectParticipantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectParticipantsRequest::IsInitialized() const {
  return true;
}

void GetProjectParticipantsRequest::InternalSwap(GetProjectParticipantsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectParticipantsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectParticipantsResponse_Participant::InitAsDefaultInstance() {
}
class GetProjectParticipantsResponse_Participant::_Internal {
 public:
};

GetProjectParticipantsResponse_Participant::GetProjectParticipantsResponse_Participant()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.GetProjectParticipantsResponse.Participant)
}
GetProjectParticipantsResponse_Participant::GetProjectParticipantsResponse_Participant(const GetProjectParticipantsResponse_Participant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectParticipantsResponse.Participant)
}

void GetProjectParticipantsResponse_Participant::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProjectParticipantsResponse_Participant::~GetProjectParticipantsResponse_Participant() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  SharedDtor();
}

void GetProjectParticipantsResponse_Participant::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProjectParticipantsResponse_Participant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectParticipantsResponse_Participant& GetProjectParticipantsResponse_Participant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectParticipantsResponse_Participant_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetProjectParticipantsResponse_Participant::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetProjectParticipantsResponse_Participant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsResponse.Participant.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsResponse.Participant.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsResponse.Participant.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectParticipantsResponse_Participant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsResponse.Participant.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsResponse.Participant.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsResponse.Participant.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  return target;
}

size_t GetProjectParticipantsResponse_Participant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectParticipantsResponse_Participant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectParticipantsResponse_Participant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectParticipantsResponse_Participant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.GetProjectParticipantsResponse.Participant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.GetProjectParticipantsResponse.Participant)
    MergeFrom(*source);
  }
}

void GetProjectParticipantsResponse_Participant::MergeFrom(const GetProjectParticipantsResponse_Participant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void GetProjectParticipantsResponse_Participant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectParticipantsResponse_Participant::CopyFrom(const GetProjectParticipantsResponse_Participant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectParticipantsResponse_Participant::IsInitialized() const {
  return true;
}

void GetProjectParticipantsResponse_Participant::InternalSwap(GetProjectParticipantsResponse_Participant* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectParticipantsResponse_Participant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectParticipantsResponse::InitAsDefaultInstance() {
}
class GetProjectParticipantsResponse::_Internal {
 public:
};

GetProjectParticipantsResponse::GetProjectParticipantsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.GetProjectParticipantsResponse)
}
GetProjectParticipantsResponse::GetProjectParticipantsResponse(const GetProjectParticipantsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      participants_(from.participants_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectParticipantsResponse)
}

void GetProjectParticipantsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectParticipantsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
}

GetProjectParticipantsResponse::~GetProjectParticipantsResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectParticipantsResponse)
  SharedDtor();
}

void GetProjectParticipantsResponse::SharedDtor() {
}

void GetProjectParticipantsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectParticipantsResponse& GetProjectParticipantsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectParticipantsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetProjectParticipantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectParticipantsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participants_.Clear();
  _internal_metadata_.Clear();
}

const char* GetProjectParticipantsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speechly.config.v1.GetProjectParticipantsResponse.Participant participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectParticipantsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectParticipantsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.config.v1.GetProjectParticipantsResponse.Participant participants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_participants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectParticipantsResponse)
  return target;
}

size_t GetProjectParticipantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectParticipantsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.config.v1.GetProjectParticipantsResponse.Participant participants = 1;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectParticipantsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.GetProjectParticipantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectParticipantsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectParticipantsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.GetProjectParticipantsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.GetProjectParticipantsResponse)
    MergeFrom(*source);
  }
}

void GetProjectParticipantsResponse::MergeFrom(const GetProjectParticipantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectParticipantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
}

void GetProjectParticipantsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.GetProjectParticipantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectParticipantsResponse::CopyFrom(const GetProjectParticipantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectParticipantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectParticipantsResponse::IsInitialized() const {
  return true;
}

void GetProjectParticipantsResponse::InternalSwap(GetProjectParticipantsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  participants_.InternalSwap(&other->participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectParticipantsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InviteRequest::InitAsDefaultInstance() {
}
class InviteRequest::_Internal {
 public:
};

InviteRequest::InviteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.InviteRequest)
}
InviteRequest::InviteRequest(const InviteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.InviteRequest)
}

void InviteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InviteRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InviteRequest::~InviteRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.InviteRequest)
  SharedDtor();
}

void InviteRequest::SharedDtor() {
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InviteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InviteRequest& InviteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InviteRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void InviteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.InviteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InviteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.InviteRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InviteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.InviteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.InviteRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.InviteRequest)
  return target;
}

size_t InviteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.InviteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InviteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.InviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InviteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.InviteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.InviteRequest)
    MergeFrom(*source);
  }
}

void InviteRequest::MergeFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.InviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
}

void InviteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.InviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteRequest::CopyFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.InviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRequest::IsInitialized() const {
  return true;
}

void InviteRequest::InternalSwap(InviteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InviteResponse::InitAsDefaultInstance() {
}
class InviteResponse::_Internal {
 public:
};

InviteResponse::InviteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.InviteResponse)
}
InviteResponse::InviteResponse(const InviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_token().empty()) {
    invitation_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_token_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.InviteResponse)
}

void InviteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InviteResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InviteResponse::~InviteResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.InviteResponse)
  SharedDtor();
}

void InviteResponse::SharedDtor() {
  invitation_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InviteResponse& InviteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InviteResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void InviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.InviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitation_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string invitation_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.InviteResponse.invitation_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InviteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.InviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (this->invitation_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_token().data(), static_cast<int>(this->_internal_invitation_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.InviteResponse.invitation_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.InviteResponse)
  return target;
}

size_t InviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.InviteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (this->invitation_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InviteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.InviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InviteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.InviteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.InviteResponse)
    MergeFrom(*source);
  }
}

void InviteResponse::MergeFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.InviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invitation_token().size() > 0) {

    invitation_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_token_);
  }
}

void InviteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.InviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteResponse::CopyFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.InviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteResponse::IsInitialized() const {
  return true;
}

void InviteResponse::InternalSwap(InviteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  invitation_token_.Swap(&other->invitation_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinProjectRequest::InitAsDefaultInstance() {
}
class JoinProjectRequest::_Internal {
 public:
};

JoinProjectRequest::JoinProjectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.JoinProjectRequest)
}
JoinProjectRequest::JoinProjectRequest(const JoinProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_token().empty()) {
    invitation_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_token_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.JoinProjectRequest)
}

void JoinProjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JoinProjectRequest::~JoinProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.JoinProjectRequest)
  SharedDtor();
}

void JoinProjectRequest::SharedDtor() {
  invitation_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinProjectRequest& JoinProjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinProjectRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void JoinProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.JoinProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitation_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* JoinProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string invitation_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.JoinProjectRequest.invitation_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.JoinProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (this->invitation_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_token().data(), static_cast<int>(this->_internal_invitation_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.JoinProjectRequest.invitation_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.JoinProjectRequest)
  return target;
}

size_t JoinProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.JoinProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (this->invitation_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinProjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.JoinProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinProjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinProjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.JoinProjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.JoinProjectRequest)
    MergeFrom(*source);
  }
}

void JoinProjectRequest::MergeFrom(const JoinProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.JoinProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invitation_token().size() > 0) {

    invitation_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_token_);
  }
}

void JoinProjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.JoinProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinProjectRequest::CopyFrom(const JoinProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.JoinProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinProjectRequest::IsInitialized() const {
  return true;
}

void JoinProjectRequest::InternalSwap(JoinProjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  invitation_token_.Swap(&other->invitation_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinProjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinProjectResponse::InitAsDefaultInstance() {
}
class JoinProjectResponse::_Internal {
 public:
};

JoinProjectResponse::JoinProjectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.JoinProjectResponse)
}
JoinProjectResponse::JoinProjectResponse(const JoinProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.JoinProjectResponse)
}

void JoinProjectResponse::SharedCtor() {
}

JoinProjectResponse::~JoinProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.JoinProjectResponse)
  SharedDtor();
}

void JoinProjectResponse::SharedDtor() {
}

void JoinProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinProjectResponse& JoinProjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinProjectResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void JoinProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.JoinProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* JoinProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.JoinProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.JoinProjectResponse)
  return target;
}

size_t JoinProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.JoinProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinProjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.JoinProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinProjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinProjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.JoinProjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.JoinProjectResponse)
    MergeFrom(*source);
  }
}

void JoinProjectResponse::MergeFrom(const JoinProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.JoinProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void JoinProjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.JoinProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinProjectResponse::CopyFrom(const JoinProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.JoinProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinProjectResponse::IsInitialized() const {
  return true;
}

void JoinProjectResponse::InternalSwap(JoinProjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinProjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppsRequest::InitAsDefaultInstance() {
}
class ListAppsRequest::_Internal {
 public:
};

ListAppsRequest::ListAppsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.ListAppsRequest)
}
ListAppsRequest::ListAppsRequest(const ListAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.ListAppsRequest)
}

void ListAppsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListAppsRequest::~ListAppsRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.ListAppsRequest)
  SharedDtor();
}

void ListAppsRequest::SharedDtor() {
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppsRequest& ListAppsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppsRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void ListAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.ListAppsRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.ListAppsRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.ListAppsRequest)
  return target;
}

size_t ListAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.ListAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.ListAppsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.ListAppsRequest)
    MergeFrom(*source);
  }
}

void ListAppsRequest::MergeFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
}

void ListAppsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppsRequest::CopyFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsRequest::IsInitialized() const {
  return true;
}

void ListAppsRequest::InternalSwap(ListAppsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppsResponse::InitAsDefaultInstance() {
}
class ListAppsResponse::_Internal {
 public:
};

ListAppsResponse::ListAppsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.ListAppsResponse)
}
ListAppsResponse::ListAppsResponse(const ListAppsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.ListAppsResponse)
}

void ListAppsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
}

ListAppsResponse::~ListAppsResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.ListAppsResponse)
  SharedDtor();
}

void ListAppsResponse::SharedDtor() {
}

void ListAppsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppsResponse& ListAppsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppsResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void ListAppsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.ListAppsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear();
}

const char* ListAppsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speechly.config.v1.App apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.ListAppsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.config.v1.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.ListAppsResponse)
  return target;
}

size_t ListAppsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.ListAppsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.config.v1.App apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.ListAppsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.ListAppsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.ListAppsResponse)
    MergeFrom(*source);
  }
}

void ListAppsResponse::MergeFrom(const ListAppsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.ListAppsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
}

void ListAppsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.ListAppsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppsResponse::CopyFrom(const ListAppsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.ListAppsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsResponse::IsInitialized() const {
  return true;
}

void ListAppsResponse::InternalSwap(ListAppsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppRequest::InitAsDefaultInstance() {
}
class GetAppRequest::_Internal {
 public:
};

GetAppRequest::GetAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.GetAppRequest)
}
GetAppRequest::GetAppRequest(const GetAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetAppRequest)
}

void GetAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAppRequest::~GetAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetAppRequest)
  SharedDtor();
}

void GetAppRequest::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppRequest& GetAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetAppRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetAppRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetAppRequest)
  return target;
}

size_t GetAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.GetAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.GetAppRequest)
    MergeFrom(*source);
  }
}

void GetAppRequest::MergeFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
}

void GetAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppRequest::CopyFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppRequest::IsInitialized() const {
  return true;
}

void GetAppRequest::InternalSwap(GetAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppResponse::InitAsDefaultInstance() {
  ::speechly::config::v1::_GetAppResponse_default_instance_._instance.get_mutable()->app_ = const_cast< ::speechly::config::v1::App*>(
      ::speechly::config::v1::App::internal_default_instance());
}
class GetAppResponse::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const GetAppResponse* msg);
};

const ::speechly::config::v1::App&
GetAppResponse::_Internal::app(const GetAppResponse* msg) {
  return *msg->app_;
}
GetAppResponse::GetAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.GetAppResponse)
}
GetAppResponse::GetAppResponse(const GetAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetAppResponse)
}

void GetAppResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  app_ = nullptr;
}

GetAppResponse::~GetAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetAppResponse)
  SharedDtor();
}

void GetAppResponse::SharedDtor() {
  if (this != internal_default_instance()) delete app_;
}

void GetAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppResponse& GetAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.config.v1.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetAppResponse)
  return target;
}

size_t GetAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.GetAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.GetAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.GetAppResponse)
    MergeFrom(*source);
  }
}

void GetAppResponse::MergeFrom(const GetAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
}

void GetAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.GetAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppResponse::CopyFrom(const GetAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppResponse::IsInitialized() const {
  return true;
}

void GetAppResponse::InternalSwap(GetAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAppRequest::InitAsDefaultInstance() {
  ::speechly::config::v1::_CreateAppRequest_default_instance_._instance.get_mutable()->app_ = const_cast< ::speechly::config::v1::App*>(
      ::speechly::config::v1::App::internal_default_instance());
}
class CreateAppRequest::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const CreateAppRequest* msg);
};

const ::speechly::config::v1::App&
CreateAppRequest::_Internal::app(const CreateAppRequest* msg) {
  return *msg->app_;
}
CreateAppRequest::CreateAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.CreateAppRequest)
}
CreateAppRequest::CreateAppRequest(const CreateAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateAppRequest)
}

void CreateAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_ = nullptr;
}

CreateAppRequest::~CreateAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateAppRequest)
  SharedDtor();
}

void CreateAppRequest::SharedDtor() {
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_;
}

void CreateAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAppRequest& CreateAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void CreateAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateAppRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateAppRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // .speechly.config.v1.App app = 2;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateAppRequest)
  return target;
}

size_t CreateAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // .speechly.config.v1.App app = 2;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.CreateAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.CreateAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.CreateAppRequest)
    MergeFrom(*source);
  }
}

void CreateAppRequest::MergeFrom(const CreateAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
}

void CreateAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.CreateAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAppRequest::CopyFrom(const CreateAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAppRequest::IsInitialized() const {
  return true;
}

void CreateAppRequest::InternalSwap(CreateAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAppResponse::InitAsDefaultInstance() {
  ::speechly::config::v1::_CreateAppResponse_default_instance_._instance.get_mutable()->app_ = const_cast< ::speechly::config::v1::App*>(
      ::speechly::config::v1::App::internal_default_instance());
}
class CreateAppResponse::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const CreateAppResponse* msg);
};

const ::speechly::config::v1::App&
CreateAppResponse::_Internal::app(const CreateAppResponse* msg) {
  return *msg->app_;
}
CreateAppResponse::CreateAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.CreateAppResponse)
}
CreateAppResponse::CreateAppResponse(const CreateAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateAppResponse)
}

void CreateAppResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  app_ = nullptr;
}

CreateAppResponse::~CreateAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateAppResponse)
  SharedDtor();
}

void CreateAppResponse::SharedDtor() {
  if (this != internal_default_instance()) delete app_;
}

void CreateAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAppResponse& CreateAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void CreateAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.config.v1.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateAppResponse)
  return target;
}

size_t CreateAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.CreateAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.CreateAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.CreateAppResponse)
    MergeFrom(*source);
  }
}

void CreateAppResponse::MergeFrom(const CreateAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
}

void CreateAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.CreateAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAppResponse::CopyFrom(const CreateAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAppResponse::IsInitialized() const {
  return true;
}

void CreateAppResponse::InternalSwap(CreateAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAppRequest::InitAsDefaultInstance() {
  ::speechly::config::v1::_UpdateAppRequest_default_instance_._instance.get_mutable()->app_ = const_cast< ::speechly::config::v1::App*>(
      ::speechly::config::v1::App::internal_default_instance());
}
class UpdateAppRequest::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const UpdateAppRequest* msg);
};

const ::speechly::config::v1::App&
UpdateAppRequest::_Internal::app(const UpdateAppRequest* msg) {
  return *msg->app_;
}
UpdateAppRequest::UpdateAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.UpdateAppRequest)
}
UpdateAppRequest::UpdateAppRequest(const UpdateAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateAppRequest)
}

void UpdateAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  app_ = nullptr;
}

UpdateAppRequest::~UpdateAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateAppRequest)
  SharedDtor();
}

void UpdateAppRequest::SharedDtor() {
  if (this != internal_default_instance()) delete app_;
}

void UpdateAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAppRequest& UpdateAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void UpdateAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .speechly.config.v1.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateAppRequest)
  return target;
}

size_t UpdateAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.UpdateAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.UpdateAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.UpdateAppRequest)
    MergeFrom(*source);
  }
}

void UpdateAppRequest::MergeFrom(const UpdateAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
}

void UpdateAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.UpdateAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAppRequest::CopyFrom(const UpdateAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppRequest::IsInitialized() const {
  return true;
}

void UpdateAppRequest::InternalSwap(UpdateAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAppResponse::InitAsDefaultInstance() {
}
class UpdateAppResponse::_Internal {
 public:
};

UpdateAppResponse::UpdateAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.UpdateAppResponse)
}
UpdateAppResponse::UpdateAppResponse(const UpdateAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateAppResponse)
}

void UpdateAppResponse::SharedCtor() {
}

UpdateAppResponse::~UpdateAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateAppResponse)
  SharedDtor();
}

void UpdateAppResponse::SharedDtor() {
}

void UpdateAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAppResponse& UpdateAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void UpdateAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UpdateAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateAppResponse)
  return target;
}

size_t UpdateAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.UpdateAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.UpdateAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.UpdateAppResponse)
    MergeFrom(*source);
  }
}

void UpdateAppResponse::MergeFrom(const UpdateAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.UpdateAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAppResponse::CopyFrom(const UpdateAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppResponse::IsInitialized() const {
  return true;
}

void UpdateAppResponse::InternalSwap(UpdateAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAppRequest::InitAsDefaultInstance() {
}
class DeleteAppRequest::_Internal {
 public:
};

DeleteAppRequest::DeleteAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.DeleteAppRequest)
}
DeleteAppRequest::DeleteAppRequest(const DeleteAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DeleteAppRequest)
}

void DeleteAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteAppRequest::~DeleteAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DeleteAppRequest)
  SharedDtor();
}

void DeleteAppRequest::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAppRequest& DeleteAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAppRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeleteAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DeleteAppRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DeleteAppRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DeleteAppRequest)
  return target;
}

size_t DeleteAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DeleteAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.DeleteAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.DeleteAppRequest)
    MergeFrom(*source);
  }
}

void DeleteAppRequest::MergeFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
}

void DeleteAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAppRequest::CopyFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppRequest::IsInitialized() const {
  return true;
}

void DeleteAppRequest::InternalSwap(DeleteAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAppResponse::InitAsDefaultInstance() {
}
class DeleteAppResponse::_Internal {
 public:
};

DeleteAppResponse::DeleteAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.DeleteAppResponse)
}
DeleteAppResponse::DeleteAppResponse(const DeleteAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DeleteAppResponse)
}

void DeleteAppResponse::SharedCtor() {
}

DeleteAppResponse::~DeleteAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DeleteAppResponse)
  SharedDtor();
}

void DeleteAppResponse::SharedDtor() {
}

void DeleteAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAppResponse& DeleteAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAppResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DeleteAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DeleteAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DeleteAppResponse)
  return target;
}

size_t DeleteAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DeleteAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.DeleteAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.DeleteAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.DeleteAppResponse)
    MergeFrom(*source);
  }
}

void DeleteAppResponse::MergeFrom(const DeleteAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DeleteAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.DeleteAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAppResponse::CopyFrom(const DeleteAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DeleteAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppResponse::IsInitialized() const {
  return true;
}

void DeleteAppResponse::InternalSwap(DeleteAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadTrainingDataRequest::InitAsDefaultInstance() {
}
class UploadTrainingDataRequest::_Internal {
 public:
};

UploadTrainingDataRequest::UploadTrainingDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.UploadTrainingDataRequest)
}
UploadTrainingDataRequest::UploadTrainingDataRequest(const UploadTrainingDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UploadTrainingDataRequest)
}

void UploadTrainingDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
}

UploadTrainingDataRequest::~UploadTrainingDataRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UploadTrainingDataRequest)
  SharedDtor();
}

void UploadTrainingDataRequest::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadTrainingDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadTrainingDataRequest& UploadTrainingDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void UploadTrainingDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UploadTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
  _internal_metadata_.Clear();
}

const char* UploadTrainingDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.UploadTrainingDataRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.UploadTrainingDataRequest.ContentType content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::speechly::config::v1::UploadTrainingDataRequest_ContentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadTrainingDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UploadTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.UploadTrainingDataRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // bytes data_chunk = 2;
  if (this->data_chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data_chunk(), target);
  }

  // .speechly.config.v1.UploadTrainingDataRequest.ContentType content_type = 3;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UploadTrainingDataRequest)
  return target;
}

size_t UploadTrainingDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UploadTrainingDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // bytes data_chunk = 2;
  if (this->data_chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  // .speechly.config.v1.UploadTrainingDataRequest.ContentType content_type = 3;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadTrainingDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.UploadTrainingDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadTrainingDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadTrainingDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.UploadTrainingDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.UploadTrainingDataRequest)
    MergeFrom(*source);
  }
}

void UploadTrainingDataRequest::MergeFrom(const UploadTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UploadTrainingDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.data_chunk().size() > 0) {

    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
}

void UploadTrainingDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.UploadTrainingDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadTrainingDataRequest::CopyFrom(const UploadTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UploadTrainingDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadTrainingDataRequest::IsInitialized() const {
  return true;
}

void UploadTrainingDataRequest::InternalSwap(UploadTrainingDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_chunk_.Swap(&other->data_chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadTrainingDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadTrainingDataResponse::InitAsDefaultInstance() {
}
class UploadTrainingDataResponse::_Internal {
 public:
};

UploadTrainingDataResponse::UploadTrainingDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.UploadTrainingDataResponse)
}
UploadTrainingDataResponse::UploadTrainingDataResponse(const UploadTrainingDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UploadTrainingDataResponse)
}

void UploadTrainingDataResponse::SharedCtor() {
}

UploadTrainingDataResponse::~UploadTrainingDataResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UploadTrainingDataResponse)
  SharedDtor();
}

void UploadTrainingDataResponse::SharedDtor() {
}

void UploadTrainingDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadTrainingDataResponse& UploadTrainingDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void UploadTrainingDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UploadTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UploadTrainingDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadTrainingDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UploadTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UploadTrainingDataResponse)
  return target;
}

size_t UploadTrainingDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UploadTrainingDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadTrainingDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.UploadTrainingDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadTrainingDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadTrainingDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.UploadTrainingDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.UploadTrainingDataResponse)
    MergeFrom(*source);
  }
}

void UploadTrainingDataResponse::MergeFrom(const UploadTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UploadTrainingDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UploadTrainingDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.UploadTrainingDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadTrainingDataResponse::CopyFrom(const UploadTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UploadTrainingDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadTrainingDataResponse::IsInitialized() const {
  return true;
}

void UploadTrainingDataResponse::InternalSwap(UploadTrainingDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadTrainingDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadCurrentTrainingDataRequest::InitAsDefaultInstance() {
}
class DownloadCurrentTrainingDataRequest::_Internal {
 public:
};

DownloadCurrentTrainingDataRequest::DownloadCurrentTrainingDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.DownloadCurrentTrainingDataRequest)
}
DownloadCurrentTrainingDataRequest::DownloadCurrentTrainingDataRequest(const DownloadCurrentTrainingDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DownloadCurrentTrainingDataRequest)
}

void DownloadCurrentTrainingDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadCurrentTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DownloadCurrentTrainingDataRequest::~DownloadCurrentTrainingDataRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  SharedDtor();
}

void DownloadCurrentTrainingDataRequest::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadCurrentTrainingDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadCurrentTrainingDataRequest& DownloadCurrentTrainingDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadCurrentTrainingDataRequest_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void DownloadCurrentTrainingDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DownloadCurrentTrainingDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DownloadCurrentTrainingDataRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DownloadCurrentTrainingDataRequest.config_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadCurrentTrainingDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DownloadCurrentTrainingDataRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string config_id = 2;
  if (this->config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_id().data(), static_cast<int>(this->_internal_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DownloadCurrentTrainingDataRequest.config_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  return target;
}

size_t DownloadCurrentTrainingDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string config_id = 2;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadCurrentTrainingDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadCurrentTrainingDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadCurrentTrainingDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.DownloadCurrentTrainingDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.DownloadCurrentTrainingDataRequest)
    MergeFrom(*source);
  }
}

void DownloadCurrentTrainingDataRequest::MergeFrom(const DownloadCurrentTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
}

void DownloadCurrentTrainingDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadCurrentTrainingDataRequest::CopyFrom(const DownloadCurrentTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadCurrentTrainingDataRequest::IsInitialized() const {
  return true;
}

void DownloadCurrentTrainingDataRequest::InternalSwap(DownloadCurrentTrainingDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_id_.Swap(&other->config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadCurrentTrainingDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadCurrentTrainingDataResponse::InitAsDefaultInstance() {
}
class DownloadCurrentTrainingDataResponse::_Internal {
 public:
};

DownloadCurrentTrainingDataResponse::DownloadCurrentTrainingDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.DownloadCurrentTrainingDataResponse)
}
DownloadCurrentTrainingDataResponse::DownloadCurrentTrainingDataResponse(const DownloadCurrentTrainingDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DownloadCurrentTrainingDataResponse)
}

void DownloadCurrentTrainingDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadCurrentTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
}

DownloadCurrentTrainingDataResponse::~DownloadCurrentTrainingDataResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  SharedDtor();
}

void DownloadCurrentTrainingDataResponse::SharedDtor() {
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadCurrentTrainingDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadCurrentTrainingDataResponse& DownloadCurrentTrainingDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadCurrentTrainingDataResponse_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void DownloadCurrentTrainingDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
  _internal_metadata_.Clear();
}

const char* DownloadCurrentTrainingDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.DownloadCurrentTrainingDataResponse.ContentType content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::speechly::config::v1::DownloadCurrentTrainingDataResponse_ContentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadCurrentTrainingDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (this->data_chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data_chunk(), target);
  }

  // .speechly.config.v1.DownloadCurrentTrainingDataResponse.ContentType content_type = 2;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  return target;
}

size_t DownloadCurrentTrainingDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (this->data_chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  // .speechly.config.v1.DownloadCurrentTrainingDataResponse.ContentType content_type = 2;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadCurrentTrainingDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadCurrentTrainingDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadCurrentTrainingDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.DownloadCurrentTrainingDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.DownloadCurrentTrainingDataResponse)
    MergeFrom(*source);
  }
}

void DownloadCurrentTrainingDataResponse::MergeFrom(const DownloadCurrentTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_chunk().size() > 0) {

    data_chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
}

void DownloadCurrentTrainingDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadCurrentTrainingDataResponse::CopyFrom(const DownloadCurrentTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadCurrentTrainingDataResponse::IsInitialized() const {
  return true;
}

void DownloadCurrentTrainingDataResponse::InternalSwap(DownloadCurrentTrainingDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_chunk_.Swap(&other->data_chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadCurrentTrainingDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void App::InitAsDefaultInstance() {
}
class App::_Internal {
 public:
};

App::App()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.config.v1.App)
}
App::App(const App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&training_time_sec_) -
    reinterpret_cast<char*>(&status_)) + sizeof(training_time_sec_));
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.App)
}

void App::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&training_time_sec_) -
      reinterpret_cast<char*>(&status_)) + sizeof(training_time_sec_));
}

App::~App() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.App)
  SharedDtor();
}

void App::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const App& App::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_App_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto.base);
  return *internal_default_instance();
}


void App::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&training_time_sec_) -
      reinterpret_cast<char*>(&status_)) + sizeof(training_time_sec_));
  _internal_metadata_.Clear();
}

const char* App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.App.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::speechly::config::v1::App_Status>(val));
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 queue_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 estimated_remaining_sec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          estimated_remaining_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 estimated_training_time_sec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          estimated_training_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 training_time_sec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          training_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* App::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // .speechly.config.v1.App.Status status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 queue_size = 5;
  if (this->queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_queue_size(), target);
  }

  // string error_msg = 6;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.error_msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_msg(), target);
  }

  // int32 estimated_remaining_sec = 7;
  if (this->estimated_remaining_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_estimated_remaining_sec(), target);
  }

  // int32 estimated_training_time_sec = 8;
  if (this->estimated_training_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_estimated_training_time_sec(), target);
  }

  // int32 training_time_sec = 9;
  if (this->training_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_training_time_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.App)
  return target;
}

size_t App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.App)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string error_msg = 6;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // .speechly.config.v1.App.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 queue_size = 5;
  if (this->queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_queue_size());
  }

  // int32 estimated_remaining_sec = 7;
  if (this->estimated_remaining_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_estimated_remaining_sec());
  }

  // int32 estimated_training_time_sec = 8;
  if (this->estimated_training_time_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_estimated_training_time_sec());
  }

  // int32 training_time_sec = 9;
  if (this->training_time_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_training_time_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void App::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.config.v1.App)
  GOOGLE_DCHECK_NE(&from, this);
  const App* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.config.v1.App)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.config.v1.App)
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.queue_size() != 0) {
    _internal_set_queue_size(from._internal_queue_size());
  }
  if (from.estimated_remaining_sec() != 0) {
    _internal_set_estimated_remaining_sec(from._internal_estimated_remaining_sec());
  }
  if (from.estimated_training_time_sec() != 0) {
    _internal_set_estimated_training_time_sec(from._internal_estimated_training_time_sec());
  }
  if (from.training_time_sec() != 0) {
    _internal_set_training_time_sec(from._internal_training_time_sec());
  }
}

void App::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.config.v1.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  return true;
}

void App::InternalSwap(App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(queue_size_, other->queue_size_);
  swap(estimated_remaining_sec_, other->estimated_remaining_sec_);
  swap(estimated_training_time_sec_, other->estimated_training_time_sec_);
  swap(training_time_sec_, other->training_time_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata App::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::GetProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::GetProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateProjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::CreateProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateProjectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::CreateProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateProjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::UpdateProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateProjectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::UpdateProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectParticipantsRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectParticipantsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::GetProjectParticipantsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectParticipantsResponse_Participant* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectParticipantsResponse_Participant >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::GetProjectParticipantsResponse_Participant >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectParticipantsResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectParticipantsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::GetProjectParticipantsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::InviteRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::InviteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::InviteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::InviteResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::InviteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::InviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::JoinProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::JoinProjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::JoinProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::JoinProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::JoinProjectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::JoinProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::ListAppsRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::ListAppsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::ListAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::ListAppsResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::ListAppsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::ListAppsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::GetAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::GetAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::GetAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::GetAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::CreateAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::CreateAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::UpdateAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::UpdateAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DeleteAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::DeleteAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::DeleteAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DeleteAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::DeleteAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::DeleteAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UploadTrainingDataRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::UploadTrainingDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::UploadTrainingDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UploadTrainingDataResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::UploadTrainingDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::UploadTrainingDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DownloadCurrentTrainingDataRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::DownloadCurrentTrainingDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::DownloadCurrentTrainingDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DownloadCurrentTrainingDataResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::DownloadCurrentTrainingDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::DownloadCurrentTrainingDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::App* Arena::CreateMaybeMessage< ::speechly::config::v1::App >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::config::v1::App >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
