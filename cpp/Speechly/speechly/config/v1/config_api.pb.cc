// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/config/v1/config_api.proto

#include "speechly/config/v1/config_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace config {
namespace v1 {
constexpr GetProjectRequest::GetProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetProjectRequestDefaultTypeInternal {
  constexpr GetProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProjectRequestDefaultTypeInternal() {}
  union {
    GetProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProjectRequestDefaultTypeInternal _GetProjectRequest_default_instance_;
constexpr GetProjectResponse::GetProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_()
  , project_names_(){}
struct GetProjectResponseDefaultTypeInternal {
  constexpr GetProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProjectResponseDefaultTypeInternal() {}
  union {
    GetProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProjectResponseDefaultTypeInternal _GetProjectResponse_default_instance_;
constexpr CreateProjectRequest::CreateProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateProjectRequestDefaultTypeInternal {
  constexpr CreateProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProjectRequestDefaultTypeInternal() {}
  union {
    CreateProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
constexpr CreateProjectResponse::CreateProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateProjectResponseDefaultTypeInternal {
  constexpr CreateProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProjectResponseDefaultTypeInternal() {}
  union {
    CreateProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProjectResponseDefaultTypeInternal _CreateProjectResponse_default_instance_;
constexpr UpdateProjectRequest::UpdateProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateProjectRequestDefaultTypeInternal {
  constexpr UpdateProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProjectRequestDefaultTypeInternal() {}
  union {
    UpdateProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;
constexpr UpdateProjectResponse::UpdateProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UpdateProjectResponseDefaultTypeInternal {
  constexpr UpdateProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProjectResponseDefaultTypeInternal() {}
  union {
    UpdateProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProjectResponseDefaultTypeInternal _UpdateProjectResponse_default_instance_;
constexpr GetProjectParticipantsRequest::GetProjectParticipantsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetProjectParticipantsRequestDefaultTypeInternal {
  constexpr GetProjectParticipantsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProjectParticipantsRequestDefaultTypeInternal() {}
  union {
    GetProjectParticipantsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProjectParticipantsRequestDefaultTypeInternal _GetProjectParticipantsRequest_default_instance_;
constexpr GetProjectParticipantsResponse_Participant::GetProjectParticipantsResponse_Participant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetProjectParticipantsResponse_ParticipantDefaultTypeInternal {
  constexpr GetProjectParticipantsResponse_ParticipantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProjectParticipantsResponse_ParticipantDefaultTypeInternal() {}
  union {
    GetProjectParticipantsResponse_Participant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProjectParticipantsResponse_ParticipantDefaultTypeInternal _GetProjectParticipantsResponse_Participant_default_instance_;
constexpr GetProjectParticipantsResponse::GetProjectParticipantsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participants_(){}
struct GetProjectParticipantsResponseDefaultTypeInternal {
  constexpr GetProjectParticipantsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProjectParticipantsResponseDefaultTypeInternal() {}
  union {
    GetProjectParticipantsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProjectParticipantsResponseDefaultTypeInternal _GetProjectParticipantsResponse_default_instance_;
constexpr InviteRequest::InviteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InviteRequestDefaultTypeInternal {
  constexpr InviteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InviteRequestDefaultTypeInternal() {}
  union {
    InviteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InviteRequestDefaultTypeInternal _InviteRequest_default_instance_;
constexpr InviteResponse::InviteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InviteResponseDefaultTypeInternal {
  constexpr InviteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InviteResponseDefaultTypeInternal() {}
  union {
    InviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InviteResponseDefaultTypeInternal _InviteResponse_default_instance_;
constexpr JoinProjectRequest::JoinProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct JoinProjectRequestDefaultTypeInternal {
  constexpr JoinProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinProjectRequestDefaultTypeInternal() {}
  union {
    JoinProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinProjectRequestDefaultTypeInternal _JoinProjectRequest_default_instance_;
constexpr JoinProjectResponse::JoinProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct JoinProjectResponseDefaultTypeInternal {
  constexpr JoinProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinProjectResponseDefaultTypeInternal() {}
  union {
    JoinProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinProjectResponseDefaultTypeInternal _JoinProjectResponse_default_instance_;
constexpr ListAppsRequest::ListAppsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListAppsRequestDefaultTypeInternal {
  constexpr ListAppsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAppsRequestDefaultTypeInternal() {}
  union {
    ListAppsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAppsRequestDefaultTypeInternal _ListAppsRequest_default_instance_;
constexpr ListAppsResponse::ListAppsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_(){}
struct ListAppsResponseDefaultTypeInternal {
  constexpr ListAppsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAppsResponseDefaultTypeInternal() {}
  union {
    ListAppsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAppsResponseDefaultTypeInternal _ListAppsResponse_default_instance_;
constexpr GetAppRequest::GetAppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAppRequestDefaultTypeInternal {
  constexpr GetAppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppRequestDefaultTypeInternal() {}
  union {
    GetAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppRequestDefaultTypeInternal _GetAppRequest_default_instance_;
constexpr GetAppResponse::GetAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_(nullptr){}
struct GetAppResponseDefaultTypeInternal {
  constexpr GetAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppResponseDefaultTypeInternal() {}
  union {
    GetAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppResponseDefaultTypeInternal _GetAppResponse_default_instance_;
constexpr CreateAppRequest::CreateAppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_(nullptr){}
struct CreateAppRequestDefaultTypeInternal {
  constexpr CreateAppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAppRequestDefaultTypeInternal() {}
  union {
    CreateAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAppRequestDefaultTypeInternal _CreateAppRequest_default_instance_;
constexpr CreateAppResponse::CreateAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_(nullptr){}
struct CreateAppResponseDefaultTypeInternal {
  constexpr CreateAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAppResponseDefaultTypeInternal() {}
  union {
    CreateAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAppResponseDefaultTypeInternal _CreateAppResponse_default_instance_;
constexpr UpdateAppRequest::UpdateAppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_(nullptr){}
struct UpdateAppRequestDefaultTypeInternal {
  constexpr UpdateAppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateAppRequestDefaultTypeInternal() {}
  union {
    UpdateAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateAppRequestDefaultTypeInternal _UpdateAppRequest_default_instance_;
constexpr UpdateAppResponse::UpdateAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UpdateAppResponseDefaultTypeInternal {
  constexpr UpdateAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateAppResponseDefaultTypeInternal() {}
  union {
    UpdateAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateAppResponseDefaultTypeInternal _UpdateAppResponse_default_instance_;
constexpr DeleteAppRequest::DeleteAppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteAppRequestDefaultTypeInternal {
  constexpr DeleteAppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAppRequestDefaultTypeInternal() {}
  union {
    DeleteAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAppRequestDefaultTypeInternal _DeleteAppRequest_default_instance_;
constexpr DeleteAppResponse::DeleteAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteAppResponseDefaultTypeInternal {
  constexpr DeleteAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAppResponseDefaultTypeInternal() {}
  union {
    DeleteAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAppResponseDefaultTypeInternal _DeleteAppResponse_default_instance_;
constexpr UploadTrainingDataRequest::UploadTrainingDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(0)
{}
struct UploadTrainingDataRequestDefaultTypeInternal {
  constexpr UploadTrainingDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadTrainingDataRequestDefaultTypeInternal() {}
  union {
    UploadTrainingDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadTrainingDataRequestDefaultTypeInternal _UploadTrainingDataRequest_default_instance_;
constexpr UploadTrainingDataResponse::UploadTrainingDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UploadTrainingDataResponseDefaultTypeInternal {
  constexpr UploadTrainingDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadTrainingDataResponseDefaultTypeInternal() {}
  union {
    UploadTrainingDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadTrainingDataResponseDefaultTypeInternal _UploadTrainingDataResponse_default_instance_;
constexpr DownloadCurrentTrainingDataRequest::DownloadCurrentTrainingDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DownloadCurrentTrainingDataRequestDefaultTypeInternal {
  constexpr DownloadCurrentTrainingDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadCurrentTrainingDataRequestDefaultTypeInternal() {}
  union {
    DownloadCurrentTrainingDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadCurrentTrainingDataRequestDefaultTypeInternal _DownloadCurrentTrainingDataRequest_default_instance_;
constexpr DownloadCurrentTrainingDataResponse::DownloadCurrentTrainingDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(0)
{}
struct DownloadCurrentTrainingDataResponseDefaultTypeInternal {
  constexpr DownloadCurrentTrainingDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadCurrentTrainingDataResponseDefaultTypeInternal() {}
  union {
    DownloadCurrentTrainingDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadCurrentTrainingDataResponseDefaultTypeInternal _DownloadCurrentTrainingDataResponse_default_instance_;
constexpr App::App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)

  , queue_size_(0)
  , estimated_remaining_sec_(0)
  , estimated_training_time_sec_(0)
  , training_time_sec_(0){}
struct AppDefaultTypeInternal {
  constexpr AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDefaultTypeInternal() {}
  union {
    App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDefaultTypeInternal _App_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectResponse, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectResponse, project_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectResponse, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateProjectResponse, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectRequest, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, name_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, email_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse_Participant, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetProjectParticipantsResponse, participants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::InviteResponse, invitation_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::JoinProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::JoinProjectRequest, invitation_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::JoinProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::ListAppsResponse, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppRequest, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::GetAppResponse, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppRequest, project_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppRequest, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::CreateAppResponse, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateAppRequest, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UpdateAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DeleteAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DeleteAppRequest, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DeleteAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, data_chunk_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataRequest, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::UploadTrainingDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataRequest, config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataResponse, data_chunk_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadCurrentTrainingDataResponse, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, language_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, status_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, name_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, queue_size_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, error_msg_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, estimated_remaining_sec_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, estimated_training_time_sec_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::App, training_time_sec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::config::v1::GetProjectRequest)},
  { 5, -1, sizeof(::speechly::config::v1::GetProjectResponse)},
  { 12, -1, sizeof(::speechly::config::v1::CreateProjectRequest)},
  { 18, -1, sizeof(::speechly::config::v1::CreateProjectResponse)},
  { 25, -1, sizeof(::speechly::config::v1::UpdateProjectRequest)},
  { 32, -1, sizeof(::speechly::config::v1::UpdateProjectResponse)},
  { 37, -1, sizeof(::speechly::config::v1::GetProjectParticipantsRequest)},
  { 43, -1, sizeof(::speechly::config::v1::GetProjectParticipantsResponse_Participant)},
  { 51, -1, sizeof(::speechly::config::v1::GetProjectParticipantsResponse)},
  { 57, -1, sizeof(::speechly::config::v1::InviteRequest)},
  { 63, -1, sizeof(::speechly::config::v1::InviteResponse)},
  { 69, -1, sizeof(::speechly::config::v1::JoinProjectRequest)},
  { 75, -1, sizeof(::speechly::config::v1::JoinProjectResponse)},
  { 80, -1, sizeof(::speechly::config::v1::ListAppsRequest)},
  { 86, -1, sizeof(::speechly::config::v1::ListAppsResponse)},
  { 92, -1, sizeof(::speechly::config::v1::GetAppRequest)},
  { 98, -1, sizeof(::speechly::config::v1::GetAppResponse)},
  { 104, -1, sizeof(::speechly::config::v1::CreateAppRequest)},
  { 111, -1, sizeof(::speechly::config::v1::CreateAppResponse)},
  { 117, -1, sizeof(::speechly::config::v1::UpdateAppRequest)},
  { 123, -1, sizeof(::speechly::config::v1::UpdateAppResponse)},
  { 128, -1, sizeof(::speechly::config::v1::DeleteAppRequest)},
  { 134, -1, sizeof(::speechly::config::v1::DeleteAppResponse)},
  { 139, -1, sizeof(::speechly::config::v1::UploadTrainingDataRequest)},
  { 147, -1, sizeof(::speechly::config::v1::UploadTrainingDataResponse)},
  { 152, -1, sizeof(::speechly::config::v1::DownloadCurrentTrainingDataRequest)},
  { 159, -1, sizeof(::speechly::config::v1::DownloadCurrentTrainingDataResponse)},
  { 166, -1, sizeof(::speechly::config::v1::App)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectParticipantsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectParticipantsResponse_Participant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetProjectParticipantsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_InviteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_InviteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_JoinProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_JoinProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_ListAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_ListAppsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_GetAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_CreateAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UpdateAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DeleteAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DeleteAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UploadTrainingDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_UploadTrainingDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DownloadCurrentTrainingDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DownloadCurrentTrainingDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_App_default_instance_),
};

const char descriptor_table_protodef_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#speechly/config/v1/config_api.proto\022\022s"
  "peechly.config.v1\"\023\n\021GetProjectRequest\"<"
  "\n\022GetProjectResponse\022\017\n\007project\030\001 \003(\t\022\025\n"
  "\rproject_names\030\002 \003(\t\"$\n\024CreateProjectReq"
  "uest\022\014\n\004name\030\001 \001(\t\"6\n\025CreateProjectRespo"
  "nse\022\017\n\007project\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"5\n\024Up"
  "dateProjectRequest\022\017\n\007project\030\001 \001(\t\022\014\n\004n"
  "ame\030\002 \001(\t\"\027\n\025UpdateProjectResponse\"0\n\035Ge"
  "tProjectParticipantsRequest\022\017\n\007project\030\001"
  " \001(\t\"\256\001\n\036GetProjectParticipantsResponse\022"
  "T\n\014participants\030\001 \003(\0132>.speechly.config."
  "v1.GetProjectParticipantsResponse.Partic"
  "ipant\0326\n\013Participant\022\014\n\004name\030\001 \001(\t\022\r\n\005em"
  "ail\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\" \n\rInviteRequest\022\017"
  "\n\007project\030\001 \001(\t\"*\n\016InviteResponse\022\030\n\020inv"
  "itation_token\030\001 \001(\t\".\n\022JoinProjectReques"
  "t\022\030\n\020invitation_token\030\001 \001(\t\"\025\n\023JoinProje"
  "ctResponse\"\"\n\017ListAppsRequest\022\017\n\007project"
  "\030\001 \001(\t\"9\n\020ListAppsResponse\022%\n\004apps\030\001 \003(\013"
  "2\027.speechly.config.v1.App\"\037\n\rGetAppReque"
  "st\022\016\n\006app_id\030\001 \001(\t\"6\n\016GetAppResponse\022$\n\003"
  "app\030\001 \001(\0132\027.speechly.config.v1.App\"I\n\020Cr"
  "eateAppRequest\022\017\n\007project\030\001 \001(\t\022$\n\003app\030\002"
  " \001(\0132\027.speechly.config.v1.App\"9\n\021CreateA"
  "ppResponse\022$\n\003app\030\001 \001(\0132\027.speechly.confi"
  "g.v1.App\"8\n\020UpdateAppRequest\022$\n\003app\030\001 \001("
  "\0132\027.speechly.config.v1.App\"\023\n\021UpdateAppR"
  "esponse\"\"\n\020DeleteAppRequest\022\016\n\006app_id\030\001 "
  "\001(\t\"\023\n\021DeleteAppResponse\"\352\001\n\031UploadTrain"
  "ingDataRequest\022\016\n\006app_id\030\001 \001(\t\022\022\n\ndata_c"
  "hunk\030\002 \001(\014\022O\n\014content_type\030\003 \001(\01629.speec"
  "hly.config.v1.UploadTrainingDataRequest."
  "ContentType\"X\n\013ContentType\022\034\n\030CONTENT_TY"
  "PE_UNSPECIFIED\020\000\022\025\n\021CONTENT_TYPE_YAML\020\001\022"
  "\024\n\020CONTENT_TYPE_TAR\020\002\"\034\n\032UploadTrainingD"
  "ataResponse\"G\n\"DownloadCurrentTrainingDa"
  "taRequest\022\016\n\006app_id\030\001 \001(\t\022\021\n\tconfig_id\030\002"
  " \001(\t\"\356\001\n#DownloadCurrentTrainingDataResp"
  "onse\022\022\n\ndata_chunk\030\001 \001(\014\022Y\n\014content_type"
  "\030\002 \001(\0162C.speechly.config.v1.DownloadCurr"
  "entTrainingDataResponse.ContentType\"X\n\013C"
  "ontentType\022\034\n\030CONTENT_TYPE_UNSPECIFIED\020\000"
  "\022\025\n\021CONTENT_TYPE_YAML\020\001\022\024\n\020CONTENT_TYPE_"
  "TAR\020\002\"\327\002\n\003App\022\n\n\002id\030\001 \001(\t\022\020\n\010language\030\002 "
  "\001(\t\022.\n\006status\030\003 \001(\0162\036.speechly.config.v1"
  ".App.Status\022\014\n\004name\030\004 \001(\t\022\022\n\nqueue_size\030"
  "\005 \001(\005\022\021\n\terror_msg\030\006 \001(\t\022\037\n\027estimated_re"
  "maining_sec\030\007 \001(\005\022#\n\033estimated_training_"
  "time_sec\030\010 \001(\005\022\031\n\021training_time_sec\030\t \001("
  "\005\"l\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000\022\016\n\nS"
  "TATUS_NEW\020\001\022\023\n\017STATUS_TRAINING\020\002\022\022\n\016STAT"
  "US_TRAINED\020\003\022\021\n\rSTATUS_FAILED\020\0042\246\n\n\tConf"
  "igAPI\022[\n\nGetProject\022%.speechly.config.v1"
  ".GetProjectRequest\032&.speechly.config.v1."
  "GetProjectResponse\022d\n\rCreateProject\022(.sp"
  "eechly.config.v1.CreateProjectRequest\032)."
  "speechly.config.v1.CreateProjectResponse"
  "\022d\n\rUpdateProject\022(.speechly.config.v1.U"
  "pdateProjectRequest\032).speechly.config.v1"
  ".UpdateProjectResponse\022\177\n\026GetProjectPart"
  "icipants\0221.speechly.config.v1.GetProject"
  "ParticipantsRequest\0322.speechly.config.v1"
  ".GetProjectParticipantsResponse\022O\n\006Invit"
  "e\022!.speechly.config.v1.InviteRequest\032\".s"
  "peechly.config.v1.InviteResponse\022^\n\013Join"
  "Project\022&.speechly.config.v1.JoinProject"
  "Request\032\'.speechly.config.v1.JoinProject"
  "Response\022U\n\010ListApps\022#.speechly.config.v"
  "1.ListAppsRequest\032$.speechly.config.v1.L"
  "istAppsResponse\022O\n\006GetApp\022!.speechly.con"
  "fig.v1.GetAppRequest\032\".speechly.config.v"
  "1.GetAppResponse\022X\n\tCreateApp\022$.speechly"
  ".config.v1.CreateAppRequest\032%.speechly.c"
  "onfig.v1.CreateAppResponse\022X\n\tUpdateApp\022"
  "$.speechly.config.v1.UpdateAppRequest\032%."
  "speechly.config.v1.UpdateAppResponse\022X\n\t"
  "DeleteApp\022$.speechly.config.v1.DeleteApp"
  "Request\032%.speechly.config.v1.DeleteAppRe"
  "sponse\022u\n\022UploadTrainingData\022-.speechly."
  "config.v1.UploadTrainingDataRequest\032..sp"
  "eechly.config.v1.UploadTrainingDataRespo"
  "nse(\001\022\220\001\n\033DownloadCurrentTrainingData\0226."
  "speechly.config.v1.DownloadCurrentTraini"
  "ngDataRequest\0327.speechly.config.v1.Downl"
  "oadCurrentTrainingDataResponse0\001B{\n\032com."
  "speechly.api.config.v1B\016ConfigApiProtoP\001"
  "Z\033speechly/config/v1;configv1\242\002\003SCX\252\002\022Sp"
  "eechly.Config.V1\312\002\022Speechly\\Config\\V1b\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto = {
  false, false, 3525, descriptor_table_protodef_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto, "speechly/config/v1/config_api.proto", 
  &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once, nullptr, 0, 28,
  schemas, file_default_instances, TableStruct_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto, file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto, file_level_service_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto);
namespace speechly {
namespace config {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadTrainingDataRequest_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[0];
}
bool UploadTrainingDataRequest_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::CONTENT_TYPE_UNSPECIFIED;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::CONTENT_TYPE_YAML;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::CONTENT_TYPE_TAR;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::ContentType_MIN;
constexpr UploadTrainingDataRequest_ContentType UploadTrainingDataRequest::ContentType_MAX;
constexpr int UploadTrainingDataRequest::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadCurrentTrainingDataResponse_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[1];
}
bool DownloadCurrentTrainingDataResponse_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::CONTENT_TYPE_UNSPECIFIED;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::CONTENT_TYPE_YAML;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::CONTENT_TYPE_TAR;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::ContentType_MIN;
constexpr DownloadCurrentTrainingDataResponse_ContentType DownloadCurrentTrainingDataResponse::ContentType_MAX;
constexpr int DownloadCurrentTrainingDataResponse::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* App_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[2];
}
bool App_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr App_Status App::STATUS_UNSPECIFIED;
constexpr App_Status App::STATUS_NEW;
constexpr App_Status App::STATUS_TRAINING;
constexpr App_Status App::STATUS_TRAINED;
constexpr App_Status App::STATUS_FAILED;
constexpr App_Status App::Status_MIN;
constexpr App_Status App::Status_MAX;
constexpr int App::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class GetProjectRequest::_Internal {
 public:
};

GetProjectRequest::GetProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.GetProjectRequest)
}
GetProjectRequest::GetProjectRequest(const GetProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectRequest)
}

inline void GetProjectRequest::SharedCtor() {
}

GetProjectRequest::~GetProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetProjectRequest::ArenaDtor(void* object) {
  GetProjectRequest* _this = reinterpret_cast< GetProjectRequest* >(object);
  (void)_this;
}
void GetProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectRequest)
  return target;
}

size_t GetProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProjectRequest::GetClassData() const { return &_class_data_; }

void GetProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetProjectRequest *>(to)->MergeFrom(
      static_cast<const GetProjectRequest &>(from));
}


void GetProjectRequest::MergeFrom(const GetProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProjectRequest::CopyFrom(const GetProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectRequest::IsInitialized() const {
  return true;
}

void GetProjectRequest::InternalSwap(GetProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[0]);
}

// ===================================================================

class GetProjectResponse::_Internal {
 public:
};

GetProjectResponse::GetProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  project_(arena),
  project_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.GetProjectResponse)
}
GetProjectResponse::GetProjectResponse(const GetProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      project_(from.project_),
      project_names_(from.project_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectResponse)
}

inline void GetProjectResponse::SharedCtor() {
}

GetProjectResponse::~GetProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetProjectResponse::ArenaDtor(void* object) {
  GetProjectResponse* _this = reinterpret_cast< GetProjectResponse* >(object);
  (void)_this;
}
void GetProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.Clear();
  project_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_project();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectResponse.project"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string project_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_project_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectResponse.project_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string project = 1;
  for (int i = 0, n = this->_internal_project_size(); i < n; i++) {
    const auto& s = this->_internal_project(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectResponse.project");
    target = stream->WriteString(1, s, target);
  }

  // repeated string project_names = 2;
  for (int i = 0, n = this->_internal_project_names_size(); i < n; i++) {
    const auto& s = this->_internal_project_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectResponse.project_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectResponse)
  return target;
}

size_t GetProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string project = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(project_.size());
  for (int i = 0, n = project_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      project_.Get(i));
  }

  // repeated string project_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(project_names_.size());
  for (int i = 0, n = project_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      project_names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProjectResponse::GetClassData() const { return &_class_data_; }

void GetProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetProjectResponse *>(to)->MergeFrom(
      static_cast<const GetProjectResponse &>(from));
}


void GetProjectResponse::MergeFrom(const GetProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  project_.MergeFrom(from.project_);
  project_names_.MergeFrom(from.project_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProjectResponse::CopyFrom(const GetProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectResponse::IsInitialized() const {
  return true;
}

void GetProjectResponse::InternalSwap(GetProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  project_.InternalSwap(&other->project_);
  project_names_.InternalSwap(&other->project_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[1]);
}

// ===================================================================

class CreateProjectRequest::_Internal {
 public:
};

CreateProjectRequest::CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.CreateProjectRequest)
}
CreateProjectRequest::CreateProjectRequest(const CreateProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateProjectRequest)
}

inline void CreateProjectRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProjectRequest::~CreateProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProjectRequest::ArenaDtor(void* object) {
  CreateProjectRequest* _this = reinterpret_cast< CreateProjectRequest* >(object);
  (void)_this;
}
void CreateProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateProjectRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateProjectRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateProjectRequest)
  return target;
}

size_t CreateProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProjectRequest::GetClassData() const { return &_class_data_; }

void CreateProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProjectRequest *>(to)->MergeFrom(
      static_cast<const CreateProjectRequest &>(from));
}


void CreateProjectRequest::MergeFrom(const CreateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProjectRequest::CopyFrom(const CreateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectRequest::IsInitialized() const {
  return true;
}

void CreateProjectRequest::InternalSwap(CreateProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[2]);
}

// ===================================================================

class CreateProjectResponse::_Internal {
 public:
};

CreateProjectResponse::CreateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.CreateProjectResponse)
}
CreateProjectResponse::CreateProjectResponse(const CreateProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateProjectResponse)
}

inline void CreateProjectResponse::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProjectResponse::~CreateProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProjectResponse::ArenaDtor(void* object) {
  CreateProjectResponse* _this = reinterpret_cast< CreateProjectResponse* >(object);
  (void)_this;
}
void CreateProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateProjectResponse.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateProjectResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateProjectResponse.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateProjectResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateProjectResponse)
  return target;
}

size_t CreateProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProjectResponse::GetClassData() const { return &_class_data_; }

void CreateProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProjectResponse *>(to)->MergeFrom(
      static_cast<const CreateProjectResponse &>(from));
}


void CreateProjectResponse::MergeFrom(const CreateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project().empty()) {
    _internal_set_project(from._internal_project());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProjectResponse::CopyFrom(const CreateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectResponse::IsInitialized() const {
  return true;
}

void CreateProjectResponse::InternalSwap(CreateProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_, GetArenaForAllocation(),
      &other->project_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[3]);
}

// ===================================================================

class UpdateProjectRequest::_Internal {
 public:
};

UpdateProjectRequest::UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.UpdateProjectRequest)
}
UpdateProjectRequest::UpdateProjectRequest(const UpdateProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateProjectRequest)
}

inline void UpdateProjectRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateProjectRequest::~UpdateProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateProjectRequest::ArenaDtor(void* object) {
  UpdateProjectRequest* _this = reinterpret_cast< UpdateProjectRequest* >(object);
  (void)_this;
}
void UpdateProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.UpdateProjectRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.UpdateProjectRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.UpdateProjectRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.UpdateProjectRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateProjectRequest)
  return target;
}

size_t UpdateProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProjectRequest::GetClassData() const { return &_class_data_; }

void UpdateProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProjectRequest *>(to)->MergeFrom(
      static_cast<const UpdateProjectRequest &>(from));
}


void UpdateProjectRequest::MergeFrom(const UpdateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project().empty()) {
    _internal_set_project(from._internal_project());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProjectRequest::CopyFrom(const UpdateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectRequest::IsInitialized() const {
  return true;
}

void UpdateProjectRequest::InternalSwap(UpdateProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_, GetArenaForAllocation(),
      &other->project_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[4]);
}

// ===================================================================

class UpdateProjectResponse::_Internal {
 public:
};

UpdateProjectResponse::UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.UpdateProjectResponse)
}
UpdateProjectResponse::UpdateProjectResponse(const UpdateProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateProjectResponse)
}

inline void UpdateProjectResponse::SharedCtor() {
}

UpdateProjectResponse::~UpdateProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateProjectResponse::ArenaDtor(void* object) {
  UpdateProjectResponse* _this = reinterpret_cast< UpdateProjectResponse* >(object);
  (void)_this;
}
void UpdateProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateProjectResponse)
  return target;
}

size_t UpdateProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProjectResponse::GetClassData() const { return &_class_data_; }

void UpdateProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProjectResponse *>(to)->MergeFrom(
      static_cast<const UpdateProjectResponse &>(from));
}


void UpdateProjectResponse::MergeFrom(const UpdateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProjectResponse::CopyFrom(const UpdateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectResponse::IsInitialized() const {
  return true;
}

void UpdateProjectResponse::InternalSwap(UpdateProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[5]);
}

// ===================================================================

class GetProjectParticipantsRequest::_Internal {
 public:
};

GetProjectParticipantsRequest::GetProjectParticipantsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.GetProjectParticipantsRequest)
}
GetProjectParticipantsRequest::GetProjectParticipantsRequest(const GetProjectParticipantsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectParticipantsRequest)
}

inline void GetProjectParticipantsRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProjectParticipantsRequest::~GetProjectParticipantsRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectParticipantsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProjectParticipantsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProjectParticipantsRequest::ArenaDtor(void* object) {
  GetProjectParticipantsRequest* _this = reinterpret_cast< GetProjectParticipantsRequest* >(object);
  (void)_this;
}
void GetProjectParticipantsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProjectParticipantsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProjectParticipantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectParticipantsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProjectParticipantsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectParticipantsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectParticipantsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectParticipantsRequest)
  return target;
}

size_t GetProjectParticipantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectParticipantsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProjectParticipantsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProjectParticipantsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProjectParticipantsRequest::GetClassData() const { return &_class_data_; }

void GetProjectParticipantsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetProjectParticipantsRequest *>(to)->MergeFrom(
      static_cast<const GetProjectParticipantsRequest &>(from));
}


void GetProjectParticipantsRequest::MergeFrom(const GetProjectParticipantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectParticipantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project().empty()) {
    _internal_set_project(from._internal_project());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProjectParticipantsRequest::CopyFrom(const GetProjectParticipantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectParticipantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectParticipantsRequest::IsInitialized() const {
  return true;
}

void GetProjectParticipantsRequest::InternalSwap(GetProjectParticipantsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_, GetArenaForAllocation(),
      &other->project_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectParticipantsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[6]);
}

// ===================================================================

class GetProjectParticipantsResponse_Participant::_Internal {
 public:
};

GetProjectParticipantsResponse_Participant::GetProjectParticipantsResponse_Participant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.GetProjectParticipantsResponse.Participant)
}
GetProjectParticipantsResponse_Participant::GetProjectParticipantsResponse_Participant(const GetProjectParticipantsResponse_Participant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectParticipantsResponse.Participant)
}

inline void GetProjectParticipantsResponse_Participant::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProjectParticipantsResponse_Participant::~GetProjectParticipantsResponse_Participant() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProjectParticipantsResponse_Participant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProjectParticipantsResponse_Participant::ArenaDtor(void* object) {
  GetProjectParticipantsResponse_Participant* _this = reinterpret_cast< GetProjectParticipantsResponse_Participant* >(object);
  (void)_this;
}
void GetProjectParticipantsResponse_Participant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProjectParticipantsResponse_Participant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProjectParticipantsResponse_Participant::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  email_.ClearToEmpty();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProjectParticipantsResponse_Participant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsResponse.Participant.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsResponse.Participant.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetProjectParticipantsResponse.Participant.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectParticipantsResponse_Participant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsResponse.Participant.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsResponse.Participant.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetProjectParticipantsResponse.Participant.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  return target;
}

size_t GetProjectParticipantsResponse_Participant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProjectParticipantsResponse_Participant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProjectParticipantsResponse_Participant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProjectParticipantsResponse_Participant::GetClassData() const { return &_class_data_; }

void GetProjectParticipantsResponse_Participant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetProjectParticipantsResponse_Participant *>(to)->MergeFrom(
      static_cast<const GetProjectParticipantsResponse_Participant &>(from));
}


void GetProjectParticipantsResponse_Participant::MergeFrom(const GetProjectParticipantsResponse_Participant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProjectParticipantsResponse_Participant::CopyFrom(const GetProjectParticipantsResponse_Participant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectParticipantsResponse.Participant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectParticipantsResponse_Participant::IsInitialized() const {
  return true;
}

void GetProjectParticipantsResponse_Participant::InternalSwap(GetProjectParticipantsResponse_Participant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectParticipantsResponse_Participant::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[7]);
}

// ===================================================================

class GetProjectParticipantsResponse::_Internal {
 public:
};

GetProjectParticipantsResponse::GetProjectParticipantsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  participants_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.GetProjectParticipantsResponse)
}
GetProjectParticipantsResponse::GetProjectParticipantsResponse(const GetProjectParticipantsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      participants_(from.participants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetProjectParticipantsResponse)
}

inline void GetProjectParticipantsResponse::SharedCtor() {
}

GetProjectParticipantsResponse::~GetProjectParticipantsResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetProjectParticipantsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProjectParticipantsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetProjectParticipantsResponse::ArenaDtor(void* object) {
  GetProjectParticipantsResponse* _this = reinterpret_cast< GetProjectParticipantsResponse* >(object);
  (void)_this;
}
void GetProjectParticipantsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProjectParticipantsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProjectParticipantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetProjectParticipantsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participants_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProjectParticipantsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.config.v1.GetProjectParticipantsResponse.Participant participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectParticipantsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetProjectParticipantsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.config.v1.GetProjectParticipantsResponse.Participant participants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_participants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetProjectParticipantsResponse)
  return target;
}

size_t GetProjectParticipantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetProjectParticipantsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.config.v1.GetProjectParticipantsResponse.Participant participants = 1;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProjectParticipantsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProjectParticipantsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProjectParticipantsResponse::GetClassData() const { return &_class_data_; }

void GetProjectParticipantsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetProjectParticipantsResponse *>(to)->MergeFrom(
      static_cast<const GetProjectParticipantsResponse &>(from));
}


void GetProjectParticipantsResponse::MergeFrom(const GetProjectParticipantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetProjectParticipantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProjectParticipantsResponse::CopyFrom(const GetProjectParticipantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetProjectParticipantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectParticipantsResponse::IsInitialized() const {
  return true;
}

void GetProjectParticipantsResponse::InternalSwap(GetProjectParticipantsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  participants_.InternalSwap(&other->participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectParticipantsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[8]);
}

// ===================================================================

class InviteRequest::_Internal {
 public:
};

InviteRequest::InviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.InviteRequest)
}
InviteRequest::InviteRequest(const InviteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.InviteRequest)
}

inline void InviteRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InviteRequest::~InviteRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.InviteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InviteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InviteRequest::ArenaDtor(void* object) {
  InviteRequest* _this = reinterpret_cast< InviteRequest* >(object);
  (void)_this;
}
void InviteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InviteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InviteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.InviteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InviteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.InviteRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InviteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.InviteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.InviteRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.InviteRequest)
  return target;
}

size_t InviteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.InviteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InviteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InviteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InviteRequest::GetClassData() const { return &_class_data_; }

void InviteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InviteRequest *>(to)->MergeFrom(
      static_cast<const InviteRequest &>(from));
}


void InviteRequest::MergeFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.InviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project().empty()) {
    _internal_set_project(from._internal_project());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InviteRequest::CopyFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.InviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRequest::IsInitialized() const {
  return true;
}

void InviteRequest::InternalSwap(InviteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_, GetArenaForAllocation(),
      &other->project_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[9]);
}

// ===================================================================

class InviteResponse::_Internal {
 public:
};

InviteResponse::InviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.InviteResponse)
}
InviteResponse::InviteResponse(const InviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_token().empty()) {
    invitation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.InviteResponse)
}

inline void InviteResponse::SharedCtor() {
invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InviteResponse::~InviteResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.InviteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InviteResponse::ArenaDtor(void* object) {
  InviteResponse* _this = reinterpret_cast< InviteResponse* >(object);
  (void)_this;
}
void InviteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.InviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitation_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string invitation_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.InviteResponse.invitation_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InviteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.InviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (!this->_internal_invitation_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_token().data(), static_cast<int>(this->_internal_invitation_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.InviteResponse.invitation_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.InviteResponse)
  return target;
}

size_t InviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.InviteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (!this->_internal_invitation_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InviteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InviteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InviteResponse::GetClassData() const { return &_class_data_; }

void InviteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InviteResponse *>(to)->MergeFrom(
      static_cast<const InviteResponse &>(from));
}


void InviteResponse::MergeFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.InviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_invitation_token().empty()) {
    _internal_set_invitation_token(from._internal_invitation_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InviteResponse::CopyFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.InviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteResponse::IsInitialized() const {
  return true;
}

void InviteResponse::InternalSwap(InviteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_token_, GetArenaForAllocation(),
      &other->invitation_token_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[10]);
}

// ===================================================================

class JoinProjectRequest::_Internal {
 public:
};

JoinProjectRequest::JoinProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.JoinProjectRequest)
}
JoinProjectRequest::JoinProjectRequest(const JoinProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_token().empty()) {
    invitation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.JoinProjectRequest)
}

inline void JoinProjectRequest::SharedCtor() {
invitation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JoinProjectRequest::~JoinProjectRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.JoinProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinProjectRequest::ArenaDtor(void* object) {
  JoinProjectRequest* _this = reinterpret_cast< JoinProjectRequest* >(object);
  (void)_this;
}
void JoinProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.JoinProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitation_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string invitation_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.JoinProjectRequest.invitation_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.JoinProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (!this->_internal_invitation_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_token().data(), static_cast<int>(this->_internal_invitation_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.JoinProjectRequest.invitation_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.JoinProjectRequest)
  return target;
}

size_t JoinProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.JoinProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string invitation_token = 1;
  if (!this->_internal_invitation_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinProjectRequest::GetClassData() const { return &_class_data_; }

void JoinProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JoinProjectRequest *>(to)->MergeFrom(
      static_cast<const JoinProjectRequest &>(from));
}


void JoinProjectRequest::MergeFrom(const JoinProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.JoinProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_invitation_token().empty()) {
    _internal_set_invitation_token(from._internal_invitation_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinProjectRequest::CopyFrom(const JoinProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.JoinProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinProjectRequest::IsInitialized() const {
  return true;
}

void JoinProjectRequest::InternalSwap(JoinProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_token_, GetArenaForAllocation(),
      &other->invitation_token_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[11]);
}

// ===================================================================

class JoinProjectResponse::_Internal {
 public:
};

JoinProjectResponse::JoinProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.JoinProjectResponse)
}
JoinProjectResponse::JoinProjectResponse(const JoinProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.JoinProjectResponse)
}

inline void JoinProjectResponse::SharedCtor() {
}

JoinProjectResponse::~JoinProjectResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.JoinProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoinProjectResponse::ArenaDtor(void* object) {
  JoinProjectResponse* _this = reinterpret_cast< JoinProjectResponse* >(object);
  (void)_this;
}
void JoinProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.JoinProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.JoinProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.JoinProjectResponse)
  return target;
}

size_t JoinProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.JoinProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinProjectResponse::GetClassData() const { return &_class_data_; }

void JoinProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JoinProjectResponse *>(to)->MergeFrom(
      static_cast<const JoinProjectResponse &>(from));
}


void JoinProjectResponse::MergeFrom(const JoinProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.JoinProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinProjectResponse::CopyFrom(const JoinProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.JoinProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinProjectResponse::IsInitialized() const {
  return true;
}

void JoinProjectResponse::InternalSwap(JoinProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[12]);
}

// ===================================================================

class ListAppsRequest::_Internal {
 public:
};

ListAppsRequest::ListAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.ListAppsRequest)
}
ListAppsRequest::ListAppsRequest(const ListAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.ListAppsRequest)
}

inline void ListAppsRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListAppsRequest::~ListAppsRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.ListAppsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAppsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListAppsRequest::ArenaDtor(void* object) {
  ListAppsRequest* _this = reinterpret_cast< ListAppsRequest* >(object);
  (void)_this;
}
void ListAppsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.ListAppsRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.ListAppsRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.ListAppsRequest)
  return target;
}

size_t ListAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.ListAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAppsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppsRequest::GetClassData() const { return &_class_data_; }

void ListAppsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListAppsRequest *>(to)->MergeFrom(
      static_cast<const ListAppsRequest &>(from));
}


void ListAppsRequest::MergeFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project().empty()) {
    _internal_set_project(from._internal_project());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppsRequest::CopyFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsRequest::IsInitialized() const {
  return true;
}

void ListAppsRequest::InternalSwap(ListAppsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_, GetArenaForAllocation(),
      &other->project_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[13]);
}

// ===================================================================

class ListAppsResponse::_Internal {
 public:
};

ListAppsResponse::ListAppsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.ListAppsResponse)
}
ListAppsResponse::ListAppsResponse(const ListAppsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.ListAppsResponse)
}

inline void ListAppsResponse::SharedCtor() {
}

ListAppsResponse::~ListAppsResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.ListAppsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAppsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListAppsResponse::ArenaDtor(void* object) {
  ListAppsResponse* _this = reinterpret_cast< ListAppsResponse* >(object);
  (void)_this;
}
void ListAppsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAppsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAppsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.ListAppsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.config.v1.App apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.ListAppsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.config.v1.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.ListAppsResponse)
  return target;
}

size_t ListAppsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.ListAppsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.config.v1.App apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAppsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppsResponse::GetClassData() const { return &_class_data_; }

void ListAppsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListAppsResponse *>(to)->MergeFrom(
      static_cast<const ListAppsResponse &>(from));
}


void ListAppsResponse::MergeFrom(const ListAppsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.ListAppsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppsResponse::CopyFrom(const ListAppsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.ListAppsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsResponse::IsInitialized() const {
  return true;
}

void ListAppsResponse::InternalSwap(ListAppsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[14]);
}

// ===================================================================

class GetAppRequest::_Internal {
 public:
};

GetAppRequest::GetAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.GetAppRequest)
}
GetAppRequest::GetAppRequest(const GetAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetAppRequest)
}

inline void GetAppRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAppRequest::~GetAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetAppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAppRequest::ArenaDtor(void* object) {
  GetAppRequest* _this = reinterpret_cast< GetAppRequest* >(object);
  (void)_this;
}
void GetAppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.GetAppRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.GetAppRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetAppRequest)
  return target;
}

size_t GetAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAppRequest::GetClassData() const { return &_class_data_; }

void GetAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetAppRequest *>(to)->MergeFrom(
      static_cast<const GetAppRequest &>(from));
}


void GetAppRequest::MergeFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAppRequest::CopyFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppRequest::IsInitialized() const {
  return true;
}

void GetAppRequest::InternalSwap(GetAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[15]);
}

// ===================================================================

class GetAppResponse::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const GetAppResponse* msg);
};

const ::speechly::config::v1::App&
GetAppResponse::_Internal::app(const GetAppResponse* msg) {
  return *msg->app_;
}
GetAppResponse::GetAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.GetAppResponse)
}
GetAppResponse::GetAppResponse(const GetAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.GetAppResponse)
}

inline void GetAppResponse::SharedCtor() {
app_ = nullptr;
}

GetAppResponse::~GetAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.GetAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete app_;
}

void GetAppResponse::ArenaDtor(void* object) {
  GetAppResponse* _this = reinterpret_cast< GetAppResponse* >(object);
  (void)_this;
}
void GetAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.GetAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.config.v1.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.GetAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.GetAppResponse)
  return target;
}

size_t GetAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.GetAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAppResponse::GetClassData() const { return &_class_data_; }

void GetAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetAppResponse *>(to)->MergeFrom(
      static_cast<const GetAppResponse &>(from));
}


void GetAppResponse::MergeFrom(const GetAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.GetAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAppResponse::CopyFrom(const GetAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.GetAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppResponse::IsInitialized() const {
  return true;
}

void GetAppResponse::InternalSwap(GetAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[16]);
}

// ===================================================================

class CreateAppRequest::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const CreateAppRequest* msg);
};

const ::speechly::config::v1::App&
CreateAppRequest::_Internal::app(const CreateAppRequest* msg) {
  return *msg->app_;
}
CreateAppRequest::CreateAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.CreateAppRequest)
}
CreateAppRequest::CreateAppRequest(const CreateAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateAppRequest)
}

inline void CreateAppRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_ = nullptr;
}

CreateAppRequest::~CreateAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateAppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_;
}

void CreateAppRequest::ArenaDtor(void* object) {
  CreateAppRequest* _this = reinterpret_cast< CreateAppRequest* >(object);
  (void)_this;
}
void CreateAppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.CreateAppRequest.project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.CreateAppRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // .speechly.config.v1.App app = 2;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateAppRequest)
  return target;
}

size_t CreateAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (!this->_internal_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // .speechly.config.v1.App app = 2;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAppRequest::GetClassData() const { return &_class_data_; }

void CreateAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateAppRequest *>(to)->MergeFrom(
      static_cast<const CreateAppRequest &>(from));
}


void CreateAppRequest::MergeFrom(const CreateAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project().empty()) {
    _internal_set_project(from._internal_project());
  }
  if (from._internal_has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAppRequest::CopyFrom(const CreateAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAppRequest::IsInitialized() const {
  return true;
}

void CreateAppRequest::InternalSwap(CreateAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_, GetArenaForAllocation(),
      &other->project_, other->GetArenaForAllocation()
  );
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[17]);
}

// ===================================================================

class CreateAppResponse::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const CreateAppResponse* msg);
};

const ::speechly::config::v1::App&
CreateAppResponse::_Internal::app(const CreateAppResponse* msg) {
  return *msg->app_;
}
CreateAppResponse::CreateAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.CreateAppResponse)
}
CreateAppResponse::CreateAppResponse(const CreateAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.CreateAppResponse)
}

inline void CreateAppResponse::SharedCtor() {
app_ = nullptr;
}

CreateAppResponse::~CreateAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.CreateAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete app_;
}

void CreateAppResponse::ArenaDtor(void* object) {
  CreateAppResponse* _this = reinterpret_cast< CreateAppResponse* >(object);
  (void)_this;
}
void CreateAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.CreateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.config.v1.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.CreateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.CreateAppResponse)
  return target;
}

size_t CreateAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.CreateAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAppResponse::GetClassData() const { return &_class_data_; }

void CreateAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateAppResponse *>(to)->MergeFrom(
      static_cast<const CreateAppResponse &>(from));
}


void CreateAppResponse::MergeFrom(const CreateAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.CreateAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAppResponse::CopyFrom(const CreateAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.CreateAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAppResponse::IsInitialized() const {
  return true;
}

void CreateAppResponse::InternalSwap(CreateAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[18]);
}

// ===================================================================

class UpdateAppRequest::_Internal {
 public:
  static const ::speechly::config::v1::App& app(const UpdateAppRequest* msg);
};

const ::speechly::config::v1::App&
UpdateAppRequest::_Internal::app(const UpdateAppRequest* msg) {
  return *msg->app_;
}
UpdateAppRequest::UpdateAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.UpdateAppRequest)
}
UpdateAppRequest::UpdateAppRequest(const UpdateAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::speechly::config::v1::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateAppRequest)
}

inline void UpdateAppRequest::SharedCtor() {
app_ = nullptr;
}

UpdateAppRequest::~UpdateAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateAppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete app_;
}

void UpdateAppRequest::ArenaDtor(void* object) {
  UpdateAppRequest* _this = reinterpret_cast< UpdateAppRequest* >(object);
  (void)_this;
}
void UpdateAppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .speechly.config.v1.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateAppRequest)
  return target;
}

size_t UpdateAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechly.config.v1.App app = 1;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateAppRequest::GetClassData() const { return &_class_data_; }

void UpdateAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateAppRequest *>(to)->MergeFrom(
      static_cast<const UpdateAppRequest &>(from));
}


void UpdateAppRequest::MergeFrom(const UpdateAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app()) {
    _internal_mutable_app()->::speechly::config::v1::App::MergeFrom(from._internal_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateAppRequest::CopyFrom(const UpdateAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppRequest::IsInitialized() const {
  return true;
}

void UpdateAppRequest::InternalSwap(UpdateAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[19]);
}

// ===================================================================

class UpdateAppResponse::_Internal {
 public:
};

UpdateAppResponse::UpdateAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.UpdateAppResponse)
}
UpdateAppResponse::UpdateAppResponse(const UpdateAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UpdateAppResponse)
}

inline void UpdateAppResponse::SharedCtor() {
}

UpdateAppResponse::~UpdateAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UpdateAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateAppResponse::ArenaDtor(void* object) {
  UpdateAppResponse* _this = reinterpret_cast< UpdateAppResponse* >(object);
  (void)_this;
}
void UpdateAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UpdateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UpdateAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UpdateAppResponse)
  return target;
}

size_t UpdateAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UpdateAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateAppResponse::GetClassData() const { return &_class_data_; }

void UpdateAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateAppResponse *>(to)->MergeFrom(
      static_cast<const UpdateAppResponse &>(from));
}


void UpdateAppResponse::MergeFrom(const UpdateAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UpdateAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateAppResponse::CopyFrom(const UpdateAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UpdateAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppResponse::IsInitialized() const {
  return true;
}

void UpdateAppResponse::InternalSwap(UpdateAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[20]);
}

// ===================================================================

class DeleteAppRequest::_Internal {
 public:
};

DeleteAppRequest::DeleteAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.DeleteAppRequest)
}
DeleteAppRequest::DeleteAppRequest(const DeleteAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DeleteAppRequest)
}

inline void DeleteAppRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteAppRequest::~DeleteAppRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DeleteAppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAppRequest::ArenaDtor(void* object) {
  DeleteAppRequest* _this = reinterpret_cast< DeleteAppRequest* >(object);
  (void)_this;
}
void DeleteAppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DeleteAppRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DeleteAppRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DeleteAppRequest)
  return target;
}

size_t DeleteAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DeleteAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAppRequest::GetClassData() const { return &_class_data_; }

void DeleteAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteAppRequest *>(to)->MergeFrom(
      static_cast<const DeleteAppRequest &>(from));
}


void DeleteAppRequest::MergeFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAppRequest::CopyFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppRequest::IsInitialized() const {
  return true;
}

void DeleteAppRequest::InternalSwap(DeleteAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[21]);
}

// ===================================================================

class DeleteAppResponse::_Internal {
 public:
};

DeleteAppResponse::DeleteAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.DeleteAppResponse)
}
DeleteAppResponse::DeleteAppResponse(const DeleteAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DeleteAppResponse)
}

inline void DeleteAppResponse::SharedCtor() {
}

DeleteAppResponse::~DeleteAppResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DeleteAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteAppResponse::ArenaDtor(void* object) {
  DeleteAppResponse* _this = reinterpret_cast< DeleteAppResponse* >(object);
  (void)_this;
}
void DeleteAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DeleteAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DeleteAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DeleteAppResponse)
  return target;
}

size_t DeleteAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DeleteAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAppResponse::GetClassData() const { return &_class_data_; }

void DeleteAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteAppResponse *>(to)->MergeFrom(
      static_cast<const DeleteAppResponse &>(from));
}


void DeleteAppResponse::MergeFrom(const DeleteAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DeleteAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAppResponse::CopyFrom(const DeleteAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DeleteAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppResponse::IsInitialized() const {
  return true;
}

void DeleteAppResponse::InternalSwap(DeleteAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[22]);
}

// ===================================================================

class UploadTrainingDataRequest::_Internal {
 public:
};

UploadTrainingDataRequest::UploadTrainingDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.UploadTrainingDataRequest)
}
UploadTrainingDataRequest::UploadTrainingDataRequest(const UploadTrainingDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_chunk(), 
      GetArenaForAllocation());
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UploadTrainingDataRequest)
}

inline void UploadTrainingDataRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_type_ = 0;
}

UploadTrainingDataRequest::~UploadTrainingDataRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UploadTrainingDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadTrainingDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadTrainingDataRequest::ArenaDtor(void* object) {
  UploadTrainingDataRequest* _this = reinterpret_cast< UploadTrainingDataRequest* >(object);
  (void)_this;
}
void UploadTrainingDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadTrainingDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadTrainingDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UploadTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  data_chunk_.ClearToEmpty();
  content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadTrainingDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.UploadTrainingDataRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.UploadTrainingDataRequest.ContentType content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::speechly::config::v1::UploadTrainingDataRequest_ContentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadTrainingDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UploadTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.UploadTrainingDataRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // bytes data_chunk = 2;
  if (!this->_internal_data_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data_chunk(), target);
  }

  // .speechly.config.v1.UploadTrainingDataRequest.ContentType content_type = 3;
  if (this->_internal_content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UploadTrainingDataRequest)
  return target;
}

size_t UploadTrainingDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UploadTrainingDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // bytes data_chunk = 2;
  if (!this->_internal_data_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  // .speechly.config.v1.UploadTrainingDataRequest.ContentType content_type = 3;
  if (this->_internal_content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadTrainingDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadTrainingDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadTrainingDataRequest::GetClassData() const { return &_class_data_; }

void UploadTrainingDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadTrainingDataRequest *>(to)->MergeFrom(
      static_cast<const UploadTrainingDataRequest &>(from));
}


void UploadTrainingDataRequest::MergeFrom(const UploadTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UploadTrainingDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_data_chunk().empty()) {
    _internal_set_data_chunk(from._internal_data_chunk());
  }
  if (from._internal_content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadTrainingDataRequest::CopyFrom(const UploadTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UploadTrainingDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadTrainingDataRequest::IsInitialized() const {
  return true;
}

void UploadTrainingDataRequest::InternalSwap(UploadTrainingDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_chunk_, GetArenaForAllocation(),
      &other->data_chunk_, other->GetArenaForAllocation()
  );
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadTrainingDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[23]);
}

// ===================================================================

class UploadTrainingDataResponse::_Internal {
 public:
};

UploadTrainingDataResponse::UploadTrainingDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.UploadTrainingDataResponse)
}
UploadTrainingDataResponse::UploadTrainingDataResponse(const UploadTrainingDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.UploadTrainingDataResponse)
}

inline void UploadTrainingDataResponse::SharedCtor() {
}

UploadTrainingDataResponse::~UploadTrainingDataResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.UploadTrainingDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadTrainingDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadTrainingDataResponse::ArenaDtor(void* object) {
  UploadTrainingDataResponse* _this = reinterpret_cast< UploadTrainingDataResponse* >(object);
  (void)_this;
}
void UploadTrainingDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadTrainingDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadTrainingDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.UploadTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadTrainingDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadTrainingDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.UploadTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.UploadTrainingDataResponse)
  return target;
}

size_t UploadTrainingDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.UploadTrainingDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadTrainingDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadTrainingDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadTrainingDataResponse::GetClassData() const { return &_class_data_; }

void UploadTrainingDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadTrainingDataResponse *>(to)->MergeFrom(
      static_cast<const UploadTrainingDataResponse &>(from));
}


void UploadTrainingDataResponse::MergeFrom(const UploadTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.UploadTrainingDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadTrainingDataResponse::CopyFrom(const UploadTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.UploadTrainingDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadTrainingDataResponse::IsInitialized() const {
  return true;
}

void UploadTrainingDataResponse::InternalSwap(UploadTrainingDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadTrainingDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[24]);
}

// ===================================================================

class DownloadCurrentTrainingDataRequest::_Internal {
 public:
};

DownloadCurrentTrainingDataRequest::DownloadCurrentTrainingDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.DownloadCurrentTrainingDataRequest)
}
DownloadCurrentTrainingDataRequest::DownloadCurrentTrainingDataRequest(const DownloadCurrentTrainingDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DownloadCurrentTrainingDataRequest)
}

inline void DownloadCurrentTrainingDataRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DownloadCurrentTrainingDataRequest::~DownloadCurrentTrainingDataRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadCurrentTrainingDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadCurrentTrainingDataRequest::ArenaDtor(void* object) {
  DownloadCurrentTrainingDataRequest* _this = reinterpret_cast< DownloadCurrentTrainingDataRequest* >(object);
  (void)_this;
}
void DownloadCurrentTrainingDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadCurrentTrainingDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadCurrentTrainingDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  config_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadCurrentTrainingDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DownloadCurrentTrainingDataRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DownloadCurrentTrainingDataRequest.config_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadCurrentTrainingDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DownloadCurrentTrainingDataRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string config_id = 2;
  if (!this->_internal_config_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_id().data(), static_cast<int>(this->_internal_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DownloadCurrentTrainingDataRequest.config_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  return target;
}

size_t DownloadCurrentTrainingDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string config_id = 2;
  if (!this->_internal_config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadCurrentTrainingDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadCurrentTrainingDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadCurrentTrainingDataRequest::GetClassData() const { return &_class_data_; }

void DownloadCurrentTrainingDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DownloadCurrentTrainingDataRequest *>(to)->MergeFrom(
      static_cast<const DownloadCurrentTrainingDataRequest &>(from));
}


void DownloadCurrentTrainingDataRequest::MergeFrom(const DownloadCurrentTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_config_id().empty()) {
    _internal_set_config_id(from._internal_config_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadCurrentTrainingDataRequest::CopyFrom(const DownloadCurrentTrainingDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DownloadCurrentTrainingDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadCurrentTrainingDataRequest::IsInitialized() const {
  return true;
}

void DownloadCurrentTrainingDataRequest::InternalSwap(DownloadCurrentTrainingDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_id_, GetArenaForAllocation(),
      &other->config_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadCurrentTrainingDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[25]);
}

// ===================================================================

class DownloadCurrentTrainingDataResponse::_Internal {
 public:
};

DownloadCurrentTrainingDataResponse::DownloadCurrentTrainingDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.DownloadCurrentTrainingDataResponse)
}
DownloadCurrentTrainingDataResponse::DownloadCurrentTrainingDataResponse(const DownloadCurrentTrainingDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_chunk().empty()) {
    data_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_chunk(), 
      GetArenaForAllocation());
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DownloadCurrentTrainingDataResponse)
}

inline void DownloadCurrentTrainingDataResponse::SharedCtor() {
data_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_type_ = 0;
}

DownloadCurrentTrainingDataResponse::~DownloadCurrentTrainingDataResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadCurrentTrainingDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadCurrentTrainingDataResponse::ArenaDtor(void* object) {
  DownloadCurrentTrainingDataResponse* _this = reinterpret_cast< DownloadCurrentTrainingDataResponse* >(object);
  (void)_this;
}
void DownloadCurrentTrainingDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadCurrentTrainingDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadCurrentTrainingDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_chunk_.ClearToEmpty();
  content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadCurrentTrainingDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.DownloadCurrentTrainingDataResponse.ContentType content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::speechly::config::v1::DownloadCurrentTrainingDataResponse_ContentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadCurrentTrainingDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (!this->_internal_data_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data_chunk(), target);
  }

  // .speechly.config.v1.DownloadCurrentTrainingDataResponse.ContentType content_type = 2;
  if (this->_internal_content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  return target;
}

size_t DownloadCurrentTrainingDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_chunk = 1;
  if (!this->_internal_data_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_chunk());
  }

  // .speechly.config.v1.DownloadCurrentTrainingDataResponse.ContentType content_type = 2;
  if (this->_internal_content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadCurrentTrainingDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadCurrentTrainingDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadCurrentTrainingDataResponse::GetClassData() const { return &_class_data_; }

void DownloadCurrentTrainingDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DownloadCurrentTrainingDataResponse *>(to)->MergeFrom(
      static_cast<const DownloadCurrentTrainingDataResponse &>(from));
}


void DownloadCurrentTrainingDataResponse::MergeFrom(const DownloadCurrentTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_chunk().empty()) {
    _internal_set_data_chunk(from._internal_data_chunk());
  }
  if (from._internal_content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadCurrentTrainingDataResponse::CopyFrom(const DownloadCurrentTrainingDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DownloadCurrentTrainingDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadCurrentTrainingDataResponse::IsInitialized() const {
  return true;
}

void DownloadCurrentTrainingDataResponse::InternalSwap(DownloadCurrentTrainingDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_chunk_, GetArenaForAllocation(),
      &other->data_chunk_, other->GetArenaForAllocation()
  );
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadCurrentTrainingDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[26]);
}

// ===================================================================

class App::_Internal {
 public:
};

App::App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.App)
}
App::App(const App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&training_time_sec_) -
    reinterpret_cast<char*>(&status_)) + sizeof(training_time_sec_));
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.App)
}

inline void App::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&training_time_sec_) -
    reinterpret_cast<char*>(&status_)) + sizeof(training_time_sec_));
}

App::~App() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.App)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void App::ArenaDtor(void* object) {
  App* _this = reinterpret_cast< App* >(object);
  (void)_this;
}
void App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void App::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  language_.ClearToEmpty();
  name_.ClearToEmpty();
  error_msg_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&training_time_sec_) -
      reinterpret_cast<char*>(&status_)) + sizeof(training_time_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.App.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::speechly::config::v1::App_Status>(val));
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 queue_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.App.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 estimated_remaining_sec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          estimated_remaining_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 estimated_training_time_sec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          estimated_training_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 training_time_sec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          training_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* App::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // .speechly.config.v1.App.Status status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 queue_size = 5;
  if (this->_internal_queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_queue_size(), target);
  }

  // string error_msg = 6;
  if (!this->_internal_error_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.App.error_msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_msg(), target);
  }

  // int32 estimated_remaining_sec = 7;
  if (this->_internal_estimated_remaining_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_estimated_remaining_sec(), target);
  }

  // int32 estimated_training_time_sec = 8;
  if (this->_internal_estimated_training_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_estimated_training_time_sec(), target);
  }

  // int32 training_time_sec = 9;
  if (this->_internal_training_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_training_time_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.App)
  return target;
}

size_t App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.App)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string error_msg = 6;
  if (!this->_internal_error_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // .speechly.config.v1.App.Status status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 queue_size = 5;
  if (this->_internal_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_queue_size());
  }

  // int32 estimated_remaining_sec = 7;
  if (this->_internal_estimated_remaining_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_estimated_remaining_sec());
  }

  // int32 estimated_training_time_sec = 8;
  if (this->_internal_estimated_training_time_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_estimated_training_time_sec());
  }

  // int32 training_time_sec = 9;
  if (this->_internal_training_time_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_training_time_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*App::GetClassData() const { return &_class_data_; }

void App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<App *>(to)->MergeFrom(
      static_cast<const App &>(from));
}


void App::MergeFrom(const App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.App)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_error_msg().empty()) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_queue_size() != 0) {
    _internal_set_queue_size(from._internal_queue_size());
  }
  if (from._internal_estimated_remaining_sec() != 0) {
    _internal_set_estimated_remaining_sec(from._internal_estimated_remaining_sec());
  }
  if (from._internal_estimated_training_time_sec() != 0) {
    _internal_set_estimated_training_time_sec(from._internal_estimated_training_time_sec());
  }
  if (from._internal_training_time_sec() != 0) {
    _internal_set_training_time_sec(from._internal_training_time_sec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  return true;
}

void App::InternalSwap(App* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, GetArenaForAllocation(),
      &other->language_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_msg_, GetArenaForAllocation(),
      &other->error_msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(App, training_time_sec_)
      + sizeof(App::training_time_sec_)
      - PROTOBUF_FIELD_OFFSET(App, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::GetProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::GetProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::CreateProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::CreateProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::UpdateProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::UpdateProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectParticipantsRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectParticipantsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::GetProjectParticipantsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectParticipantsResponse_Participant* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectParticipantsResponse_Participant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::GetProjectParticipantsResponse_Participant >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetProjectParticipantsResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::GetProjectParticipantsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::GetProjectParticipantsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::InviteRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::InviteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::InviteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::InviteResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::InviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::InviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::JoinProjectRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::JoinProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::JoinProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::JoinProjectResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::JoinProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::JoinProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::ListAppsRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::ListAppsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::ListAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::ListAppsResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::ListAppsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::ListAppsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::GetAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::GetAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::GetAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::GetAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::GetAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::CreateAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::CreateAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::CreateAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::CreateAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::UpdateAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UpdateAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::UpdateAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::UpdateAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DeleteAppRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::DeleteAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::DeleteAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DeleteAppResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::DeleteAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::DeleteAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UploadTrainingDataRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::UploadTrainingDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::UploadTrainingDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::UploadTrainingDataResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::UploadTrainingDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::UploadTrainingDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DownloadCurrentTrainingDataRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::DownloadCurrentTrainingDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::DownloadCurrentTrainingDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DownloadCurrentTrainingDataResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::DownloadCurrentTrainingDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::DownloadCurrentTrainingDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::App* Arena::CreateMaybeMessage< ::speechly::config::v1::App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::App >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
