// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/config/v1/model.proto

#include "speechly/config/v1/model.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace speechly {
namespace config {
namespace v1 {
        template <typename>
PROTOBUF_CONSTEXPR BaseModel::BaseModel(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.alias_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.language_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.is_downloadable_)*/ false,
      /*decltype(_impl_.is_streamable_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BaseModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseModelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseModelDefaultTypeInternal() {}
  union {
    BaseModel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseModelDefaultTypeInternal _BaseModel_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace speechly
static ::_pb::Metadata file_level_metadata_speechly_2fconfig_2fv1_2fmodel_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_speechly_2fconfig_2fv1_2fmodel_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_speechly_2fconfig_2fv1_2fmodel_2eproto = nullptr;
const ::uint32_t TableStruct_speechly_2fconfig_2fv1_2fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::speechly::config::v1::BaseModel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::speechly::config::v1::BaseModel, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::speechly::config::v1::BaseModel, _impl_.alias_),
    PROTOBUF_FIELD_OFFSET(::speechly::config::v1::BaseModel, _impl_.is_downloadable_),
    PROTOBUF_FIELD_OFFSET(::speechly::config::v1::BaseModel, _impl_.is_streamable_),
    PROTOBUF_FIELD_OFFSET(::speechly::config::v1::BaseModel, _impl_.language_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::speechly::config::v1::BaseModel)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::speechly::config::v1::_BaseModel_default_instance_._instance,
};
const char descriptor_table_protodef_speechly_2fconfig_2fv1_2fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036speechly/config/v1/model.proto\022\022speech"
    "ly.config.v1\"j\n\tBaseModel\022\014\n\004name\030\001 \001(\t\022"
    "\r\n\005alias\030\002 \001(\t\022\027\n\017is_downloadable\030\003 \001(\010\022"
    "\025\n\ris_streamable\030\004 \001(\010\022\020\n\010language\030\005 \001(\t"
    "Bs\n\026com.speechly.config.v1B\nModelProtoP\001"
    "Z\033speechly/config/v1;configv1\242\002\003SCX\252\002\022Sp"
    "eechly.Config.V1\312\002\022Speechly\\Config\\V1b\006p"
    "roto3"
};
static ::absl::once_flag descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto = {
    false,
    false,
    285,
    descriptor_table_protodef_speechly_2fconfig_2fv1_2fmodel_2eproto,
    "speechly/config/v1/model.proto",
    &descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_speechly_2fconfig_2fv1_2fmodel_2eproto::offsets,
    file_level_metadata_speechly_2fconfig_2fv1_2fmodel_2eproto,
    file_level_enum_descriptors_speechly_2fconfig_2fv1_2fmodel_2eproto,
    file_level_service_descriptors_speechly_2fconfig_2fv1_2fmodel_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto_getter() {
  return &descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_speechly_2fconfig_2fv1_2fmodel_2eproto(&descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto);
namespace speechly {
namespace config {
namespace v1 {
// ===================================================================

class BaseModel::_Internal {
 public:
};

BaseModel::BaseModel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.BaseModel)
}
BaseModel::BaseModel(const BaseModel& from) : ::google::protobuf::Message() {
  BaseModel* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.alias_){},
      decltype(_impl_.language_){},
      decltype(_impl_.is_downloadable_){},
      decltype(_impl_.is_streamable_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.alias_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.language_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_downloadable_, &from._impl_.is_downloadable_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_streamable_) -
    reinterpret_cast<char*>(&_impl_.is_downloadable_)) + sizeof(_impl_.is_streamable_));

  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.BaseModel)
}
inline void BaseModel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.alias_){},
      decltype(_impl_.language_){},
      decltype(_impl_.is_downloadable_){false},
      decltype(_impl_.is_streamable_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.alias_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.language_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
BaseModel::~BaseModel() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.BaseModel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BaseModel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.alias_.Destroy();
  _impl_.language_.Destroy();
}
void BaseModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BaseModel::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.BaseModel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  ::memset(&_impl_.is_downloadable_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_streamable_) -
      reinterpret_cast<char*>(&_impl_.is_downloadable_)) + sizeof(_impl_.is_streamable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BaseModel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 54, 2> BaseModel::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BaseModel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.name_)}},
    // string alias = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.alias_)}},
    // bool is_downloadable = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BaseModel, _impl_.is_downloadable_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.is_downloadable_)}},
    // bool is_streamable = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BaseModel, _impl_.is_streamable_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.is_streamable_)}},
    // string language = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.language_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string alias = 2;
    {PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.alias_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_downloadable = 3;
    {PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.is_downloadable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_streamable = 4;
    {PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.is_streamable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string language = 5;
    {PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.language_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\4\5\0\0\10\0\0"
    "speechly.config.v1.BaseModel"
    "name"
    "alias"
    "language"
  }},
};

::uint8_t* BaseModel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.BaseModel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.config.v1.BaseModel.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string alias = 2;
  if (!this->_internal_alias().empty()) {
    const std::string& _s = this->_internal_alias();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.config.v1.BaseModel.alias");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool is_downloadable = 3;
  if (this->_internal_is_downloadable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_downloadable(), target);
  }

  // bool is_streamable = 4;
  if (this->_internal_is_streamable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_streamable(), target);
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    const std::string& _s = this->_internal_language();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "speechly.config.v1.BaseModel.language");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.BaseModel)
  return target;
}

::size_t BaseModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.BaseModel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string alias = 2;
  if (!this->_internal_alias().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_alias());
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_language());
  }

  // bool is_downloadable = 3;
  if (this->_internal_is_downloadable() != 0) {
    total_size += 2;
  }

  // bool is_streamable = 4;
  if (this->_internal_is_streamable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BaseModel::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BaseModel::MergeImpl
};
const ::google::protobuf::Message::ClassData*BaseModel::GetClassData() const { return &_class_data_; }


void BaseModel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BaseModel*>(&to_msg);
  auto& from = static_cast<const BaseModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.BaseModel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_is_downloadable() != 0) {
    _this->_internal_set_is_downloadable(from._internal_is_downloadable());
  }
  if (from._internal_is_streamable() != 0) {
    _this->_internal_set_is_streamable(from._internal_is_streamable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BaseModel::CopyFrom(const BaseModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.BaseModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BaseModel::IsInitialized() const {
  return true;
}

void BaseModel::InternalSwap(BaseModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alias_, lhs_arena,
                                       &other->_impl_.alias_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.language_, lhs_arena,
                                       &other->_impl_.language_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.is_streamable_)
      + sizeof(BaseModel::_impl_.is_streamable_)
      - PROTOBUF_FIELD_OFFSET(BaseModel, _impl_.is_downloadable_)>(
          reinterpret_cast<char*>(&_impl_.is_downloadable_),
          reinterpret_cast<char*>(&other->_impl_.is_downloadable_));
}

::google::protobuf::Metadata BaseModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fmodel_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fmodel_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
