// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/config/v1/config_api.proto
#ifndef GRPC_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto__INCLUDED
#define GRPC_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto__INCLUDED

#include "speechly/config/v1/config_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace speechly {
namespace config {
namespace v1 {

// Speechly Config API provides access to existing app configurations and enables the
// creation of new apps.
//
// The service requires a Speechly token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
//
// The token acts as a proxy for the user who has generated it,
// i.e. all operations are performed with that user as a subject.
class ConfigAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "speechly.config.v1.ConfigAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all current user projects.
    virtual ::grpc::Status GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::speechly::config::v1::GetProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectResponse>> AsyncGetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectResponse>>(AsyncGetProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectResponse>> PrepareAsyncGetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectResponse>>(PrepareAsyncGetProjectRaw(context, request, cq));
    }
    // Creates a new project for current user.
    virtual ::grpc::Status CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::speechly::config::v1::CreateProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateProjectResponse>> AsyncCreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateProjectResponse>>(AsyncCreateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateProjectResponse>> PrepareAsyncCreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateProjectResponse>>(PrepareAsyncCreateProjectRaw(context, request, cq));
    }
    // Updates an existing project.
    virtual ::grpc::Status UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::speechly::config::v1::UpdateProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateProjectResponse>> AsyncUpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateProjectResponse>>(AsyncUpdateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateProjectResponse>> PrepareAsyncUpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateProjectResponse>>(PrepareAsyncUpdateProjectRaw(context, request, cq));
    }
    // Lists all users with access to a project.
    virtual ::grpc::Status GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::speechly::config::v1::GetProjectParticipantsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectParticipantsResponse>> AsyncGetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectParticipantsResponse>>(AsyncGetProjectParticipantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectParticipantsResponse>> PrepareAsyncGetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectParticipantsResponse>>(PrepareAsyncGetProjectParticipantsRaw(context, request, cq));
    }
    // Generates an invitation link for another user to join a project,
    // which can be used to call JoinProject.
    virtual ::grpc::Status Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::speechly::config::v1::InviteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::InviteResponse>> AsyncInvite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::InviteResponse>>(AsyncInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::InviteResponse>> PrepareAsyncInvite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::InviteResponse>>(PrepareAsyncInviteRaw(context, request, cq));
    }
    // Joins a project as a current user.
    // Requires a link generated with `Invite`.
    virtual ::grpc::Status JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::speechly::config::v1::JoinProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::JoinProjectResponse>> AsyncJoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::JoinProjectResponse>>(AsyncJoinProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::JoinProjectResponse>> PrepareAsyncJoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::JoinProjectResponse>>(PrepareAsyncJoinProjectRaw(context, request, cq));
    }
    // Application API methods.
    // Lists all applications in a project.
    virtual ::grpc::Status ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::speechly::config::v1::ListAppsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::ListAppsResponse>> AsyncListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::ListAppsResponse>>(AsyncListAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::ListAppsResponse>> PrepareAsyncListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::ListAppsResponse>>(PrepareAsyncListAppsRaw(context, request, cq));
    }
    // Gets detailed information about an application.
    virtual ::grpc::Status GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::speechly::config::v1::GetAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetAppResponse>> AsyncGetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetAppResponse>>(AsyncGetAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetAppResponse>> PrepareAsyncGetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetAppResponse>>(PrepareAsyncGetAppRaw(context, request, cq));
    }
    // Creates a new application for current user.
    virtual ::grpc::Status CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::speechly::config::v1::CreateAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateAppResponse>> AsyncCreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateAppResponse>>(AsyncCreateAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateAppResponse>> PrepareAsyncCreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateAppResponse>>(PrepareAsyncCreateAppRaw(context, request, cq));
    }
    // Updates an existing application.
    virtual ::grpc::Status UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::speechly::config::v1::UpdateAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateAppResponse>> AsyncUpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateAppResponse>>(AsyncUpdateAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateAppResponse>> PrepareAsyncUpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateAppResponse>>(PrepareAsyncUpdateAppRaw(context, request, cq));
    }
    // Deletes an existing application.
    virtual ::grpc::Status DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::speechly::config::v1::DeleteAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::DeleteAppResponse>> AsyncDeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::DeleteAppResponse>>(AsyncDeleteAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::DeleteAppResponse>> PrepareAsyncDeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::DeleteAppResponse>>(PrepareAsyncDeleteAppRaw(context, request, cq));
    }
    // Training API methods.
    // Uploads new training data for an application.
    // This will create and queue a new training job for that application.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>> UploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>>(UploadTrainingDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>> AsyncUploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>>(AsyncUploadTrainingDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>> PrepareAsyncUploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>>(PrepareAsyncUploadTrainingDataRaw(context, response, cq));
    }
    // Downloads current training data for an application.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>> DownloadCurrentTrainingData(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>>(DownloadCurrentTrainingDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>> AsyncDownloadCurrentTrainingData(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>>(AsyncDownloadCurrentTrainingDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>> PrepareAsyncDownloadCurrentTrainingData(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>>(PrepareAsyncDownloadCurrentTrainingDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists all current user projects.
      virtual void GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Creates a new project for current user.
      virtual void CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Updates an existing project.
      virtual void UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Lists all users with access to a project.
      virtual void GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProjectParticipants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProjectParticipants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Generates an invitation link for another user to join a project,
      // which can be used to call JoinProject.
      virtual void Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Invite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::InviteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Invite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::InviteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Joins a project as a current user.
      // Requires a link generated with `Invite`.
      virtual void JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::JoinProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void JoinProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::JoinProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Application API methods.
      // Lists all applications in a project.
      virtual void ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::ListAppsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::ListAppsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Gets detailed information about an application.
      virtual void GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Creates a new application for current user.
      virtual void CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Updates an existing application.
      virtual void UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Deletes an existing application.
      virtual void DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::DeleteAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::DeleteAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Training API methods.
      // Uploads new training data for an application.
      // This will create and queue a new training job for that application.
      virtual void UploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::speechly::config::v1::UploadTrainingDataRequest>* reactor) = 0;
      // Downloads current training data for an application.
      virtual void DownloadCurrentTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::DownloadCurrentTrainingDataRequest* request, ::grpc::experimental::ClientReadReactor< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectResponse>* AsyncGetProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectResponse>* PrepareAsyncGetProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateProjectResponse>* AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateProjectResponse>* PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateProjectResponse>* AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateProjectResponse>* PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectParticipantsResponse>* AsyncGetProjectParticipantsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetProjectParticipantsResponse>* PrepareAsyncGetProjectParticipantsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::InviteResponse>* AsyncInviteRaw(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::InviteResponse>* PrepareAsyncInviteRaw(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::JoinProjectResponse>* AsyncJoinProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::JoinProjectResponse>* PrepareAsyncJoinProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::ListAppsResponse>* AsyncListAppsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::ListAppsResponse>* PrepareAsyncListAppsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetAppResponse>* AsyncGetAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::GetAppResponse>* PrepareAsyncGetAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateAppResponse>* AsyncCreateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::CreateAppResponse>* PrepareAsyncCreateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateAppResponse>* AsyncUpdateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::UpdateAppResponse>* PrepareAsyncUpdateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::DeleteAppResponse>* AsyncDeleteAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::config::v1::DeleteAppResponse>* PrepareAsyncDeleteAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>* UploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>* AsyncUploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::speechly::config::v1::UploadTrainingDataRequest>* PrepareAsyncUploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* DownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* AsyncDownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* PrepareAsyncDownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::speechly::config::v1::GetProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>> AsyncGetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>>(AsyncGetProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>> PrepareAsyncGetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>>(PrepareAsyncGetProjectRaw(context, request, cq));
    }
    ::grpc::Status CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::speechly::config::v1::CreateProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>> AsyncCreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>>(AsyncCreateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>> PrepareAsyncCreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>>(PrepareAsyncCreateProjectRaw(context, request, cq));
    }
    ::grpc::Status UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::speechly::config::v1::UpdateProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>> AsyncUpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>>(AsyncUpdateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>> PrepareAsyncUpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>>(PrepareAsyncUpdateProjectRaw(context, request, cq));
    }
    ::grpc::Status GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::speechly::config::v1::GetProjectParticipantsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>> AsyncGetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>>(AsyncGetProjectParticipantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>> PrepareAsyncGetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>>(PrepareAsyncGetProjectParticipantsRaw(context, request, cq));
    }
    ::grpc::Status Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::speechly::config::v1::InviteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>> AsyncInvite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>>(AsyncInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>> PrepareAsyncInvite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>>(PrepareAsyncInviteRaw(context, request, cq));
    }
    ::grpc::Status JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::speechly::config::v1::JoinProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>> AsyncJoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>>(AsyncJoinProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>> PrepareAsyncJoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>>(PrepareAsyncJoinProjectRaw(context, request, cq));
    }
    ::grpc::Status ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::speechly::config::v1::ListAppsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>> AsyncListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>>(AsyncListAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>> PrepareAsyncListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>>(PrepareAsyncListAppsRaw(context, request, cq));
    }
    ::grpc::Status GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::speechly::config::v1::GetAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>> AsyncGetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>>(AsyncGetAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>> PrepareAsyncGetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>>(PrepareAsyncGetAppRaw(context, request, cq));
    }
    ::grpc::Status CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::speechly::config::v1::CreateAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>> AsyncCreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>>(AsyncCreateAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>> PrepareAsyncCreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>>(PrepareAsyncCreateAppRaw(context, request, cq));
    }
    ::grpc::Status UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::speechly::config::v1::UpdateAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>> AsyncUpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>>(AsyncUpdateAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>> PrepareAsyncUpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>>(PrepareAsyncUpdateAppRaw(context, request, cq));
    }
    ::grpc::Status DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::speechly::config::v1::DeleteAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>> AsyncDeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>>(AsyncDeleteAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>> PrepareAsyncDeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>>(PrepareAsyncDeleteAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::speechly::config::v1::UploadTrainingDataRequest>> UploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::speechly::config::v1::UploadTrainingDataRequest>>(UploadTrainingDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>> AsyncUploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>>(AsyncUploadTrainingDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>> PrepareAsyncUploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>>(PrepareAsyncUploadTrainingDataRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>> DownloadCurrentTrainingData(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>>(DownloadCurrentTrainingDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>> AsyncDownloadCurrentTrainingData(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>>(AsyncDownloadCurrentTrainingDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>> PrepareAsyncDownloadCurrentTrainingData(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>>(PrepareAsyncDownloadCurrentTrainingDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProject(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateProject(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateProject(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProjectParticipants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProjectParticipants(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProjectParticipants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetProjectParticipantsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response, std::function<void(::grpc::Status)>) override;
      void Invite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::InviteResponse* response, std::function<void(::grpc::Status)>) override;
      void Invite(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Invite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::InviteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void JoinProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::JoinProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void JoinProject(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void JoinProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::JoinProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::ListAppsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListApps(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::ListAppsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response, std::function<void(::grpc::Status)>) override;
      void GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetAppResponse* response, std::function<void(::grpc::Status)>) override;
      void GetApp(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::GetAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateAppResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateApp(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::CreateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateAppResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateApp(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::UpdateAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::DeleteAppResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteApp(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::config::v1::DeleteAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UploadTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::speechly::config::v1::UploadTrainingDataRequest>* reactor) override;
      void DownloadCurrentTrainingData(::grpc::ClientContext* context, ::speechly::config::v1::DownloadCurrentTrainingDataRequest* request, ::grpc::experimental::ClientReadReactor< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>* AsyncGetProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectResponse>* PrepareAsyncGetProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>* AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateProjectResponse>* PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>* AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateProjectResponse>* PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>* AsyncGetProjectParticipantsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetProjectParticipantsResponse>* PrepareAsyncGetProjectParticipantsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>* AsyncInviteRaw(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::InviteResponse>* PrepareAsyncInviteRaw(::grpc::ClientContext* context, const ::speechly::config::v1::InviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>* AsyncJoinProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::JoinProjectResponse>* PrepareAsyncJoinProjectRaw(::grpc::ClientContext* context, const ::speechly::config::v1::JoinProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>* AsyncListAppsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::ListAppsResponse>* PrepareAsyncListAppsRaw(::grpc::ClientContext* context, const ::speechly::config::v1::ListAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>* AsyncGetAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::GetAppResponse>* PrepareAsyncGetAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::GetAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>* AsyncCreateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::CreateAppResponse>* PrepareAsyncCreateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::CreateAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>* AsyncUpdateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::UpdateAppResponse>* PrepareAsyncUpdateAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::UpdateAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>* AsyncDeleteAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::config::v1::DeleteAppResponse>* PrepareAsyncDeleteAppRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::speechly::config::v1::UploadTrainingDataRequest>* UploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response) override;
    ::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>* AsyncUploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::speechly::config::v1::UploadTrainingDataRequest>* PrepareAsyncUploadTrainingDataRaw(::grpc::ClientContext* context, ::speechly::config::v1::UploadTrainingDataResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* DownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request) override;
    ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* AsyncDownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* PrepareAsyncDownloadCurrentTrainingDataRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetProject_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProject_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProject_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProjectParticipants_;
    const ::grpc::internal::RpcMethod rpcmethod_Invite_;
    const ::grpc::internal::RpcMethod rpcmethod_JoinProject_;
    const ::grpc::internal::RpcMethod rpcmethod_ListApps_;
    const ::grpc::internal::RpcMethod rpcmethod_GetApp_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateApp_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateApp_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteApp_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadTrainingData_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadCurrentTrainingData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all current user projects.
    virtual ::grpc::Status GetProject(::grpc::ServerContext* context, const ::speechly::config::v1::GetProjectRequest* request, ::speechly::config::v1::GetProjectResponse* response);
    // Creates a new project for current user.
    virtual ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::speechly::config::v1::CreateProjectRequest* request, ::speechly::config::v1::CreateProjectResponse* response);
    // Updates an existing project.
    virtual ::grpc::Status UpdateProject(::grpc::ServerContext* context, const ::speechly::config::v1::UpdateProjectRequest* request, ::speechly::config::v1::UpdateProjectResponse* response);
    // Lists all users with access to a project.
    virtual ::grpc::Status GetProjectParticipants(::grpc::ServerContext* context, const ::speechly::config::v1::GetProjectParticipantsRequest* request, ::speechly::config::v1::GetProjectParticipantsResponse* response);
    // Generates an invitation link for another user to join a project,
    // which can be used to call JoinProject.
    virtual ::grpc::Status Invite(::grpc::ServerContext* context, const ::speechly::config::v1::InviteRequest* request, ::speechly::config::v1::InviteResponse* response);
    // Joins a project as a current user.
    // Requires a link generated with `Invite`.
    virtual ::grpc::Status JoinProject(::grpc::ServerContext* context, const ::speechly::config::v1::JoinProjectRequest* request, ::speechly::config::v1::JoinProjectResponse* response);
    // Application API methods.
    // Lists all applications in a project.
    virtual ::grpc::Status ListApps(::grpc::ServerContext* context, const ::speechly::config::v1::ListAppsRequest* request, ::speechly::config::v1::ListAppsResponse* response);
    // Gets detailed information about an application.
    virtual ::grpc::Status GetApp(::grpc::ServerContext* context, const ::speechly::config::v1::GetAppRequest* request, ::speechly::config::v1::GetAppResponse* response);
    // Creates a new application for current user.
    virtual ::grpc::Status CreateApp(::grpc::ServerContext* context, const ::speechly::config::v1::CreateAppRequest* request, ::speechly::config::v1::CreateAppResponse* response);
    // Updates an existing application.
    virtual ::grpc::Status UpdateApp(::grpc::ServerContext* context, const ::speechly::config::v1::UpdateAppRequest* request, ::speechly::config::v1::UpdateAppResponse* response);
    // Deletes an existing application.
    virtual ::grpc::Status DeleteApp(::grpc::ServerContext* context, const ::speechly::config::v1::DeleteAppRequest* request, ::speechly::config::v1::DeleteAppResponse* response);
    // Training API methods.
    // Uploads new training data for an application.
    // This will create and queue a new training job for that application.
    virtual ::grpc::Status UploadTrainingData(::grpc::ServerContext* context, ::grpc::ServerReader< ::speechly::config::v1::UploadTrainingDataRequest>* reader, ::speechly::config::v1::UploadTrainingDataResponse* response);
    // Downloads current training data for an application.
    virtual ::grpc::Status DownloadCurrentTrainingData(::grpc::ServerContext* context, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* request, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProject() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectRequest* /*request*/, ::speechly::config::v1::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProject(::grpc::ServerContext* context, ::speechly::config::v1::GetProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::GetProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateProject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateProjectRequest* /*request*/, ::speechly::config::v1::CreateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProject(::grpc::ServerContext* context, ::speechly::config::v1::CreateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::CreateProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateProject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateProjectRequest* /*request*/, ::speechly::config::v1::UpdateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProject(::grpc::ServerContext* context, ::speechly::config::v1::UpdateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::UpdateProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProjectParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProjectParticipants() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetProjectParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectParticipantsRequest* /*request*/, ::speechly::config::v1::GetProjectParticipantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProjectParticipants(::grpc::ServerContext* context, ::speechly::config::v1::GetProjectParticipantsRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::GetProjectParticipantsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Invite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Invite() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Invite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invite(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::InviteRequest* /*request*/, ::speechly::config::v1::InviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvite(::grpc::ServerContext* context, ::speechly::config::v1::InviteRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::InviteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JoinProject() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_JoinProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::JoinProjectRequest* /*request*/, ::speechly::config::v1::JoinProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinProject(::grpc::ServerContext* context, ::speechly::config::v1::JoinProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::JoinProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListApps() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::ListAppsRequest* /*request*/, ::speechly::config::v1::ListAppsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApps(::grpc::ServerContext* context, ::speechly::config::v1::ListAppsRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::ListAppsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetApp() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetAppRequest* /*request*/, ::speechly::config::v1::GetAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetApp(::grpc::ServerContext* context, ::speechly::config::v1::GetAppRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::GetAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateApp() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateAppRequest* /*request*/, ::speechly::config::v1::CreateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateApp(::grpc::ServerContext* context, ::speechly::config::v1::CreateAppRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::CreateAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateApp() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateAppRequest* /*request*/, ::speechly::config::v1::UpdateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateApp(::grpc::ServerContext* context, ::speechly::config::v1::UpdateAppRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::UpdateAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteApp() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DeleteAppRequest* /*request*/, ::speechly::config::v1::DeleteAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApp(::grpc::ServerContext* context, ::speechly::config::v1::DeleteAppRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::config::v1::DeleteAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadTrainingData() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UploadTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadTrainingData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::config::v1::UploadTrainingDataRequest>* /*reader*/, ::speechly::config::v1::UploadTrainingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadTrainingData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::speechly::config::v1::UploadTrainingDataResponse, ::speechly::config::v1::UploadTrainingDataRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(11, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadCurrentTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadCurrentTrainingData() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DownloadCurrentTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCurrentTrainingData(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadCurrentTrainingData(::grpc::ServerContext* context, ::speechly::config::v1::DownloadCurrentTrainingDataRequest* request, ::grpc::ServerAsyncWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetProject<WithAsyncMethod_CreateProject<WithAsyncMethod_UpdateProject<WithAsyncMethod_GetProjectParticipants<WithAsyncMethod_Invite<WithAsyncMethod_JoinProject<WithAsyncMethod_ListApps<WithAsyncMethod_GetApp<WithAsyncMethod_CreateApp<WithAsyncMethod_UpdateApp<WithAsyncMethod_DeleteApp<WithAsyncMethod_UploadTrainingData<WithAsyncMethod_DownloadCurrentTrainingData<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProject() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::GetProjectRequest, ::speechly::config::v1::GetProjectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::GetProjectRequest* request,
                 ::speechly::config::v1::GetProjectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetProject(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetProject(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::GetProjectRequest, ::speechly::config::v1::GetProjectResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::GetProjectRequest, ::speechly::config::v1::GetProjectResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectRequest* /*request*/, ::speechly::config::v1::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectRequest* /*request*/, ::speechly::config::v1::GetProjectResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateProject() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::CreateProjectRequest, ::speechly::config::v1::CreateProjectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::CreateProjectRequest* request,
                 ::speechly::config::v1::CreateProjectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateProject(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateProject(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::CreateProjectRequest, ::speechly::config::v1::CreateProjectResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::CreateProjectRequest, ::speechly::config::v1::CreateProjectResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateProjectRequest* /*request*/, ::speechly::config::v1::CreateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateProjectRequest* /*request*/, ::speechly::config::v1::CreateProjectResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateProject() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::UpdateProjectRequest, ::speechly::config::v1::UpdateProjectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::UpdateProjectRequest* request,
                 ::speechly::config::v1::UpdateProjectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateProject(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateProject(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::UpdateProjectRequest, ::speechly::config::v1::UpdateProjectResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::UpdateProjectRequest, ::speechly::config::v1::UpdateProjectResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateProjectRequest* /*request*/, ::speechly::config::v1::UpdateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateProjectRequest* /*request*/, ::speechly::config::v1::UpdateProjectResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProjectParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProjectParticipants() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::GetProjectParticipantsRequest, ::speechly::config::v1::GetProjectParticipantsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::GetProjectParticipantsRequest* request,
                 ::speechly::config::v1::GetProjectParticipantsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetProjectParticipants(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetProjectParticipants(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::GetProjectParticipantsRequest, ::speechly::config::v1::GetProjectParticipantsResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::GetProjectParticipantsRequest, ::speechly::config::v1::GetProjectParticipantsResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProjectParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectParticipantsRequest* /*request*/, ::speechly::config::v1::GetProjectParticipantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectParticipantsRequest* /*request*/, ::speechly::config::v1::GetProjectParticipantsResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Invite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Invite() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::InviteRequest, ::speechly::config::v1::InviteResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::InviteRequest* request,
                 ::speechly::config::v1::InviteResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Invite(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Invite(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::InviteRequest, ::speechly::config::v1::InviteResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::InviteRequest, ::speechly::config::v1::InviteResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Invite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invite(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::InviteRequest* /*request*/, ::speechly::config::v1::InviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Invite(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::InviteRequest* /*request*/, ::speechly::config::v1::InviteResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_JoinProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_JoinProject() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::JoinProjectRequest, ::speechly::config::v1::JoinProjectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::JoinProjectRequest* request,
                 ::speechly::config::v1::JoinProjectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->JoinProject(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_JoinProject(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::JoinProjectRequest, ::speechly::config::v1::JoinProjectResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::JoinProjectRequest, ::speechly::config::v1::JoinProjectResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_JoinProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::JoinProjectRequest* /*request*/, ::speechly::config::v1::JoinProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void JoinProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::JoinProjectRequest* /*request*/, ::speechly::config::v1::JoinProjectResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListApps() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::ListAppsRequest, ::speechly::config::v1::ListAppsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::ListAppsRequest* request,
                 ::speechly::config::v1::ListAppsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListApps(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListApps(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::ListAppsRequest, ::speechly::config::v1::ListAppsResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::ListAppsRequest, ::speechly::config::v1::ListAppsResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::ListAppsRequest* /*request*/, ::speechly::config::v1::ListAppsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListApps(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::ListAppsRequest* /*request*/, ::speechly::config::v1::ListAppsResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetApp() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::GetAppRequest, ::speechly::config::v1::GetAppResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::GetAppRequest* request,
                 ::speechly::config::v1::GetAppResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetApp(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetApp(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::GetAppRequest, ::speechly::config::v1::GetAppResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::GetAppRequest, ::speechly::config::v1::GetAppResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetAppRequest* /*request*/, ::speechly::config::v1::GetAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetAppRequest* /*request*/, ::speechly::config::v1::GetAppResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateApp() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::CreateAppRequest, ::speechly::config::v1::CreateAppResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::CreateAppRequest* request,
                 ::speechly::config::v1::CreateAppResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateApp(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateApp(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::CreateAppRequest, ::speechly::config::v1::CreateAppResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::CreateAppRequest, ::speechly::config::v1::CreateAppResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateAppRequest* /*request*/, ::speechly::config::v1::CreateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateAppRequest* /*request*/, ::speechly::config::v1::CreateAppResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateApp() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::UpdateAppRequest, ::speechly::config::v1::UpdateAppResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::UpdateAppRequest* request,
                 ::speechly::config::v1::UpdateAppResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateApp(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateApp(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::UpdateAppRequest, ::speechly::config::v1::UpdateAppResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::UpdateAppRequest, ::speechly::config::v1::UpdateAppResponse>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateAppRequest* /*request*/, ::speechly::config::v1::UpdateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateAppRequest* /*request*/, ::speechly::config::v1::UpdateAppResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteApp() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::DeleteAppRequest, ::speechly::config::v1::DeleteAppResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::config::v1::DeleteAppRequest* request,
                 ::speechly::config::v1::DeleteAppResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteApp(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteApp(
        ::grpc::experimental::MessageAllocator< ::speechly::config::v1::DeleteAppRequest, ::speechly::config::v1::DeleteAppResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::config::v1::DeleteAppRequest, ::speechly::config::v1::DeleteAppResponse>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DeleteAppRequest* /*request*/, ::speechly::config::v1::DeleteAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DeleteAppRequest* /*request*/, ::speechly::config::v1::DeleteAppResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadTrainingData() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::speechly::config::v1::UploadTrainingDataRequest, ::speechly::config::v1::UploadTrainingDataResponse>(
          [this] { return this->UploadTrainingData(); }));
    }
    ~ExperimentalWithCallbackMethod_UploadTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadTrainingData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::config::v1::UploadTrainingDataRequest>* /*reader*/, ::speechly::config::v1::UploadTrainingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::speechly::config::v1::UploadTrainingDataRequest, ::speechly::config::v1::UploadTrainingDataResponse>* UploadTrainingData() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::speechly::config::v1::UploadTrainingDataRequest, ::speechly::config::v1::UploadTrainingDataResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadCurrentTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadCurrentTrainingData() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::speechly::config::v1::DownloadCurrentTrainingDataRequest, ::speechly::config::v1::DownloadCurrentTrainingDataResponse>(
          [this] { return this->DownloadCurrentTrainingData(); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadCurrentTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCurrentTrainingData(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::speechly::config::v1::DownloadCurrentTrainingDataRequest, ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* DownloadCurrentTrainingData() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::speechly::config::v1::DownloadCurrentTrainingDataRequest, ::speechly::config::v1::DownloadCurrentTrainingDataResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_GetProject<ExperimentalWithCallbackMethod_CreateProject<ExperimentalWithCallbackMethod_UpdateProject<ExperimentalWithCallbackMethod_GetProjectParticipants<ExperimentalWithCallbackMethod_Invite<ExperimentalWithCallbackMethod_JoinProject<ExperimentalWithCallbackMethod_ListApps<ExperimentalWithCallbackMethod_GetApp<ExperimentalWithCallbackMethod_CreateApp<ExperimentalWithCallbackMethod_UpdateApp<ExperimentalWithCallbackMethod_DeleteApp<ExperimentalWithCallbackMethod_UploadTrainingData<ExperimentalWithCallbackMethod_DownloadCurrentTrainingData<Service > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProject() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectRequest* /*request*/, ::speechly::config::v1::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateProject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateProjectRequest* /*request*/, ::speechly::config::v1::CreateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateProject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateProjectRequest* /*request*/, ::speechly::config::v1::UpdateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProjectParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProjectParticipants() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetProjectParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectParticipantsRequest* /*request*/, ::speechly::config::v1::GetProjectParticipantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Invite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Invite() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Invite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invite(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::InviteRequest* /*request*/, ::speechly::config::v1::InviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JoinProject() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_JoinProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::JoinProjectRequest* /*request*/, ::speechly::config::v1::JoinProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListApps() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::ListAppsRequest* /*request*/, ::speechly::config::v1::ListAppsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetApp() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetAppRequest* /*request*/, ::speechly::config::v1::GetAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateApp() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateAppRequest* /*request*/, ::speechly::config::v1::CreateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateApp() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateAppRequest* /*request*/, ::speechly::config::v1::UpdateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteApp() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DeleteAppRequest* /*request*/, ::speechly::config::v1::DeleteAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadTrainingData() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UploadTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadTrainingData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::config::v1::UploadTrainingDataRequest>* /*reader*/, ::speechly::config::v1::UploadTrainingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadCurrentTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadCurrentTrainingData() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DownloadCurrentTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCurrentTrainingData(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProject() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectRequest* /*request*/, ::speechly::config::v1::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateProject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateProjectRequest* /*request*/, ::speechly::config::v1::CreateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateProject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateProjectRequest* /*request*/, ::speechly::config::v1::UpdateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProjectParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProjectParticipants() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetProjectParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectParticipantsRequest* /*request*/, ::speechly::config::v1::GetProjectParticipantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProjectParticipants(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Invite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Invite() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Invite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invite(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::InviteRequest* /*request*/, ::speechly::config::v1::InviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JoinProject() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_JoinProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::JoinProjectRequest* /*request*/, ::speechly::config::v1::JoinProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListApps() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::ListAppsRequest* /*request*/, ::speechly::config::v1::ListAppsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetApp() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetAppRequest* /*request*/, ::speechly::config::v1::GetAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateApp() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateAppRequest* /*request*/, ::speechly::config::v1::CreateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateApp() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateAppRequest* /*request*/, ::speechly::config::v1::UpdateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteApp() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DeleteAppRequest* /*request*/, ::speechly::config::v1::DeleteAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadTrainingData() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_UploadTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadTrainingData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::config::v1::UploadTrainingDataRequest>* /*reader*/, ::speechly::config::v1::UploadTrainingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadTrainingData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(11, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadCurrentTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadCurrentTrainingData() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DownloadCurrentTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCurrentTrainingData(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadCurrentTrainingData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProject() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetProject(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectRequest* /*request*/, ::speechly::config::v1::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProject(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateProject() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateProject(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateProjectRequest* /*request*/, ::speechly::config::v1::CreateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateProject(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateProject() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateProject(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateProjectRequest* /*request*/, ::speechly::config::v1::UpdateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateProject(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProjectParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProjectParticipants() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetProjectParticipants(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProjectParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectParticipantsRequest* /*request*/, ::speechly::config::v1::GetProjectParticipantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Invite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Invite() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Invite(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Invite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invite(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::InviteRequest* /*request*/, ::speechly::config::v1::InviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Invite(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_JoinProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_JoinProject() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->JoinProject(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_JoinProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::JoinProjectRequest* /*request*/, ::speechly::config::v1::JoinProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void JoinProject(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListApps() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListApps(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::ListAppsRequest* /*request*/, ::speechly::config::v1::ListAppsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListApps(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetApp() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetApp(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetAppRequest* /*request*/, ::speechly::config::v1::GetAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetApp(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateApp() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateApp(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateAppRequest* /*request*/, ::speechly::config::v1::CreateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateApp(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateApp() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateApp(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateAppRequest* /*request*/, ::speechly::config::v1::UpdateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateApp(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteApp() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteApp(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DeleteAppRequest* /*request*/, ::speechly::config::v1::DeleteAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteApp(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadTrainingData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->UploadTrainingData(); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadTrainingData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::speechly::config::v1::UploadTrainingDataRequest>* /*reader*/, ::speechly::config::v1::UploadTrainingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* UploadTrainingData() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadCurrentTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadCurrentTrainingData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->DownloadCurrentTrainingData(); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadCurrentTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCurrentTrainingData(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DownloadCurrentTrainingData() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProject() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::GetProjectRequest, ::speechly::config::v1::GetProjectResponse>(std::bind(&WithStreamedUnaryMethod_GetProject<BaseClass>::StreamedGetProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectRequest* /*request*/, ::speechly::config::v1::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::GetProjectRequest,::speechly::config::v1::GetProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateProject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::CreateProjectRequest, ::speechly::config::v1::CreateProjectResponse>(std::bind(&WithStreamedUnaryMethod_CreateProject<BaseClass>::StreamedCreateProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateProjectRequest* /*request*/, ::speechly::config::v1::CreateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::CreateProjectRequest,::speechly::config::v1::CreateProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateProject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::UpdateProjectRequest, ::speechly::config::v1::UpdateProjectResponse>(std::bind(&WithStreamedUnaryMethod_UpdateProject<BaseClass>::StreamedUpdateProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateProjectRequest* /*request*/, ::speechly::config::v1::UpdateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::UpdateProjectRequest,::speechly::config::v1::UpdateProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProjectParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProjectParticipants() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::GetProjectParticipantsRequest, ::speechly::config::v1::GetProjectParticipantsResponse>(std::bind(&WithStreamedUnaryMethod_GetProjectParticipants<BaseClass>::StreamedGetProjectParticipants, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProjectParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProjectParticipants(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetProjectParticipantsRequest* /*request*/, ::speechly::config::v1::GetProjectParticipantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProjectParticipants(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::GetProjectParticipantsRequest,::speechly::config::v1::GetProjectParticipantsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Invite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Invite() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::InviteRequest, ::speechly::config::v1::InviteResponse>(std::bind(&WithStreamedUnaryMethod_Invite<BaseClass>::StreamedInvite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Invite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Invite(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::InviteRequest* /*request*/, ::speechly::config::v1::InviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::InviteRequest,::speechly::config::v1::InviteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JoinProject() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::JoinProjectRequest, ::speechly::config::v1::JoinProjectResponse>(std::bind(&WithStreamedUnaryMethod_JoinProject<BaseClass>::StreamedJoinProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_JoinProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinProject(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::JoinProjectRequest* /*request*/, ::speechly::config::v1::JoinProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::JoinProjectRequest,::speechly::config::v1::JoinProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListApps() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::ListAppsRequest, ::speechly::config::v1::ListAppsResponse>(std::bind(&WithStreamedUnaryMethod_ListApps<BaseClass>::StreamedListApps, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::ListAppsRequest* /*request*/, ::speechly::config::v1::ListAppsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListApps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::ListAppsRequest,::speechly::config::v1::ListAppsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetApp() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::GetAppRequest, ::speechly::config::v1::GetAppResponse>(std::bind(&WithStreamedUnaryMethod_GetApp<BaseClass>::StreamedGetApp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::GetAppRequest* /*request*/, ::speechly::config::v1::GetAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::GetAppRequest,::speechly::config::v1::GetAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateApp() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::CreateAppRequest, ::speechly::config::v1::CreateAppResponse>(std::bind(&WithStreamedUnaryMethod_CreateApp<BaseClass>::StreamedCreateApp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::CreateAppRequest* /*request*/, ::speechly::config::v1::CreateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::CreateAppRequest,::speechly::config::v1::CreateAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateApp() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::UpdateAppRequest, ::speechly::config::v1::UpdateAppResponse>(std::bind(&WithStreamedUnaryMethod_UpdateApp<BaseClass>::StreamedUpdateApp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::UpdateAppRequest* /*request*/, ::speechly::config::v1::UpdateAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::UpdateAppRequest,::speechly::config::v1::UpdateAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteApp() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::config::v1::DeleteAppRequest, ::speechly::config::v1::DeleteAppResponse>(std::bind(&WithStreamedUnaryMethod_DeleteApp<BaseClass>::StreamedDeleteApp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DeleteAppRequest* /*request*/, ::speechly::config::v1::DeleteAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::config::v1::DeleteAppRequest,::speechly::config::v1::DeleteAppResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetProject<WithStreamedUnaryMethod_CreateProject<WithStreamedUnaryMethod_UpdateProject<WithStreamedUnaryMethod_GetProjectParticipants<WithStreamedUnaryMethod_Invite<WithStreamedUnaryMethod_JoinProject<WithStreamedUnaryMethod_ListApps<WithStreamedUnaryMethod_GetApp<WithStreamedUnaryMethod_CreateApp<WithStreamedUnaryMethod_UpdateApp<WithStreamedUnaryMethod_DeleteApp<Service > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadCurrentTrainingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadCurrentTrainingData() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::SplitServerStreamingHandler< ::speechly::config::v1::DownloadCurrentTrainingDataRequest, ::speechly::config::v1::DownloadCurrentTrainingDataResponse>(std::bind(&WithSplitStreamingMethod_DownloadCurrentTrainingData<BaseClass>::StreamedDownloadCurrentTrainingData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_DownloadCurrentTrainingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadCurrentTrainingData(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadCurrentTrainingDataRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadCurrentTrainingDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadCurrentTrainingData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::speechly::config::v1::DownloadCurrentTrainingDataRequest,::speechly::config::v1::DownloadCurrentTrainingDataResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DownloadCurrentTrainingData<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetProject<WithStreamedUnaryMethod_CreateProject<WithStreamedUnaryMethod_UpdateProject<WithStreamedUnaryMethod_GetProjectParticipants<WithStreamedUnaryMethod_Invite<WithStreamedUnaryMethod_JoinProject<WithStreamedUnaryMethod_ListApps<WithStreamedUnaryMethod_GetApp<WithStreamedUnaryMethod_CreateApp<WithStreamedUnaryMethod_UpdateApp<WithStreamedUnaryMethod_DeleteApp<WithSplitStreamingMethod_DownloadCurrentTrainingData<Service > > > > > > > > > > > > StreamedService;
};
// Project API methods.

}  // namespace v1
}  // namespace config
}  // namespace speechly


#endif  // GRPC_speechly_2fconfig_2fv1_2fconfig_5fapi_2eproto__INCLUDED
