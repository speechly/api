// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/config/v1/model_api.proto

#include "speechly/config/v1/model_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace config {
namespace v1 {
constexpr DownloadModelRequest::DownloadModelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_architecture_(0)
{}
struct DownloadModelRequestDefaultTypeInternal {
  constexpr DownloadModelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadModelRequestDefaultTypeInternal() {}
  union {
    DownloadModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadModelRequestDefaultTypeInternal _DownloadModelRequest_default_instance_;
constexpr DownloadModelResponse::DownloadModelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DownloadModelResponseDefaultTypeInternal {
  constexpr DownloadModelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadModelResponseDefaultTypeInternal() {}
  union {
    DownloadModelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadModelResponseDefaultTypeInternal _DownloadModelResponse_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadModelRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadModelRequest, config_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadModelRequest, model_architecture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::config::v1::DownloadModelResponse, chunk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::config::v1::DownloadModelRequest)},
  { 8, -1, sizeof(::speechly::config::v1::DownloadModelResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DownloadModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::config::v1::_DownloadModelResponse_default_instance_),
};

const char descriptor_table_protodef_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"speechly/config/v1/model_api.proto\022\022sp"
  "eechly.config.v1\"\241\002\n\024DownloadModelReques"
  "t\022\016\n\006app_id\030\001 \001(\t\022\021\n\tconfig_id\030\002 \001(\t\022V\n\022"
  "model_architecture\030\003 \001(\0162:.speechly.conf"
  "ig.v1.DownloadModelRequest.ModelArchitec"
  "ture\"\215\001\n\021ModelArchitecture\022\036\n\032MODEL_ARCH"
  "ITECTURE_INVALID\020\000\022\032\n\026MODEL_ARCHITECTURE"
  "_ORT\020\001\022\035\n\031MODEL_ARCHITECTURE_COREML\020\002\022\035\n"
  "\031MODEL_ARCHITECTURE_TFLITE\020\003\"&\n\025Download"
  "ModelResponse\022\r\n\005chunk\030\001 \001(\0142r\n\010ModelAPI"
  "\022f\n\rDownloadModel\022(.speechly.config.v1.D"
  "ownloadModelRequest\032).speechly.config.v1"
  ".DownloadModelResponse0\001Bv\n\026com.speechly"
  ".config.v1B\rModelApiProtoP\001Z\033speechly/co"
  "nfig/v1;configv1\242\002\003SCX\252\002\022Speechly.Config"
  ".V1\312\002\022Speechly\\Config\\V1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto = {
  false, false, 632, descriptor_table_protodef_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto, "speechly/config/v1/model_api.proto", 
  &descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto, file_level_enum_descriptors_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto, file_level_service_descriptors_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto(&descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto);
namespace speechly {
namespace config {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadModelRequest_ModelArchitecture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto[0];
}
bool DownloadModelRequest_ModelArchitecture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest::MODEL_ARCHITECTURE_INVALID;
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest::MODEL_ARCHITECTURE_ORT;
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest::MODEL_ARCHITECTURE_COREML;
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest::MODEL_ARCHITECTURE_TFLITE;
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest::ModelArchitecture_MIN;
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest::ModelArchitecture_MAX;
constexpr int DownloadModelRequest::ModelArchitecture_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DownloadModelRequest::_Internal {
 public:
};

DownloadModelRequest::DownloadModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.DownloadModelRequest)
}
DownloadModelRequest::DownloadModelRequest(const DownloadModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_id(), 
      GetArenaForAllocation());
  }
  model_architecture_ = from.model_architecture_;
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DownloadModelRequest)
}

inline void DownloadModelRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_architecture_ = 0;
}

DownloadModelRequest::~DownloadModelRequest() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DownloadModelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadModelRequest::ArenaDtor(void* object) {
  DownloadModelRequest* _this = reinterpret_cast< DownloadModelRequest* >(object);
  (void)_this;
}
void DownloadModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DownloadModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  config_id_.ClearToEmpty();
  model_architecture_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DownloadModelRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.config.v1.DownloadModelRequest.config_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.config.v1.DownloadModelRequest.ModelArchitecture model_architecture = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model_architecture(static_cast<::speechly::config::v1::DownloadModelRequest_ModelArchitecture>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DownloadModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DownloadModelRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string config_id = 2;
  if (!this->_internal_config_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_id().data(), static_cast<int>(this->_internal_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.config.v1.DownloadModelRequest.config_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_id(), target);
  }

  // .speechly.config.v1.DownloadModelRequest.ModelArchitecture model_architecture = 3;
  if (this->_internal_model_architecture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_model_architecture(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DownloadModelRequest)
  return target;
}

size_t DownloadModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DownloadModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string config_id = 2;
  if (!this->_internal_config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_id());
  }

  // .speechly.config.v1.DownloadModelRequest.ModelArchitecture model_architecture = 3;
  if (this->_internal_model_architecture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model_architecture());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadModelRequest::GetClassData() const { return &_class_data_; }

void DownloadModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DownloadModelRequest *>(to)->MergeFrom(
      static_cast<const DownloadModelRequest &>(from));
}


void DownloadModelRequest::MergeFrom(const DownloadModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DownloadModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_config_id().empty()) {
    _internal_set_config_id(from._internal_config_id());
  }
  if (from._internal_model_architecture() != 0) {
    _internal_set_model_architecture(from._internal_model_architecture());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadModelRequest::CopyFrom(const DownloadModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DownloadModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadModelRequest::IsInitialized() const {
  return true;
}

void DownloadModelRequest::InternalSwap(DownloadModelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_id_, GetArenaForAllocation(),
      &other->config_id_, other->GetArenaForAllocation()
  );
  swap(model_architecture_, other->model_architecture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadModelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto[0]);
}

// ===================================================================

class DownloadModelResponse::_Internal {
 public:
};

DownloadModelResponse::DownloadModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.config.v1.DownloadModelResponse)
}
DownloadModelResponse::DownloadModelResponse(const DownloadModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk().empty()) {
    chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chunk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.config.v1.DownloadModelResponse)
}

inline void DownloadModelResponse::SharedCtor() {
chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DownloadModelResponse::~DownloadModelResponse() {
  // @@protoc_insertion_point(destructor:speechly.config.v1.DownloadModelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadModelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadModelResponse::ArenaDtor(void* object) {
  DownloadModelResponse* _this = reinterpret_cast< DownloadModelResponse* >(object);
  (void)_this;
}
void DownloadModelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.config.v1.DownloadModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.config.v1.DownloadModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.config.v1.DownloadModelResponse)
  return target;
}

size_t DownloadModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.config.v1.DownloadModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadModelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadModelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadModelResponse::GetClassData() const { return &_class_data_; }

void DownloadModelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DownloadModelResponse *>(to)->MergeFrom(
      static_cast<const DownloadModelResponse &>(from));
}


void DownloadModelResponse::MergeFrom(const DownloadModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.config.v1.DownloadModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _internal_set_chunk(from._internal_chunk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadModelResponse::CopyFrom(const DownloadModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.config.v1.DownloadModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadModelResponse::IsInitialized() const {
  return true;
}

void DownloadModelResponse::InternalSwap(DownloadModelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chunk_, GetArenaForAllocation(),
      &other->chunk_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadModelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_getter, &descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_once,
      file_level_metadata_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DownloadModelRequest* Arena::CreateMaybeMessage< ::speechly::config::v1::DownloadModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::DownloadModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::config::v1::DownloadModelResponse* Arena::CreateMaybeMessage< ::speechly::config::v1::DownloadModelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::config::v1::DownloadModelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
