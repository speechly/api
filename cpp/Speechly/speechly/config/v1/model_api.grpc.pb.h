// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/config/v1/model_api.proto
#ifndef GRPC_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto__INCLUDED
#define GRPC_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto__INCLUDED

#include "speechly/config/v1/model_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace speechly {
namespace config {
namespace v1 {

// Speechly Model API provides operations related to the on-device models.
//
// The service requires a Speechly token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
//
// The token acts as a proxy for the user who has generated it,
// i.e. all operations are performed with that user as a subject.
class ModelAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "speechly.config.v1.ModelAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Downloads a model bundle for on-device use.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::speechly::config::v1::DownloadModelResponse>> DownloadModel(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::speechly::config::v1::DownloadModelResponse>>(DownloadModelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadModelResponse>> AsyncDownloadModel(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadModelResponse>>(AsyncDownloadModelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadModelResponse>> PrepareAsyncDownloadModel(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadModelResponse>>(PrepareAsyncDownloadModelRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Downloads a model bundle for on-device use.
      virtual void DownloadModel(::grpc::ClientContext* context, ::speechly::config::v1::DownloadModelRequest* request, ::grpc::experimental::ClientReadReactor< ::speechly::config::v1::DownloadModelResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::speechly::config::v1::DownloadModelResponse>* DownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadModelResponse>* AsyncDownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::speechly::config::v1::DownloadModelResponse>* PrepareAsyncDownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::speechly::config::v1::DownloadModelResponse>> DownloadModel(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::speechly::config::v1::DownloadModelResponse>>(DownloadModelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>> AsyncDownloadModel(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>>(AsyncDownloadModelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>> PrepareAsyncDownloadModel(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>>(PrepareAsyncDownloadModelRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DownloadModel(::grpc::ClientContext* context, ::speechly::config::v1::DownloadModelRequest* request, ::grpc::experimental::ClientReadReactor< ::speechly::config::v1::DownloadModelResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::speechly::config::v1::DownloadModelResponse>* DownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request) override;
    ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>* AsyncDownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>* PrepareAsyncDownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadModel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Downloads a model bundle for on-device use.
    virtual ::grpc::Status DownloadModel(::grpc::ServerContext* context, const ::speechly::config::v1::DownloadModelRequest* request, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadModel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DownloadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadModel(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadModelRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadModel(::grpc::ServerContext* context, ::speechly::config::v1::DownloadModelRequest* request, ::grpc::ServerAsyncWriter< ::speechly::config::v1::DownloadModelResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DownloadModel<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadModel() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::speechly::config::v1::DownloadModelRequest, ::speechly::config::v1::DownloadModelResponse>(
          [this] { return this->DownloadModel(); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadModel(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadModelRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::speechly::config::v1::DownloadModelRequest, ::speechly::config::v1::DownloadModelResponse>* DownloadModel() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::speechly::config::v1::DownloadModelRequest, ::speechly::config::v1::DownloadModelResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_DownloadModel<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DownloadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadModel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DownloadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadModel(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadModelRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadModel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DownloadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadModel(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadModelRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->DownloadModel(); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadModel(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadModelRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DownloadModel() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadModel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::speechly::config::v1::DownloadModelRequest, ::speechly::config::v1::DownloadModelResponse>(std::bind(&WithSplitStreamingMethod_DownloadModel<BaseClass>::StreamedDownloadModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_DownloadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadModel(::grpc::ServerContext* /*context*/, const ::speechly::config::v1::DownloadModelRequest* /*request*/, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadModel(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::speechly::config::v1::DownloadModelRequest,::speechly::config::v1::DownloadModelResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DownloadModel<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_DownloadModel<Service > StreamedService;
};

}  // namespace v1
}  // namespace config
}  // namespace speechly


#endif  // GRPC_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto__INCLUDED
