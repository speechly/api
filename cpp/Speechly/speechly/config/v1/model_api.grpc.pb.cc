// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/config/v1/model_api.proto

#include "speechly/config/v1/model_api.pb.h"
#include "speechly/config/v1/model_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace speechly {
namespace config {
namespace v1 {

static const char* ModelAPI_method_names[] = {
  "/speechly.config.v1.ModelAPI/DownloadModel",
};

std::unique_ptr< ModelAPI::Stub> ModelAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ModelAPI::Stub> stub(new ModelAPI::Stub(channel));
  return stub;
}

ModelAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DownloadModel_(ModelAPI_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::speechly::config::v1::DownloadModelResponse>* ModelAPI::Stub::DownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::speechly::config::v1::DownloadModelResponse>::Create(channel_.get(), rpcmethod_DownloadModel_, context, request);
}

void ModelAPI::Stub::experimental_async::DownloadModel(::grpc::ClientContext* context, ::speechly::config::v1::DownloadModelRequest* request, ::grpc::experimental::ClientReadReactor< ::speechly::config::v1::DownloadModelResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::speechly::config::v1::DownloadModelResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadModel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>* ModelAPI::Stub::AsyncDownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::speechly::config::v1::DownloadModelResponse>::Create(channel_.get(), cq, rpcmethod_DownloadModel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::speechly::config::v1::DownloadModelResponse>* ModelAPI::Stub::PrepareAsyncDownloadModelRaw(::grpc::ClientContext* context, const ::speechly::config::v1::DownloadModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::speechly::config::v1::DownloadModelResponse>::Create(channel_.get(), cq, rpcmethod_DownloadModel_, context, request, false, nullptr);
}

ModelAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelAPI_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ModelAPI::Service, ::speechly::config::v1::DownloadModelRequest, ::speechly::config::v1::DownloadModelResponse>(
          std::mem_fn(&ModelAPI::Service::DownloadModel), this)));
}

ModelAPI::Service::~Service() {
}

::grpc::Status ModelAPI::Service::DownloadModel(::grpc::ServerContext* context, const ::speechly::config::v1::DownloadModelRequest* request, ::grpc::ServerWriter< ::speechly::config::v1::DownloadModelResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speechly
}  // namespace config
}  // namespace v1

