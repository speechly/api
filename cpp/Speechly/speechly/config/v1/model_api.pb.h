// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/config/v1/model_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "speechly/config/v1/model.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
namespace speechly {
namespace config {
namespace v1 {
class DownloadModelRequest;
struct DownloadModelRequestDefaultTypeInternal;
extern DownloadModelRequestDefaultTypeInternal _DownloadModelRequest_default_instance_;
class DownloadModelResponse;
struct DownloadModelResponseDefaultTypeInternal;
extern DownloadModelResponseDefaultTypeInternal _DownloadModelResponse_default_instance_;
class ListBaseModelsRequest;
struct ListBaseModelsRequestDefaultTypeInternal;
extern ListBaseModelsRequestDefaultTypeInternal _ListBaseModelsRequest_default_instance_;
class ListBaseModelsResponse;
struct ListBaseModelsResponseDefaultTypeInternal;
extern ListBaseModelsResponseDefaultTypeInternal _ListBaseModelsResponse_default_instance_;
class ListLanguagesRequest;
struct ListLanguagesRequestDefaultTypeInternal;
extern ListLanguagesRequestDefaultTypeInternal _ListLanguagesRequest_default_instance_;
class ListLanguagesResponse;
struct ListLanguagesResponseDefaultTypeInternal;
extern ListLanguagesResponseDefaultTypeInternal _ListLanguagesResponse_default_instance_;
class ListLanguagesResponse_Language;
struct ListLanguagesResponse_LanguageDefaultTypeInternal;
extern ListLanguagesResponse_LanguageDefaultTypeInternal _ListLanguagesResponse_Language_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace config {
namespace v1 {
enum DownloadModelRequest_ModelArchitecture : int {
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_INVALID = 0,
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_ORT = 1,
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_COREML = 2,
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_TFLITE = 3,
  DownloadModelRequest_ModelArchitecture_DownloadModelRequest_ModelArchitecture_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DownloadModelRequest_ModelArchitecture_DownloadModelRequest_ModelArchitecture_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DownloadModelRequest_ModelArchitecture_IsValid(int value);
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest_ModelArchitecture_ModelArchitecture_MIN = static_cast<DownloadModelRequest_ModelArchitecture>(0);
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest_ModelArchitecture_ModelArchitecture_MAX = static_cast<DownloadModelRequest_ModelArchitecture>(3);
constexpr int DownloadModelRequest_ModelArchitecture_ModelArchitecture_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
DownloadModelRequest_ModelArchitecture_descriptor();
template <typename T>
const std::string& DownloadModelRequest_ModelArchitecture_Name(T value) {
  static_assert(std::is_same<T, DownloadModelRequest_ModelArchitecture>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ModelArchitecture_Name().");
  return DownloadModelRequest_ModelArchitecture_Name(static_cast<DownloadModelRequest_ModelArchitecture>(value));
}
template <>
inline const std::string& DownloadModelRequest_ModelArchitecture_Name(DownloadModelRequest_ModelArchitecture value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DownloadModelRequest_ModelArchitecture_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool DownloadModelRequest_ModelArchitecture_Parse(absl::string_view name, DownloadModelRequest_ModelArchitecture* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DownloadModelRequest_ModelArchitecture>(
      DownloadModelRequest_ModelArchitecture_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class DownloadModelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.DownloadModelRequest) */ {
 public:
  inline DownloadModelRequest() : DownloadModelRequest(nullptr) {}
  ~DownloadModelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DownloadModelRequest(::google::protobuf::internal::ConstantInitialized);

  DownloadModelRequest(const DownloadModelRequest& from);
  DownloadModelRequest(DownloadModelRequest&& from) noexcept
    : DownloadModelRequest() {
    *this = ::std::move(from);
  }

  inline DownloadModelRequest& operator=(const DownloadModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadModelRequest& operator=(DownloadModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadModelRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadModelRequest*>(
               &_DownloadModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DownloadModelRequest& a, DownloadModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadModelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadModelRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadModelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DownloadModelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DownloadModelRequest& from) {
    DownloadModelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadModelRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.config.v1.DownloadModelRequest";
  }
  protected:
  explicit DownloadModelRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ModelArchitecture = DownloadModelRequest_ModelArchitecture;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_INVALID = DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_INVALID;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_ORT = DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_ORT;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_COREML = DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_COREML;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_TFLITE = DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_TFLITE;
  static inline bool ModelArchitecture_IsValid(int value) {
    return DownloadModelRequest_ModelArchitecture_IsValid(value);
  }
  static constexpr ModelArchitecture ModelArchitecture_MIN = DownloadModelRequest_ModelArchitecture_ModelArchitecture_MIN;
  static constexpr ModelArchitecture ModelArchitecture_MAX = DownloadModelRequest_ModelArchitecture_ModelArchitecture_MAX;
  static constexpr int ModelArchitecture_ARRAYSIZE = DownloadModelRequest_ModelArchitecture_ModelArchitecture_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ModelArchitecture_descriptor() {
    return DownloadModelRequest_ModelArchitecture_descriptor();
  }
  template <typename T>
  static inline const std::string& ModelArchitecture_Name(T value) {
    return DownloadModelRequest_ModelArchitecture_Name(value);
  }
  static inline bool ModelArchitecture_Parse(absl::string_view name, ModelArchitecture* value) {
    return DownloadModelRequest_ModelArchitecture_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kConfigIdFieldNumber = 2,
    kModelArchitectureFieldNumber = 3,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string config_id = 2;
  void clear_config_id() ;
  const std::string& config_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_config_id(Arg_&& arg, Args_... args);
  std::string* mutable_config_id();
  PROTOBUF_NODISCARD std::string* release_config_id();
  void set_allocated_config_id(std::string* ptr);

  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(
      const std::string& value);
  std::string* _internal_mutable_config_id();

  public:
  // .speechly.config.v1.DownloadModelRequest.ModelArchitecture model_architecture = 3;
  void clear_model_architecture() ;
  ::speechly::config::v1::DownloadModelRequest_ModelArchitecture model_architecture() const;
  void set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value);

  private:
  ::speechly::config::v1::DownloadModelRequest_ModelArchitecture _internal_model_architecture() const;
  void _internal_set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.config.v1.DownloadModelRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 63, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr config_id_;
    int model_architecture_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};// -------------------------------------------------------------------

class DownloadModelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.DownloadModelResponse) */ {
 public:
  inline DownloadModelResponse() : DownloadModelResponse(nullptr) {}
  ~DownloadModelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DownloadModelResponse(::google::protobuf::internal::ConstantInitialized);

  DownloadModelResponse(const DownloadModelResponse& from);
  DownloadModelResponse(DownloadModelResponse&& from) noexcept
    : DownloadModelResponse() {
    *this = ::std::move(from);
  }

  inline DownloadModelResponse& operator=(const DownloadModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadModelResponse& operator=(DownloadModelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadModelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadModelResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadModelResponse*>(
               &_DownloadModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DownloadModelResponse& a, DownloadModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadModelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadModelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadModelResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadModelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DownloadModelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DownloadModelResponse& from) {
    DownloadModelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadModelResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.config.v1.DownloadModelResponse";
  }
  protected:
  explicit DownloadModelResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 1,
  };
  // bytes chunk = 1;
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* ptr);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  // @@protoc_insertion_point(class_scope:speechly.config.v1.DownloadModelResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr chunk_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};// -------------------------------------------------------------------

class ListBaseModelsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.ListBaseModelsRequest) */ {
 public:
  inline ListBaseModelsRequest() : ListBaseModelsRequest(nullptr) {}
  ~ListBaseModelsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListBaseModelsRequest(::google::protobuf::internal::ConstantInitialized);

  ListBaseModelsRequest(const ListBaseModelsRequest& from);
  ListBaseModelsRequest(ListBaseModelsRequest&& from) noexcept
    : ListBaseModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListBaseModelsRequest& operator=(const ListBaseModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseModelsRequest& operator=(ListBaseModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBaseModelsRequest*>(
               &_ListBaseModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListBaseModelsRequest& a, ListBaseModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseModelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseModelsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBaseModelsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBaseModelsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListBaseModelsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListBaseModelsRequest& from) {
    ListBaseModelsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseModelsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.config.v1.ListBaseModelsRequest";
  }
  protected:
  explicit ListBaseModelsRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // string project_id = 1;
  void clear_project_id() ;
  const std::string& project_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_project_id(Arg_&& arg, Args_... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* ptr);

  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(
      const std::string& value);
  std::string* _internal_mutable_project_id();

  public:
  // string language = 2;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* ptr);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // @@protoc_insertion_point(class_scope:speechly.config.v1.ListBaseModelsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 67, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr project_id_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};// -------------------------------------------------------------------

class ListBaseModelsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.ListBaseModelsResponse) */ {
 public:
  inline ListBaseModelsResponse() : ListBaseModelsResponse(nullptr) {}
  ~ListBaseModelsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListBaseModelsResponse(::google::protobuf::internal::ConstantInitialized);

  ListBaseModelsResponse(const ListBaseModelsResponse& from);
  ListBaseModelsResponse(ListBaseModelsResponse&& from) noexcept
    : ListBaseModelsResponse() {
    *this = ::std::move(from);
  }

  inline ListBaseModelsResponse& operator=(const ListBaseModelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseModelsResponse& operator=(ListBaseModelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseModelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseModelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBaseModelsResponse*>(
               &_ListBaseModelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListBaseModelsResponse& a, ListBaseModelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseModelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseModelsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBaseModelsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBaseModelsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListBaseModelsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListBaseModelsResponse& from) {
    ListBaseModelsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseModelsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.config.v1.ListBaseModelsResponse";
  }
  protected:
  explicit ListBaseModelsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // repeated .speechly.config.v1.BaseModel model = 1;
  int model_size() const;
  private:
  int _internal_model_size() const;

  public:
  void clear_model() ;
  ::speechly::config::v1::BaseModel* mutable_model(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::BaseModel >*
      mutable_model();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::config::v1::BaseModel>& _internal_model() const;
  ::google::protobuf::RepeatedPtrField<::speechly::config::v1::BaseModel>* _internal_mutable_model();
  public:
  const ::speechly::config::v1::BaseModel& model(int index) const;
  ::speechly::config::v1::BaseModel* add_model();
  const ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::BaseModel >&
      model() const;
  // @@protoc_insertion_point(class_scope:speechly.config.v1.ListBaseModelsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::BaseModel > model_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};// -------------------------------------------------------------------

class ListLanguagesRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:speechly.config.v1.ListLanguagesRequest) */ {
 public:
  inline ListLanguagesRequest() : ListLanguagesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListLanguagesRequest(::google::protobuf::internal::ConstantInitialized);

  ListLanguagesRequest(const ListLanguagesRequest& from);
  ListLanguagesRequest(ListLanguagesRequest&& from) noexcept
    : ListLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline ListLanguagesRequest& operator=(const ListLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLanguagesRequest& operator=(ListLanguagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLanguagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListLanguagesRequest*>(
               &_ListLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListLanguagesRequest& a, ListLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLanguagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLanguagesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLanguagesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLanguagesRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListLanguagesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListLanguagesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.config.v1.ListLanguagesRequest";
  }
  protected:
  explicit ListLanguagesRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:speechly.config.v1.ListLanguagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};// -------------------------------------------------------------------

class ListLanguagesResponse_Language final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.ListLanguagesResponse.Language) */ {
 public:
  inline ListLanguagesResponse_Language() : ListLanguagesResponse_Language(nullptr) {}
  ~ListLanguagesResponse_Language() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListLanguagesResponse_Language(::google::protobuf::internal::ConstantInitialized);

  ListLanguagesResponse_Language(const ListLanguagesResponse_Language& from);
  ListLanguagesResponse_Language(ListLanguagesResponse_Language&& from) noexcept
    : ListLanguagesResponse_Language() {
    *this = ::std::move(from);
  }

  inline ListLanguagesResponse_Language& operator=(const ListLanguagesResponse_Language& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLanguagesResponse_Language& operator=(ListLanguagesResponse_Language&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLanguagesResponse_Language& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLanguagesResponse_Language* internal_default_instance() {
    return reinterpret_cast<const ListLanguagesResponse_Language*>(
               &_ListLanguagesResponse_Language_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListLanguagesResponse_Language& a, ListLanguagesResponse_Language& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLanguagesResponse_Language* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLanguagesResponse_Language* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLanguagesResponse_Language* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLanguagesResponse_Language>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListLanguagesResponse_Language& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListLanguagesResponse_Language& from) {
    ListLanguagesResponse_Language::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLanguagesResponse_Language* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.config.v1.ListLanguagesResponse.Language";
  }
  protected:
  explicit ListLanguagesResponse_Language(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:speechly.config.v1.ListLanguagesResponse.Language)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 66, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};// -------------------------------------------------------------------

class ListLanguagesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.ListLanguagesResponse) */ {
 public:
  inline ListLanguagesResponse() : ListLanguagesResponse(nullptr) {}
  ~ListLanguagesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListLanguagesResponse(::google::protobuf::internal::ConstantInitialized);

  ListLanguagesResponse(const ListLanguagesResponse& from);
  ListLanguagesResponse(ListLanguagesResponse&& from) noexcept
    : ListLanguagesResponse() {
    *this = ::std::move(from);
  }

  inline ListLanguagesResponse& operator=(const ListLanguagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLanguagesResponse& operator=(ListLanguagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLanguagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLanguagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListLanguagesResponse*>(
               &_ListLanguagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListLanguagesResponse& a, ListLanguagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLanguagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLanguagesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLanguagesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLanguagesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListLanguagesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListLanguagesResponse& from) {
    ListLanguagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLanguagesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.config.v1.ListLanguagesResponse";
  }
  protected:
  explicit ListLanguagesResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListLanguagesResponse_Language Language;

  // accessors -------------------------------------------------------

  enum : int {
    kLanguagesFieldNumber = 1,
  };
  // repeated .speechly.config.v1.ListLanguagesResponse.Language languages = 1;
  int languages_size() const;
  private:
  int _internal_languages_size() const;

  public:
  void clear_languages() ;
  ::speechly::config::v1::ListLanguagesResponse_Language* mutable_languages(int index);
  ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::ListLanguagesResponse_Language >*
      mutable_languages();
  private:
  const ::google::protobuf::RepeatedPtrField<::speechly::config::v1::ListLanguagesResponse_Language>& _internal_languages() const;
  ::google::protobuf::RepeatedPtrField<::speechly::config::v1::ListLanguagesResponse_Language>* _internal_mutable_languages();
  public:
  const ::speechly::config::v1::ListLanguagesResponse_Language& languages(int index) const;
  ::speechly::config::v1::ListLanguagesResponse_Language* add_languages();
  const ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::ListLanguagesResponse_Language >&
      languages() const;
  // @@protoc_insertion_point(class_scope:speechly.config.v1.ListLanguagesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::ListLanguagesResponse_Language > languages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DownloadModelRequest

// string app_id = 1;
inline void DownloadModelRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& DownloadModelRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DownloadModelRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelRequest.app_id)
}
inline std::string* DownloadModelRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.DownloadModelRequest.app_id)
  return _s;
}
inline const std::string& DownloadModelRequest::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void DownloadModelRequest::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.config.v1.DownloadModelRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void DownloadModelRequest::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.DownloadModelRequest.app_id)
}

// string config_id = 2;
inline void DownloadModelRequest::clear_config_id() {
  _impl_.config_id_.ClearToEmpty();
}
inline const std::string& DownloadModelRequest::config_id() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelRequest.config_id)
  return _internal_config_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DownloadModelRequest::set_config_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.config_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelRequest.config_id)
}
inline std::string* DownloadModelRequest::mutable_config_id() {
  std::string* _s = _internal_mutable_config_id();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.DownloadModelRequest.config_id)
  return _s;
}
inline const std::string& DownloadModelRequest::_internal_config_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.config_id_.Get();
}
inline void DownloadModelRequest::_internal_set_config_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.config_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::_internal_mutable_config_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.config_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::release_config_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.config.v1.DownloadModelRequest.config_id)
  return _impl_.config_id_.Release();
}
inline void DownloadModelRequest::set_allocated_config_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.config_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.config_id_.IsDefault()) {
          _impl_.config_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.DownloadModelRequest.config_id)
}

// .speechly.config.v1.DownloadModelRequest.ModelArchitecture model_architecture = 3;
inline void DownloadModelRequest::clear_model_architecture() {
  _impl_.model_architecture_ = 0;
}
inline ::speechly::config::v1::DownloadModelRequest_ModelArchitecture DownloadModelRequest::model_architecture() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelRequest.model_architecture)
  return _internal_model_architecture();
}
inline void DownloadModelRequest::set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value) {
  _internal_set_model_architecture(value);
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelRequest.model_architecture)
}
inline ::speechly::config::v1::DownloadModelRequest_ModelArchitecture DownloadModelRequest::_internal_model_architecture() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::speechly::config::v1::DownloadModelRequest_ModelArchitecture>(_impl_.model_architecture_);
}
inline void DownloadModelRequest::_internal_set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_architecture_ = value;
}

// -------------------------------------------------------------------

// DownloadModelResponse

// bytes chunk = 1;
inline void DownloadModelResponse::clear_chunk() {
  _impl_.chunk_.ClearToEmpty();
}
inline const std::string& DownloadModelResponse::chunk() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelResponse.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DownloadModelResponse::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelResponse.chunk)
}
inline std::string* DownloadModelResponse::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.DownloadModelResponse.chunk)
  return _s;
}
inline const std::string& DownloadModelResponse::_internal_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_.Get();
}
inline void DownloadModelResponse::_internal_set_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadModelResponse::_internal_mutable_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chunk_.Mutable( GetArenaForAllocation());
}
inline std::string* DownloadModelResponse::release_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.config.v1.DownloadModelResponse.chunk)
  return _impl_.chunk_.Release();
}
inline void DownloadModelResponse::set_allocated_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chunk_.IsDefault()) {
          _impl_.chunk_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.DownloadModelResponse.chunk)
}

// -------------------------------------------------------------------

// ListBaseModelsRequest

// string project_id = 1;
inline void ListBaseModelsRequest::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& ListBaseModelsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListBaseModelsRequest.project_id)
  return _internal_project_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListBaseModelsRequest::set_project_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.project_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.ListBaseModelsRequest.project_id)
}
inline std::string* ListBaseModelsRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListBaseModelsRequest.project_id)
  return _s;
}
inline const std::string& ListBaseModelsRequest::_internal_project_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.project_id_.Get();
}
inline void ListBaseModelsRequest::_internal_set_project_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBaseModelsRequest::_internal_mutable_project_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.project_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ListBaseModelsRequest::release_project_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.config.v1.ListBaseModelsRequest.project_id)
  return _impl_.project_id_.Release();
}
inline void ListBaseModelsRequest::set_allocated_project_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.project_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.project_id_.IsDefault()) {
          _impl_.project_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.ListBaseModelsRequest.project_id)
}

// string language = 2;
inline void ListBaseModelsRequest::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& ListBaseModelsRequest::language() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListBaseModelsRequest.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListBaseModelsRequest::set_language(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.ListBaseModelsRequest.language)
}
inline std::string* ListBaseModelsRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListBaseModelsRequest.language)
  return _s;
}
inline const std::string& ListBaseModelsRequest::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_.Get();
}
inline void ListBaseModelsRequest::_internal_set_language(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBaseModelsRequest::_internal_mutable_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_.Mutable( GetArenaForAllocation());
}
inline std::string* ListBaseModelsRequest::release_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.config.v1.ListBaseModelsRequest.language)
  return _impl_.language_.Release();
}
inline void ListBaseModelsRequest::set_allocated_language(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.ListBaseModelsRequest.language)
}

// -------------------------------------------------------------------

// ListBaseModelsResponse

// repeated .speechly.config.v1.BaseModel model = 1;
inline int ListBaseModelsResponse::_internal_model_size() const {
  return _internal_model().size();
}
inline int ListBaseModelsResponse::model_size() const {
  return _internal_model_size();
}
inline ::speechly::config::v1::BaseModel* ListBaseModelsResponse::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListBaseModelsResponse.model)
  return _internal_mutable_model()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::BaseModel >*
ListBaseModelsResponse::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:speechly.config.v1.ListBaseModelsResponse.model)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_model();
}
inline const ::speechly::config::v1::BaseModel& ListBaseModelsResponse::model(int index) const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListBaseModelsResponse.model)
    return _internal_model().Get(index);
}
inline ::speechly::config::v1::BaseModel* ListBaseModelsResponse::add_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::config::v1::BaseModel* _add = _internal_mutable_model()->Add();
  // @@protoc_insertion_point(field_add:speechly.config.v1.ListBaseModelsResponse.model)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::BaseModel >&
ListBaseModelsResponse::model() const {
  // @@protoc_insertion_point(field_list:speechly.config.v1.ListBaseModelsResponse.model)
  return _internal_model();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::config::v1::BaseModel>&
ListBaseModelsResponse::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::config::v1::BaseModel>*
ListBaseModelsResponse::_internal_mutable_model() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.model_;
}

// -------------------------------------------------------------------

// ListLanguagesRequest

// -------------------------------------------------------------------

// ListLanguagesResponse_Language

// string code = 1;
inline void ListLanguagesResponse_Language::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& ListLanguagesResponse_Language::code() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListLanguagesResponse.Language.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListLanguagesResponse_Language::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.ListLanguagesResponse.Language.code)
}
inline std::string* ListLanguagesResponse_Language::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListLanguagesResponse.Language.code)
  return _s;
}
inline const std::string& ListLanguagesResponse_Language::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void ListLanguagesResponse_Language::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* ListLanguagesResponse_Language::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* ListLanguagesResponse_Language::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.config.v1.ListLanguagesResponse.Language.code)
  return _impl_.code_.Release();
}
inline void ListLanguagesResponse_Language::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.ListLanguagesResponse.Language.code)
}

// string name = 2;
inline void ListLanguagesResponse_Language::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListLanguagesResponse_Language::name() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListLanguagesResponse.Language.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListLanguagesResponse_Language::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.ListLanguagesResponse.Language.name)
}
inline std::string* ListLanguagesResponse_Language::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListLanguagesResponse.Language.name)
  return _s;
}
inline const std::string& ListLanguagesResponse_Language::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ListLanguagesResponse_Language::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListLanguagesResponse_Language::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ListLanguagesResponse_Language::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.config.v1.ListLanguagesResponse.Language.name)
  return _impl_.name_.Release();
}
inline void ListLanguagesResponse_Language::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.ListLanguagesResponse.Language.name)
}

// -------------------------------------------------------------------

// ListLanguagesResponse

// repeated .speechly.config.v1.ListLanguagesResponse.Language languages = 1;
inline int ListLanguagesResponse::_internal_languages_size() const {
  return _internal_languages().size();
}
inline int ListLanguagesResponse::languages_size() const {
  return _internal_languages_size();
}
inline void ListLanguagesResponse::clear_languages() {
  _internal_mutable_languages()->Clear();
}
inline ::speechly::config::v1::ListLanguagesResponse_Language* ListLanguagesResponse::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListLanguagesResponse.languages)
  return _internal_mutable_languages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::ListLanguagesResponse_Language >*
ListLanguagesResponse::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:speechly.config.v1.ListLanguagesResponse.languages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_languages();
}
inline const ::speechly::config::v1::ListLanguagesResponse_Language& ListLanguagesResponse::languages(int index) const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListLanguagesResponse.languages)
    return _internal_languages().Get(index);
}
inline ::speechly::config::v1::ListLanguagesResponse_Language* ListLanguagesResponse::add_languages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::speechly::config::v1::ListLanguagesResponse_Language* _add = _internal_mutable_languages()->Add();
  // @@protoc_insertion_point(field_add:speechly.config.v1.ListLanguagesResponse.languages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::speechly::config::v1::ListLanguagesResponse_Language >&
ListLanguagesResponse::languages() const {
  // @@protoc_insertion_point(field_list:speechly.config.v1.ListLanguagesResponse.languages)
  return _internal_languages();
}
inline const ::google::protobuf::RepeatedPtrField<::speechly::config::v1::ListLanguagesResponse_Language>&
ListLanguagesResponse::_internal_languages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.languages_;
}
inline ::google::protobuf::RepeatedPtrField<::speechly::config::v1::ListLanguagesResponse_Language>*
ListLanguagesResponse::_internal_mutable_languages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.languages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace speechly


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::speechly::config::v1::DownloadModelRequest_ModelArchitecture> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::config::v1::DownloadModelRequest_ModelArchitecture>() {
  return ::speechly::config::v1::DownloadModelRequest_ModelArchitecture_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto_2epb_2eh
