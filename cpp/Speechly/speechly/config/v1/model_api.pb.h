// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/config/v1/model_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "speechly/config/v1/model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
namespace speechly {
namespace config {
namespace v1 {
class DownloadModelRequest;
struct DownloadModelRequestDefaultTypeInternal;
extern DownloadModelRequestDefaultTypeInternal _DownloadModelRequest_default_instance_;
class DownloadModelResponse;
struct DownloadModelResponseDefaultTypeInternal;
extern DownloadModelResponseDefaultTypeInternal _DownloadModelResponse_default_instance_;
class ListBaseModelsRequest;
struct ListBaseModelsRequestDefaultTypeInternal;
extern ListBaseModelsRequestDefaultTypeInternal _ListBaseModelsRequest_default_instance_;
class ListBaseModelsResponse;
struct ListBaseModelsResponseDefaultTypeInternal;
extern ListBaseModelsResponseDefaultTypeInternal _ListBaseModelsResponse_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::config::v1::DownloadModelRequest* Arena::CreateMaybeMessage<::speechly::config::v1::DownloadModelRequest>(Arena*);
template<> ::speechly::config::v1::DownloadModelResponse* Arena::CreateMaybeMessage<::speechly::config::v1::DownloadModelResponse>(Arena*);
template<> ::speechly::config::v1::ListBaseModelsRequest* Arena::CreateMaybeMessage<::speechly::config::v1::ListBaseModelsRequest>(Arena*);
template<> ::speechly::config::v1::ListBaseModelsResponse* Arena::CreateMaybeMessage<::speechly::config::v1::ListBaseModelsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace config {
namespace v1 {

enum DownloadModelRequest_ModelArchitecture : int {
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_INVALID = 0,
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_ORT = 1,
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_COREML = 2,
  DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_TFLITE = 3,
  DownloadModelRequest_ModelArchitecture_DownloadModelRequest_ModelArchitecture_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DownloadModelRequest_ModelArchitecture_DownloadModelRequest_ModelArchitecture_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DownloadModelRequest_ModelArchitecture_IsValid(int value);
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest_ModelArchitecture_ModelArchitecture_MIN = DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_INVALID;
constexpr DownloadModelRequest_ModelArchitecture DownloadModelRequest_ModelArchitecture_ModelArchitecture_MAX = DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_TFLITE;
constexpr int DownloadModelRequest_ModelArchitecture_ModelArchitecture_ARRAYSIZE = DownloadModelRequest_ModelArchitecture_ModelArchitecture_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadModelRequest_ModelArchitecture_descriptor();
template<typename T>
inline const std::string& DownloadModelRequest_ModelArchitecture_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DownloadModelRequest_ModelArchitecture>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DownloadModelRequest_ModelArchitecture_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DownloadModelRequest_ModelArchitecture_descriptor(), enum_t_value);
}
inline bool DownloadModelRequest_ModelArchitecture_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DownloadModelRequest_ModelArchitecture* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DownloadModelRequest_ModelArchitecture>(
    DownloadModelRequest_ModelArchitecture_descriptor(), name, value);
}
// ===================================================================

class DownloadModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.DownloadModelRequest) */ {
 public:
  inline DownloadModelRequest() : DownloadModelRequest(nullptr) {}
  ~DownloadModelRequest() override;
  explicit constexpr DownloadModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadModelRequest(const DownloadModelRequest& from);
  DownloadModelRequest(DownloadModelRequest&& from) noexcept
    : DownloadModelRequest() {
    *this = ::std::move(from);
  }

  inline DownloadModelRequest& operator=(const DownloadModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadModelRequest& operator=(DownloadModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadModelRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadModelRequest*>(
               &_DownloadModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DownloadModelRequest& a, DownloadModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadModelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadModelRequest* New() const final {
    return new DownloadModelRequest();
  }

  DownloadModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.config.v1.DownloadModelRequest";
  }
  protected:
  explicit DownloadModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DownloadModelRequest_ModelArchitecture ModelArchitecture;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_INVALID =
    DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_INVALID;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_ORT =
    DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_ORT;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_COREML =
    DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_COREML;
  static constexpr ModelArchitecture MODEL_ARCHITECTURE_TFLITE =
    DownloadModelRequest_ModelArchitecture_MODEL_ARCHITECTURE_TFLITE;
  static inline bool ModelArchitecture_IsValid(int value) {
    return DownloadModelRequest_ModelArchitecture_IsValid(value);
  }
  static constexpr ModelArchitecture ModelArchitecture_MIN =
    DownloadModelRequest_ModelArchitecture_ModelArchitecture_MIN;
  static constexpr ModelArchitecture ModelArchitecture_MAX =
    DownloadModelRequest_ModelArchitecture_ModelArchitecture_MAX;
  static constexpr int ModelArchitecture_ARRAYSIZE =
    DownloadModelRequest_ModelArchitecture_ModelArchitecture_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModelArchitecture_descriptor() {
    return DownloadModelRequest_ModelArchitecture_descriptor();
  }
  template<typename T>
  static inline const std::string& ModelArchitecture_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModelArchitecture>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModelArchitecture_Name.");
    return DownloadModelRequest_ModelArchitecture_Name(enum_t_value);
  }
  static inline bool ModelArchitecture_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModelArchitecture* value) {
    return DownloadModelRequest_ModelArchitecture_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kConfigIdFieldNumber = 2,
    kModelArchitectureFieldNumber = 3,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string config_id = 2;
  void clear_config_id();
  const std::string& config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_config_id();
  void set_allocated_config_id(std::string* config_id);
  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(const std::string& value);
  std::string* _internal_mutable_config_id();
  public:

  // .speechly.config.v1.DownloadModelRequest.ModelArchitecture model_architecture = 3;
  void clear_model_architecture();
  ::speechly::config::v1::DownloadModelRequest_ModelArchitecture model_architecture() const;
  void set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value);
  private:
  ::speechly::config::v1::DownloadModelRequest_ModelArchitecture _internal_model_architecture() const;
  void _internal_set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.config.v1.DownloadModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_id_;
  int model_architecture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DownloadModelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.DownloadModelResponse) */ {
 public:
  inline DownloadModelResponse() : DownloadModelResponse(nullptr) {}
  ~DownloadModelResponse() override;
  explicit constexpr DownloadModelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadModelResponse(const DownloadModelResponse& from);
  DownloadModelResponse(DownloadModelResponse&& from) noexcept
    : DownloadModelResponse() {
    *this = ::std::move(from);
  }

  inline DownloadModelResponse& operator=(const DownloadModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadModelResponse& operator=(DownloadModelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadModelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadModelResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadModelResponse*>(
               &_DownloadModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DownloadModelResponse& a, DownloadModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadModelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadModelResponse* New() const final {
    return new DownloadModelResponse();
  }

  DownloadModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadModelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadModelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadModelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.config.v1.DownloadModelResponse";
  }
  protected:
  explicit DownloadModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 1,
  };
  // bytes chunk = 1;
  void clear_chunk();
  const std::string& chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk();
  PROTOBUF_MUST_USE_RESULT std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  // @@protoc_insertion_point(class_scope:speechly.config.v1.DownloadModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListBaseModelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.ListBaseModelsRequest) */ {
 public:
  inline ListBaseModelsRequest() : ListBaseModelsRequest(nullptr) {}
  ~ListBaseModelsRequest() override;
  explicit constexpr ListBaseModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBaseModelsRequest(const ListBaseModelsRequest& from);
  ListBaseModelsRequest(ListBaseModelsRequest&& from) noexcept
    : ListBaseModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListBaseModelsRequest& operator=(const ListBaseModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseModelsRequest& operator=(ListBaseModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBaseModelsRequest*>(
               &_ListBaseModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListBaseModelsRequest& a, ListBaseModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseModelsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListBaseModelsRequest* New() const final {
    return new ListBaseModelsRequest();
  }

  ListBaseModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListBaseModelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBaseModelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBaseModelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.config.v1.ListBaseModelsRequest";
  }
  protected:
  explicit ListBaseModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // string language = 1;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_MUST_USE_RESULT std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:speechly.config.v1.ListBaseModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListBaseModelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.config.v1.ListBaseModelsResponse) */ {
 public:
  inline ListBaseModelsResponse() : ListBaseModelsResponse(nullptr) {}
  ~ListBaseModelsResponse() override;
  explicit constexpr ListBaseModelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBaseModelsResponse(const ListBaseModelsResponse& from);
  ListBaseModelsResponse(ListBaseModelsResponse&& from) noexcept
    : ListBaseModelsResponse() {
    *this = ::std::move(from);
  }

  inline ListBaseModelsResponse& operator=(const ListBaseModelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseModelsResponse& operator=(ListBaseModelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseModelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseModelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBaseModelsResponse*>(
               &_ListBaseModelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListBaseModelsResponse& a, ListBaseModelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseModelsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseModelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListBaseModelsResponse* New() const final {
    return new ListBaseModelsResponse();
  }

  ListBaseModelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListBaseModelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBaseModelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBaseModelsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseModelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.config.v1.ListBaseModelsResponse";
  }
  protected:
  explicit ListBaseModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // repeated .speechly.config.v1.BaseModel model = 1;
  int model_size() const;
  private:
  int _internal_model_size() const;
  public:
  void clear_model();
  ::speechly::config::v1::BaseModel* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::config::v1::BaseModel >*
      mutable_model();
  private:
  const ::speechly::config::v1::BaseModel& _internal_model(int index) const;
  ::speechly::config::v1::BaseModel* _internal_add_model();
  public:
  const ::speechly::config::v1::BaseModel& model(int index) const;
  ::speechly::config::v1::BaseModel* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::config::v1::BaseModel >&
      model() const;

  // @@protoc_insertion_point(class_scope:speechly.config.v1.ListBaseModelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::config::v1::BaseModel > model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DownloadModelRequest

// string app_id = 1;
inline void DownloadModelRequest::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& DownloadModelRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelRequest.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadModelRequest::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelRequest.app_id)
}
inline std::string* DownloadModelRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.DownloadModelRequest.app_id)
  return _s;
}
inline const std::string& DownloadModelRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void DownloadModelRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.config.v1.DownloadModelRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadModelRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.DownloadModelRequest.app_id)
}

// string config_id = 2;
inline void DownloadModelRequest::clear_config_id() {
  config_id_.ClearToEmpty();
}
inline const std::string& DownloadModelRequest::config_id() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelRequest.config_id)
  return _internal_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadModelRequest::set_config_id(ArgT0&& arg0, ArgT... args) {
 
 config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelRequest.config_id)
}
inline std::string* DownloadModelRequest::mutable_config_id() {
  std::string* _s = _internal_mutable_config_id();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.DownloadModelRequest.config_id)
  return _s;
}
inline const std::string& DownloadModelRequest::_internal_config_id() const {
  return config_id_.Get();
}
inline void DownloadModelRequest::_internal_set_config_id(const std::string& value) {
  
  config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::_internal_mutable_config_id() {
  
  return config_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadModelRequest::release_config_id() {
  // @@protoc_insertion_point(field_release:speechly.config.v1.DownloadModelRequest.config_id)
  return config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadModelRequest::set_allocated_config_id(std::string* config_id) {
  if (config_id != nullptr) {
    
  } else {
    
  }
  config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.DownloadModelRequest.config_id)
}

// .speechly.config.v1.DownloadModelRequest.ModelArchitecture model_architecture = 3;
inline void DownloadModelRequest::clear_model_architecture() {
  model_architecture_ = 0;
}
inline ::speechly::config::v1::DownloadModelRequest_ModelArchitecture DownloadModelRequest::_internal_model_architecture() const {
  return static_cast< ::speechly::config::v1::DownloadModelRequest_ModelArchitecture >(model_architecture_);
}
inline ::speechly::config::v1::DownloadModelRequest_ModelArchitecture DownloadModelRequest::model_architecture() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelRequest.model_architecture)
  return _internal_model_architecture();
}
inline void DownloadModelRequest::_internal_set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value) {
  
  model_architecture_ = value;
}
inline void DownloadModelRequest::set_model_architecture(::speechly::config::v1::DownloadModelRequest_ModelArchitecture value) {
  _internal_set_model_architecture(value);
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelRequest.model_architecture)
}

// -------------------------------------------------------------------

// DownloadModelResponse

// bytes chunk = 1;
inline void DownloadModelResponse::clear_chunk() {
  chunk_.ClearToEmpty();
}
inline const std::string& DownloadModelResponse::chunk() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.DownloadModelResponse.chunk)
  return _internal_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadModelResponse::set_chunk(ArgT0&& arg0, ArgT... args) {
 
 chunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.DownloadModelResponse.chunk)
}
inline std::string* DownloadModelResponse::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.DownloadModelResponse.chunk)
  return _s;
}
inline const std::string& DownloadModelResponse::_internal_chunk() const {
  return chunk_.Get();
}
inline void DownloadModelResponse::_internal_set_chunk(const std::string& value) {
  
  chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadModelResponse::_internal_mutable_chunk() {
  
  return chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadModelResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:speechly.config.v1.DownloadModelResponse.chunk)
  return chunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadModelResponse::set_allocated_chunk(std::string* chunk) {
  if (chunk != nullptr) {
    
  } else {
    
  }
  chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.DownloadModelResponse.chunk)
}

// -------------------------------------------------------------------

// ListBaseModelsRequest

// string language = 1;
inline void ListBaseModelsRequest::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& ListBaseModelsRequest::language() const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListBaseModelsRequest.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBaseModelsRequest::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.config.v1.ListBaseModelsRequest.language)
}
inline std::string* ListBaseModelsRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListBaseModelsRequest.language)
  return _s;
}
inline const std::string& ListBaseModelsRequest::_internal_language() const {
  return language_.Get();
}
inline void ListBaseModelsRequest::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBaseModelsRequest::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBaseModelsRequest::release_language() {
  // @@protoc_insertion_point(field_release:speechly.config.v1.ListBaseModelsRequest.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBaseModelsRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.config.v1.ListBaseModelsRequest.language)
}

// -------------------------------------------------------------------

// ListBaseModelsResponse

// repeated .speechly.config.v1.BaseModel model = 1;
inline int ListBaseModelsResponse::_internal_model_size() const {
  return model_.size();
}
inline int ListBaseModelsResponse::model_size() const {
  return _internal_model_size();
}
inline ::speechly::config::v1::BaseModel* ListBaseModelsResponse::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.config.v1.ListBaseModelsResponse.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::config::v1::BaseModel >*
ListBaseModelsResponse::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:speechly.config.v1.ListBaseModelsResponse.model)
  return &model_;
}
inline const ::speechly::config::v1::BaseModel& ListBaseModelsResponse::_internal_model(int index) const {
  return model_.Get(index);
}
inline const ::speechly::config::v1::BaseModel& ListBaseModelsResponse::model(int index) const {
  // @@protoc_insertion_point(field_get:speechly.config.v1.ListBaseModelsResponse.model)
  return _internal_model(index);
}
inline ::speechly::config::v1::BaseModel* ListBaseModelsResponse::_internal_add_model() {
  return model_.Add();
}
inline ::speechly::config::v1::BaseModel* ListBaseModelsResponse::add_model() {
  ::speechly::config::v1::BaseModel* _add = _internal_add_model();
  // @@protoc_insertion_point(field_add:speechly.config.v1.ListBaseModelsResponse.model)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::config::v1::BaseModel >&
ListBaseModelsResponse::model() const {
  // @@protoc_insertion_point(field_list:speechly.config.v1.ListBaseModelsResponse.model)
  return model_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace config
}  // namespace speechly

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::speechly::config::v1::DownloadModelRequest_ModelArchitecture> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::config::v1::DownloadModelRequest_ModelArchitecture>() {
  return ::speechly::config::v1::DownloadModelRequest_ModelArchitecture_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fconfig_2fv1_2fmodel_5fapi_2eproto
