// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/analytics/v1/analytics_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "speechly/analytics/v1/analytics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
namespace speechly {
namespace analytics {
namespace v1 {
class UtteranceStatisticsRequest;
class UtteranceStatisticsRequestDefaultTypeInternal;
extern UtteranceStatisticsRequestDefaultTypeInternal _UtteranceStatisticsRequest_default_instance_;
class UtteranceStatisticsResponse;
class UtteranceStatisticsResponseDefaultTypeInternal;
extern UtteranceStatisticsResponseDefaultTypeInternal _UtteranceStatisticsResponse_default_instance_;
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::analytics::v1::UtteranceStatisticsRequest* Arena::CreateMaybeMessage<::speechly::analytics::v1::UtteranceStatisticsRequest>(Arena*);
template<> ::speechly::analytics::v1::UtteranceStatisticsResponse* Arena::CreateMaybeMessage<::speechly::analytics::v1::UtteranceStatisticsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace analytics {
namespace v1 {

enum UtteranceStatisticsRequest_Scope : int {
  UtteranceStatisticsRequest_Scope_SCOPE_INVALID = 0,
  UtteranceStatisticsRequest_Scope_SCOPE_UTTERANCES = 1,
  UtteranceStatisticsRequest_Scope_SCOPE_ANNOTATIONS = 2,
  UtteranceStatisticsRequest_Scope_SCOPE_ALL = 3,
  UtteranceStatisticsRequest_Scope_UtteranceStatisticsRequest_Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UtteranceStatisticsRequest_Scope_UtteranceStatisticsRequest_Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UtteranceStatisticsRequest_Scope_IsValid(int value);
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest_Scope_Scope_MIN = UtteranceStatisticsRequest_Scope_SCOPE_INVALID;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest_Scope_Scope_MAX = UtteranceStatisticsRequest_Scope_SCOPE_ALL;
constexpr int UtteranceStatisticsRequest_Scope_Scope_ARRAYSIZE = UtteranceStatisticsRequest_Scope_Scope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UtteranceStatisticsRequest_Scope_descriptor();
template<typename T>
inline const std::string& UtteranceStatisticsRequest_Scope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UtteranceStatisticsRequest_Scope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UtteranceStatisticsRequest_Scope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UtteranceStatisticsRequest_Scope_descriptor(), enum_t_value);
}
inline bool UtteranceStatisticsRequest_Scope_Parse(
    const std::string& name, UtteranceStatisticsRequest_Scope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UtteranceStatisticsRequest_Scope>(
    UtteranceStatisticsRequest_Scope_descriptor(), name, value);
}
// ===================================================================

class UtteranceStatisticsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtteranceStatisticsRequest) */ {
 public:
  UtteranceStatisticsRequest();
  virtual ~UtteranceStatisticsRequest();

  UtteranceStatisticsRequest(const UtteranceStatisticsRequest& from);
  UtteranceStatisticsRequest(UtteranceStatisticsRequest&& from) noexcept
    : UtteranceStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline UtteranceStatisticsRequest& operator=(const UtteranceStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtteranceStatisticsRequest& operator=(UtteranceStatisticsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UtteranceStatisticsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UtteranceStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const UtteranceStatisticsRequest*>(
               &_UtteranceStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UtteranceStatisticsRequest& a, UtteranceStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UtteranceStatisticsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtteranceStatisticsRequest* New() const final {
    return CreateMaybeMessage<UtteranceStatisticsRequest>(nullptr);
  }

  UtteranceStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtteranceStatisticsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UtteranceStatisticsRequest& from);
  void MergeFrom(const UtteranceStatisticsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtteranceStatisticsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.UtteranceStatisticsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto);
    return ::descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UtteranceStatisticsRequest_Scope Scope;
  static constexpr Scope SCOPE_INVALID =
    UtteranceStatisticsRequest_Scope_SCOPE_INVALID;
  static constexpr Scope SCOPE_UTTERANCES =
    UtteranceStatisticsRequest_Scope_SCOPE_UTTERANCES;
  static constexpr Scope SCOPE_ANNOTATIONS =
    UtteranceStatisticsRequest_Scope_SCOPE_ANNOTATIONS;
  static constexpr Scope SCOPE_ALL =
    UtteranceStatisticsRequest_Scope_SCOPE_ALL;
  static inline bool Scope_IsValid(int value) {
    return UtteranceStatisticsRequest_Scope_IsValid(value);
  }
  static constexpr Scope Scope_MIN =
    UtteranceStatisticsRequest_Scope_Scope_MIN;
  static constexpr Scope Scope_MAX =
    UtteranceStatisticsRequest_Scope_Scope_MAX;
  static constexpr int Scope_ARRAYSIZE =
    UtteranceStatisticsRequest_Scope_Scope_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Scope_descriptor() {
    return UtteranceStatisticsRequest_Scope_descriptor();
  }
  template<typename T>
  static inline const std::string& Scope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scope_Name.");
    return UtteranceStatisticsRequest_Scope_Name(enum_t_value);
  }
  static inline bool Scope_Parse(const std::string& name,
      Scope* value) {
    return UtteranceStatisticsRequest_Scope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kStartDateFieldNumber = 5,
    kEndDateFieldNumber = 6,
    kDaysFieldNumber = 2,
    kScopeFieldNumber = 3,
    kAggregationFieldNumber = 4,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string start_date = 5;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 6;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // int32 days = 2;
  void clear_days();
  ::PROTOBUF_NAMESPACE_ID::int32 days() const;
  void set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_days() const;
  void _internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
  void clear_scope();
  ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope scope() const;
  void set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value);
  private:
  ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope _internal_scope() const;
  void _internal_set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value);
  public:

  // .speechly.analytics.v1.Aggregation aggregation = 4;
  void clear_aggregation();
  ::speechly::analytics::v1::Aggregation aggregation() const;
  void set_aggregation(::speechly::analytics::v1::Aggregation value);
  private:
  ::speechly::analytics::v1::Aggregation _internal_aggregation() const;
  void _internal_set_aggregation(::speechly::analytics::v1::Aggregation value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtteranceStatisticsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 days_;
  int scope_;
  int aggregation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UtteranceStatisticsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtteranceStatisticsResponse) */ {
 public:
  UtteranceStatisticsResponse();
  virtual ~UtteranceStatisticsResponse();

  UtteranceStatisticsResponse(const UtteranceStatisticsResponse& from);
  UtteranceStatisticsResponse(UtteranceStatisticsResponse&& from) noexcept
    : UtteranceStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline UtteranceStatisticsResponse& operator=(const UtteranceStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtteranceStatisticsResponse& operator=(UtteranceStatisticsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UtteranceStatisticsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UtteranceStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const UtteranceStatisticsResponse*>(
               &_UtteranceStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UtteranceStatisticsResponse& a, UtteranceStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UtteranceStatisticsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtteranceStatisticsResponse* New() const final {
    return CreateMaybeMessage<UtteranceStatisticsResponse>(nullptr);
  }

  UtteranceStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtteranceStatisticsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UtteranceStatisticsResponse& from);
  void MergeFrom(const UtteranceStatisticsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtteranceStatisticsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.UtteranceStatisticsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto);
    return ::descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kAggregationFieldNumber = 3,
    kTotalUtterancesFieldNumber = 5,
    kTotalDurationSecondsFieldNumber = 6,
    kTotalAnnotatedSecondsFieldNumber = 7,
  };
  // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::speechly::analytics::v1::UtteranceStatisticsPeriod* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >*
      mutable_items();
  private:
  const ::speechly::analytics::v1::UtteranceStatisticsPeriod& _internal_items(int index) const;
  ::speechly::analytics::v1::UtteranceStatisticsPeriod* _internal_add_items();
  public:
  const ::speechly::analytics::v1::UtteranceStatisticsPeriod& items(int index) const;
  ::speechly::analytics::v1::UtteranceStatisticsPeriod* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >&
      items() const;

  // string start_date = 1;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 2;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // .speechly.analytics.v1.Aggregation aggregation = 3;
  void clear_aggregation();
  ::speechly::analytics::v1::Aggregation aggregation() const;
  void set_aggregation(::speechly::analytics::v1::Aggregation value);
  private:
  ::speechly::analytics::v1::Aggregation _internal_aggregation() const;
  void _internal_set_aggregation(::speechly::analytics::v1::Aggregation value);
  public:

  // int32 total_utterances = 5;
  void clear_total_utterances();
  ::PROTOBUF_NAMESPACE_ID::int32 total_utterances() const;
  void set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_utterances() const;
  void _internal_set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_duration_seconds = 6;
  void clear_total_duration_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 total_duration_seconds() const;
  void set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_duration_seconds() const;
  void _internal_set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_annotated_seconds = 7;
  void clear_total_annotated_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 total_annotated_seconds() const;
  void set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_annotated_seconds() const;
  void _internal_set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtteranceStatisticsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  int aggregation_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_utterances_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_duration_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_annotated_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UtteranceStatisticsRequest

// string app_id = 1;
inline void UtteranceStatisticsRequest::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UtteranceStatisticsRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
  return _internal_app_id();
}
inline void UtteranceStatisticsRequest::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
}
inline std::string* UtteranceStatisticsRequest::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& UtteranceStatisticsRequest::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void UtteranceStatisticsRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UtteranceStatisticsRequest::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
}
inline void UtteranceStatisticsRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
}
inline void UtteranceStatisticsRequest::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
}
inline std::string* UtteranceStatisticsRequest::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UtteranceStatisticsRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UtteranceStatisticsRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
}

// int32 days = 2;
inline void UtteranceStatisticsRequest::clear_days() {
  days_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsRequest::_internal_days() const {
  return days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsRequest::days() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.days)
  return _internal_days();
}
inline void UtteranceStatisticsRequest::_internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  days_ = value;
}
inline void UtteranceStatisticsRequest::set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.days)
}

// .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
inline void UtteranceStatisticsRequest::clear_scope() {
  scope_ = 0;
}
inline ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::_internal_scope() const {
  return static_cast< ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope >(scope_);
}
inline ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::scope() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.scope)
  return _internal_scope();
}
inline void UtteranceStatisticsRequest::_internal_set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value) {
  
  scope_ = value;
}
inline void UtteranceStatisticsRequest::set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.scope)
}

// .speechly.analytics.v1.Aggregation aggregation = 4;
inline void UtteranceStatisticsRequest::clear_aggregation() {
  aggregation_ = 0;
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsRequest::_internal_aggregation() const {
  return static_cast< ::speechly::analytics::v1::Aggregation >(aggregation_);
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsRequest::aggregation() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.aggregation)
  return _internal_aggregation();
}
inline void UtteranceStatisticsRequest::_internal_set_aggregation(::speechly::analytics::v1::Aggregation value) {
  
  aggregation_ = value;
}
inline void UtteranceStatisticsRequest::set_aggregation(::speechly::analytics::v1::Aggregation value) {
  _internal_set_aggregation(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.aggregation)
}

// string start_date = 5;
inline void UtteranceStatisticsRequest::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UtteranceStatisticsRequest::start_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
  return _internal_start_date();
}
inline void UtteranceStatisticsRequest::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
}
inline std::string* UtteranceStatisticsRequest::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& UtteranceStatisticsRequest::_internal_start_date() const {
  return start_date_.GetNoArena();
}
inline void UtteranceStatisticsRequest::_internal_set_start_date(const std::string& value) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UtteranceStatisticsRequest::set_start_date(std::string&& value) {
  
  start_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
}
inline void UtteranceStatisticsRequest::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
}
inline void UtteranceStatisticsRequest::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
}
inline std::string* UtteranceStatisticsRequest::_internal_mutable_start_date() {
  
  return start_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UtteranceStatisticsRequest::release_start_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
  
  return start_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UtteranceStatisticsRequest::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
}

// string end_date = 6;
inline void UtteranceStatisticsRequest::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UtteranceStatisticsRequest::end_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
  return _internal_end_date();
}
inline void UtteranceStatisticsRequest::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
}
inline std::string* UtteranceStatisticsRequest::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& UtteranceStatisticsRequest::_internal_end_date() const {
  return end_date_.GetNoArena();
}
inline void UtteranceStatisticsRequest::_internal_set_end_date(const std::string& value) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UtteranceStatisticsRequest::set_end_date(std::string&& value) {
  
  end_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
}
inline void UtteranceStatisticsRequest::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
}
inline void UtteranceStatisticsRequest::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
}
inline std::string* UtteranceStatisticsRequest::_internal_mutable_end_date() {
  
  return end_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UtteranceStatisticsRequest::release_end_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
  
  return end_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UtteranceStatisticsRequest::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
}

// -------------------------------------------------------------------

// UtteranceStatisticsResponse

// string start_date = 1;
inline void UtteranceStatisticsResponse::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UtteranceStatisticsResponse::start_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
  return _internal_start_date();
}
inline void UtteranceStatisticsResponse::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
}
inline std::string* UtteranceStatisticsResponse::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& UtteranceStatisticsResponse::_internal_start_date() const {
  return start_date_.GetNoArena();
}
inline void UtteranceStatisticsResponse::_internal_set_start_date(const std::string& value) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UtteranceStatisticsResponse::set_start_date(std::string&& value) {
  
  start_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
}
inline void UtteranceStatisticsResponse::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
}
inline void UtteranceStatisticsResponse::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
}
inline std::string* UtteranceStatisticsResponse::_internal_mutable_start_date() {
  
  return start_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UtteranceStatisticsResponse::release_start_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
  
  return start_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UtteranceStatisticsResponse::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
}

// string end_date = 2;
inline void UtteranceStatisticsResponse::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UtteranceStatisticsResponse::end_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
  return _internal_end_date();
}
inline void UtteranceStatisticsResponse::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
}
inline std::string* UtteranceStatisticsResponse::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& UtteranceStatisticsResponse::_internal_end_date() const {
  return end_date_.GetNoArena();
}
inline void UtteranceStatisticsResponse::_internal_set_end_date(const std::string& value) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UtteranceStatisticsResponse::set_end_date(std::string&& value) {
  
  end_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
}
inline void UtteranceStatisticsResponse::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
}
inline void UtteranceStatisticsResponse::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
}
inline std::string* UtteranceStatisticsResponse::_internal_mutable_end_date() {
  
  return end_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UtteranceStatisticsResponse::release_end_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
  
  return end_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UtteranceStatisticsResponse::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
}

// .speechly.analytics.v1.Aggregation aggregation = 3;
inline void UtteranceStatisticsResponse::clear_aggregation() {
  aggregation_ = 0;
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsResponse::_internal_aggregation() const {
  return static_cast< ::speechly::analytics::v1::Aggregation >(aggregation_);
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsResponse::aggregation() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.aggregation)
  return _internal_aggregation();
}
inline void UtteranceStatisticsResponse::_internal_set_aggregation(::speechly::analytics::v1::Aggregation value) {
  
  aggregation_ = value;
}
inline void UtteranceStatisticsResponse::set_aggregation(::speechly::analytics::v1::Aggregation value) {
  _internal_set_aggregation(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.aggregation)
}

// repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
inline int UtteranceStatisticsResponse::_internal_items_size() const {
  return items_.size();
}
inline int UtteranceStatisticsResponse::items_size() const {
  return _internal_items_size();
}
inline ::speechly::analytics::v1::UtteranceStatisticsPeriod* UtteranceStatisticsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >*
UtteranceStatisticsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return &items_;
}
inline const ::speechly::analytics::v1::UtteranceStatisticsPeriod& UtteranceStatisticsResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::speechly::analytics::v1::UtteranceStatisticsPeriod& UtteranceStatisticsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return _internal_items(index);
}
inline ::speechly::analytics::v1::UtteranceStatisticsPeriod* UtteranceStatisticsResponse::_internal_add_items() {
  return items_.Add();
}
inline ::speechly::analytics::v1::UtteranceStatisticsPeriod* UtteranceStatisticsResponse::add_items() {
  // @@protoc_insertion_point(field_add:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >&
UtteranceStatisticsResponse::items() const {
  // @@protoc_insertion_point(field_list:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return items_;
}

// int32 total_utterances = 5;
inline void UtteranceStatisticsResponse::clear_total_utterances() {
  total_utterances_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::_internal_total_utterances() const {
  return total_utterances_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::total_utterances() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.total_utterances)
  return _internal_total_utterances();
}
inline void UtteranceStatisticsResponse::_internal_set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_utterances_ = value;
}
inline void UtteranceStatisticsResponse::set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_utterances(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.total_utterances)
}

// int32 total_duration_seconds = 6;
inline void UtteranceStatisticsResponse::clear_total_duration_seconds() {
  total_duration_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::_internal_total_duration_seconds() const {
  return total_duration_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::total_duration_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.total_duration_seconds)
  return _internal_total_duration_seconds();
}
inline void UtteranceStatisticsResponse::_internal_set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_duration_seconds_ = value;
}
inline void UtteranceStatisticsResponse::set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_duration_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.total_duration_seconds)
}

// int32 total_annotated_seconds = 7;
inline void UtteranceStatisticsResponse::clear_total_annotated_seconds() {
  total_annotated_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::_internal_total_annotated_seconds() const {
  return total_annotated_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::total_annotated_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.total_annotated_seconds)
  return _internal_total_annotated_seconds();
}
inline void UtteranceStatisticsResponse::_internal_set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_annotated_seconds_ = value;
}
inline void UtteranceStatisticsResponse::set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_annotated_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.total_annotated_seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace analytics
}  // namespace speechly

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope>() {
  return ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto
