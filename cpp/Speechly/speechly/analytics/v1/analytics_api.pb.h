// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/analytics/v1/analytics_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "speechly/analytics/v1/analytics.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
namespace speechly {
namespace analytics {
namespace v1 {
class RegisterUtteranceRequest;
struct RegisterUtteranceRequestDefaultTypeInternal;
extern RegisterUtteranceRequestDefaultTypeInternal _RegisterUtteranceRequest_default_instance_;
class RegisterUtteranceResponse;
struct RegisterUtteranceResponseDefaultTypeInternal;
extern RegisterUtteranceResponseDefaultTypeInternal _RegisterUtteranceResponse_default_instance_;
class UtteranceStatisticsRequest;
struct UtteranceStatisticsRequestDefaultTypeInternal;
extern UtteranceStatisticsRequestDefaultTypeInternal _UtteranceStatisticsRequest_default_instance_;
class UtteranceStatisticsResponse;
struct UtteranceStatisticsResponseDefaultTypeInternal;
extern UtteranceStatisticsResponseDefaultTypeInternal _UtteranceStatisticsResponse_default_instance_;
class UtterancesRequest;
struct UtterancesRequestDefaultTypeInternal;
extern UtterancesRequestDefaultTypeInternal _UtterancesRequest_default_instance_;
class UtterancesResponse;
struct UtterancesResponseDefaultTypeInternal;
extern UtterancesResponseDefaultTypeInternal _UtterancesResponse_default_instance_;
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::analytics::v1::RegisterUtteranceRequest* Arena::CreateMaybeMessage<::speechly::analytics::v1::RegisterUtteranceRequest>(Arena*);
template<> ::speechly::analytics::v1::RegisterUtteranceResponse* Arena::CreateMaybeMessage<::speechly::analytics::v1::RegisterUtteranceResponse>(Arena*);
template<> ::speechly::analytics::v1::UtteranceStatisticsRequest* Arena::CreateMaybeMessage<::speechly::analytics::v1::UtteranceStatisticsRequest>(Arena*);
template<> ::speechly::analytics::v1::UtteranceStatisticsResponse* Arena::CreateMaybeMessage<::speechly::analytics::v1::UtteranceStatisticsResponse>(Arena*);
template<> ::speechly::analytics::v1::UtterancesRequest* Arena::CreateMaybeMessage<::speechly::analytics::v1::UtterancesRequest>(Arena*);
template<> ::speechly::analytics::v1::UtterancesResponse* Arena::CreateMaybeMessage<::speechly::analytics::v1::UtterancesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace analytics {
namespace v1 {

enum UtteranceStatisticsRequest_Scope : int {
  UtteranceStatisticsRequest_Scope_SCOPE_INVALID = 0,
  UtteranceStatisticsRequest_Scope_SCOPE_UTTERANCES = 1,
  UtteranceStatisticsRequest_Scope_SCOPE_ANNOTATIONS = 2,
  UtteranceStatisticsRequest_Scope_SCOPE_ALL = 3,
  UtteranceStatisticsRequest_Scope_UtteranceStatisticsRequest_Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UtteranceStatisticsRequest_Scope_UtteranceStatisticsRequest_Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UtteranceStatisticsRequest_Scope_IsValid(int value);
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest_Scope_Scope_MIN = UtteranceStatisticsRequest_Scope_SCOPE_INVALID;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest_Scope_Scope_MAX = UtteranceStatisticsRequest_Scope_SCOPE_ALL;
constexpr int UtteranceStatisticsRequest_Scope_Scope_ARRAYSIZE = UtteranceStatisticsRequest_Scope_Scope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UtteranceStatisticsRequest_Scope_descriptor();
template<typename T>
inline const std::string& UtteranceStatisticsRequest_Scope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UtteranceStatisticsRequest_Scope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UtteranceStatisticsRequest_Scope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UtteranceStatisticsRequest_Scope_descriptor(), enum_t_value);
}
inline bool UtteranceStatisticsRequest_Scope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UtteranceStatisticsRequest_Scope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UtteranceStatisticsRequest_Scope>(
    UtteranceStatisticsRequest_Scope_descriptor(), name, value);
}
enum RegisterUtteranceRequest_Status : int {
  RegisterUtteranceRequest_Status_STATUS_INVALID = 0,
  RegisterUtteranceRequest_Status_STATUS_SUCCESS = 1,
  RegisterUtteranceRequest_Status_STATUS_ERROR = 2,
  RegisterUtteranceRequest_Status_RegisterUtteranceRequest_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegisterUtteranceRequest_Status_RegisterUtteranceRequest_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegisterUtteranceRequest_Status_IsValid(int value);
constexpr RegisterUtteranceRequest_Status RegisterUtteranceRequest_Status_Status_MIN = RegisterUtteranceRequest_Status_STATUS_INVALID;
constexpr RegisterUtteranceRequest_Status RegisterUtteranceRequest_Status_Status_MAX = RegisterUtteranceRequest_Status_STATUS_ERROR;
constexpr int RegisterUtteranceRequest_Status_Status_ARRAYSIZE = RegisterUtteranceRequest_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterUtteranceRequest_Status_descriptor();
template<typename T>
inline const std::string& RegisterUtteranceRequest_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterUtteranceRequest_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterUtteranceRequest_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterUtteranceRequest_Status_descriptor(), enum_t_value);
}
inline bool RegisterUtteranceRequest_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterUtteranceRequest_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterUtteranceRequest_Status>(
    RegisterUtteranceRequest_Status_descriptor(), name, value);
}
// ===================================================================

class UtteranceStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtteranceStatisticsRequest) */ {
 public:
  inline UtteranceStatisticsRequest() : UtteranceStatisticsRequest(nullptr) {}
  ~UtteranceStatisticsRequest() override;
  explicit constexpr UtteranceStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtteranceStatisticsRequest(const UtteranceStatisticsRequest& from);
  UtteranceStatisticsRequest(UtteranceStatisticsRequest&& from) noexcept
    : UtteranceStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline UtteranceStatisticsRequest& operator=(const UtteranceStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtteranceStatisticsRequest& operator=(UtteranceStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtteranceStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtteranceStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const UtteranceStatisticsRequest*>(
               &_UtteranceStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UtteranceStatisticsRequest& a, UtteranceStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UtteranceStatisticsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtteranceStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtteranceStatisticsRequest* New() const final {
    return new UtteranceStatisticsRequest();
  }

  UtteranceStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtteranceStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtteranceStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtteranceStatisticsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtteranceStatisticsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.UtteranceStatisticsRequest";
  }
  protected:
  explicit UtteranceStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UtteranceStatisticsRequest_Scope Scope;
  static constexpr Scope SCOPE_INVALID =
    UtteranceStatisticsRequest_Scope_SCOPE_INVALID;
  static constexpr Scope SCOPE_UTTERANCES =
    UtteranceStatisticsRequest_Scope_SCOPE_UTTERANCES;
  static constexpr Scope SCOPE_ANNOTATIONS =
    UtteranceStatisticsRequest_Scope_SCOPE_ANNOTATIONS;
  static constexpr Scope SCOPE_ALL =
    UtteranceStatisticsRequest_Scope_SCOPE_ALL;
  static inline bool Scope_IsValid(int value) {
    return UtteranceStatisticsRequest_Scope_IsValid(value);
  }
  static constexpr Scope Scope_MIN =
    UtteranceStatisticsRequest_Scope_Scope_MIN;
  static constexpr Scope Scope_MAX =
    UtteranceStatisticsRequest_Scope_Scope_MAX;
  static constexpr int Scope_ARRAYSIZE =
    UtteranceStatisticsRequest_Scope_Scope_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Scope_descriptor() {
    return UtteranceStatisticsRequest_Scope_descriptor();
  }
  template<typename T>
  static inline const std::string& Scope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scope_Name.");
    return UtteranceStatisticsRequest_Scope_Name(enum_t_value);
  }
  static inline bool Scope_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Scope* value) {
    return UtteranceStatisticsRequest_Scope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kStartDateFieldNumber = 5,
    kEndDateFieldNumber = 6,
    kProjectIdFieldNumber = 7,
    kDaysFieldNumber = 2,
    kScopeFieldNumber = 3,
    kAggregationFieldNumber = 4,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string start_date = 5;
  void clear_start_date();
  const std::string& start_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_date();
  PROTOBUF_MUST_USE_RESULT std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 6;
  void clear_end_date();
  const std::string& end_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_date();
  PROTOBUF_MUST_USE_RESULT std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // string project_id = 7;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // int32 days = 2;
  void clear_days();
  ::PROTOBUF_NAMESPACE_ID::int32 days() const;
  void set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_days() const;
  void _internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
  void clear_scope();
  ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope scope() const;
  void set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value);
  private:
  ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope _internal_scope() const;
  void _internal_set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value);
  public:

  // .speechly.analytics.v1.Aggregation aggregation = 4;
  void clear_aggregation();
  ::speechly::analytics::v1::Aggregation aggregation() const;
  void set_aggregation(::speechly::analytics::v1::Aggregation value);
  private:
  ::speechly::analytics::v1::Aggregation _internal_aggregation() const;
  void _internal_set_aggregation(::speechly::analytics::v1::Aggregation value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtteranceStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 days_;
  int scope_;
  int aggregation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UtteranceStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtteranceStatisticsResponse) */ {
 public:
  inline UtteranceStatisticsResponse() : UtteranceStatisticsResponse(nullptr) {}
  ~UtteranceStatisticsResponse() override;
  explicit constexpr UtteranceStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtteranceStatisticsResponse(const UtteranceStatisticsResponse& from);
  UtteranceStatisticsResponse(UtteranceStatisticsResponse&& from) noexcept
    : UtteranceStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline UtteranceStatisticsResponse& operator=(const UtteranceStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtteranceStatisticsResponse& operator=(UtteranceStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtteranceStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtteranceStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const UtteranceStatisticsResponse*>(
               &_UtteranceStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UtteranceStatisticsResponse& a, UtteranceStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UtteranceStatisticsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtteranceStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtteranceStatisticsResponse* New() const final {
    return new UtteranceStatisticsResponse();
  }

  UtteranceStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtteranceStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtteranceStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtteranceStatisticsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtteranceStatisticsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.UtteranceStatisticsResponse";
  }
  protected:
  explicit UtteranceStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kAggregationFieldNumber = 3,
    kTotalUtterancesFieldNumber = 5,
    kTotalDurationSecondsFieldNumber = 6,
    kTotalAnnotatedSecondsFieldNumber = 7,
  };
  // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::speechly::analytics::v1::UtteranceStatisticsPeriod* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >*
      mutable_items();
  private:
  const ::speechly::analytics::v1::UtteranceStatisticsPeriod& _internal_items(int index) const;
  ::speechly::analytics::v1::UtteranceStatisticsPeriod* _internal_add_items();
  public:
  const ::speechly::analytics::v1::UtteranceStatisticsPeriod& items(int index) const;
  ::speechly::analytics::v1::UtteranceStatisticsPeriod* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >&
      items() const;

  // string start_date = 1;
  void clear_start_date();
  const std::string& start_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_date();
  PROTOBUF_MUST_USE_RESULT std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 2;
  void clear_end_date();
  const std::string& end_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_date();
  PROTOBUF_MUST_USE_RESULT std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // .speechly.analytics.v1.Aggregation aggregation = 3;
  void clear_aggregation();
  ::speechly::analytics::v1::Aggregation aggregation() const;
  void set_aggregation(::speechly::analytics::v1::Aggregation value);
  private:
  ::speechly::analytics::v1::Aggregation _internal_aggregation() const;
  void _internal_set_aggregation(::speechly::analytics::v1::Aggregation value);
  public:

  // int32 total_utterances = 5;
  void clear_total_utterances();
  ::PROTOBUF_NAMESPACE_ID::int32 total_utterances() const;
  void set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_utterances() const;
  void _internal_set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_duration_seconds = 6;
  void clear_total_duration_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 total_duration_seconds() const;
  void set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_duration_seconds() const;
  void _internal_set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_annotated_seconds = 7;
  void clear_total_annotated_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 total_annotated_seconds() const;
  void set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_annotated_seconds() const;
  void _internal_set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtteranceStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  int aggregation_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_utterances_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_duration_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_annotated_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UtterancesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtterancesRequest) */ {
 public:
  inline UtterancesRequest() : UtterancesRequest(nullptr) {}
  ~UtterancesRequest() override;
  explicit constexpr UtterancesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtterancesRequest(const UtterancesRequest& from);
  UtterancesRequest(UtterancesRequest&& from) noexcept
    : UtterancesRequest() {
    *this = ::std::move(from);
  }

  inline UtterancesRequest& operator=(const UtterancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtterancesRequest& operator=(UtterancesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtterancesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtterancesRequest* internal_default_instance() {
    return reinterpret_cast<const UtterancesRequest*>(
               &_UtterancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UtterancesRequest& a, UtterancesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UtterancesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtterancesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtterancesRequest* New() const final {
    return new UtterancesRequest();
  }

  UtterancesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtterancesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtterancesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtterancesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtterancesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.UtterancesRequest";
  }
  protected:
  explicit UtterancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtterancesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UtterancesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtterancesResponse) */ {
 public:
  inline UtterancesResponse() : UtterancesResponse(nullptr) {}
  ~UtterancesResponse() override;
  explicit constexpr UtterancesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtterancesResponse(const UtterancesResponse& from);
  UtterancesResponse(UtterancesResponse&& from) noexcept
    : UtterancesResponse() {
    *this = ::std::move(from);
  }

  inline UtterancesResponse& operator=(const UtterancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtterancesResponse& operator=(UtterancesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtterancesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtterancesResponse* internal_default_instance() {
    return reinterpret_cast<const UtterancesResponse*>(
               &_UtterancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UtterancesResponse& a, UtterancesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UtterancesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtterancesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtterancesResponse* New() const final {
    return new UtterancesResponse();
  }

  UtterancesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtterancesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtterancesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtterancesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtterancesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.UtterancesResponse";
  }
  protected:
  explicit UtterancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtterancesFieldNumber = 1,
  };
  // repeated .speechly.analytics.v1.Utterance utterances = 1;
  int utterances_size() const;
  private:
  int _internal_utterances_size() const;
  public:
  void clear_utterances();
  ::speechly::analytics::v1::Utterance* mutable_utterances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::Utterance >*
      mutable_utterances();
  private:
  const ::speechly::analytics::v1::Utterance& _internal_utterances(int index) const;
  ::speechly::analytics::v1::Utterance* _internal_add_utterances();
  public:
  const ::speechly::analytics::v1::Utterance& utterances(int index) const;
  ::speechly::analytics::v1::Utterance* add_utterances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::Utterance >&
      utterances() const;

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtterancesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::Utterance > utterances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class RegisterUtteranceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.RegisterUtteranceRequest) */ {
 public:
  inline RegisterUtteranceRequest() : RegisterUtteranceRequest(nullptr) {}
  ~RegisterUtteranceRequest() override;
  explicit constexpr RegisterUtteranceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterUtteranceRequest(const RegisterUtteranceRequest& from);
  RegisterUtteranceRequest(RegisterUtteranceRequest&& from) noexcept
    : RegisterUtteranceRequest() {
    *this = ::std::move(from);
  }

  inline RegisterUtteranceRequest& operator=(const RegisterUtteranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterUtteranceRequest& operator=(RegisterUtteranceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterUtteranceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterUtteranceRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterUtteranceRequest*>(
               &_RegisterUtteranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterUtteranceRequest& a, RegisterUtteranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterUtteranceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterUtteranceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterUtteranceRequest* New() const final {
    return new RegisterUtteranceRequest();
  }

  RegisterUtteranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterUtteranceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterUtteranceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterUtteranceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterUtteranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.RegisterUtteranceRequest";
  }
  protected:
  explicit RegisterUtteranceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterUtteranceRequest_Status Status;
  static constexpr Status STATUS_INVALID =
    RegisterUtteranceRequest_Status_STATUS_INVALID;
  static constexpr Status STATUS_SUCCESS =
    RegisterUtteranceRequest_Status_STATUS_SUCCESS;
  static constexpr Status STATUS_ERROR =
    RegisterUtteranceRequest_Status_STATUS_ERROR;
  static inline bool Status_IsValid(int value) {
    return RegisterUtteranceRequest_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RegisterUtteranceRequest_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RegisterUtteranceRequest_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RegisterUtteranceRequest_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RegisterUtteranceRequest_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RegisterUtteranceRequest_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RegisterUtteranceRequest_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kDecoderInfoFieldNumber = 5,
    kCreatedTimeFieldNumber = 6,
    kFinishedTimeFieldNumber = 7,
    kUtteranceLengthSecondsFieldNumber = 3,
    kUtteranceLengthCharsFieldNumber = 4,
    kStatusFieldNumber = 8,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .speechly.analytics.v1.DecoderInfo decoder_info = 5;
  bool has_decoder_info() const;
  private:
  bool _internal_has_decoder_info() const;
  public:
  void clear_decoder_info();
  const ::speechly::analytics::v1::DecoderInfo& decoder_info() const;
  PROTOBUF_MUST_USE_RESULT ::speechly::analytics::v1::DecoderInfo* release_decoder_info();
  ::speechly::analytics::v1::DecoderInfo* mutable_decoder_info();
  void set_allocated_decoder_info(::speechly::analytics::v1::DecoderInfo* decoder_info);
  private:
  const ::speechly::analytics::v1::DecoderInfo& _internal_decoder_info() const;
  ::speechly::analytics::v1::DecoderInfo* _internal_mutable_decoder_info();
  public:
  void unsafe_arena_set_allocated_decoder_info(
      ::speechly::analytics::v1::DecoderInfo* decoder_info);
  ::speechly::analytics::v1::DecoderInfo* unsafe_arena_release_decoder_info();

  // .google.protobuf.Timestamp created_time = 6;
  bool has_created_time() const;
  private:
  bool _internal_has_created_time() const;
  public:
  void clear_created_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_time() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_created_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_time();
  void set_allocated_created_time(PROTOBUF_NAMESPACE_ID::Timestamp* created_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_time();
  public:
  void unsafe_arena_set_allocated_created_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_time();

  // .google.protobuf.Timestamp finished_time = 7;
  bool has_finished_time() const;
  private:
  bool _internal_has_finished_time() const;
  public:
  void clear_finished_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& finished_time() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_finished_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finished_time();
  void set_allocated_finished_time(PROTOBUF_NAMESPACE_ID::Timestamp* finished_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finished_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finished_time();
  public:
  void unsafe_arena_set_allocated_finished_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* finished_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finished_time();

  // int32 utterance_length_seconds = 3;
  void clear_utterance_length_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 utterance_length_seconds() const;
  void set_utterance_length_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_utterance_length_seconds() const;
  void _internal_set_utterance_length_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 utterance_length_chars = 4;
  void clear_utterance_length_chars();
  ::PROTOBUF_NAMESPACE_ID::int32 utterance_length_chars() const;
  void set_utterance_length_chars(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_utterance_length_chars() const;
  void _internal_set_utterance_length_chars(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .speechly.analytics.v1.RegisterUtteranceRequest.Status status = 8;
  void clear_status();
  ::speechly::analytics::v1::RegisterUtteranceRequest_Status status() const;
  void set_status(::speechly::analytics::v1::RegisterUtteranceRequest_Status value);
  private:
  ::speechly::analytics::v1::RegisterUtteranceRequest_Status _internal_status() const;
  void _internal_set_status(::speechly::analytics::v1::RegisterUtteranceRequest_Status value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.RegisterUtteranceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::speechly::analytics::v1::DecoderInfo* decoder_info_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* finished_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 utterance_length_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 utterance_length_chars_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class RegisterUtteranceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.RegisterUtteranceResponse) */ {
 public:
  inline RegisterUtteranceResponse() : RegisterUtteranceResponse(nullptr) {}
  ~RegisterUtteranceResponse() override;
  explicit constexpr RegisterUtteranceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterUtteranceResponse(const RegisterUtteranceResponse& from);
  RegisterUtteranceResponse(RegisterUtteranceResponse&& from) noexcept
    : RegisterUtteranceResponse() {
    *this = ::std::move(from);
  }

  inline RegisterUtteranceResponse& operator=(const RegisterUtteranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterUtteranceResponse& operator=(RegisterUtteranceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterUtteranceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterUtteranceResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterUtteranceResponse*>(
               &_RegisterUtteranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterUtteranceResponse& a, RegisterUtteranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterUtteranceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterUtteranceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterUtteranceResponse* New() const final {
    return new RegisterUtteranceResponse();
  }

  RegisterUtteranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterUtteranceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterUtteranceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterUtteranceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterUtteranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.RegisterUtteranceResponse";
  }
  protected:
  explicit RegisterUtteranceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.RegisterUtteranceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UtteranceStatisticsRequest

// string app_id = 1;
inline void UtteranceStatisticsRequest::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsRequest::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
}
inline std::string* UtteranceStatisticsRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
  return _s;
}
inline const std::string& UtteranceStatisticsRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void UtteranceStatisticsRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsRequest.app_id)
}

// int32 days = 2;
inline void UtteranceStatisticsRequest::clear_days() {
  days_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsRequest::_internal_days() const {
  return days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsRequest::days() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.days)
  return _internal_days();
}
inline void UtteranceStatisticsRequest::_internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  days_ = value;
}
inline void UtteranceStatisticsRequest::set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.days)
}

// .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
inline void UtteranceStatisticsRequest::clear_scope() {
  scope_ = 0;
}
inline ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::_internal_scope() const {
  return static_cast< ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope >(scope_);
}
inline ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::scope() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.scope)
  return _internal_scope();
}
inline void UtteranceStatisticsRequest::_internal_set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value) {
  
  scope_ = value;
}
inline void UtteranceStatisticsRequest::set_scope(::speechly::analytics::v1::UtteranceStatisticsRequest_Scope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.scope)
}

// .speechly.analytics.v1.Aggregation aggregation = 4;
inline void UtteranceStatisticsRequest::clear_aggregation() {
  aggregation_ = 0;
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsRequest::_internal_aggregation() const {
  return static_cast< ::speechly::analytics::v1::Aggregation >(aggregation_);
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsRequest::aggregation() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.aggregation)
  return _internal_aggregation();
}
inline void UtteranceStatisticsRequest::_internal_set_aggregation(::speechly::analytics::v1::Aggregation value) {
  
  aggregation_ = value;
}
inline void UtteranceStatisticsRequest::set_aggregation(::speechly::analytics::v1::Aggregation value) {
  _internal_set_aggregation(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.aggregation)
}

// string start_date = 5;
inline void UtteranceStatisticsRequest::clear_start_date() {
  start_date_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsRequest::start_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
  return _internal_start_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsRequest::set_start_date(ArgT0&& arg0, ArgT... args) {
 
 start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
}
inline std::string* UtteranceStatisticsRequest::mutable_start_date() {
  std::string* _s = _internal_mutable_start_date();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
  return _s;
}
inline const std::string& UtteranceStatisticsRequest::_internal_start_date() const {
  return start_date_.Get();
}
inline void UtteranceStatisticsRequest::_internal_set_start_date(const std::string& value) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::_internal_mutable_start_date() {
  
  return start_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::release_start_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
  return start_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsRequest::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsRequest.start_date)
}

// string end_date = 6;
inline void UtteranceStatisticsRequest::clear_end_date() {
  end_date_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsRequest::end_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
  return _internal_end_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsRequest::set_end_date(ArgT0&& arg0, ArgT... args) {
 
 end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
}
inline std::string* UtteranceStatisticsRequest::mutable_end_date() {
  std::string* _s = _internal_mutable_end_date();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
  return _s;
}
inline const std::string& UtteranceStatisticsRequest::_internal_end_date() const {
  return end_date_.Get();
}
inline void UtteranceStatisticsRequest::_internal_set_end_date(const std::string& value) {
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::_internal_mutable_end_date() {
  
  return end_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::release_end_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
  return end_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsRequest::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsRequest.end_date)
}

// string project_id = 7;
inline void UtteranceStatisticsRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsRequest.project_id)
}
inline std::string* UtteranceStatisticsRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsRequest.project_id)
  return _s;
}
inline const std::string& UtteranceStatisticsRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void UtteranceStatisticsRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsRequest.project_id)
}

// -------------------------------------------------------------------

// UtteranceStatisticsResponse

// string start_date = 1;
inline void UtteranceStatisticsResponse::clear_start_date() {
  start_date_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsResponse::start_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
  return _internal_start_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsResponse::set_start_date(ArgT0&& arg0, ArgT... args) {
 
 start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
}
inline std::string* UtteranceStatisticsResponse::mutable_start_date() {
  std::string* _s = _internal_mutable_start_date();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
  return _s;
}
inline const std::string& UtteranceStatisticsResponse::_internal_start_date() const {
  return start_date_.Get();
}
inline void UtteranceStatisticsResponse::_internal_set_start_date(const std::string& value) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsResponse::_internal_mutable_start_date() {
  
  return start_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsResponse::release_start_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
  return start_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsResponse::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsResponse.start_date)
}

// string end_date = 2;
inline void UtteranceStatisticsResponse::clear_end_date() {
  end_date_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsResponse::end_date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
  return _internal_end_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsResponse::set_end_date(ArgT0&& arg0, ArgT... args) {
 
 end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
}
inline std::string* UtteranceStatisticsResponse::mutable_end_date() {
  std::string* _s = _internal_mutable_end_date();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
  return _s;
}
inline const std::string& UtteranceStatisticsResponse::_internal_end_date() const {
  return end_date_.Get();
}
inline void UtteranceStatisticsResponse::_internal_set_end_date(const std::string& value) {
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsResponse::_internal_mutable_end_date() {
  
  return end_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsResponse::release_end_date() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
  return end_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsResponse::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsResponse.end_date)
}

// .speechly.analytics.v1.Aggregation aggregation = 3;
inline void UtteranceStatisticsResponse::clear_aggregation() {
  aggregation_ = 0;
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsResponse::_internal_aggregation() const {
  return static_cast< ::speechly::analytics::v1::Aggregation >(aggregation_);
}
inline ::speechly::analytics::v1::Aggregation UtteranceStatisticsResponse::aggregation() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.aggregation)
  return _internal_aggregation();
}
inline void UtteranceStatisticsResponse::_internal_set_aggregation(::speechly::analytics::v1::Aggregation value) {
  
  aggregation_ = value;
}
inline void UtteranceStatisticsResponse::set_aggregation(::speechly::analytics::v1::Aggregation value) {
  _internal_set_aggregation(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.aggregation)
}

// repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
inline int UtteranceStatisticsResponse::_internal_items_size() const {
  return items_.size();
}
inline int UtteranceStatisticsResponse::items_size() const {
  return _internal_items_size();
}
inline ::speechly::analytics::v1::UtteranceStatisticsPeriod* UtteranceStatisticsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >*
UtteranceStatisticsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return &items_;
}
inline const ::speechly::analytics::v1::UtteranceStatisticsPeriod& UtteranceStatisticsResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::speechly::analytics::v1::UtteranceStatisticsPeriod& UtteranceStatisticsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return _internal_items(index);
}
inline ::speechly::analytics::v1::UtteranceStatisticsPeriod* UtteranceStatisticsResponse::_internal_add_items() {
  return items_.Add();
}
inline ::speechly::analytics::v1::UtteranceStatisticsPeriod* UtteranceStatisticsResponse::add_items() {
  ::speechly::analytics::v1::UtteranceStatisticsPeriod* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::UtteranceStatisticsPeriod >&
UtteranceStatisticsResponse::items() const {
  // @@protoc_insertion_point(field_list:speechly.analytics.v1.UtteranceStatisticsResponse.items)
  return items_;
}

// int32 total_utterances = 5;
inline void UtteranceStatisticsResponse::clear_total_utterances() {
  total_utterances_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::_internal_total_utterances() const {
  return total_utterances_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::total_utterances() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.total_utterances)
  return _internal_total_utterances();
}
inline void UtteranceStatisticsResponse::_internal_set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_utterances_ = value;
}
inline void UtteranceStatisticsResponse::set_total_utterances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_utterances(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.total_utterances)
}

// int32 total_duration_seconds = 6;
inline void UtteranceStatisticsResponse::clear_total_duration_seconds() {
  total_duration_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::_internal_total_duration_seconds() const {
  return total_duration_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::total_duration_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.total_duration_seconds)
  return _internal_total_duration_seconds();
}
inline void UtteranceStatisticsResponse::_internal_set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_duration_seconds_ = value;
}
inline void UtteranceStatisticsResponse::set_total_duration_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_duration_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.total_duration_seconds)
}

// int32 total_annotated_seconds = 7;
inline void UtteranceStatisticsResponse::clear_total_annotated_seconds() {
  total_annotated_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::_internal_total_annotated_seconds() const {
  return total_annotated_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsResponse::total_annotated_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsResponse.total_annotated_seconds)
  return _internal_total_annotated_seconds();
}
inline void UtteranceStatisticsResponse::_internal_set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_annotated_seconds_ = value;
}
inline void UtteranceStatisticsResponse::set_total_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_annotated_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsResponse.total_annotated_seconds)
}

// -------------------------------------------------------------------

// UtterancesRequest

// string app_id = 1;
inline void UtterancesRequest::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& UtterancesRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtterancesRequest.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtterancesRequest::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtterancesRequest.app_id)
}
inline std::string* UtterancesRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtterancesRequest.app_id)
  return _s;
}
inline const std::string& UtterancesRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void UtterancesRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtterancesRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtterancesRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtterancesRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtterancesRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtterancesRequest.app_id)
}

// -------------------------------------------------------------------

// UtterancesResponse

// repeated .speechly.analytics.v1.Utterance utterances = 1;
inline int UtterancesResponse::_internal_utterances_size() const {
  return utterances_.size();
}
inline int UtterancesResponse::utterances_size() const {
  return _internal_utterances_size();
}
inline ::speechly::analytics::v1::Utterance* UtterancesResponse::mutable_utterances(int index) {
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtterancesResponse.utterances)
  return utterances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::Utterance >*
UtterancesResponse::mutable_utterances() {
  // @@protoc_insertion_point(field_mutable_list:speechly.analytics.v1.UtterancesResponse.utterances)
  return &utterances_;
}
inline const ::speechly::analytics::v1::Utterance& UtterancesResponse::_internal_utterances(int index) const {
  return utterances_.Get(index);
}
inline const ::speechly::analytics::v1::Utterance& UtterancesResponse::utterances(int index) const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtterancesResponse.utterances)
  return _internal_utterances(index);
}
inline ::speechly::analytics::v1::Utterance* UtterancesResponse::_internal_add_utterances() {
  return utterances_.Add();
}
inline ::speechly::analytics::v1::Utterance* UtterancesResponse::add_utterances() {
  ::speechly::analytics::v1::Utterance* _add = _internal_add_utterances();
  // @@protoc_insertion_point(field_add:speechly.analytics.v1.UtterancesResponse.utterances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speechly::analytics::v1::Utterance >&
UtterancesResponse::utterances() const {
  // @@protoc_insertion_point(field_list:speechly.analytics.v1.UtterancesResponse.utterances)
  return utterances_;
}

// -------------------------------------------------------------------

// RegisterUtteranceRequest

// string app_id = 1;
inline void RegisterUtteranceRequest::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& RegisterUtteranceRequest::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterUtteranceRequest::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.RegisterUtteranceRequest.app_id)
}
inline std::string* RegisterUtteranceRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.RegisterUtteranceRequest.app_id)
  return _s;
}
inline const std::string& RegisterUtteranceRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void RegisterUtteranceRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterUtteranceRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterUtteranceRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.RegisterUtteranceRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterUtteranceRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.app_id)
}

// string device_id = 2;
inline void RegisterUtteranceRequest::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& RegisterUtteranceRequest::device_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterUtteranceRequest::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.RegisterUtteranceRequest.device_id)
}
inline std::string* RegisterUtteranceRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.RegisterUtteranceRequest.device_id)
  return _s;
}
inline const std::string& RegisterUtteranceRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void RegisterUtteranceRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterUtteranceRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterUtteranceRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.RegisterUtteranceRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterUtteranceRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.device_id)
}

// int32 utterance_length_seconds = 3;
inline void RegisterUtteranceRequest::clear_utterance_length_seconds() {
  utterance_length_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterUtteranceRequest::_internal_utterance_length_seconds() const {
  return utterance_length_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterUtteranceRequest::utterance_length_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.utterance_length_seconds)
  return _internal_utterance_length_seconds();
}
inline void RegisterUtteranceRequest::_internal_set_utterance_length_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  utterance_length_seconds_ = value;
}
inline void RegisterUtteranceRequest::set_utterance_length_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_utterance_length_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.RegisterUtteranceRequest.utterance_length_seconds)
}

// int32 utterance_length_chars = 4;
inline void RegisterUtteranceRequest::clear_utterance_length_chars() {
  utterance_length_chars_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterUtteranceRequest::_internal_utterance_length_chars() const {
  return utterance_length_chars_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterUtteranceRequest::utterance_length_chars() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.utterance_length_chars)
  return _internal_utterance_length_chars();
}
inline void RegisterUtteranceRequest::_internal_set_utterance_length_chars(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  utterance_length_chars_ = value;
}
inline void RegisterUtteranceRequest::set_utterance_length_chars(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_utterance_length_chars(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.RegisterUtteranceRequest.utterance_length_chars)
}

// .speechly.analytics.v1.DecoderInfo decoder_info = 5;
inline bool RegisterUtteranceRequest::_internal_has_decoder_info() const {
  return this != internal_default_instance() && decoder_info_ != nullptr;
}
inline bool RegisterUtteranceRequest::has_decoder_info() const {
  return _internal_has_decoder_info();
}
inline const ::speechly::analytics::v1::DecoderInfo& RegisterUtteranceRequest::_internal_decoder_info() const {
  const ::speechly::analytics::v1::DecoderInfo* p = decoder_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::speechly::analytics::v1::DecoderInfo&>(
      ::speechly::analytics::v1::_DecoderInfo_default_instance_);
}
inline const ::speechly::analytics::v1::DecoderInfo& RegisterUtteranceRequest::decoder_info() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.decoder_info)
  return _internal_decoder_info();
}
inline void RegisterUtteranceRequest::unsafe_arena_set_allocated_decoder_info(
    ::speechly::analytics::v1::DecoderInfo* decoder_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_info_);
  }
  decoder_info_ = decoder_info;
  if (decoder_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.decoder_info)
}
inline ::speechly::analytics::v1::DecoderInfo* RegisterUtteranceRequest::release_decoder_info() {
  
  ::speechly::analytics::v1::DecoderInfo* temp = decoder_info_;
  decoder_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::speechly::analytics::v1::DecoderInfo* RegisterUtteranceRequest::unsafe_arena_release_decoder_info() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.RegisterUtteranceRequest.decoder_info)
  
  ::speechly::analytics::v1::DecoderInfo* temp = decoder_info_;
  decoder_info_ = nullptr;
  return temp;
}
inline ::speechly::analytics::v1::DecoderInfo* RegisterUtteranceRequest::_internal_mutable_decoder_info() {
  
  if (decoder_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::speechly::analytics::v1::DecoderInfo>(GetArenaForAllocation());
    decoder_info_ = p;
  }
  return decoder_info_;
}
inline ::speechly::analytics::v1::DecoderInfo* RegisterUtteranceRequest::mutable_decoder_info() {
  ::speechly::analytics::v1::DecoderInfo* _msg = _internal_mutable_decoder_info();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.RegisterUtteranceRequest.decoder_info)
  return _msg;
}
inline void RegisterUtteranceRequest::set_allocated_decoder_info(::speechly::analytics::v1::DecoderInfo* decoder_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_info_);
  }
  if (decoder_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_info));
    if (message_arena != submessage_arena) {
      decoder_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decoder_info, submessage_arena);
    }
    
  } else {
    
  }
  decoder_info_ = decoder_info;
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.decoder_info)
}

// .google.protobuf.Timestamp created_time = 6;
inline bool RegisterUtteranceRequest::_internal_has_created_time() const {
  return this != internal_default_instance() && created_time_ != nullptr;
}
inline bool RegisterUtteranceRequest::has_created_time() const {
  return _internal_has_created_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RegisterUtteranceRequest::_internal_created_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RegisterUtteranceRequest::created_time() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.created_time)
  return _internal_created_time();
}
inline void RegisterUtteranceRequest::unsafe_arena_set_allocated_created_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_time_);
  }
  created_time_ = created_time;
  if (created_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.created_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::release_created_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_time_;
  created_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::unsafe_arena_release_created_time() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.RegisterUtteranceRequest.created_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_time_;
  created_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::_internal_mutable_created_time() {
  
  if (created_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_time_ = p;
  }
  return created_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::mutable_created_time() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_time();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.RegisterUtteranceRequest.created_time)
  return _msg;
}
inline void RegisterUtteranceRequest::set_allocated_created_time(PROTOBUF_NAMESPACE_ID::Timestamp* created_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_time_);
  }
  if (created_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_time));
    if (message_arena != submessage_arena) {
      created_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_time, submessage_arena);
    }
    
  } else {
    
  }
  created_time_ = created_time;
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.created_time)
}

// .google.protobuf.Timestamp finished_time = 7;
inline bool RegisterUtteranceRequest::_internal_has_finished_time() const {
  return this != internal_default_instance() && finished_time_ != nullptr;
}
inline bool RegisterUtteranceRequest::has_finished_time() const {
  return _internal_has_finished_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RegisterUtteranceRequest::_internal_finished_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = finished_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RegisterUtteranceRequest::finished_time() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.finished_time)
  return _internal_finished_time();
}
inline void RegisterUtteranceRequest::unsafe_arena_set_allocated_finished_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* finished_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_time_);
  }
  finished_time_ = finished_time;
  if (finished_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.finished_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::release_finished_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = finished_time_;
  finished_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::unsafe_arena_release_finished_time() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.RegisterUtteranceRequest.finished_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = finished_time_;
  finished_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::_internal_mutable_finished_time() {
  
  if (finished_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    finished_time_ = p;
  }
  return finished_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RegisterUtteranceRequest::mutable_finished_time() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_finished_time();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.RegisterUtteranceRequest.finished_time)
  return _msg;
}
inline void RegisterUtteranceRequest::set_allocated_finished_time(PROTOBUF_NAMESPACE_ID::Timestamp* finished_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_time_);
  }
  if (finished_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_time));
    if (message_arena != submessage_arena) {
      finished_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finished_time, submessage_arena);
    }
    
  } else {
    
  }
  finished_time_ = finished_time;
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.RegisterUtteranceRequest.finished_time)
}

// .speechly.analytics.v1.RegisterUtteranceRequest.Status status = 8;
inline void RegisterUtteranceRequest::clear_status() {
  status_ = 0;
}
inline ::speechly::analytics::v1::RegisterUtteranceRequest_Status RegisterUtteranceRequest::_internal_status() const {
  return static_cast< ::speechly::analytics::v1::RegisterUtteranceRequest_Status >(status_);
}
inline ::speechly::analytics::v1::RegisterUtteranceRequest_Status RegisterUtteranceRequest::status() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.RegisterUtteranceRequest.status)
  return _internal_status();
}
inline void RegisterUtteranceRequest::_internal_set_status(::speechly::analytics::v1::RegisterUtteranceRequest_Status value) {
  
  status_ = value;
}
inline void RegisterUtteranceRequest::set_status(::speechly::analytics::v1::RegisterUtteranceRequest_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.RegisterUtteranceRequest.status)
}

// -------------------------------------------------------------------

// RegisterUtteranceResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace analytics
}  // namespace speechly

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope>() {
  return ::speechly::analytics::v1::UtteranceStatisticsRequest_Scope_descriptor();
}
template <> struct is_proto_enum< ::speechly::analytics::v1::RegisterUtteranceRequest_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::analytics::v1::RegisterUtteranceRequest_Status>() {
  return ::speechly::analytics::v1::RegisterUtteranceRequest_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto
