// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/analytics/v1/analytics_api.proto

#include "speechly/analytics/v1/analytics_api.pb.h"
#include "speechly/analytics/v1/analytics_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace speechly {
namespace analytics {
namespace v1 {

static const char* AnalyticsAPI_method_names[] = {
  "/speechly.analytics.v1.AnalyticsAPI/UtteranceStatistics",
  "/speechly.analytics.v1.AnalyticsAPI/Utterances",
  "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterance",
  "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterances",
  "/speechly.analytics.v1.AnalyticsAPI/ModerationStatistics",
  "/speechly.analytics.v1.AnalyticsAPI/UserStatistics",
};

std::unique_ptr< AnalyticsAPI::Stub> AnalyticsAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AnalyticsAPI::Stub> stub(new AnalyticsAPI::Stub(channel));
  return stub;
}

AnalyticsAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UtteranceStatistics_(AnalyticsAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Utterances_(AnalyticsAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterUtterance_(AnalyticsAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterUtterances_(AnalyticsAPI_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModerationStatistics_(AnalyticsAPI_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserStatistics_(AnalyticsAPI_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AnalyticsAPI::Stub::UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UtteranceStatistics_, context, request, response);
}

void AnalyticsAPI::Stub::experimental_async::UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UtteranceStatistics_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::UtteranceStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UtteranceStatistics_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UtteranceStatistics_, context, request, response, reactor);
}

void AnalyticsAPI::Stub::experimental_async::UtteranceStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UtteranceStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>* AnalyticsAPI::Stub::AsyncUtteranceStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::UtteranceStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_UtteranceStatistics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>* AnalyticsAPI::Stub::PrepareAsyncUtteranceStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::UtteranceStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_UtteranceStatistics_, context, request, false);
}

::grpc::Status AnalyticsAPI::Stub::Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::speechly::analytics::v1::UtterancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Utterances_, context, request, response);
}

void AnalyticsAPI::Stub::experimental_async::Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Utterances_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::Utterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtterancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Utterances_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Utterances_, context, request, response, reactor);
}

void AnalyticsAPI::Stub::experimental_async::Utterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Utterances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>* AnalyticsAPI::Stub::AsyncUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::UtterancesResponse>::Create(channel_.get(), cq, rpcmethod_Utterances_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>* AnalyticsAPI::Stub::PrepareAsyncUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::UtterancesResponse>::Create(channel_.get(), cq, rpcmethod_Utterances_, context, request, false);
}

::grpc::Status AnalyticsAPI::Stub::RegisterUtterance(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtteranceRequest& request, ::speechly::analytics::v1::RegisterUtteranceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterUtterance_, context, request, response);
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterance(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtteranceRequest* request, ::speechly::analytics::v1::RegisterUtteranceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterance_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::RegisterUtteranceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterance_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterance(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtteranceRequest* request, ::speechly::analytics::v1::RegisterUtteranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterance_, context, request, response, reactor);
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::RegisterUtteranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::RegisterUtteranceResponse>* AnalyticsAPI::Stub::AsyncRegisterUtteranceRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtteranceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::RegisterUtteranceResponse>::Create(channel_.get(), cq, rpcmethod_RegisterUtterance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::RegisterUtteranceResponse>* AnalyticsAPI::Stub::PrepareAsyncRegisterUtteranceRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtteranceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::RegisterUtteranceResponse>::Create(channel_.get(), cq, rpcmethod_RegisterUtterance_, context, request, false);
}

::grpc::Status AnalyticsAPI::Stub::RegisterUtterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtterancesRequest& request, ::speechly::analytics::v1::RegisterUtterancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterUtterances_, context, request, response);
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtterancesRequest* request, ::speechly::analytics::v1::RegisterUtterancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterances_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::RegisterUtterancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterances_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtterancesRequest* request, ::speechly::analytics::v1::RegisterUtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterances_, context, request, response, reactor);
}

void AnalyticsAPI::Stub::experimental_async::RegisterUtterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::RegisterUtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterUtterances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::RegisterUtterancesResponse>* AnalyticsAPI::Stub::AsyncRegisterUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtterancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::RegisterUtterancesResponse>::Create(channel_.get(), cq, rpcmethod_RegisterUtterances_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::RegisterUtterancesResponse>* AnalyticsAPI::Stub::PrepareAsyncRegisterUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::RegisterUtterancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::RegisterUtterancesResponse>::Create(channel_.get(), cq, rpcmethod_RegisterUtterances_, context, request, false);
}

::grpc::Status AnalyticsAPI::Stub::ModerationStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::ModerationStatisticsRequest& request, ::speechly::analytics::v1::ModerationStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ModerationStatistics_, context, request, response);
}

void AnalyticsAPI::Stub::experimental_async::ModerationStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::ModerationStatisticsRequest* request, ::speechly::analytics::v1::ModerationStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ModerationStatistics_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::ModerationStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::ModerationStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ModerationStatistics_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::ModerationStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::ModerationStatisticsRequest* request, ::speechly::analytics::v1::ModerationStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ModerationStatistics_, context, request, response, reactor);
}

void AnalyticsAPI::Stub::experimental_async::ModerationStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::ModerationStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ModerationStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::ModerationStatisticsResponse>* AnalyticsAPI::Stub::AsyncModerationStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::ModerationStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::ModerationStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_ModerationStatistics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::ModerationStatisticsResponse>* AnalyticsAPI::Stub::PrepareAsyncModerationStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::ModerationStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::ModerationStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_ModerationStatistics_, context, request, false);
}

::grpc::Status AnalyticsAPI::Stub::UserStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UserStatisticsRequest& request, ::speechly::analytics::v1::UserStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserStatistics_, context, request, response);
}

void AnalyticsAPI::Stub::experimental_async::UserStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UserStatisticsRequest* request, ::speechly::analytics::v1::UserStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserStatistics_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::UserStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UserStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserStatistics_, context, request, response, std::move(f));
}

void AnalyticsAPI::Stub::experimental_async::UserStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UserStatisticsRequest* request, ::speechly::analytics::v1::UserStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UserStatistics_, context, request, response, reactor);
}

void AnalyticsAPI::Stub::experimental_async::UserStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UserStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UserStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UserStatisticsResponse>* AnalyticsAPI::Stub::AsyncUserStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UserStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::UserStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_UserStatistics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UserStatisticsResponse>* AnalyticsAPI::Stub::PrepareAsyncUserStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UserStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::speechly::analytics::v1::UserStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_UserStatistics_, context, request, false);
}

AnalyticsAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsAPI::Service, ::speechly::analytics::v1::UtteranceStatisticsRequest, ::speechly::analytics::v1::UtteranceStatisticsResponse>(
          std::mem_fn(&AnalyticsAPI::Service::UtteranceStatistics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsAPI::Service, ::speechly::analytics::v1::UtterancesRequest, ::speechly::analytics::v1::UtterancesResponse>(
          std::mem_fn(&AnalyticsAPI::Service::Utterances), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsAPI::Service, ::speechly::analytics::v1::RegisterUtteranceRequest, ::speechly::analytics::v1::RegisterUtteranceResponse>(
          std::mem_fn(&AnalyticsAPI::Service::RegisterUtterance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsAPI::Service, ::speechly::analytics::v1::RegisterUtterancesRequest, ::speechly::analytics::v1::RegisterUtterancesResponse>(
          std::mem_fn(&AnalyticsAPI::Service::RegisterUtterances), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsAPI::Service, ::speechly::analytics::v1::ModerationStatisticsRequest, ::speechly::analytics::v1::ModerationStatisticsResponse>(
          std::mem_fn(&AnalyticsAPI::Service::ModerationStatistics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsAPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsAPI::Service, ::speechly::analytics::v1::UserStatisticsRequest, ::speechly::analytics::v1::UserStatisticsResponse>(
          std::mem_fn(&AnalyticsAPI::Service::UserStatistics), this)));
}

AnalyticsAPI::Service::~Service() {
}

::grpc::Status AnalyticsAPI::Service::UtteranceStatistics(::grpc::ServerContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalyticsAPI::Service::Utterances(::grpc::ServerContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalyticsAPI::Service::RegisterUtterance(::grpc::ServerContext* context, const ::speechly::analytics::v1::RegisterUtteranceRequest* request, ::speechly::analytics::v1::RegisterUtteranceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalyticsAPI::Service::RegisterUtterances(::grpc::ServerContext* context, const ::speechly::analytics::v1::RegisterUtterancesRequest* request, ::speechly::analytics::v1::RegisterUtterancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalyticsAPI::Service::ModerationStatistics(::grpc::ServerContext* context, const ::speechly::analytics::v1::ModerationStatisticsRequest* request, ::speechly::analytics::v1::ModerationStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalyticsAPI::Service::UserStatistics(::grpc::ServerContext* context, const ::speechly::analytics::v1::UserStatisticsRequest* request, ::speechly::analytics::v1::UserStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speechly
}  // namespace analytics
}  // namespace v1

