// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/analytics/v1/analytics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speechly_2fanalytics_2fv1_2fanalytics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
namespace speechly {
namespace analytics {
namespace v1 {
class UtteranceStatisticsPeriod;
struct UtteranceStatisticsPeriodDefaultTypeInternal;
extern UtteranceStatisticsPeriodDefaultTypeInternal _UtteranceStatisticsPeriod_default_instance_;
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> ::speechly::analytics::v1::UtteranceStatisticsPeriod* Arena::CreateMaybeMessage<::speechly::analytics::v1::UtteranceStatisticsPeriod>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speechly {
namespace analytics {
namespace v1 {

enum Aggregation : int {
  AGGREGATION_INVALID = 0,
  AGGREGATION_MONTHLY = 1,
  AGGREGATION_DAILY = 2,
  AGGREGATION_HOURLY = 3,
  Aggregation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Aggregation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Aggregation_IsValid(int value);
constexpr Aggregation Aggregation_MIN = AGGREGATION_INVALID;
constexpr Aggregation Aggregation_MAX = AGGREGATION_HOURLY;
constexpr int Aggregation_ARRAYSIZE = Aggregation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aggregation_descriptor();
template<typename T>
inline const std::string& Aggregation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aggregation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aggregation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aggregation_descriptor(), enum_t_value);
}
inline bool Aggregation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aggregation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aggregation>(
    Aggregation_descriptor(), name, value);
}
// ===================================================================

class UtteranceStatisticsPeriod final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtteranceStatisticsPeriod) */ {
 public:
  inline UtteranceStatisticsPeriod() : UtteranceStatisticsPeriod(nullptr) {}
  ~UtteranceStatisticsPeriod() override;
  explicit constexpr UtteranceStatisticsPeriod(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtteranceStatisticsPeriod(const UtteranceStatisticsPeriod& from);
  UtteranceStatisticsPeriod(UtteranceStatisticsPeriod&& from) noexcept
    : UtteranceStatisticsPeriod() {
    *this = ::std::move(from);
  }

  inline UtteranceStatisticsPeriod& operator=(const UtteranceStatisticsPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtteranceStatisticsPeriod& operator=(UtteranceStatisticsPeriod&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtteranceStatisticsPeriod& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtteranceStatisticsPeriod* internal_default_instance() {
    return reinterpret_cast<const UtteranceStatisticsPeriod*>(
               &_UtteranceStatisticsPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UtteranceStatisticsPeriod& a, UtteranceStatisticsPeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(UtteranceStatisticsPeriod* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtteranceStatisticsPeriod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtteranceStatisticsPeriod* New() const final {
    return new UtteranceStatisticsPeriod();
  }

  UtteranceStatisticsPeriod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtteranceStatisticsPeriod>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtteranceStatisticsPeriod& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtteranceStatisticsPeriod& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtteranceStatisticsPeriod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speechly.analytics.v1.UtteranceStatisticsPeriod";
  }
  protected:
  explicit UtteranceStatisticsPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kCountFieldNumber = 4,
    kUtterancesSecondsFieldNumber = 5,
    kAnnotatedSecondsFieldNumber = 6,
  };
  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string start_time = 3;
  void clear_start_time();
  const std::string& start_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_start_time();
  void set_allocated_start_time(std::string* start_time);
  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(const std::string& value);
  std::string* _internal_mutable_start_time();
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 utterances_seconds = 5;
  void clear_utterances_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 utterances_seconds() const;
  void set_utterances_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_utterances_seconds() const;
  void _internal_set_utterances_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 annotated_seconds = 6;
  void clear_annotated_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 annotated_seconds() const;
  void set_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_annotated_seconds() const;
  void _internal_set_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtteranceStatisticsPeriod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 utterances_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 annotated_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UtteranceStatisticsPeriod

// string app_id = 2;
inline void UtteranceStatisticsPeriod::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsPeriod::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsPeriod::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
}
inline std::string* UtteranceStatisticsPeriod::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
  return _s;
}
inline const std::string& UtteranceStatisticsPeriod::_internal_app_id() const {
  return app_id_.Get();
}
inline void UtteranceStatisticsPeriod::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::release_app_id() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsPeriod::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
}

// string start_time = 3;
inline void UtteranceStatisticsPeriod::clear_start_time() {
  start_time_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsPeriod::start_time() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
  return _internal_start_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtteranceStatisticsPeriod::set_start_time(ArgT0&& arg0, ArgT... args) {
 
 start_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
}
inline std::string* UtteranceStatisticsPeriod::mutable_start_time() {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
  return _s;
}
inline const std::string& UtteranceStatisticsPeriod::_internal_start_time() const {
  return start_time_.Get();
}
inline void UtteranceStatisticsPeriod::_internal_set_start_time(const std::string& value) {
  
  start_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::_internal_mutable_start_time() {
  
  return start_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::release_start_time() {
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
  return start_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtteranceStatisticsPeriod::set_allocated_start_time(std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
}

// int32 count = 4;
inline void UtteranceStatisticsPeriod::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsPeriod::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsPeriod::count() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.count)
  return _internal_count();
}
inline void UtteranceStatisticsPeriod::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UtteranceStatisticsPeriod::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.count)
}

// int32 utterances_seconds = 5;
inline void UtteranceStatisticsPeriod::clear_utterances_seconds() {
  utterances_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsPeriod::_internal_utterances_seconds() const {
  return utterances_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsPeriod::utterances_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.utterances_seconds)
  return _internal_utterances_seconds();
}
inline void UtteranceStatisticsPeriod::_internal_set_utterances_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  utterances_seconds_ = value;
}
inline void UtteranceStatisticsPeriod::set_utterances_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_utterances_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.utterances_seconds)
}

// int32 annotated_seconds = 6;
inline void UtteranceStatisticsPeriod::clear_annotated_seconds() {
  annotated_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsPeriod::_internal_annotated_seconds() const {
  return annotated_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtteranceStatisticsPeriod::annotated_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.annotated_seconds)
  return _internal_annotated_seconds();
}
inline void UtteranceStatisticsPeriod::_internal_set_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  annotated_seconds_ = value;
}
inline void UtteranceStatisticsPeriod::set_annotated_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_annotated_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.annotated_seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace analytics
}  // namespace speechly

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::speechly::analytics::v1::Aggregation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::speechly::analytics::v1::Aggregation>() {
  return ::speechly::analytics::v1::Aggregation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_2eproto
