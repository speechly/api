// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/analytics/v1/analytics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_speechly_2fanalytics_2fv1_2fanalytics_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
namespace speechly {
namespace analytics {
namespace v1 {
class DecoderInfo;
struct DecoderInfoDefaultTypeInternal;
extern DecoderInfoDefaultTypeInternal _DecoderInfo_default_instance_;
class ProcessingInfo;
struct ProcessingInfoDefaultTypeInternal;
extern ProcessingInfoDefaultTypeInternal _ProcessingInfo_default_instance_;
class Utterance;
struct UtteranceDefaultTypeInternal;
extern UtteranceDefaultTypeInternal _Utterance_default_instance_;
class UtteranceStatisticsPeriod;
struct UtteranceStatisticsPeriodDefaultTypeInternal;
extern UtteranceStatisticsPeriodDefaultTypeInternal _UtteranceStatisticsPeriod_default_instance_;
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace speechly {
namespace analytics {
namespace v1 {
enum Aggregation : int {
  AGGREGATION_INVALID = 0,
  AGGREGATION_MONTHLY = 1,
  AGGREGATION_DAILY = 2,
  AGGREGATION_HOURLY = 3,
  Aggregation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Aggregation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Aggregation_IsValid(int value);
constexpr Aggregation Aggregation_MIN = static_cast<Aggregation>(0);
constexpr Aggregation Aggregation_MAX = static_cast<Aggregation>(3);
constexpr int Aggregation_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Aggregation_descriptor();
template <typename T>
const std::string& Aggregation_Name(T value) {
  static_assert(std::is_same<T, Aggregation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Aggregation_Name().");
  return Aggregation_Name(static_cast<Aggregation>(value));
}
template <>
inline const std::string& Aggregation_Name(Aggregation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Aggregation_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Aggregation_Parse(absl::string_view name, Aggregation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Aggregation>(
      Aggregation_descriptor(), name, value);
}
enum ProcessingType : int {
  PROCESSING_TYPE_INVALID = 0,
  PROCESSING_TYPE_TRANSCRIPTION = 1,
  PROCESSING_TYPE_NLU = 2,
  PROCESSING_TYPE_LANGUAGE_DETECTION = 3,
  PROCESSING_TYPE_VAD = 4,
  PROCESSING_TYPE_TRANSLATION = 5,
  PROCESSING_TYPE_AUDIO_EVENT_DETECTION = 6,
  PROCESSING_TYPE_TONE_OF_VOICE_LABELLING = 7,
  PROCESSING_TYPE_SHALLOW_FUSION = 8,
  ProcessingType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProcessingType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProcessingType_IsValid(int value);
constexpr ProcessingType ProcessingType_MIN = static_cast<ProcessingType>(0);
constexpr ProcessingType ProcessingType_MAX = static_cast<ProcessingType>(8);
constexpr int ProcessingType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
ProcessingType_descriptor();
template <typename T>
const std::string& ProcessingType_Name(T value) {
  static_assert(std::is_same<T, ProcessingType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProcessingType_Name().");
  return ProcessingType_Name(static_cast<ProcessingType>(value));
}
template <>
inline const std::string& ProcessingType_Name(ProcessingType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProcessingType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool ProcessingType_Parse(absl::string_view name, ProcessingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessingType>(
      ProcessingType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UtteranceStatisticsPeriod final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.UtteranceStatisticsPeriod) */ {
 public:
  inline UtteranceStatisticsPeriod() : UtteranceStatisticsPeriod(nullptr) {}
  ~UtteranceStatisticsPeriod() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UtteranceStatisticsPeriod(::google::protobuf::internal::ConstantInitialized);

  UtteranceStatisticsPeriod(const UtteranceStatisticsPeriod& from);
  UtteranceStatisticsPeriod(UtteranceStatisticsPeriod&& from) noexcept
    : UtteranceStatisticsPeriod() {
    *this = ::std::move(from);
  }

  inline UtteranceStatisticsPeriod& operator=(const UtteranceStatisticsPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtteranceStatisticsPeriod& operator=(UtteranceStatisticsPeriod&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtteranceStatisticsPeriod& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtteranceStatisticsPeriod* internal_default_instance() {
    return reinterpret_cast<const UtteranceStatisticsPeriod*>(
               &_UtteranceStatisticsPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UtteranceStatisticsPeriod& a, UtteranceStatisticsPeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(UtteranceStatisticsPeriod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtteranceStatisticsPeriod* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UtteranceStatisticsPeriod* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UtteranceStatisticsPeriod>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UtteranceStatisticsPeriod& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UtteranceStatisticsPeriod& from) {
    UtteranceStatisticsPeriod::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtteranceStatisticsPeriod* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.analytics.v1.UtteranceStatisticsPeriod";
  }
  protected:
  explicit UtteranceStatisticsPeriod(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kProjectIdFieldNumber = 7,
    kCountFieldNumber = 4,
    kUtterancesSecondsFieldNumber = 5,
    kAnnotatedSecondsFieldNumber = 6,
  };
  // string app_id = 2;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string start_time = 3;
  void clear_start_time() ;
  const std::string& start_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_time(Arg_&& arg, Args_... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* ptr);

  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(
      const std::string& value);
  std::string* _internal_mutable_start_time();

  public:
  // string project_id = 7;
  void clear_project_id() ;
  const std::string& project_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_project_id(Arg_&& arg, Args_... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* ptr);

  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(
      const std::string& value);
  std::string* _internal_mutable_project_id();

  public:
  // int32 count = 4;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // int32 utterances_seconds = 5;
  void clear_utterances_seconds() ;
  ::int32_t utterances_seconds() const;
  void set_utterances_seconds(::int32_t value);

  private:
  ::int32_t _internal_utterances_seconds() const;
  void _internal_set_utterances_seconds(::int32_t value);

  public:
  // int32 annotated_seconds = 6;
  void clear_annotated_seconds() ;
  ::int32_t annotated_seconds() const;
  void set_annotated_seconds(::int32_t value);

  private:
  ::int32_t _internal_annotated_seconds() const;
  void _internal_set_annotated_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.UtteranceStatisticsPeriod)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 82, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr start_time_;
    ::google::protobuf::internal::ArenaStringPtr project_id_;
    ::int32_t count_;
    ::int32_t utterances_seconds_;
    ::int32_t annotated_seconds_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
};// -------------------------------------------------------------------

class Utterance final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.Utterance) */ {
 public:
  inline Utterance() : Utterance(nullptr) {}
  ~Utterance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Utterance(::google::protobuf::internal::ConstantInitialized);

  Utterance(const Utterance& from);
  Utterance(Utterance&& from) noexcept
    : Utterance() {
    *this = ::std::move(from);
  }

  inline Utterance& operator=(const Utterance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Utterance& operator=(Utterance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Utterance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Utterance* internal_default_instance() {
    return reinterpret_cast<const Utterance*>(
               &_Utterance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Utterance& a, Utterance& b) {
    a.Swap(&b);
  }
  inline void Swap(Utterance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Utterance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Utterance* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Utterance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Utterance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Utterance& from) {
    Utterance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Utterance* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.analytics.v1.Utterance";
  }
  protected:
  explicit Utterance(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptFieldNumber = 1,
    kAnnotatedFieldNumber = 2,
    kDateFieldNumber = 3,
  };
  // string transcript = 1;
  void clear_transcript() ;
  const std::string& transcript() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transcript(Arg_&& arg, Args_... args);
  std::string* mutable_transcript();
  PROTOBUF_NODISCARD std::string* release_transcript();
  void set_allocated_transcript(std::string* ptr);

  private:
  const std::string& _internal_transcript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transcript(
      const std::string& value);
  std::string* _internal_mutable_transcript();

  public:
  // string annotated = 2;
  void clear_annotated() ;
  const std::string& annotated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_annotated(Arg_&& arg, Args_... args);
  std::string* mutable_annotated();
  PROTOBUF_NODISCARD std::string* release_annotated();
  void set_allocated_annotated(std::string* ptr);

  private:
  const std::string& _internal_annotated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotated(
      const std::string& value);
  std::string* _internal_mutable_annotated();

  public:
  // string date = 3;
  void clear_date() ;
  const std::string& date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* ptr);

  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(
      const std::string& value);
  std::string* _internal_mutable_date();

  public:
  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.Utterance)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 63, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr transcript_;
    ::google::protobuf::internal::ArenaStringPtr annotated_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
};// -------------------------------------------------------------------

class DecoderInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.DecoderInfo) */ {
 public:
  inline DecoderInfo() : DecoderInfo(nullptr) {}
  ~DecoderInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DecoderInfo(::google::protobuf::internal::ConstantInitialized);

  DecoderInfo(const DecoderInfo& from);
  DecoderInfo(DecoderInfo&& from) noexcept
    : DecoderInfo() {
    *this = ::std::move(from);
  }

  inline DecoderInfo& operator=(const DecoderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecoderInfo& operator=(DecoderInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecoderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecoderInfo* internal_default_instance() {
    return reinterpret_cast<const DecoderInfo*>(
               &_DecoderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DecoderInfo& a, DecoderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DecoderInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecoderInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecoderInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecoderInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecoderInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DecoderInfo& from) {
    DecoderInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecoderInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.analytics.v1.DecoderInfo";
  }
  protected:
  explicit DecoderInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kUtteranceCountFieldNumber = 2,
    kTotalSecondsTranscribedFieldNumber = 3,
  };
  // string version = 1;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // int32 utterance_count = 2;
  void clear_utterance_count() ;
  ::int32_t utterance_count() const;
  void set_utterance_count(::int32_t value);

  private:
  ::int32_t _internal_utterance_count() const;
  void _internal_set_utterance_count(::int32_t value);

  public:
  // int32 total_seconds_transcribed = 3;
  void clear_total_seconds_transcribed() ;
  ::int32_t total_seconds_transcribed() const;
  void set_total_seconds_transcribed(::int32_t value);

  private:
  ::int32_t _internal_total_seconds_transcribed() const;
  void _internal_set_total_seconds_transcribed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.DecoderInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::int32_t utterance_count_;
    ::int32_t total_seconds_transcribed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
};// -------------------------------------------------------------------

class ProcessingInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speechly.analytics.v1.ProcessingInfo) */ {
 public:
  inline ProcessingInfo() : ProcessingInfo(nullptr) {}
  ~ProcessingInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessingInfo(::google::protobuf::internal::ConstantInitialized);

  ProcessingInfo(const ProcessingInfo& from);
  ProcessingInfo(ProcessingInfo&& from) noexcept
    : ProcessingInfo() {
    *this = ::std::move(from);
  }

  inline ProcessingInfo& operator=(const ProcessingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingInfo& operator=(ProcessingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessingInfo* internal_default_instance() {
    return reinterpret_cast<const ProcessingInfo*>(
               &_ProcessingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessingInfo& a, ProcessingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessingInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessingInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessingInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessingInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessingInfo& from) {
    ProcessingInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "speechly.analytics.v1.ProcessingInfo";
  }
  protected:
  explicit ProcessingInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessingTypesFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // repeated .speechly.analytics.v1.ProcessingType processing_types = 1;
  int processing_types_size() const;
  private:
  int _internal_processing_types_size() const;

  public:
  void clear_processing_types() ;
  public:
  ::speechly::analytics::v1::ProcessingType processing_types(int index) const;
  void set_processing_types(int index, ::speechly::analytics::v1::ProcessingType value);
  void add_processing_types(::speechly::analytics::v1::ProcessingType value);
  const ::google::protobuf::RepeatedField<int>& processing_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_processing_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_processing_types() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_processing_types();

  public:
  // string model_id = 2;
  void clear_model_id() ;
  const std::string& model_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_id(Arg_&& arg, Args_... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* ptr);

  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(
      const std::string& value);
  std::string* _internal_mutable_model_id();

  public:
  // @@protoc_insertion_point(class_scope:speechly.analytics.v1.ProcessingInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<int> processing_types_;
    mutable ::google::protobuf::internal::CachedSize _processing_types_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr model_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UtteranceStatisticsPeriod

// string app_id = 2;
inline void UtteranceStatisticsPeriod::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsPeriod::app_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UtteranceStatisticsPeriod::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
}
inline std::string* UtteranceStatisticsPeriod::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
  return _s;
}
inline const std::string& UtteranceStatisticsPeriod::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void UtteranceStatisticsPeriod::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
  return _impl_.app_id_.Release();
}
inline void UtteranceStatisticsPeriod::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsPeriod.app_id)
}

// string start_time = 3;
inline void UtteranceStatisticsPeriod::clear_start_time() {
  _impl_.start_time_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsPeriod::start_time() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
  return _internal_start_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UtteranceStatisticsPeriod::set_start_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
}
inline std::string* UtteranceStatisticsPeriod::mutable_start_time() {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
  return _s;
}
inline const std::string& UtteranceStatisticsPeriod::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_.Get();
}
inline void UtteranceStatisticsPeriod::_internal_set_start_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_.Set(value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::_internal_mutable_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.start_time_.Mutable( GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
  return _impl_.start_time_.Release();
}
inline void UtteranceStatisticsPeriod::set_allocated_start_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.start_time_.IsDefault()) {
          _impl_.start_time_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsPeriod.start_time)
}

// int32 count = 4;
inline void UtteranceStatisticsPeriod::clear_count() {
  _impl_.count_ = 0;
}
inline ::int32_t UtteranceStatisticsPeriod::count() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.count)
  return _internal_count();
}
inline void UtteranceStatisticsPeriod::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.count)
}
inline ::int32_t UtteranceStatisticsPeriod::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void UtteranceStatisticsPeriod::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// int32 utterances_seconds = 5;
inline void UtteranceStatisticsPeriod::clear_utterances_seconds() {
  _impl_.utterances_seconds_ = 0;
}
inline ::int32_t UtteranceStatisticsPeriod::utterances_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.utterances_seconds)
  return _internal_utterances_seconds();
}
inline void UtteranceStatisticsPeriod::set_utterances_seconds(::int32_t value) {
  _internal_set_utterances_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.utterances_seconds)
}
inline ::int32_t UtteranceStatisticsPeriod::_internal_utterances_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.utterances_seconds_;
}
inline void UtteranceStatisticsPeriod::_internal_set_utterances_seconds(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.utterances_seconds_ = value;
}

// int32 annotated_seconds = 6;
inline void UtteranceStatisticsPeriod::clear_annotated_seconds() {
  _impl_.annotated_seconds_ = 0;
}
inline ::int32_t UtteranceStatisticsPeriod::annotated_seconds() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.annotated_seconds)
  return _internal_annotated_seconds();
}
inline void UtteranceStatisticsPeriod::set_annotated_seconds(::int32_t value) {
  _internal_set_annotated_seconds(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.annotated_seconds)
}
inline ::int32_t UtteranceStatisticsPeriod::_internal_annotated_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.annotated_seconds_;
}
inline void UtteranceStatisticsPeriod::_internal_set_annotated_seconds(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.annotated_seconds_ = value;
}

// string project_id = 7;
inline void UtteranceStatisticsPeriod::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& UtteranceStatisticsPeriod::project_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.UtteranceStatisticsPeriod.project_id)
  return _internal_project_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UtteranceStatisticsPeriod::set_project_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.project_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.UtteranceStatisticsPeriod.project_id)
}
inline std::string* UtteranceStatisticsPeriod::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.UtteranceStatisticsPeriod.project_id)
  return _s;
}
inline const std::string& UtteranceStatisticsPeriod::_internal_project_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.project_id_.Get();
}
inline void UtteranceStatisticsPeriod::_internal_set_project_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::_internal_mutable_project_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.project_id_.Mutable( GetArenaForAllocation());
}
inline std::string* UtteranceStatisticsPeriod::release_project_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.UtteranceStatisticsPeriod.project_id)
  return _impl_.project_id_.Release();
}
inline void UtteranceStatisticsPeriod::set_allocated_project_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.project_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.project_id_.IsDefault()) {
          _impl_.project_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.UtteranceStatisticsPeriod.project_id)
}

// -------------------------------------------------------------------

// Utterance

// string transcript = 1;
inline void Utterance::clear_transcript() {
  _impl_.transcript_.ClearToEmpty();
}
inline const std::string& Utterance::transcript() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.Utterance.transcript)
  return _internal_transcript();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Utterance::set_transcript(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transcript_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.Utterance.transcript)
}
inline std::string* Utterance::mutable_transcript() {
  std::string* _s = _internal_mutable_transcript();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.Utterance.transcript)
  return _s;
}
inline const std::string& Utterance::_internal_transcript() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transcript_.Get();
}
inline void Utterance::_internal_set_transcript(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transcript_.Set(value, GetArenaForAllocation());
}
inline std::string* Utterance::_internal_mutable_transcript() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.transcript_.Mutable( GetArenaForAllocation());
}
inline std::string* Utterance::release_transcript() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.Utterance.transcript)
  return _impl_.transcript_.Release();
}
inline void Utterance::set_allocated_transcript(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transcript_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transcript_.IsDefault()) {
          _impl_.transcript_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.Utterance.transcript)
}

// string annotated = 2;
inline void Utterance::clear_annotated() {
  _impl_.annotated_.ClearToEmpty();
}
inline const std::string& Utterance::annotated() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.Utterance.annotated)
  return _internal_annotated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Utterance::set_annotated(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.annotated_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.Utterance.annotated)
}
inline std::string* Utterance::mutable_annotated() {
  std::string* _s = _internal_mutable_annotated();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.Utterance.annotated)
  return _s;
}
inline const std::string& Utterance::_internal_annotated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.annotated_.Get();
}
inline void Utterance::_internal_set_annotated(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.annotated_.Set(value, GetArenaForAllocation());
}
inline std::string* Utterance::_internal_mutable_annotated() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.annotated_.Mutable( GetArenaForAllocation());
}
inline std::string* Utterance::release_annotated() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.Utterance.annotated)
  return _impl_.annotated_.Release();
}
inline void Utterance::set_allocated_annotated(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.annotated_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.annotated_.IsDefault()) {
          _impl_.annotated_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.Utterance.annotated)
}

// string date = 3;
inline void Utterance::clear_date() {
  _impl_.date_.ClearToEmpty();
}
inline const std::string& Utterance::date() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.Utterance.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Utterance::set_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.date_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.Utterance.date)
}
inline std::string* Utterance::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.Utterance.date)
  return _s;
}
inline const std::string& Utterance::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.date_.Get();
}
inline void Utterance::_internal_set_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* Utterance::_internal_mutable_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.date_.Mutable( GetArenaForAllocation());
}
inline std::string* Utterance::release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.Utterance.date)
  return _impl_.date_.Release();
}
inline void Utterance::set_allocated_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.date_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.date_.IsDefault()) {
          _impl_.date_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.Utterance.date)
}

// -------------------------------------------------------------------

// DecoderInfo

// string version = 1;
inline void DecoderInfo::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& DecoderInfo::version() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.DecoderInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecoderInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.DecoderInfo.version)
}
inline std::string* DecoderInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.DecoderInfo.version)
  return _s;
}
inline const std::string& DecoderInfo::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void DecoderInfo::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* DecoderInfo::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* DecoderInfo::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.DecoderInfo.version)
  return _impl_.version_.Release();
}
inline void DecoderInfo::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.DecoderInfo.version)
}

// int32 utterance_count = 2;
inline void DecoderInfo::clear_utterance_count() {
  _impl_.utterance_count_ = 0;
}
inline ::int32_t DecoderInfo::utterance_count() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.DecoderInfo.utterance_count)
  return _internal_utterance_count();
}
inline void DecoderInfo::set_utterance_count(::int32_t value) {
  _internal_set_utterance_count(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.DecoderInfo.utterance_count)
}
inline ::int32_t DecoderInfo::_internal_utterance_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.utterance_count_;
}
inline void DecoderInfo::_internal_set_utterance_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.utterance_count_ = value;
}

// int32 total_seconds_transcribed = 3;
inline void DecoderInfo::clear_total_seconds_transcribed() {
  _impl_.total_seconds_transcribed_ = 0;
}
inline ::int32_t DecoderInfo::total_seconds_transcribed() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.DecoderInfo.total_seconds_transcribed)
  return _internal_total_seconds_transcribed();
}
inline void DecoderInfo::set_total_seconds_transcribed(::int32_t value) {
  _internal_set_total_seconds_transcribed(value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.DecoderInfo.total_seconds_transcribed)
}
inline ::int32_t DecoderInfo::_internal_total_seconds_transcribed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_seconds_transcribed_;
}
inline void DecoderInfo::_internal_set_total_seconds_transcribed(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_seconds_transcribed_ = value;
}

// -------------------------------------------------------------------

// ProcessingInfo

// repeated .speechly.analytics.v1.ProcessingType processing_types = 1;
inline int ProcessingInfo::_internal_processing_types_size() const {
  return _internal_processing_types().size();
}
inline int ProcessingInfo::processing_types_size() const {
  return _internal_processing_types_size();
}
inline void ProcessingInfo::clear_processing_types() {
  _internal_mutable_processing_types()->Clear();
}
inline ::speechly::analytics::v1::ProcessingType ProcessingInfo::processing_types(int index) const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.ProcessingInfo.processing_types)
  return static_cast<::speechly::analytics::v1::ProcessingType>(_internal_processing_types().Get(index));
}
inline void ProcessingInfo::set_processing_types(int index, ::speechly::analytics::v1::ProcessingType value) {
  _internal_mutable_processing_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.ProcessingInfo.processing_types)
}
inline void ProcessingInfo::add_processing_types(::speechly::analytics::v1::ProcessingType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_processing_types()->Add(value);
  // @@protoc_insertion_point(field_add:speechly.analytics.v1.ProcessingInfo.processing_types)
}
inline const ::google::protobuf::RepeatedField<int>& ProcessingInfo::processing_types() const {
  // @@protoc_insertion_point(field_list:speechly.analytics.v1.ProcessingInfo.processing_types)
  return _internal_processing_types();
}
inline ::google::protobuf::RepeatedField<int>* ProcessingInfo::mutable_processing_types() {
  // @@protoc_insertion_point(field_mutable_list:speechly.analytics.v1.ProcessingInfo.processing_types)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_processing_types();
}
inline const ::google::protobuf::RepeatedField<int>& ProcessingInfo::_internal_processing_types() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.processing_types_;
}
inline ::google::protobuf::RepeatedField<int>* ProcessingInfo::_internal_mutable_processing_types() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.processing_types_;
}

// string model_id = 2;
inline void ProcessingInfo::clear_model_id() {
  _impl_.model_id_.ClearToEmpty();
}
inline const std::string& ProcessingInfo::model_id() const {
  // @@protoc_insertion_point(field_get:speechly.analytics.v1.ProcessingInfo.model_id)
  return _internal_model_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessingInfo::set_model_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:speechly.analytics.v1.ProcessingInfo.model_id)
}
inline std::string* ProcessingInfo::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:speechly.analytics.v1.ProcessingInfo.model_id)
  return _s;
}
inline const std::string& ProcessingInfo::_internal_model_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_id_.Get();
}
inline void ProcessingInfo::_internal_set_model_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessingInfo::_internal_mutable_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessingInfo::release_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:speechly.analytics.v1.ProcessingInfo.model_id)
  return _impl_.model_id_.Release();
}
inline void ProcessingInfo::set_allocated_model_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_id_.IsDefault()) {
          _impl_.model_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:speechly.analytics.v1.ProcessingInfo.model_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace analytics
}  // namespace speechly


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::speechly::analytics::v1::Aggregation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::analytics::v1::Aggregation>() {
  return ::speechly::analytics::v1::Aggregation_descriptor();
}
template <>
struct is_proto_enum<::speechly::analytics::v1::ProcessingType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::speechly::analytics::v1::ProcessingType>() {
  return ::speechly::analytics::v1::ProcessingType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_speechly_2fanalytics_2fv1_2fanalytics_2eproto_2epb_2eh
