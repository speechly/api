// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: speechly/analytics/v1/analytics_api.proto
#ifndef GRPC_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto__INCLUDED
#define GRPC_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto__INCLUDED

#include "speechly/analytics/v1/analytics_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace speechly {
namespace analytics {
namespace v1 {

// Speechly Analytics API contains methods to get accumulated access data
// for given apps and/or projects.
class AnalyticsAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "speechly.analytics.v1.AnalyticsAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get a summary of utterances for a given time period.
    virtual ::grpc::Status UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtteranceStatisticsResponse>> AsyncUtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtteranceStatisticsResponse>>(AsyncUtteranceStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtteranceStatisticsResponse>> PrepareAsyncUtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtteranceStatisticsResponse>>(PrepareAsyncUtteranceStatisticsRaw(context, request, cq));
    }
    // Get a sample of recent utterances.
    virtual ::grpc::Status Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::speechly::analytics::v1::UtterancesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtterancesResponse>> AsyncUtterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtterancesResponse>>(AsyncUtterancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtterancesResponse>> PrepareAsyncUtterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtterancesResponse>>(PrepareAsyncUtterancesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get a summary of utterances for a given time period.
      virtual void UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UtteranceStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UtteranceStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get a sample of recent utterances.
      virtual void Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Utterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtterancesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Utterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtteranceStatisticsResponse>* AsyncUtteranceStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtteranceStatisticsResponse>* PrepareAsyncUtteranceStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtterancesResponse>* AsyncUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechly::analytics::v1::UtterancesResponse>* PrepareAsyncUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>> AsyncUtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>>(AsyncUtteranceStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>> PrepareAsyncUtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>>(PrepareAsyncUtteranceStatisticsRaw(context, request, cq));
    }
    ::grpc::Status Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::speechly::analytics::v1::UtterancesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>> AsyncUtterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>>(AsyncUtterancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>> PrepareAsyncUtterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>>(PrepareAsyncUtterancesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      void UtteranceStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      void UtteranceStatistics(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UtteranceStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response, std::function<void(::grpc::Status)>) override;
      void Utterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtterancesResponse* response, std::function<void(::grpc::Status)>) override;
      void Utterances(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Utterances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::speechly::analytics::v1::UtterancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>* AsyncUtteranceStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtteranceStatisticsResponse>* PrepareAsyncUtteranceStatisticsRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>* AsyncUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechly::analytics::v1::UtterancesResponse>* PrepareAsyncUtterancesRaw(::grpc::ClientContext* context, const ::speechly::analytics::v1::UtterancesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UtteranceStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_Utterances_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get a summary of utterances for a given time period.
    virtual ::grpc::Status UtteranceStatistics(::grpc::ServerContext* context, const ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::speechly::analytics::v1::UtteranceStatisticsResponse* response);
    // Get a sample of recent utterances.
    virtual ::grpc::Status Utterances(::grpc::ServerContext* context, const ::speechly::analytics::v1::UtterancesRequest* request, ::speechly::analytics::v1::UtterancesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UtteranceStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UtteranceStatistics() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UtteranceStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtteranceStatisticsRequest* /*request*/, ::speechly::analytics::v1::UtteranceStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUtteranceStatistics(::grpc::ServerContext* context, ::speechly::analytics::v1::UtteranceStatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::analytics::v1::UtteranceStatisticsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Utterances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Utterances() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Utterances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Utterances(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtterancesRequest* /*request*/, ::speechly::analytics::v1::UtterancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUtterances(::grpc::ServerContext* context, ::speechly::analytics::v1::UtterancesRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechly::analytics::v1::UtterancesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UtteranceStatistics<WithAsyncMethod_Utterances<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UtteranceStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UtteranceStatistics() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::analytics::v1::UtteranceStatisticsRequest, ::speechly::analytics::v1::UtteranceStatisticsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::analytics::v1::UtteranceStatisticsRequest* request,
                 ::speechly::analytics::v1::UtteranceStatisticsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UtteranceStatistics(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UtteranceStatistics(
        ::grpc::experimental::MessageAllocator< ::speechly::analytics::v1::UtteranceStatisticsRequest, ::speechly::analytics::v1::UtteranceStatisticsResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::analytics::v1::UtteranceStatisticsRequest, ::speechly::analytics::v1::UtteranceStatisticsResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UtteranceStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtteranceStatisticsRequest* /*request*/, ::speechly::analytics::v1::UtteranceStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtteranceStatisticsRequest* /*request*/, ::speechly::analytics::v1::UtteranceStatisticsResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Utterances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Utterances() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::speechly::analytics::v1::UtterancesRequest, ::speechly::analytics::v1::UtterancesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::speechly::analytics::v1::UtterancesRequest* request,
                 ::speechly::analytics::v1::UtterancesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Utterances(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Utterances(
        ::grpc::experimental::MessageAllocator< ::speechly::analytics::v1::UtterancesRequest, ::speechly::analytics::v1::UtterancesResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::speechly::analytics::v1::UtterancesRequest, ::speechly::analytics::v1::UtterancesResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Utterances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Utterances(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtterancesRequest* /*request*/, ::speechly::analytics::v1::UtterancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Utterances(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtterancesRequest* /*request*/, ::speechly::analytics::v1::UtterancesResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_UtteranceStatistics<ExperimentalWithCallbackMethod_Utterances<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UtteranceStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UtteranceStatistics() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UtteranceStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtteranceStatisticsRequest* /*request*/, ::speechly::analytics::v1::UtteranceStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Utterances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Utterances() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Utterances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Utterances(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtterancesRequest* /*request*/, ::speechly::analytics::v1::UtterancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UtteranceStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UtteranceStatistics() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UtteranceStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtteranceStatisticsRequest* /*request*/, ::speechly::analytics::v1::UtteranceStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUtteranceStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Utterances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Utterances() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Utterances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Utterances(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtterancesRequest* /*request*/, ::speechly::analytics::v1::UtterancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUtterances(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UtteranceStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UtteranceStatistics() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UtteranceStatistics(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UtteranceStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtteranceStatisticsRequest* /*request*/, ::speechly::analytics::v1::UtteranceStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Utterances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Utterances() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Utterances(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Utterances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Utterances(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtterancesRequest* /*request*/, ::speechly::analytics::v1::UtterancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Utterances(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UtteranceStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UtteranceStatistics() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::analytics::v1::UtteranceStatisticsRequest, ::speechly::analytics::v1::UtteranceStatisticsResponse>(std::bind(&WithStreamedUnaryMethod_UtteranceStatistics<BaseClass>::StreamedUtteranceStatistics, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UtteranceStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UtteranceStatistics(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtteranceStatisticsRequest* /*request*/, ::speechly::analytics::v1::UtteranceStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUtteranceStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::analytics::v1::UtteranceStatisticsRequest,::speechly::analytics::v1::UtteranceStatisticsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Utterances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Utterances() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::speechly::analytics::v1::UtterancesRequest, ::speechly::analytics::v1::UtterancesResponse>(std::bind(&WithStreamedUnaryMethod_Utterances<BaseClass>::StreamedUtterances, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Utterances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Utterances(::grpc::ServerContext* /*context*/, const ::speechly::analytics::v1::UtterancesRequest* /*request*/, ::speechly::analytics::v1::UtterancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUtterances(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechly::analytics::v1::UtterancesRequest,::speechly::analytics::v1::UtterancesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UtteranceStatistics<WithStreamedUnaryMethod_Utterances<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UtteranceStatistics<WithStreamedUnaryMethod_Utterances<Service > > StreamedService;
};

}  // namespace v1
}  // namespace analytics
}  // namespace speechly


#endif  // GRPC_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto__INCLUDED
