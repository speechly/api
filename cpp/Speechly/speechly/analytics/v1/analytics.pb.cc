// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/analytics/v1/analytics.proto

#include "speechly/analytics/v1/analytics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace analytics {
namespace v1 {
constexpr UtteranceStatisticsPeriod::UtteranceStatisticsPeriod(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0)
  , utterances_seconds_(0)
  , annotated_seconds_(0){}
struct UtteranceStatisticsPeriodDefaultTypeInternal {
  constexpr UtteranceStatisticsPeriodDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtteranceStatisticsPeriodDefaultTypeInternal() {}
  union {
    UtteranceStatisticsPeriod _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtteranceStatisticsPeriodDefaultTypeInternal _UtteranceStatisticsPeriod_default_instance_;
constexpr Utterance::Utterance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transcript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , annotated_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UtteranceDefaultTypeInternal {
  constexpr UtteranceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtteranceDefaultTypeInternal() {}
  union {
    Utterance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtteranceDefaultTypeInternal _Utterance_default_instance_;
constexpr DecoderInfo::DecoderInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , utterance_count_(0)
  , total_seconds_transcribed_(0){}
struct DecoderInfoDefaultTypeInternal {
  constexpr DecoderInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecoderInfoDefaultTypeInternal() {}
  union {
    DecoderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecoderInfoDefaultTypeInternal _DecoderInfo_default_instance_;
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fanalytics_2fv1_2fanalytics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsPeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsPeriod, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsPeriod, start_time_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsPeriod, count_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsPeriod, utterances_seconds_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsPeriod, annotated_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::Utterance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::Utterance, transcript_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::Utterance, annotated_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::Utterance, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::DecoderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::DecoderInfo, version_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::DecoderInfo, utterance_count_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::DecoderInfo, total_seconds_transcribed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::analytics::v1::UtteranceStatisticsPeriod)},
  { 10, -1, sizeof(::speechly::analytics::v1::Utterance)},
  { 18, -1, sizeof(::speechly::analytics::v1::DecoderInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_UtteranceStatisticsPeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_Utterance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_DecoderInfo_default_instance_),
};

const char descriptor_table_protodef_speechly_2fanalytics_2fv1_2fanalytics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%speechly/analytics/v1/analytics.proto\022"
  "\025speechly.analytics.v1\"\205\001\n\031UtteranceStat"
  "isticsPeriod\022\016\n\006app_id\030\002 \001(\t\022\022\n\nstart_ti"
  "me\030\003 \001(\t\022\r\n\005count\030\004 \001(\005\022\032\n\022utterances_se"
  "conds\030\005 \001(\005\022\031\n\021annotated_seconds\030\006 \001(\005\"@"
  "\n\tUtterance\022\022\n\ntranscript\030\001 \001(\t\022\021\n\tannot"
  "ated\030\002 \001(\t\022\014\n\004date\030\003 \001(\t\"Z\n\013DecoderInfo\022"
  "\017\n\007version\030\001 \001(\t\022\027\n\017utterance_count\030\002 \001("
  "\005\022!\n\031total_seconds_transcribed\030\003 \001(\005*n\n\013"
  "Aggregation\022\027\n\023AGGREGATION_INVALID\020\000\022\027\n\023"
  "AGGREGATION_MONTHLY\020\001\022\025\n\021AGGREGATION_DAI"
  "LY\020\002\022\026\n\022AGGREGATION_HOURLY\020\003B\206\001\n\031com.spe"
  "echly.analytics.v1B\016AnalyticsProtoP\001Z!sp"
  "eechly/analytics/v1;analyticsv1\242\002\003SAX\252\002\025"
  "Speechly.Analytics.V1\312\002\025Speechly\\Analyti"
  "cs\\V1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto = {
  false, false, 613, descriptor_table_protodef_speechly_2fanalytics_2fv1_2fanalytics_2eproto, "speechly/analytics/v1/analytics.proto", 
  &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_speechly_2fanalytics_2fv1_2fanalytics_2eproto::offsets,
  file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_2eproto, file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_2eproto, file_level_service_descriptors_speechly_2fanalytics_2fv1_2fanalytics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_getter() {
  return &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fanalytics_2fv1_2fanalytics_2eproto(&descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto);
namespace speechly {
namespace analytics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aggregation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto);
  return file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_2eproto[0];
}
bool Aggregation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UtteranceStatisticsPeriod::_Internal {
 public:
};

UtteranceStatisticsPeriod::UtteranceStatisticsPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.UtteranceStatisticsPeriod)
}
UtteranceStatisticsPeriod::UtteranceStatisticsPeriod(const UtteranceStatisticsPeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_time().empty()) {
    start_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_time(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&annotated_seconds_) -
    reinterpret_cast<char*>(&count_)) + sizeof(annotated_seconds_));
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.UtteranceStatisticsPeriod)
}

inline void UtteranceStatisticsPeriod::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&annotated_seconds_) -
    reinterpret_cast<char*>(&count_)) + sizeof(annotated_seconds_));
}

UtteranceStatisticsPeriod::~UtteranceStatisticsPeriod() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.UtteranceStatisticsPeriod)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtteranceStatisticsPeriod::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UtteranceStatisticsPeriod::ArenaDtor(void* object) {
  UtteranceStatisticsPeriod* _this = reinterpret_cast< UtteranceStatisticsPeriod* >(object);
  (void)_this;
}
void UtteranceStatisticsPeriod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtteranceStatisticsPeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtteranceStatisticsPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.UtteranceStatisticsPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  start_time_.ClearToEmpty();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annotated_seconds_) -
      reinterpret_cast<char*>(&count_)) + sizeof(annotated_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtteranceStatisticsPeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsPeriod.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_start_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsPeriod.start_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 utterances_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          utterances_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 annotated_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          annotated_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtteranceStatisticsPeriod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.UtteranceStatisticsPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsPeriod.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string start_time = 3;
  if (!this->_internal_start_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsPeriod.start_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start_time(), target);
  }

  // int32 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  // int32 utterances_seconds = 5;
  if (this->_internal_utterances_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_utterances_seconds(), target);
  }

  // int32 annotated_seconds = 6;
  if (this->_internal_annotated_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_annotated_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.UtteranceStatisticsPeriod)
  return target;
}

size_t UtteranceStatisticsPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.UtteranceStatisticsPeriod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string start_time = 3;
  if (!this->_internal_start_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_time());
  }

  // int32 count = 4;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 utterances_seconds = 5;
  if (this->_internal_utterances_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_utterances_seconds());
  }

  // int32 annotated_seconds = 6;
  if (this->_internal_annotated_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_annotated_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtteranceStatisticsPeriod::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtteranceStatisticsPeriod::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtteranceStatisticsPeriod::GetClassData() const { return &_class_data_; }

void UtteranceStatisticsPeriod::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UtteranceStatisticsPeriod *>(to)->MergeFrom(
      static_cast<const UtteranceStatisticsPeriod &>(from));
}


void UtteranceStatisticsPeriod::MergeFrom(const UtteranceStatisticsPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.UtteranceStatisticsPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_start_time().empty()) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_utterances_seconds() != 0) {
    _internal_set_utterances_seconds(from._internal_utterances_seconds());
  }
  if (from._internal_annotated_seconds() != 0) {
    _internal_set_annotated_seconds(from._internal_annotated_seconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtteranceStatisticsPeriod::CopyFrom(const UtteranceStatisticsPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.UtteranceStatisticsPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtteranceStatisticsPeriod::IsInitialized() const {
  return true;
}

void UtteranceStatisticsPeriod::InternalSwap(UtteranceStatisticsPeriod* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_time_, GetArenaForAllocation(),
      &other->start_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtteranceStatisticsPeriod, annotated_seconds_)
      + sizeof(UtteranceStatisticsPeriod::annotated_seconds_)
      - PROTOBUF_FIELD_OFFSET(UtteranceStatisticsPeriod, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtteranceStatisticsPeriod::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_2eproto[0]);
}

// ===================================================================

class Utterance::_Internal {
 public:
};

Utterance::Utterance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.Utterance)
}
Utterance::Utterance(const Utterance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transcript().empty()) {
    transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transcript(), 
      GetArenaForAllocation());
  }
  annotated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotated().empty()) {
    annotated_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotated(), 
      GetArenaForAllocation());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.Utterance)
}

inline void Utterance::SharedCtor() {
transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
annotated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Utterance::~Utterance() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.Utterance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Utterance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Utterance::ArenaDtor(void* object) {
  Utterance* _this = reinterpret_cast< Utterance* >(object);
  (void)_this;
}
void Utterance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Utterance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Utterance::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.Utterance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_.ClearToEmpty();
  annotated_.ClearToEmpty();
  date_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Utterance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.Utterance.transcript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string annotated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_annotated();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.Utterance.annotated"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.Utterance.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Utterance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.Utterance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (!this->_internal_transcript().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.Utterance.transcript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transcript(), target);
  }

  // string annotated = 2;
  if (!this->_internal_annotated().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotated().data(), static_cast<int>(this->_internal_annotated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.Utterance.annotated");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_annotated(), target);
  }

  // string date = 3;
  if (!this->_internal_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.Utterance.date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.Utterance)
  return target;
}

size_t Utterance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.Utterance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript = 1;
  if (!this->_internal_transcript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // string annotated = 2;
  if (!this->_internal_annotated().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotated());
  }

  // string date = 3;
  if (!this->_internal_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Utterance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Utterance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Utterance::GetClassData() const { return &_class_data_; }

void Utterance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Utterance *>(to)->MergeFrom(
      static_cast<const Utterance &>(from));
}


void Utterance::MergeFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.Utterance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transcript().empty()) {
    _internal_set_transcript(from._internal_transcript());
  }
  if (!from._internal_annotated().empty()) {
    _internal_set_annotated(from._internal_annotated());
  }
  if (!from._internal_date().empty()) {
    _internal_set_date(from._internal_date());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Utterance::CopyFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.Utterance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utterance::IsInitialized() const {
  return true;
}

void Utterance::InternalSwap(Utterance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transcript_, GetArenaForAllocation(),
      &other->transcript_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &annotated_, GetArenaForAllocation(),
      &other->annotated_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_, GetArenaForAllocation(),
      &other->date_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Utterance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_2eproto[1]);
}

// ===================================================================

class DecoderInfo::_Internal {
 public:
};

DecoderInfo::DecoderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.DecoderInfo)
}
DecoderInfo::DecoderInfo(const DecoderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&utterance_count_, &from.utterance_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_seconds_transcribed_) -
    reinterpret_cast<char*>(&utterance_count_)) + sizeof(total_seconds_transcribed_));
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.DecoderInfo)
}

inline void DecoderInfo::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&utterance_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_seconds_transcribed_) -
    reinterpret_cast<char*>(&utterance_count_)) + sizeof(total_seconds_transcribed_));
}

DecoderInfo::~DecoderInfo() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.DecoderInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecoderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecoderInfo::ArenaDtor(void* object) {
  DecoderInfo* _this = reinterpret_cast< DecoderInfo* >(object);
  (void)_this;
}
void DecoderInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecoderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecoderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.DecoderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  ::memset(&utterance_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_seconds_transcribed_) -
      reinterpret_cast<char*>(&utterance_count_)) + sizeof(total_seconds_transcribed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecoderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.DecoderInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 utterance_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          utterance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_seconds_transcribed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_seconds_transcribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecoderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.DecoderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.DecoderInfo.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // int32 utterance_count = 2;
  if (this->_internal_utterance_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_utterance_count(), target);
  }

  // int32 total_seconds_transcribed = 3;
  if (this->_internal_total_seconds_transcribed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_seconds_transcribed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.DecoderInfo)
  return target;
}

size_t DecoderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.DecoderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // int32 utterance_count = 2;
  if (this->_internal_utterance_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_utterance_count());
  }

  // int32 total_seconds_transcribed = 3;
  if (this->_internal_total_seconds_transcribed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_seconds_transcribed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecoderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecoderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecoderInfo::GetClassData() const { return &_class_data_; }

void DecoderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DecoderInfo *>(to)->MergeFrom(
      static_cast<const DecoderInfo &>(from));
}


void DecoderInfo::MergeFrom(const DecoderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.DecoderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_utterance_count() != 0) {
    _internal_set_utterance_count(from._internal_utterance_count());
  }
  if (from._internal_total_seconds_transcribed() != 0) {
    _internal_set_total_seconds_transcribed(from._internal_total_seconds_transcribed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecoderInfo::CopyFrom(const DecoderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.DecoderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecoderInfo::IsInitialized() const {
  return true;
}

void DecoderInfo::InternalSwap(DecoderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecoderInfo, total_seconds_transcribed_)
      + sizeof(DecoderInfo::total_seconds_transcribed_)
      - PROTOBUF_FIELD_OFFSET(DecoderInfo, utterance_count_)>(
          reinterpret_cast<char*>(&utterance_count_),
          reinterpret_cast<char*>(&other->utterance_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecoderInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::UtteranceStatisticsPeriod* Arena::CreateMaybeMessage< ::speechly::analytics::v1::UtteranceStatisticsPeriod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::UtteranceStatisticsPeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::Utterance* Arena::CreateMaybeMessage< ::speechly::analytics::v1::Utterance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::Utterance >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::DecoderInfo* Arena::CreateMaybeMessage< ::speechly::analytics::v1::DecoderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::DecoderInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
