// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/analytics/v1/analytics_api.proto

#include "speechly/analytics/v1/analytics_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace analytics {
namespace v1 {
constexpr UtteranceStatisticsRequest::UtteranceStatisticsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , days_(0)
  , scope_(0)

  , aggregation_(0)
{}
struct UtteranceStatisticsRequestDefaultTypeInternal {
  constexpr UtteranceStatisticsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtteranceStatisticsRequestDefaultTypeInternal() {}
  union {
    UtteranceStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtteranceStatisticsRequestDefaultTypeInternal _UtteranceStatisticsRequest_default_instance_;
constexpr UtteranceStatisticsResponse::UtteranceStatisticsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , start_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , aggregation_(0)

  , total_utterances_(0)
  , total_duration_seconds_(0)
  , total_annotated_seconds_(0){}
struct UtteranceStatisticsResponseDefaultTypeInternal {
  constexpr UtteranceStatisticsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtteranceStatisticsResponseDefaultTypeInternal() {}
  union {
    UtteranceStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtteranceStatisticsResponseDefaultTypeInternal _UtteranceStatisticsResponse_default_instance_;
constexpr UtterancesRequest::UtterancesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UtterancesRequestDefaultTypeInternal {
  constexpr UtterancesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtterancesRequestDefaultTypeInternal() {}
  union {
    UtterancesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtterancesRequestDefaultTypeInternal _UtterancesRequest_default_instance_;
constexpr UtterancesResponse::UtterancesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : utterances_(){}
struct UtterancesResponseDefaultTypeInternal {
  constexpr UtterancesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtterancesResponseDefaultTypeInternal() {}
  union {
    UtterancesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtterancesResponseDefaultTypeInternal _UtterancesResponse_default_instance_;
constexpr RegisterUtteranceRequest::RegisterUtteranceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operation_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , decoder_info_(nullptr)
  , created_time_(nullptr)
  , finished_time_(nullptr)
  , processing_info_(nullptr)
  , utterance_length_seconds_(0)
  , utterance_length_chars_(0)
  , status_(0)
{}
struct RegisterUtteranceRequestDefaultTypeInternal {
  constexpr RegisterUtteranceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterUtteranceRequestDefaultTypeInternal() {}
  union {
    RegisterUtteranceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterUtteranceRequestDefaultTypeInternal _RegisterUtteranceRequest_default_instance_;
constexpr RegisterUtteranceResponse::RegisterUtteranceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RegisterUtteranceResponseDefaultTypeInternal {
  constexpr RegisterUtteranceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterUtteranceResponseDefaultTypeInternal() {}
  union {
    RegisterUtteranceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterUtteranceResponseDefaultTypeInternal _RegisterUtteranceResponse_default_instance_;
constexpr RegisterUtterancesRequest::RegisterUtterancesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_(){}
struct RegisterUtterancesRequestDefaultTypeInternal {
  constexpr RegisterUtterancesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterUtterancesRequestDefaultTypeInternal() {}
  union {
    RegisterUtterancesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterUtterancesRequestDefaultTypeInternal _RegisterUtterancesRequest_default_instance_;
constexpr RegisterUtterancesResponse::RegisterUtterancesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RegisterUtterancesResponseDefaultTypeInternal {
  constexpr RegisterUtterancesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterUtterancesResponseDefaultTypeInternal() {}
  union {
    RegisterUtterancesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterUtterancesResponseDefaultTypeInternal _RegisterUtterancesResponse_default_instance_;
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, days_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, aggregation_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, start_date_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, end_date_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, project_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, start_date_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, end_date_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, aggregation_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, items_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, total_utterances_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, total_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, total_annotated_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtterancesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtterancesRequest, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtterancesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtterancesResponse, utterances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, utterance_length_seconds_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, utterance_length_chars_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, decoder_info_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, created_time_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, finished_time_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, status_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, operation_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, batch_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, language_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceRequest, processing_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtteranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtterancesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtterancesRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::RegisterUtterancesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::analytics::v1::UtteranceStatisticsRequest)},
  { 12, -1, sizeof(::speechly::analytics::v1::UtteranceStatisticsResponse)},
  { 24, -1, sizeof(::speechly::analytics::v1::UtterancesRequest)},
  { 30, -1, sizeof(::speechly::analytics::v1::UtterancesResponse)},
  { 36, -1, sizeof(::speechly::analytics::v1::RegisterUtteranceRequest)},
  { 54, -1, sizeof(::speechly::analytics::v1::RegisterUtteranceResponse)},
  { 59, -1, sizeof(::speechly::analytics::v1::RegisterUtterancesRequest)},
  { 65, -1, sizeof(::speechly::analytics::v1::RegisterUtterancesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_UtteranceStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_UtteranceStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_UtterancesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_UtterancesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_RegisterUtteranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_RegisterUtteranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_RegisterUtterancesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_RegisterUtterancesResponse_default_instance_),
};

const char descriptor_table_protodef_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)speechly/analytics/v1/analytics_api.pr"
  "oto\022\025speechly.analytics.v1\032%speechly/ana"
  "lytics/v1/analytics.proto\032\037google/protob"
  "uf/timestamp.proto\"\315\002\n\032UtteranceStatisti"
  "csRequest\022\016\n\006app_id\030\001 \001(\t\022\014\n\004days\030\002 \001(\005\022"
  "F\n\005scope\030\003 \001(\01627.speechly.analytics.v1.U"
  "tteranceStatisticsRequest.Scope\0227\n\013aggre"
  "gation\030\004 \001(\0162\".speechly.analytics.v1.Agg"
  "regation\022\022\n\nstart_date\030\005 \001(\t\022\020\n\010end_date"
  "\030\006 \001(\t\022\022\n\nproject_id\030\007 \001(\t\"V\n\005Scope\022\021\n\rS"
  "COPE_INVALID\020\000\022\024\n\020SCOPE_UTTERANCES\020\001\022\025\n\021"
  "SCOPE_ANNOTATIONS\020\002\022\r\n\tSCOPE_ALL\020\003\"\230\002\n\033U"
  "tteranceStatisticsResponse\022\022\n\nstart_date"
  "\030\001 \001(\t\022\020\n\010end_date\030\002 \001(\t\0227\n\013aggregation\030"
  "\003 \001(\0162\".speechly.analytics.v1.Aggregatio"
  "n\022\?\n\005items\030\004 \003(\01320.speechly.analytics.v1"
  ".UtteranceStatisticsPeriod\022\030\n\020total_utte"
  "rances\030\005 \001(\005\022\036\n\026total_duration_seconds\030\006"
  " \001(\005\022\037\n\027total_annotated_seconds\030\007 \001(\005\"#\n"
  "\021UtterancesRequest\022\016\n\006app_id\030\001 \001(\t\"J\n\022Ut"
  "terancesResponse\0224\n\nutterances\030\001 \003(\0132 .s"
  "peechly.analytics.v1.Utterance\"\270\004\n\030Regis"
  "terUtteranceRequest\022\016\n\006app_id\030\001 \001(\t\022\021\n\td"
  "evice_id\030\002 \001(\t\022 \n\030utterance_length_secon"
  "ds\030\003 \001(\005\022\036\n\026utterance_length_chars\030\004 \001(\005"
  "\0228\n\014decoder_info\030\005 \001(\0132\".speechly.analyt"
  "ics.v1.DecoderInfo\0220\n\014created_time\030\006 \001(\013"
  "2\032.google.protobuf.Timestamp\0221\n\rfinished"
  "_time\030\007 \001(\0132\032.google.protobuf.Timestamp\022"
  "F\n\006status\030\010 \001(\01626.speechly.analytics.v1."
  "RegisterUtteranceRequest.Status\022\024\n\014opera"
  "tion_id\030\t \001(\t\022\020\n\010batch_id\030\n \001(\t\022\022\n\nproje"
  "ct_id\030\013 \001(\t\022\020\n\010language\030\014 \001(\t\022>\n\017process"
  "ing_info\030\r \001(\0132%.speechly.analytics.v1.P"
  "rocessingInfo\"B\n\006Status\022\022\n\016STATUS_INVALI"
  "D\020\000\022\022\n\016STATUS_SUCCESS\020\001\022\020\n\014STATUS_ERROR\020"
  "\002\"\033\n\031RegisterUtteranceResponse\"^\n\031Regist"
  "erUtterancesRequest\022A\n\010requests\030\001 \003(\0132/."
  "speechly.analytics.v1.RegisterUtteranceR"
  "equest\"\034\n\032RegisterUtterancesResponse2\342\003\n"
  "\014AnalyticsAPI\022|\n\023UtteranceStatistics\0221.s"
  "peechly.analytics.v1.UtteranceStatistics"
  "Request\0322.speechly.analytics.v1.Utteranc"
  "eStatisticsResponse\022a\n\nUtterances\022(.spee"
  "chly.analytics.v1.UtterancesRequest\032).sp"
  "eechly.analytics.v1.UtterancesResponse\022v"
  "\n\021RegisterUtterance\022/.speechly.analytics"
  ".v1.RegisterUtteranceRequest\0320.speechly."
  "analytics.v1.RegisterUtteranceResponse\022y"
  "\n\022RegisterUtterances\0220.speechly.analytic"
  "s.v1.RegisterUtterancesRequest\0321.speechl"
  "y.analytics.v1.RegisterUtterancesRespons"
  "eB\211\001\n\031com.speechly.analytics.v1B\021Analyti"
  "csApiProtoP\001Z!speechly/analytics/v1;anal"
  "yticsv1\242\002\003SAX\252\002\025Speechly.Analytics.V1\312\002\025"
  "Speechly\\Analytics\\V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto = {
  false, false, 2229, descriptor_table_protodef_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto, "speechly/analytics/v1/analytics_api.proto", 
  &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once, descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto, file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto, file_level_service_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto(&descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto);
namespace speechly {
namespace analytics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UtteranceStatisticsRequest_Scope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[0];
}
bool UtteranceStatisticsRequest_Scope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_INVALID;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_UTTERANCES;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_ANNOTATIONS;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_ALL;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::Scope_MIN;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::Scope_MAX;
constexpr int UtteranceStatisticsRequest::Scope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterUtteranceRequest_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[1];
}
bool RegisterUtteranceRequest_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegisterUtteranceRequest_Status RegisterUtteranceRequest::STATUS_INVALID;
constexpr RegisterUtteranceRequest_Status RegisterUtteranceRequest::STATUS_SUCCESS;
constexpr RegisterUtteranceRequest_Status RegisterUtteranceRequest::STATUS_ERROR;
constexpr RegisterUtteranceRequest_Status RegisterUtteranceRequest::Status_MIN;
constexpr RegisterUtteranceRequest_Status RegisterUtteranceRequest::Status_MAX;
constexpr int RegisterUtteranceRequest::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class UtteranceStatisticsRequest::_Internal {
 public:
};

UtteranceStatisticsRequest::UtteranceStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.UtteranceStatisticsRequest)
}
UtteranceStatisticsRequest::UtteranceStatisticsRequest(const UtteranceStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArenaForAllocation());
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_date(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&days_, &from.days_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggregation_) -
    reinterpret_cast<char*>(&days_)) + sizeof(aggregation_));
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.UtteranceStatisticsRequest)
}

inline void UtteranceStatisticsRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&days_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aggregation_) -
    reinterpret_cast<char*>(&days_)) + sizeof(aggregation_));
}

UtteranceStatisticsRequest::~UtteranceStatisticsRequest() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.UtteranceStatisticsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtteranceStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UtteranceStatisticsRequest::ArenaDtor(void* object) {
  UtteranceStatisticsRequest* _this = reinterpret_cast< UtteranceStatisticsRequest* >(object);
  (void)_this;
}
void UtteranceStatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtteranceStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtteranceStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  start_date_.ClearToEmpty();
  end_date_.ClearToEmpty();
  project_id_.ClearToEmpty();
  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_) -
      reinterpret_cast<char*>(&days_)) + sizeof(aggregation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtteranceStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scope(static_cast<::speechly::analytics::v1::UtteranceStatisticsRequest_Scope>(val));
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.Aggregation aggregation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::speechly::analytics::v1::Aggregation>(val));
        } else goto handle_unusual;
        continue;
      // string start_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsRequest.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsRequest.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtteranceStatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // int32 days = 2;
  if (this->_internal_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_days(), target);
  }

  // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
  if (this->_internal_scope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_scope(), target);
  }

  // .speechly.analytics.v1.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_aggregation(), target);
  }

  // string start_date = 5;
  if (!this->_internal_start_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsRequest.start_date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_start_date(), target);
  }

  // string end_date = 6;
  if (!this->_internal_end_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsRequest.end_date");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_end_date(), target);
  }

  // string project_id = 7;
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.UtteranceStatisticsRequest)
  return target;
}

size_t UtteranceStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string start_date = 5;
  if (!this->_internal_start_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 6;
  if (!this->_internal_end_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // string project_id = 7;
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // int32 days = 2;
  if (this->_internal_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());
  }

  // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
  if (this->_internal_scope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
  }

  // .speechly.analytics.v1.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtteranceStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtteranceStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtteranceStatisticsRequest::GetClassData() const { return &_class_data_; }

void UtteranceStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UtteranceStatisticsRequest *>(to)->MergeFrom(
      static_cast<const UtteranceStatisticsRequest &>(from));
}


void UtteranceStatisticsRequest::MergeFrom(const UtteranceStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_start_date().empty()) {
    _internal_set_start_date(from._internal_start_date());
  }
  if (!from._internal_end_date().empty()) {
    _internal_set_end_date(from._internal_end_date());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_days() != 0) {
    _internal_set_days(from._internal_days());
  }
  if (from._internal_scope() != 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from._internal_aggregation() != 0) {
    _internal_set_aggregation(from._internal_aggregation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtteranceStatisticsRequest::CopyFrom(const UtteranceStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtteranceStatisticsRequest::IsInitialized() const {
  return true;
}

void UtteranceStatisticsRequest::InternalSwap(UtteranceStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_date_, GetArenaForAllocation(),
      &other->start_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_date_, GetArenaForAllocation(),
      &other->end_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtteranceStatisticsRequest, aggregation_)
      + sizeof(UtteranceStatisticsRequest::aggregation_)
      - PROTOBUF_FIELD_OFFSET(UtteranceStatisticsRequest, days_)>(
          reinterpret_cast<char*>(&days_),
          reinterpret_cast<char*>(&other->days_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtteranceStatisticsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[0]);
}

// ===================================================================

class UtteranceStatisticsResponse::_Internal {
 public:
};

void UtteranceStatisticsResponse::clear_items() {
  items_.Clear();
}
UtteranceStatisticsResponse::UtteranceStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.UtteranceStatisticsResponse)
}
UtteranceStatisticsResponse::UtteranceStatisticsResponse(const UtteranceStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArenaForAllocation());
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_date(), 
      GetArenaForAllocation());
  }
  ::memcpy(&aggregation_, &from.aggregation_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_annotated_seconds_) -
    reinterpret_cast<char*>(&aggregation_)) + sizeof(total_annotated_seconds_));
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.UtteranceStatisticsResponse)
}

inline void UtteranceStatisticsResponse::SharedCtor() {
start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&aggregation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_annotated_seconds_) -
    reinterpret_cast<char*>(&aggregation_)) + sizeof(total_annotated_seconds_));
}

UtteranceStatisticsResponse::~UtteranceStatisticsResponse() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.UtteranceStatisticsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtteranceStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UtteranceStatisticsResponse::ArenaDtor(void* object) {
  UtteranceStatisticsResponse* _this = reinterpret_cast< UtteranceStatisticsResponse* >(object);
  (void)_this;
}
void UtteranceStatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtteranceStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtteranceStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  start_date_.ClearToEmpty();
  end_date_.ClearToEmpty();
  ::memset(&aggregation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_annotated_seconds_) -
      reinterpret_cast<char*>(&aggregation_)) + sizeof(total_annotated_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtteranceStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string start_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsResponse.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsResponse.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.Aggregation aggregation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::speechly::analytics::v1::Aggregation>(val));
        } else goto handle_unusual;
        continue;
      // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_utterances = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_utterances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_duration_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_annotated_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_annotated_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtteranceStatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (!this->_internal_start_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsResponse.start_date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_date(), target);
  }

  // string end_date = 2;
  if (!this->_internal_end_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsResponse.end_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_date(), target);
  }

  // .speechly.analytics.v1.Aggregation aggregation = 3;
  if (this->_internal_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggregation(), target);
  }

  // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_items(i), target, stream);
  }

  // int32 total_utterances = 5;
  if (this->_internal_total_utterances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_utterances(), target);
  }

  // int32 total_duration_seconds = 6;
  if (this->_internal_total_duration_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_duration_seconds(), target);
  }

  // int32 total_annotated_seconds = 7;
  if (this->_internal_total_annotated_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_annotated_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.UtteranceStatisticsResponse)
  return target;
}

size_t UtteranceStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string start_date = 1;
  if (!this->_internal_start_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 2;
  if (!this->_internal_end_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // .speechly.analytics.v1.Aggregation aggregation = 3;
  if (this->_internal_aggregation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  // int32 total_utterances = 5;
  if (this->_internal_total_utterances() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_utterances());
  }

  // int32 total_duration_seconds = 6;
  if (this->_internal_total_duration_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_duration_seconds());
  }

  // int32 total_annotated_seconds = 7;
  if (this->_internal_total_annotated_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_annotated_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtteranceStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtteranceStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtteranceStatisticsResponse::GetClassData() const { return &_class_data_; }

void UtteranceStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UtteranceStatisticsResponse *>(to)->MergeFrom(
      static_cast<const UtteranceStatisticsResponse &>(from));
}


void UtteranceStatisticsResponse::MergeFrom(const UtteranceStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from._internal_start_date().empty()) {
    _internal_set_start_date(from._internal_start_date());
  }
  if (!from._internal_end_date().empty()) {
    _internal_set_end_date(from._internal_end_date());
  }
  if (from._internal_aggregation() != 0) {
    _internal_set_aggregation(from._internal_aggregation());
  }
  if (from._internal_total_utterances() != 0) {
    _internal_set_total_utterances(from._internal_total_utterances());
  }
  if (from._internal_total_duration_seconds() != 0) {
    _internal_set_total_duration_seconds(from._internal_total_duration_seconds());
  }
  if (from._internal_total_annotated_seconds() != 0) {
    _internal_set_total_annotated_seconds(from._internal_total_annotated_seconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtteranceStatisticsResponse::CopyFrom(const UtteranceStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtteranceStatisticsResponse::IsInitialized() const {
  return true;
}

void UtteranceStatisticsResponse::InternalSwap(UtteranceStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_date_, GetArenaForAllocation(),
      &other->start_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_date_, GetArenaForAllocation(),
      &other->end_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtteranceStatisticsResponse, total_annotated_seconds_)
      + sizeof(UtteranceStatisticsResponse::total_annotated_seconds_)
      - PROTOBUF_FIELD_OFFSET(UtteranceStatisticsResponse, aggregation_)>(
          reinterpret_cast<char*>(&aggregation_),
          reinterpret_cast<char*>(&other->aggregation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtteranceStatisticsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[1]);
}

// ===================================================================

class UtterancesRequest::_Internal {
 public:
};

UtterancesRequest::UtterancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.UtterancesRequest)
}
UtterancesRequest::UtterancesRequest(const UtterancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.UtterancesRequest)
}

inline void UtterancesRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UtterancesRequest::~UtterancesRequest() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.UtterancesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtterancesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UtterancesRequest::ArenaDtor(void* object) {
  UtterancesRequest* _this = reinterpret_cast< UtterancesRequest* >(object);
  (void)_this;
}
void UtterancesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtterancesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtterancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.UtterancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtterancesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtterancesRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtterancesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.UtterancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtterancesRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.UtterancesRequest)
  return target;
}

size_t UtterancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.UtterancesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtterancesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtterancesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtterancesRequest::GetClassData() const { return &_class_data_; }

void UtterancesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UtterancesRequest *>(to)->MergeFrom(
      static_cast<const UtterancesRequest &>(from));
}


void UtterancesRequest::MergeFrom(const UtterancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.UtterancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtterancesRequest::CopyFrom(const UtterancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.UtterancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtterancesRequest::IsInitialized() const {
  return true;
}

void UtterancesRequest::InternalSwap(UtterancesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UtterancesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[2]);
}

// ===================================================================

class UtterancesResponse::_Internal {
 public:
};

void UtterancesResponse::clear_utterances() {
  utterances_.Clear();
}
UtterancesResponse::UtterancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  utterances_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.UtterancesResponse)
}
UtterancesResponse::UtterancesResponse(const UtterancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utterances_(from.utterances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.UtterancesResponse)
}

inline void UtterancesResponse::SharedCtor() {
}

UtterancesResponse::~UtterancesResponse() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.UtterancesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtterancesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UtterancesResponse::ArenaDtor(void* object) {
  UtterancesResponse* _this = reinterpret_cast< UtterancesResponse* >(object);
  (void)_this;
}
void UtterancesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtterancesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtterancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.UtterancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utterances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtterancesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.analytics.v1.Utterance utterances = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_utterances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtterancesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.UtterancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.analytics.v1.Utterance utterances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_utterances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_utterances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.UtterancesResponse)
  return target;
}

size_t UtterancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.UtterancesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.analytics.v1.Utterance utterances = 1;
  total_size += 1UL * this->_internal_utterances_size();
  for (const auto& msg : this->utterances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtterancesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtterancesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtterancesResponse::GetClassData() const { return &_class_data_; }

void UtterancesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UtterancesResponse *>(to)->MergeFrom(
      static_cast<const UtterancesResponse &>(from));
}


void UtterancesResponse::MergeFrom(const UtterancesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.UtterancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utterances_.MergeFrom(from.utterances_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtterancesResponse::CopyFrom(const UtterancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.UtterancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtterancesResponse::IsInitialized() const {
  return true;
}

void UtterancesResponse::InternalSwap(UtterancesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  utterances_.InternalSwap(&other->utterances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtterancesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[3]);
}

// ===================================================================

class RegisterUtteranceRequest::_Internal {
 public:
  static const ::speechly::analytics::v1::DecoderInfo& decoder_info(const RegisterUtteranceRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_time(const RegisterUtteranceRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& finished_time(const RegisterUtteranceRequest* msg);
  static const ::speechly::analytics::v1::ProcessingInfo& processing_info(const RegisterUtteranceRequest* msg);
};

const ::speechly::analytics::v1::DecoderInfo&
RegisterUtteranceRequest::_Internal::decoder_info(const RegisterUtteranceRequest* msg) {
  return *msg->decoder_info_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RegisterUtteranceRequest::_Internal::created_time(const RegisterUtteranceRequest* msg) {
  return *msg->created_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RegisterUtteranceRequest::_Internal::finished_time(const RegisterUtteranceRequest* msg) {
  return *msg->finished_time_;
}
const ::speechly::analytics::v1::ProcessingInfo&
RegisterUtteranceRequest::_Internal::processing_info(const RegisterUtteranceRequest* msg) {
  return *msg->processing_info_;
}
void RegisterUtteranceRequest::clear_decoder_info() {
  if (GetArenaForAllocation() == nullptr && decoder_info_ != nullptr) {
    delete decoder_info_;
  }
  decoder_info_ = nullptr;
}
void RegisterUtteranceRequest::clear_created_time() {
  if (GetArenaForAllocation() == nullptr && created_time_ != nullptr) {
    delete created_time_;
  }
  created_time_ = nullptr;
}
void RegisterUtteranceRequest::clear_finished_time() {
  if (GetArenaForAllocation() == nullptr && finished_time_ != nullptr) {
    delete finished_time_;
  }
  finished_time_ = nullptr;
}
void RegisterUtteranceRequest::clear_processing_info() {
  if (GetArenaForAllocation() == nullptr && processing_info_ != nullptr) {
    delete processing_info_;
  }
  processing_info_ = nullptr;
}
RegisterUtteranceRequest::RegisterUtteranceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.RegisterUtteranceRequest)
}
RegisterUtteranceRequest::RegisterUtteranceRequest(const RegisterUtteranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_id().empty()) {
    operation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation_id(), 
      GetArenaForAllocation());
  }
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_id().empty()) {
    batch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_batch_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_decoder_info()) {
    decoder_info_ = new ::speechly::analytics::v1::DecoderInfo(*from.decoder_info_);
  } else {
    decoder_info_ = nullptr;
  }
  if (from._internal_has_created_time()) {
    created_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_time_);
  } else {
    created_time_ = nullptr;
  }
  if (from._internal_has_finished_time()) {
    finished_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.finished_time_);
  } else {
    finished_time_ = nullptr;
  }
  if (from._internal_has_processing_info()) {
    processing_info_ = new ::speechly::analytics::v1::ProcessingInfo(*from.processing_info_);
  } else {
    processing_info_ = nullptr;
  }
  ::memcpy(&utterance_length_seconds_, &from.utterance_length_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&utterance_length_seconds_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.RegisterUtteranceRequest)
}

inline void RegisterUtteranceRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&decoder_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&decoder_info_)) + sizeof(status_));
}

RegisterUtteranceRequest::~RegisterUtteranceRequest() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.RegisterUtteranceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterUtteranceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decoder_info_;
  if (this != internal_default_instance()) delete created_time_;
  if (this != internal_default_instance()) delete finished_time_;
  if (this != internal_default_instance()) delete processing_info_;
}

void RegisterUtteranceRequest::ArenaDtor(void* object) {
  RegisterUtteranceRequest* _this = reinterpret_cast< RegisterUtteranceRequest* >(object);
  (void)_this;
}
void RegisterUtteranceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterUtteranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterUtteranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.RegisterUtteranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  device_id_.ClearToEmpty();
  operation_id_.ClearToEmpty();
  batch_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  language_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && decoder_info_ != nullptr) {
    delete decoder_info_;
  }
  decoder_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_time_ != nullptr) {
    delete created_time_;
  }
  created_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && finished_time_ != nullptr) {
    delete finished_time_;
  }
  finished_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && processing_info_ != nullptr) {
    delete processing_info_;
  }
  processing_info_ = nullptr;
  ::memset(&utterance_length_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&utterance_length_seconds_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUtteranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.RegisterUtteranceRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.RegisterUtteranceRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 utterance_length_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utterance_length_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 utterance_length_chars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          utterance_length_chars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.DecoderInfo decoder_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_decoder_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp finished_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_finished_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.RegisterUtteranceRequest.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::speechly::analytics::v1::RegisterUtteranceRequest_Status>(val));
        } else goto handle_unusual;
        continue;
      // string operation_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_operation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.RegisterUtteranceRequest.operation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string batch_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_batch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.RegisterUtteranceRequest.batch_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.RegisterUtteranceRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.RegisterUtteranceRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.ProcessingInfo processing_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterUtteranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.RegisterUtteranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.RegisterUtteranceRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.RegisterUtteranceRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // int32 utterance_length_seconds = 3;
  if (this->_internal_utterance_length_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_utterance_length_seconds(), target);
  }

  // int32 utterance_length_chars = 4;
  if (this->_internal_utterance_length_chars() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_utterance_length_chars(), target);
  }

  // .speechly.analytics.v1.DecoderInfo decoder_info = 5;
  if (this->_internal_has_decoder_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::decoder_info(this), target, stream);
  }

  // .google.protobuf.Timestamp created_time = 6;
  if (this->_internal_has_created_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_time(this), target, stream);
  }

  // .google.protobuf.Timestamp finished_time = 7;
  if (this->_internal_has_finished_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::finished_time(this), target, stream);
  }

  // .speechly.analytics.v1.RegisterUtteranceRequest.Status status = 8;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // string operation_id = 9;
  if (!this->_internal_operation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.RegisterUtteranceRequest.operation_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_operation_id(), target);
  }

  // string batch_id = 10;
  if (!this->_internal_batch_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_id().data(), static_cast<int>(this->_internal_batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.RegisterUtteranceRequest.batch_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_batch_id(), target);
  }

  // string project_id = 11;
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.RegisterUtteranceRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_project_id(), target);
  }

  // string language = 12;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.RegisterUtteranceRequest.language");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_language(), target);
  }

  // .speechly.analytics.v1.ProcessingInfo processing_info = 13;
  if (this->_internal_has_processing_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::processing_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.RegisterUtteranceRequest)
  return target;
}

size_t RegisterUtteranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.RegisterUtteranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string operation_id = 9;
  if (!this->_internal_operation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // string batch_id = 10;
  if (!this->_internal_batch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_id());
  }

  // string project_id = 11;
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string language = 12;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .speechly.analytics.v1.DecoderInfo decoder_info = 5;
  if (this->_internal_has_decoder_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *decoder_info_);
  }

  // .google.protobuf.Timestamp created_time = 6;
  if (this->_internal_has_created_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_time_);
  }

  // .google.protobuf.Timestamp finished_time = 7;
  if (this->_internal_has_finished_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *finished_time_);
  }

  // .speechly.analytics.v1.ProcessingInfo processing_info = 13;
  if (this->_internal_has_processing_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processing_info_);
  }

  // int32 utterance_length_seconds = 3;
  if (this->_internal_utterance_length_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_utterance_length_seconds());
  }

  // int32 utterance_length_chars = 4;
  if (this->_internal_utterance_length_chars() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_utterance_length_chars());
  }

  // .speechly.analytics.v1.RegisterUtteranceRequest.Status status = 8;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUtteranceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterUtteranceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUtteranceRequest::GetClassData() const { return &_class_data_; }

void RegisterUtteranceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RegisterUtteranceRequest *>(to)->MergeFrom(
      static_cast<const RegisterUtteranceRequest &>(from));
}


void RegisterUtteranceRequest::MergeFrom(const RegisterUtteranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.RegisterUtteranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_operation_id().empty()) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  if (!from._internal_batch_id().empty()) {
    _internal_set_batch_id(from._internal_batch_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_has_decoder_info()) {
    _internal_mutable_decoder_info()->::speechly::analytics::v1::DecoderInfo::MergeFrom(from._internal_decoder_info());
  }
  if (from._internal_has_created_time()) {
    _internal_mutable_created_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_time());
  }
  if (from._internal_has_finished_time()) {
    _internal_mutable_finished_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_finished_time());
  }
  if (from._internal_has_processing_info()) {
    _internal_mutable_processing_info()->::speechly::analytics::v1::ProcessingInfo::MergeFrom(from._internal_processing_info());
  }
  if (from._internal_utterance_length_seconds() != 0) {
    _internal_set_utterance_length_seconds(from._internal_utterance_length_seconds());
  }
  if (from._internal_utterance_length_chars() != 0) {
    _internal_set_utterance_length_chars(from._internal_utterance_length_chars());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUtteranceRequest::CopyFrom(const RegisterUtteranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.RegisterUtteranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUtteranceRequest::IsInitialized() const {
  return true;
}

void RegisterUtteranceRequest::InternalSwap(RegisterUtteranceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, GetArenaForAllocation(),
      &other->device_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operation_id_, GetArenaForAllocation(),
      &other->operation_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &batch_id_, GetArenaForAllocation(),
      &other->batch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, GetArenaForAllocation(),
      &other->language_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterUtteranceRequest, status_)
      + sizeof(RegisterUtteranceRequest::status_)
      - PROTOBUF_FIELD_OFFSET(RegisterUtteranceRequest, decoder_info_)>(
          reinterpret_cast<char*>(&decoder_info_),
          reinterpret_cast<char*>(&other->decoder_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUtteranceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[4]);
}

// ===================================================================

class RegisterUtteranceResponse::_Internal {
 public:
};

RegisterUtteranceResponse::RegisterUtteranceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.RegisterUtteranceResponse)
}
RegisterUtteranceResponse::RegisterUtteranceResponse(const RegisterUtteranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.RegisterUtteranceResponse)
}

inline void RegisterUtteranceResponse::SharedCtor() {
}

RegisterUtteranceResponse::~RegisterUtteranceResponse() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.RegisterUtteranceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterUtteranceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterUtteranceResponse::ArenaDtor(void* object) {
  RegisterUtteranceResponse* _this = reinterpret_cast< RegisterUtteranceResponse* >(object);
  (void)_this;
}
void RegisterUtteranceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterUtteranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterUtteranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.RegisterUtteranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUtteranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterUtteranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.RegisterUtteranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.RegisterUtteranceResponse)
  return target;
}

size_t RegisterUtteranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.RegisterUtteranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUtteranceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterUtteranceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUtteranceResponse::GetClassData() const { return &_class_data_; }

void RegisterUtteranceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RegisterUtteranceResponse *>(to)->MergeFrom(
      static_cast<const RegisterUtteranceResponse &>(from));
}


void RegisterUtteranceResponse::MergeFrom(const RegisterUtteranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.RegisterUtteranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUtteranceResponse::CopyFrom(const RegisterUtteranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.RegisterUtteranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUtteranceResponse::IsInitialized() const {
  return true;
}

void RegisterUtteranceResponse::InternalSwap(RegisterUtteranceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUtteranceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[5]);
}

// ===================================================================

class RegisterUtterancesRequest::_Internal {
 public:
};

RegisterUtterancesRequest::RegisterUtterancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.RegisterUtterancesRequest)
}
RegisterUtterancesRequest::RegisterUtterancesRequest(const RegisterUtterancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.RegisterUtterancesRequest)
}

inline void RegisterUtterancesRequest::SharedCtor() {
}

RegisterUtterancesRequest::~RegisterUtterancesRequest() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.RegisterUtterancesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterUtterancesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterUtterancesRequest::ArenaDtor(void* object) {
  RegisterUtterancesRequest* _this = reinterpret_cast< RegisterUtterancesRequest* >(object);
  (void)_this;
}
void RegisterUtterancesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterUtterancesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterUtterancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.RegisterUtterancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUtterancesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .speechly.analytics.v1.RegisterUtteranceRequest requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterUtterancesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.RegisterUtterancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.analytics.v1.RegisterUtteranceRequest requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.RegisterUtterancesRequest)
  return target;
}

size_t RegisterUtterancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.RegisterUtterancesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.analytics.v1.RegisterUtteranceRequest requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUtterancesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterUtterancesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUtterancesRequest::GetClassData() const { return &_class_data_; }

void RegisterUtterancesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RegisterUtterancesRequest *>(to)->MergeFrom(
      static_cast<const RegisterUtterancesRequest &>(from));
}


void RegisterUtterancesRequest::MergeFrom(const RegisterUtterancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.RegisterUtterancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUtterancesRequest::CopyFrom(const RegisterUtterancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.RegisterUtterancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUtterancesRequest::IsInitialized() const {
  return true;
}

void RegisterUtterancesRequest::InternalSwap(RegisterUtterancesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUtterancesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[6]);
}

// ===================================================================

class RegisterUtterancesResponse::_Internal {
 public:
};

RegisterUtterancesResponse::RegisterUtterancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.RegisterUtterancesResponse)
}
RegisterUtterancesResponse::RegisterUtterancesResponse(const RegisterUtterancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.RegisterUtterancesResponse)
}

inline void RegisterUtterancesResponse::SharedCtor() {
}

RegisterUtterancesResponse::~RegisterUtterancesResponse() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.RegisterUtterancesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterUtterancesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterUtterancesResponse::ArenaDtor(void* object) {
  RegisterUtterancesResponse* _this = reinterpret_cast< RegisterUtterancesResponse* >(object);
  (void)_this;
}
void RegisterUtterancesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterUtterancesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterUtterancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.RegisterUtterancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUtterancesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterUtterancesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.RegisterUtterancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.RegisterUtterancesResponse)
  return target;
}

size_t RegisterUtterancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.RegisterUtterancesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUtterancesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterUtterancesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUtterancesResponse::GetClassData() const { return &_class_data_; }

void RegisterUtterancesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RegisterUtterancesResponse *>(to)->MergeFrom(
      static_cast<const RegisterUtterancesResponse &>(from));
}


void RegisterUtterancesResponse::MergeFrom(const RegisterUtterancesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.RegisterUtterancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUtterancesResponse::CopyFrom(const RegisterUtterancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.RegisterUtterancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUtterancesResponse::IsInitialized() const {
  return true;
}

void RegisterUtterancesResponse::InternalSwap(RegisterUtterancesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUtterancesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::UtteranceStatisticsRequest* Arena::CreateMaybeMessage< ::speechly::analytics::v1::UtteranceStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::UtteranceStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::UtteranceStatisticsResponse* Arena::CreateMaybeMessage< ::speechly::analytics::v1::UtteranceStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::UtteranceStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::UtterancesRequest* Arena::CreateMaybeMessage< ::speechly::analytics::v1::UtterancesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::UtterancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::UtterancesResponse* Arena::CreateMaybeMessage< ::speechly::analytics::v1::UtterancesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::UtterancesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::RegisterUtteranceRequest* Arena::CreateMaybeMessage< ::speechly::analytics::v1::RegisterUtteranceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::RegisterUtteranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::RegisterUtteranceResponse* Arena::CreateMaybeMessage< ::speechly::analytics::v1::RegisterUtteranceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::RegisterUtteranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::RegisterUtterancesRequest* Arena::CreateMaybeMessage< ::speechly::analytics::v1::RegisterUtterancesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::RegisterUtterancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::RegisterUtterancesResponse* Arena::CreateMaybeMessage< ::speechly::analytics::v1::RegisterUtterancesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::RegisterUtterancesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
