// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/analytics/v1/analytics_api.proto

#include "speechly/analytics/v1/analytics_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace speechly {
namespace analytics {
namespace v1 {
constexpr UtteranceStatisticsRequest::UtteranceStatisticsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , days_(0)
  , scope_(0)

  , aggregation_(0)
{}
struct UtteranceStatisticsRequestDefaultTypeInternal {
  constexpr UtteranceStatisticsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtteranceStatisticsRequestDefaultTypeInternal() {}
  union {
    UtteranceStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtteranceStatisticsRequestDefaultTypeInternal _UtteranceStatisticsRequest_default_instance_;
constexpr UtteranceStatisticsResponse::UtteranceStatisticsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , start_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , aggregation_(0)

  , total_utterances_(0)
  , total_duration_seconds_(0)
  , total_annotated_seconds_(0){}
struct UtteranceStatisticsResponseDefaultTypeInternal {
  constexpr UtteranceStatisticsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtteranceStatisticsResponseDefaultTypeInternal() {}
  union {
    UtteranceStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtteranceStatisticsResponseDefaultTypeInternal _UtteranceStatisticsResponse_default_instance_;
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, days_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, aggregation_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, start_date_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsRequest, end_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, start_date_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, end_date_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, aggregation_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, items_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, total_utterances_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, total_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::speechly::analytics::v1::UtteranceStatisticsResponse, total_annotated_seconds_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::analytics::v1::UtteranceStatisticsRequest)},
  { 11, -1, sizeof(::speechly::analytics::v1::UtteranceStatisticsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_UtteranceStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::analytics::v1::_UtteranceStatisticsResponse_default_instance_),
};

const char descriptor_table_protodef_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)speechly/analytics/v1/analytics_api.pr"
  "oto\022\025speechly.analytics.v1\032%speechly/ana"
  "lytics/v1/analytics.proto\"\271\002\n\032UtteranceS"
  "tatisticsRequest\022\016\n\006app_id\030\001 \001(\t\022\014\n\004days"
  "\030\002 \001(\005\022F\n\005scope\030\003 \001(\01627.speechly.analyti"
  "cs.v1.UtteranceStatisticsRequest.Scope\0227"
  "\n\013aggregation\030\004 \001(\0162\".speechly.analytics"
  ".v1.Aggregation\022\022\n\nstart_date\030\005 \001(\t\022\020\n\010e"
  "nd_date\030\006 \001(\t\"V\n\005Scope\022\021\n\rSCOPE_INVALID\020"
  "\000\022\024\n\020SCOPE_UTTERANCES\020\001\022\025\n\021SCOPE_ANNOTAT"
  "IONS\020\002\022\r\n\tSCOPE_ALL\020\003\"\230\002\n\033UtteranceStati"
  "sticsResponse\022\022\n\nstart_date\030\001 \001(\t\022\020\n\010end"
  "_date\030\002 \001(\t\0227\n\013aggregation\030\003 \001(\0162\".speec"
  "hly.analytics.v1.Aggregation\022\?\n\005items\030\004 "
  "\003(\01320.speechly.analytics.v1.UtteranceSta"
  "tisticsPeriod\022\030\n\020total_utterances\030\005 \001(\005\022"
  "\036\n\026total_duration_seconds\030\006 \001(\005\022\037\n\027total"
  "_annotated_seconds\030\007 \001(\0052\214\001\n\014AnalyticsAP"
  "I\022|\n\023UtteranceStatistics\0221.speechly.anal"
  "ytics.v1.UtteranceStatisticsRequest\0322.sp"
  "eechly.analytics.v1.UtteranceStatisticsR"
  "esponseB\211\001\n\031com.speechly.analytics.v1B\021A"
  "nalyticsApiProtoP\001Z!speechly/analytics/v"
  "1;analyticsv1\242\002\003SAX\252\002\025Speechly.Analytics"
  ".V1\312\002\025Speechly\\Analytics\\V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_deps[1] = {
  &::descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto = {
  false, false, 995, descriptor_table_protodef_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto, "speechly/analytics/v1/analytics_api.proto", 
  &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once, descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto::offsets,
  file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto, file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto, file_level_service_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter() {
  return &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto(&descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto);
namespace speechly {
namespace analytics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UtteranceStatisticsRequest_Scope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto);
  return file_level_enum_descriptors_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[0];
}
bool UtteranceStatisticsRequest_Scope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_INVALID;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_UTTERANCES;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_ANNOTATIONS;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::SCOPE_ALL;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::Scope_MIN;
constexpr UtteranceStatisticsRequest_Scope UtteranceStatisticsRequest::Scope_MAX;
constexpr int UtteranceStatisticsRequest::Scope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class UtteranceStatisticsRequest::_Internal {
 public:
};

UtteranceStatisticsRequest::UtteranceStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.UtteranceStatisticsRequest)
}
UtteranceStatisticsRequest::UtteranceStatisticsRequest(const UtteranceStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArenaForAllocation());
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_date(), 
      GetArenaForAllocation());
  }
  ::memcpy(&days_, &from.days_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggregation_) -
    reinterpret_cast<char*>(&days_)) + sizeof(aggregation_));
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.UtteranceStatisticsRequest)
}

inline void UtteranceStatisticsRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&days_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aggregation_) -
    reinterpret_cast<char*>(&days_)) + sizeof(aggregation_));
}

UtteranceStatisticsRequest::~UtteranceStatisticsRequest() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.UtteranceStatisticsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtteranceStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UtteranceStatisticsRequest::ArenaDtor(void* object) {
  UtteranceStatisticsRequest* _this = reinterpret_cast< UtteranceStatisticsRequest* >(object);
  (void)_this;
}
void UtteranceStatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtteranceStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtteranceStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  start_date_.ClearToEmpty();
  end_date_.ClearToEmpty();
  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_) -
      reinterpret_cast<char*>(&days_)) + sizeof(aggregation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtteranceStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scope(static_cast<::speechly::analytics::v1::UtteranceStatisticsRequest_Scope>(val));
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.Aggregation aggregation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::speechly::analytics::v1::Aggregation>(val));
        } else goto handle_unusual;
        continue;
      // string start_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsRequest.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsRequest.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtteranceStatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // int32 days = 2;
  if (this->_internal_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_days(), target);
  }

  // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
  if (this->_internal_scope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_scope(), target);
  }

  // .speechly.analytics.v1.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_aggregation(), target);
  }

  // string start_date = 5;
  if (!this->_internal_start_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsRequest.start_date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_start_date(), target);
  }

  // string end_date = 6;
  if (!this->_internal_end_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsRequest.end_date");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_end_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.UtteranceStatisticsRequest)
  return target;
}

size_t UtteranceStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string start_date = 5;
  if (!this->_internal_start_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 6;
  if (!this->_internal_end_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // int32 days = 2;
  if (this->_internal_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());
  }

  // .speechly.analytics.v1.UtteranceStatisticsRequest.Scope scope = 3;
  if (this->_internal_scope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
  }

  // .speechly.analytics.v1.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtteranceStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtteranceStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtteranceStatisticsRequest::GetClassData() const { return &_class_data_; }

void UtteranceStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UtteranceStatisticsRequest *>(to)->MergeFrom(
      static_cast<const UtteranceStatisticsRequest &>(from));
}


void UtteranceStatisticsRequest::MergeFrom(const UtteranceStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_start_date().empty()) {
    _internal_set_start_date(from._internal_start_date());
  }
  if (!from._internal_end_date().empty()) {
    _internal_set_end_date(from._internal_end_date());
  }
  if (from._internal_days() != 0) {
    _internal_set_days(from._internal_days());
  }
  if (from._internal_scope() != 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from._internal_aggregation() != 0) {
    _internal_set_aggregation(from._internal_aggregation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtteranceStatisticsRequest::CopyFrom(const UtteranceStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.UtteranceStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtteranceStatisticsRequest::IsInitialized() const {
  return true;
}

void UtteranceStatisticsRequest::InternalSwap(UtteranceStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, GetArenaForAllocation(),
      &other->app_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_date_, GetArenaForAllocation(),
      &other->start_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_date_, GetArenaForAllocation(),
      &other->end_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtteranceStatisticsRequest, aggregation_)
      + sizeof(UtteranceStatisticsRequest::aggregation_)
      - PROTOBUF_FIELD_OFFSET(UtteranceStatisticsRequest, days_)>(
          reinterpret_cast<char*>(&days_),
          reinterpret_cast<char*>(&other->days_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtteranceStatisticsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[0]);
}

// ===================================================================

class UtteranceStatisticsResponse::_Internal {
 public:
};

void UtteranceStatisticsResponse::clear_items() {
  items_.Clear();
}
UtteranceStatisticsResponse::UtteranceStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:speechly.analytics.v1.UtteranceStatisticsResponse)
}
UtteranceStatisticsResponse::UtteranceStatisticsResponse(const UtteranceStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArenaForAllocation());
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_date(), 
      GetArenaForAllocation());
  }
  ::memcpy(&aggregation_, &from.aggregation_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_annotated_seconds_) -
    reinterpret_cast<char*>(&aggregation_)) + sizeof(total_annotated_seconds_));
  // @@protoc_insertion_point(copy_constructor:speechly.analytics.v1.UtteranceStatisticsResponse)
}

inline void UtteranceStatisticsResponse::SharedCtor() {
start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&aggregation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_annotated_seconds_) -
    reinterpret_cast<char*>(&aggregation_)) + sizeof(total_annotated_seconds_));
}

UtteranceStatisticsResponse::~UtteranceStatisticsResponse() {
  // @@protoc_insertion_point(destructor:speechly.analytics.v1.UtteranceStatisticsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtteranceStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UtteranceStatisticsResponse::ArenaDtor(void* object) {
  UtteranceStatisticsResponse* _this = reinterpret_cast< UtteranceStatisticsResponse* >(object);
  (void)_this;
}
void UtteranceStatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtteranceStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtteranceStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  start_date_.ClearToEmpty();
  end_date_.ClearToEmpty();
  ::memset(&aggregation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_annotated_seconds_) -
      reinterpret_cast<char*>(&aggregation_)) + sizeof(total_annotated_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtteranceStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string start_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsResponse.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speechly.analytics.v1.UtteranceStatisticsResponse.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .speechly.analytics.v1.Aggregation aggregation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::speechly::analytics::v1::Aggregation>(val));
        } else goto handle_unusual;
        continue;
      // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_utterances = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_utterances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_duration_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_annotated_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_annotated_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtteranceStatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (!this->_internal_start_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsResponse.start_date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_date(), target);
  }

  // string end_date = 2;
  if (!this->_internal_end_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.analytics.v1.UtteranceStatisticsResponse.end_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_date(), target);
  }

  // .speechly.analytics.v1.Aggregation aggregation = 3;
  if (this->_internal_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggregation(), target);
  }

  // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_items(i), target, stream);
  }

  // int32 total_utterances = 5;
  if (this->_internal_total_utterances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_utterances(), target);
  }

  // int32 total_duration_seconds = 6;
  if (this->_internal_total_duration_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_duration_seconds(), target);
  }

  // int32 total_annotated_seconds = 7;
  if (this->_internal_total_annotated_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_annotated_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.analytics.v1.UtteranceStatisticsResponse)
  return target;
}

size_t UtteranceStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.analytics.v1.UtteranceStatisticsPeriod items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string start_date = 1;
  if (!this->_internal_start_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 2;
  if (!this->_internal_end_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // .speechly.analytics.v1.Aggregation aggregation = 3;
  if (this->_internal_aggregation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  // int32 total_utterances = 5;
  if (this->_internal_total_utterances() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_utterances());
  }

  // int32 total_duration_seconds = 6;
  if (this->_internal_total_duration_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_duration_seconds());
  }

  // int32 total_annotated_seconds = 7;
  if (this->_internal_total_annotated_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_annotated_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtteranceStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtteranceStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtteranceStatisticsResponse::GetClassData() const { return &_class_data_; }

void UtteranceStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UtteranceStatisticsResponse *>(to)->MergeFrom(
      static_cast<const UtteranceStatisticsResponse &>(from));
}


void UtteranceStatisticsResponse::MergeFrom(const UtteranceStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from._internal_start_date().empty()) {
    _internal_set_start_date(from._internal_start_date());
  }
  if (!from._internal_end_date().empty()) {
    _internal_set_end_date(from._internal_end_date());
  }
  if (from._internal_aggregation() != 0) {
    _internal_set_aggregation(from._internal_aggregation());
  }
  if (from._internal_total_utterances() != 0) {
    _internal_set_total_utterances(from._internal_total_utterances());
  }
  if (from._internal_total_duration_seconds() != 0) {
    _internal_set_total_duration_seconds(from._internal_total_duration_seconds());
  }
  if (from._internal_total_annotated_seconds() != 0) {
    _internal_set_total_annotated_seconds(from._internal_total_annotated_seconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtteranceStatisticsResponse::CopyFrom(const UtteranceStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.analytics.v1.UtteranceStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtteranceStatisticsResponse::IsInitialized() const {
  return true;
}

void UtteranceStatisticsResponse::InternalSwap(UtteranceStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_date_, GetArenaForAllocation(),
      &other->start_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_date_, GetArenaForAllocation(),
      &other->end_date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtteranceStatisticsResponse, total_annotated_seconds_)
      + sizeof(UtteranceStatisticsResponse::total_annotated_seconds_)
      - PROTOBUF_FIELD_OFFSET(UtteranceStatisticsResponse, aggregation_)>(
          reinterpret_cast<char*>(&aggregation_),
          reinterpret_cast<char*>(&other->aggregation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtteranceStatisticsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_getter, &descriptor_table_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto_once,
      file_level_metadata_speechly_2fanalytics_2fv1_2fanalytics_5fapi_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace analytics
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::UtteranceStatisticsRequest* Arena::CreateMaybeMessage< ::speechly::analytics::v1::UtteranceStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::UtteranceStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::analytics::v1::UtteranceStatisticsResponse* Arena::CreateMaybeMessage< ::speechly::analytics::v1::UtteranceStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speechly::analytics::v1::UtteranceStatisticsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
