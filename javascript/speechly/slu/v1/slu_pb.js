// source: speechly/slu/v1/slu.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.speechly.slu.v1.SLUConfig', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUConfig.Encoding', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUEntity', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUError', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUEvent', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUEvent.Event', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUFinished', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUIntent', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLURequest', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLURequest.StreamingRequestCase', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUResponse', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUResponse.StreamingResponseCase', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUSegmentEnd', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUStarted', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUTentativeEntities', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUTentativeTranscript', null, global);
goog.exportSymbol('proto.speechly.slu.v1.SLUTranscript', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLURequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speechly.slu.v1.SLURequest.oneofGroups_);
};
goog.inherits(proto.speechly.slu.v1.SLURequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLURequest.displayName = 'proto.speechly.slu.v1.SLURequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUConfig.displayName = 'proto.speechly.slu.v1.SLUConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUEvent.displayName = 'proto.speechly.slu.v1.SLUEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speechly.slu.v1.SLUResponse.oneofGroups_);
};
goog.inherits(proto.speechly.slu.v1.SLUResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUResponse.displayName = 'proto.speechly.slu.v1.SLUResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUTranscript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUTranscript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUTranscript.displayName = 'proto.speechly.slu.v1.SLUTranscript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUEntity.displayName = 'proto.speechly.slu.v1.SLUEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUIntent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUIntent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUIntent.displayName = 'proto.speechly.slu.v1.SLUIntent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUSegmentEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUSegmentEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUSegmentEnd.displayName = 'proto.speechly.slu.v1.SLUSegmentEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUTentativeTranscript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechly.slu.v1.SLUTentativeTranscript.repeatedFields_, null);
};
goog.inherits(proto.speechly.slu.v1.SLUTentativeTranscript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUTentativeTranscript.displayName = 'proto.speechly.slu.v1.SLUTentativeTranscript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUTentativeEntities = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechly.slu.v1.SLUTentativeEntities.repeatedFields_, null);
};
goog.inherits(proto.speechly.slu.v1.SLUTentativeEntities, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUTentativeEntities.displayName = 'proto.speechly.slu.v1.SLUTentativeEntities';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUStarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUStarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUStarted.displayName = 'proto.speechly.slu.v1.SLUStarted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUFinished = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUFinished, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUFinished.displayName = 'proto.speechly.slu.v1.SLUFinished';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.SLUError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.SLUError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.SLUError.displayName = 'proto.speechly.slu.v1.SLUError';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speechly.slu.v1.SLURequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.speechly.slu.v1.SLURequest.StreamingRequestCase = {
  STREAMING_REQUEST_NOT_SET: 0,
  CONFIG: 1,
  EVENT: 2,
  AUDIO: 3
};

/**
 * @return {proto.speechly.slu.v1.SLURequest.StreamingRequestCase}
 */
proto.speechly.slu.v1.SLURequest.prototype.getStreamingRequestCase = function() {
  return /** @type {proto.speechly.slu.v1.SLURequest.StreamingRequestCase} */(jspb.Message.computeOneofCase(this, proto.speechly.slu.v1.SLURequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLURequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLURequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLURequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLURequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.speechly.slu.v1.SLUConfig.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.speechly.slu.v1.SLUEvent.toObject(includeInstance, f),
    audio: msg.getAudio_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLURequest}
 */
proto.speechly.slu.v1.SLURequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLURequest;
  return proto.speechly.slu.v1.SLURequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLURequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLURequest}
 */
proto.speechly.slu.v1.SLURequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechly.slu.v1.SLUConfig;
      reader.readMessage(value,proto.speechly.slu.v1.SLUConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.speechly.slu.v1.SLUEvent;
      reader.readMessage(value,proto.speechly.slu.v1.SLUEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLURequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLURequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLURequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLURequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speechly.slu.v1.SLUConfig.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speechly.slu.v1.SLUEvent.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional SLUConfig config = 1;
 * @return {?proto.speechly.slu.v1.SLUConfig}
 */
proto.speechly.slu.v1.SLURequest.prototype.getConfig = function() {
  return /** @type{?proto.speechly.slu.v1.SLUConfig} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUConfig, 1));
};


/**
 * @param {?proto.speechly.slu.v1.SLUConfig|undefined} value
 * @return {!proto.speechly.slu.v1.SLURequest} returns this
*/
proto.speechly.slu.v1.SLURequest.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.speechly.slu.v1.SLURequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLURequest} returns this
 */
proto.speechly.slu.v1.SLURequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLURequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SLUEvent event = 2;
 * @return {?proto.speechly.slu.v1.SLUEvent}
 */
proto.speechly.slu.v1.SLURequest.prototype.getEvent = function() {
  return /** @type{?proto.speechly.slu.v1.SLUEvent} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUEvent, 2));
};


/**
 * @param {?proto.speechly.slu.v1.SLUEvent|undefined} value
 * @return {!proto.speechly.slu.v1.SLURequest} returns this
*/
proto.speechly.slu.v1.SLURequest.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.speechly.slu.v1.SLURequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLURequest} returns this
 */
proto.speechly.slu.v1.SLURequest.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLURequest.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes audio = 3;
 * @return {!(string|Uint8Array)}
 */
proto.speechly.slu.v1.SLURequest.prototype.getAudio = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes audio = 3;
 * This is a type-conversion wrapper around `getAudio()`
 * @return {string}
 */
proto.speechly.slu.v1.SLURequest.prototype.getAudio_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudio()));
};


/**
 * optional bytes audio = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudio()`
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLURequest.prototype.getAudio_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudio()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.speechly.slu.v1.SLURequest} returns this
 */
proto.speechly.slu.v1.SLURequest.prototype.setAudio = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.speechly.slu.v1.SLURequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speechly.slu.v1.SLURequest} returns this
 */
proto.speechly.slu.v1.SLURequest.prototype.clearAudio = function() {
  return jspb.Message.setOneofField(this, 3, proto.speechly.slu.v1.SLURequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLURequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoding: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sampleRateHertz: jspb.Message.getFieldWithDefault(msg, 3, 0),
    languageCode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUConfig}
 */
proto.speechly.slu.v1.SLUConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUConfig;
  return proto.speechly.slu.v1.SLUConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUConfig}
 */
proto.speechly.slu.v1.SLUConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechly.slu.v1.SLUConfig.Encoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleRateHertz(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChannels();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSampleRateHertz();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.speechly.slu.v1.SLUConfig.Encoding = {
  LINEAR16: 0
};

/**
 * optional Encoding encoding = 1;
 * @return {!proto.speechly.slu.v1.SLUConfig.Encoding}
 */
proto.speechly.slu.v1.SLUConfig.prototype.getEncoding = function() {
  return /** @type {!proto.speechly.slu.v1.SLUConfig.Encoding} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechly.slu.v1.SLUConfig.Encoding} value
 * @return {!proto.speechly.slu.v1.SLUConfig} returns this
 */
proto.speechly.slu.v1.SLUConfig.prototype.setEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 channels = 2;
 * @return {number}
 */
proto.speechly.slu.v1.SLUConfig.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUConfig} returns this
 */
proto.speechly.slu.v1.SLUConfig.prototype.setChannels = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 sample_rate_hertz = 3;
 * @return {number}
 */
proto.speechly.slu.v1.SLUConfig.prototype.getSampleRateHertz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUConfig} returns this
 */
proto.speechly.slu.v1.SLUConfig.prototype.setSampleRateHertz = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string language_code = 4;
 * @return {string}
 */
proto.speechly.slu.v1.SLUConfig.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUConfig} returns this
 */
proto.speechly.slu.v1.SLUConfig.prototype.setLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUEvent}
 */
proto.speechly.slu.v1.SLUEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUEvent;
  return proto.speechly.slu.v1.SLUEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUEvent}
 */
proto.speechly.slu.v1.SLUEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechly.slu.v1.SLUEvent.Event} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.speechly.slu.v1.SLUEvent.Event = {
  START: 0,
  STOP: 1
};

/**
 * optional Event event = 1;
 * @return {!proto.speechly.slu.v1.SLUEvent.Event}
 */
proto.speechly.slu.v1.SLUEvent.prototype.getEvent = function() {
  return /** @type {!proto.speechly.slu.v1.SLUEvent.Event} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechly.slu.v1.SLUEvent.Event} value
 * @return {!proto.speechly.slu.v1.SLUEvent} returns this
 */
proto.speechly.slu.v1.SLUEvent.prototype.setEvent = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speechly.slu.v1.SLUResponse.oneofGroups_ = [[3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.speechly.slu.v1.SLUResponse.StreamingResponseCase = {
  STREAMING_RESPONSE_NOT_SET: 0,
  TRANSCRIPT: 3,
  ENTITY: 4,
  INTENT: 5,
  SEGMENT_END: 6,
  TENTATIVE_TRANSCRIPT: 7,
  TENTATIVE_ENTITIES: 8,
  TENTATIVE_INTENT: 9,
  STARTED: 10,
  FINISHED: 11
};

/**
 * @return {proto.speechly.slu.v1.SLUResponse.StreamingResponseCase}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getStreamingResponseCase = function() {
  return /** @type {proto.speechly.slu.v1.SLUResponse.StreamingResponseCase} */(jspb.Message.computeOneofCase(this, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioContext: jspb.Message.getFieldWithDefault(msg, 1, ""),
    segmentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transcript: (f = msg.getTranscript()) && proto.speechly.slu.v1.SLUTranscript.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && proto.speechly.slu.v1.SLUEntity.toObject(includeInstance, f),
    intent: (f = msg.getIntent()) && proto.speechly.slu.v1.SLUIntent.toObject(includeInstance, f),
    segmentEnd: (f = msg.getSegmentEnd()) && proto.speechly.slu.v1.SLUSegmentEnd.toObject(includeInstance, f),
    tentativeTranscript: (f = msg.getTentativeTranscript()) && proto.speechly.slu.v1.SLUTentativeTranscript.toObject(includeInstance, f),
    tentativeEntities: (f = msg.getTentativeEntities()) && proto.speechly.slu.v1.SLUTentativeEntities.toObject(includeInstance, f),
    tentativeIntent: (f = msg.getTentativeIntent()) && proto.speechly.slu.v1.SLUIntent.toObject(includeInstance, f),
    started: (f = msg.getStarted()) && proto.speechly.slu.v1.SLUStarted.toObject(includeInstance, f),
    finished: (f = msg.getFinished()) && proto.speechly.slu.v1.SLUFinished.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUResponse}
 */
proto.speechly.slu.v1.SLUResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUResponse;
  return proto.speechly.slu.v1.SLUResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUResponse}
 */
proto.speechly.slu.v1.SLUResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudioContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSegmentId(value);
      break;
    case 3:
      var value = new proto.speechly.slu.v1.SLUTranscript;
      reader.readMessage(value,proto.speechly.slu.v1.SLUTranscript.deserializeBinaryFromReader);
      msg.setTranscript(value);
      break;
    case 4:
      var value = new proto.speechly.slu.v1.SLUEntity;
      reader.readMessage(value,proto.speechly.slu.v1.SLUEntity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    case 5:
      var value = new proto.speechly.slu.v1.SLUIntent;
      reader.readMessage(value,proto.speechly.slu.v1.SLUIntent.deserializeBinaryFromReader);
      msg.setIntent(value);
      break;
    case 6:
      var value = new proto.speechly.slu.v1.SLUSegmentEnd;
      reader.readMessage(value,proto.speechly.slu.v1.SLUSegmentEnd.deserializeBinaryFromReader);
      msg.setSegmentEnd(value);
      break;
    case 7:
      var value = new proto.speechly.slu.v1.SLUTentativeTranscript;
      reader.readMessage(value,proto.speechly.slu.v1.SLUTentativeTranscript.deserializeBinaryFromReader);
      msg.setTentativeTranscript(value);
      break;
    case 8:
      var value = new proto.speechly.slu.v1.SLUTentativeEntities;
      reader.readMessage(value,proto.speechly.slu.v1.SLUTentativeEntities.deserializeBinaryFromReader);
      msg.setTentativeEntities(value);
      break;
    case 9:
      var value = new proto.speechly.slu.v1.SLUIntent;
      reader.readMessage(value,proto.speechly.slu.v1.SLUIntent.deserializeBinaryFromReader);
      msg.setTentativeIntent(value);
      break;
    case 10:
      var value = new proto.speechly.slu.v1.SLUStarted;
      reader.readMessage(value,proto.speechly.slu.v1.SLUStarted.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    case 11:
      var value = new proto.speechly.slu.v1.SLUFinished;
      reader.readMessage(value,proto.speechly.slu.v1.SLUFinished.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioContext();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSegmentId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTranscript();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.speechly.slu.v1.SLUTranscript.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.speechly.slu.v1.SLUEntity.serializeBinaryToWriter
    );
  }
  f = message.getIntent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.speechly.slu.v1.SLUIntent.serializeBinaryToWriter
    );
  }
  f = message.getSegmentEnd();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.speechly.slu.v1.SLUSegmentEnd.serializeBinaryToWriter
    );
  }
  f = message.getTentativeTranscript();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.speechly.slu.v1.SLUTentativeTranscript.serializeBinaryToWriter
    );
  }
  f = message.getTentativeEntities();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.speechly.slu.v1.SLUTentativeEntities.serializeBinaryToWriter
    );
  }
  f = message.getTentativeIntent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.speechly.slu.v1.SLUIntent.serializeBinaryToWriter
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.speechly.slu.v1.SLUStarted.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.speechly.slu.v1.SLUFinished.serializeBinaryToWriter
    );
  }
};


/**
 * optional string audio_context = 1;
 * @return {string}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getAudioContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.setAudioContext = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 segment_id = 2;
 * @return {number}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getSegmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.setSegmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SLUTranscript transcript = 3;
 * @return {?proto.speechly.slu.v1.SLUTranscript}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getTranscript = function() {
  return /** @type{?proto.speechly.slu.v1.SLUTranscript} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUTranscript, 3));
};


/**
 * @param {?proto.speechly.slu.v1.SLUTranscript|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setTranscript = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearTranscript = function() {
  return this.setTranscript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasTranscript = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SLUEntity entity = 4;
 * @return {?proto.speechly.slu.v1.SLUEntity}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getEntity = function() {
  return /** @type{?proto.speechly.slu.v1.SLUEntity} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUEntity, 4));
};


/**
 * @param {?proto.speechly.slu.v1.SLUEntity|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setEntity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearEntity = function() {
  return this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SLUIntent intent = 5;
 * @return {?proto.speechly.slu.v1.SLUIntent}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getIntent = function() {
  return /** @type{?proto.speechly.slu.v1.SLUIntent} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUIntent, 5));
};


/**
 * @param {?proto.speechly.slu.v1.SLUIntent|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setIntent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearIntent = function() {
  return this.setIntent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasIntent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SLUSegmentEnd segment_end = 6;
 * @return {?proto.speechly.slu.v1.SLUSegmentEnd}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getSegmentEnd = function() {
  return /** @type{?proto.speechly.slu.v1.SLUSegmentEnd} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUSegmentEnd, 6));
};


/**
 * @param {?proto.speechly.slu.v1.SLUSegmentEnd|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setSegmentEnd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearSegmentEnd = function() {
  return this.setSegmentEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasSegmentEnd = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SLUTentativeTranscript tentative_transcript = 7;
 * @return {?proto.speechly.slu.v1.SLUTentativeTranscript}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getTentativeTranscript = function() {
  return /** @type{?proto.speechly.slu.v1.SLUTentativeTranscript} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUTentativeTranscript, 7));
};


/**
 * @param {?proto.speechly.slu.v1.SLUTentativeTranscript|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setTentativeTranscript = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearTentativeTranscript = function() {
  return this.setTentativeTranscript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasTentativeTranscript = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SLUTentativeEntities tentative_entities = 8;
 * @return {?proto.speechly.slu.v1.SLUTentativeEntities}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getTentativeEntities = function() {
  return /** @type{?proto.speechly.slu.v1.SLUTentativeEntities} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUTentativeEntities, 8));
};


/**
 * @param {?proto.speechly.slu.v1.SLUTentativeEntities|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setTentativeEntities = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearTentativeEntities = function() {
  return this.setTentativeEntities(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasTentativeEntities = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SLUIntent tentative_intent = 9;
 * @return {?proto.speechly.slu.v1.SLUIntent}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getTentativeIntent = function() {
  return /** @type{?proto.speechly.slu.v1.SLUIntent} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUIntent, 9));
};


/**
 * @param {?proto.speechly.slu.v1.SLUIntent|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setTentativeIntent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearTentativeIntent = function() {
  return this.setTentativeIntent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasTentativeIntent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SLUStarted started = 10;
 * @return {?proto.speechly.slu.v1.SLUStarted}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getStarted = function() {
  return /** @type{?proto.speechly.slu.v1.SLUStarted} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUStarted, 10));
};


/**
 * @param {?proto.speechly.slu.v1.SLUStarted|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setStarted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearStarted = function() {
  return this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SLUFinished finished = 11;
 * @return {?proto.speechly.slu.v1.SLUFinished}
 */
proto.speechly.slu.v1.SLUResponse.prototype.getFinished = function() {
  return /** @type{?proto.speechly.slu.v1.SLUFinished} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUFinished, 11));
};


/**
 * @param {?proto.speechly.slu.v1.SLUFinished|undefined} value
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
*/
proto.speechly.slu.v1.SLUResponse.prototype.setFinished = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.speechly.slu.v1.SLUResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUResponse} returns this
 */
proto.speechly.slu.v1.SLUResponse.prototype.clearFinished = function() {
  return this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUResponse.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUTranscript.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUTranscript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUTranscript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUTranscript.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUTranscript}
 */
proto.speechly.slu.v1.SLUTranscript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUTranscript;
  return proto.speechly.slu.v1.SLUTranscript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUTranscript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUTranscript}
 */
proto.speechly.slu.v1.SLUTranscript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUTranscript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUTranscript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUTranscript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUTranscript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.speechly.slu.v1.SLUTranscript.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUTranscript} returns this
 */
proto.speechly.slu.v1.SLUTranscript.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.speechly.slu.v1.SLUTranscript.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUTranscript} returns this
 */
proto.speechly.slu.v1.SLUTranscript.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 start_time = 3;
 * @return {number}
 */
proto.speechly.slu.v1.SLUTranscript.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUTranscript} returns this
 */
proto.speechly.slu.v1.SLUTranscript.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 end_time = 4;
 * @return {number}
 */
proto.speechly.slu.v1.SLUTranscript.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUTranscript} returns this
 */
proto.speechly.slu.v1.SLUTranscript.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startPosition: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endPosition: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUEntity}
 */
proto.speechly.slu.v1.SLUEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUEntity;
  return proto.speechly.slu.v1.SLUEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUEntity}
 */
proto.speechly.slu.v1.SLUEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartPosition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartPosition();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndPosition();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string entity = 1;
 * @return {string}
 */
proto.speechly.slu.v1.SLUEntity.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUEntity} returns this
 */
proto.speechly.slu.v1.SLUEntity.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.speechly.slu.v1.SLUEntity.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUEntity} returns this
 */
proto.speechly.slu.v1.SLUEntity.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 start_position = 3;
 * @return {number}
 */
proto.speechly.slu.v1.SLUEntity.prototype.getStartPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUEntity} returns this
 */
proto.speechly.slu.v1.SLUEntity.prototype.setStartPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 end_position = 4;
 * @return {number}
 */
proto.speechly.slu.v1.SLUEntity.prototype.getEndPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.SLUEntity} returns this
 */
proto.speechly.slu.v1.SLUEntity.prototype.setEndPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUIntent.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUIntent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUIntent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUIntent.toObject = function(includeInstance, msg) {
  var f, obj = {
    intent: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUIntent}
 */
proto.speechly.slu.v1.SLUIntent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUIntent;
  return proto.speechly.slu.v1.SLUIntent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUIntent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUIntent}
 */
proto.speechly.slu.v1.SLUIntent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUIntent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUIntent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUIntent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUIntent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string intent = 1;
 * @return {string}
 */
proto.speechly.slu.v1.SLUIntent.prototype.getIntent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUIntent} returns this
 */
proto.speechly.slu.v1.SLUIntent.prototype.setIntent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUSegmentEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUSegmentEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUSegmentEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUSegmentEnd.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUSegmentEnd}
 */
proto.speechly.slu.v1.SLUSegmentEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUSegmentEnd;
  return proto.speechly.slu.v1.SLUSegmentEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUSegmentEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUSegmentEnd}
 */
proto.speechly.slu.v1.SLUSegmentEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUSegmentEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUSegmentEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUSegmentEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUSegmentEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechly.slu.v1.SLUTentativeTranscript.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUTentativeTranscript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUTentativeTranscript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUTentativeTranscript.toObject = function(includeInstance, msg) {
  var f, obj = {
    tentativeTranscript: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tentativeWordsList: jspb.Message.toObjectList(msg.getTentativeWordsList(),
    proto.speechly.slu.v1.SLUTranscript.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUTentativeTranscript}
 */
proto.speechly.slu.v1.SLUTentativeTranscript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUTentativeTranscript;
  return proto.speechly.slu.v1.SLUTentativeTranscript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUTentativeTranscript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUTentativeTranscript}
 */
proto.speechly.slu.v1.SLUTentativeTranscript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTentativeTranscript(value);
      break;
    case 2:
      var value = new proto.speechly.slu.v1.SLUTranscript;
      reader.readMessage(value,proto.speechly.slu.v1.SLUTranscript.deserializeBinaryFromReader);
      msg.addTentativeWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUTentativeTranscript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUTentativeTranscript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUTentativeTranscript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTentativeTranscript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTentativeWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.speechly.slu.v1.SLUTranscript.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tentative_transcript = 1;
 * @return {string}
 */
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.getTentativeTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUTentativeTranscript} returns this
 */
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.setTentativeTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SLUTranscript tentative_words = 2;
 * @return {!Array<!proto.speechly.slu.v1.SLUTranscript>}
 */
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.getTentativeWordsList = function() {
  return /** @type{!Array<!proto.speechly.slu.v1.SLUTranscript>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechly.slu.v1.SLUTranscript, 2));
};


/**
 * @param {!Array<!proto.speechly.slu.v1.SLUTranscript>} value
 * @return {!proto.speechly.slu.v1.SLUTentativeTranscript} returns this
*/
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.setTentativeWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.speechly.slu.v1.SLUTranscript=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechly.slu.v1.SLUTranscript}
 */
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.addTentativeWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.speechly.slu.v1.SLUTranscript, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.slu.v1.SLUTentativeTranscript} returns this
 */
proto.speechly.slu.v1.SLUTentativeTranscript.prototype.clearTentativeWordsList = function() {
  return this.setTentativeWordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechly.slu.v1.SLUTentativeEntities.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUTentativeEntities.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUTentativeEntities.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUTentativeEntities} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUTentativeEntities.toObject = function(includeInstance, msg) {
  var f, obj = {
    tentativeEntitiesList: jspb.Message.toObjectList(msg.getTentativeEntitiesList(),
    proto.speechly.slu.v1.SLUEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUTentativeEntities}
 */
proto.speechly.slu.v1.SLUTentativeEntities.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUTentativeEntities;
  return proto.speechly.slu.v1.SLUTentativeEntities.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUTentativeEntities} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUTentativeEntities}
 */
proto.speechly.slu.v1.SLUTentativeEntities.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechly.slu.v1.SLUEntity;
      reader.readMessage(value,proto.speechly.slu.v1.SLUEntity.deserializeBinaryFromReader);
      msg.addTentativeEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUTentativeEntities.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUTentativeEntities.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUTentativeEntities} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUTentativeEntities.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTentativeEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.speechly.slu.v1.SLUEntity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SLUEntity tentative_entities = 1;
 * @return {!Array<!proto.speechly.slu.v1.SLUEntity>}
 */
proto.speechly.slu.v1.SLUTentativeEntities.prototype.getTentativeEntitiesList = function() {
  return /** @type{!Array<!proto.speechly.slu.v1.SLUEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechly.slu.v1.SLUEntity, 1));
};


/**
 * @param {!Array<!proto.speechly.slu.v1.SLUEntity>} value
 * @return {!proto.speechly.slu.v1.SLUTentativeEntities} returns this
*/
proto.speechly.slu.v1.SLUTentativeEntities.prototype.setTentativeEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.speechly.slu.v1.SLUEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechly.slu.v1.SLUEntity}
 */
proto.speechly.slu.v1.SLUTentativeEntities.prototype.addTentativeEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.speechly.slu.v1.SLUEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.slu.v1.SLUTentativeEntities} returns this
 */
proto.speechly.slu.v1.SLUTentativeEntities.prototype.clearTentativeEntitiesList = function() {
  return this.setTentativeEntitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUStarted.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUStarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUStarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUStarted.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUStarted}
 */
proto.speechly.slu.v1.SLUStarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUStarted;
  return proto.speechly.slu.v1.SLUStarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUStarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUStarted}
 */
proto.speechly.slu.v1.SLUStarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUStarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUStarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUStarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUStarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUFinished.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUFinished.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUFinished} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUFinished.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.speechly.slu.v1.SLUError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUFinished}
 */
proto.speechly.slu.v1.SLUFinished.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUFinished;
  return proto.speechly.slu.v1.SLUFinished.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUFinished} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUFinished}
 */
proto.speechly.slu.v1.SLUFinished.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.speechly.slu.v1.SLUError;
      reader.readMessage(value,proto.speechly.slu.v1.SLUError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUFinished.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUFinished.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUFinished} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUFinished.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speechly.slu.v1.SLUError.serializeBinaryToWriter
    );
  }
};


/**
 * optional SLUError error = 2;
 * @return {?proto.speechly.slu.v1.SLUError}
 */
proto.speechly.slu.v1.SLUFinished.prototype.getError = function() {
  return /** @type{?proto.speechly.slu.v1.SLUError} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.SLUError, 2));
};


/**
 * @param {?proto.speechly.slu.v1.SLUError|undefined} value
 * @return {!proto.speechly.slu.v1.SLUFinished} returns this
*/
proto.speechly.slu.v1.SLUFinished.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.SLUFinished} returns this
 */
proto.speechly.slu.v1.SLUFinished.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.SLUFinished.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.SLUError.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.SLUError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.SLUError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.SLUError}
 */
proto.speechly.slu.v1.SLUError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.SLUError;
  return proto.speechly.slu.v1.SLUError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.SLUError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.SLUError}
 */
proto.speechly.slu.v1.SLUError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.SLUError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.SLUError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.SLUError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.SLUError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.speechly.slu.v1.SLUError.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUError} returns this
 */
proto.speechly.slu.v1.SLUError.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.speechly.slu.v1.SLUError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.SLUError} returns this
 */
proto.speechly.slu.v1.SLUError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.speechly.slu.v1);
