// source: speechly/slu/v1/wlu.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.speechly.slu.v1.WLUEntity', null, global);
goog.exportSymbol('proto.speechly.slu.v1.WLUIntent', null, global);
goog.exportSymbol('proto.speechly.slu.v1.WLURequest', null, global);
goog.exportSymbol('proto.speechly.slu.v1.WLUResponse', null, global);
goog.exportSymbol('proto.speechly.slu.v1.WLUSegment', null, global);
goog.exportSymbol('proto.speechly.slu.v1.WLUToken', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.WLURequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.WLURequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.WLURequest.displayName = 'proto.speechly.slu.v1.WLURequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.WLUResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechly.slu.v1.WLUResponse.repeatedFields_, null);
};
goog.inherits(proto.speechly.slu.v1.WLUResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.WLUResponse.displayName = 'proto.speechly.slu.v1.WLUResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.WLUSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechly.slu.v1.WLUSegment.repeatedFields_, null);
};
goog.inherits(proto.speechly.slu.v1.WLUSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.WLUSegment.displayName = 'proto.speechly.slu.v1.WLUSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.WLUToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.WLUToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.WLUToken.displayName = 'proto.speechly.slu.v1.WLUToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.WLUEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.WLUEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.WLUEntity.displayName = 'proto.speechly.slu.v1.WLUEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.slu.v1.WLUIntent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.slu.v1.WLUIntent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.slu.v1.WLUIntent.displayName = 'proto.speechly.slu.v1.WLUIntent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.WLURequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.WLURequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.WLURequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLURequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.WLURequest}
 */
proto.speechly.slu.v1.WLURequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.WLURequest;
  return proto.speechly.slu.v1.WLURequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.WLURequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.WLURequest}
 */
proto.speechly.slu.v1.WLURequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.WLURequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.WLURequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.WLURequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLURequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string language_code = 1;
 * @return {string}
 */
proto.speechly.slu.v1.WLURequest.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.WLURequest} returns this
 */
proto.speechly.slu.v1.WLURequest.prototype.setLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.speechly.slu.v1.WLURequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.WLURequest} returns this
 */
proto.speechly.slu.v1.WLURequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechly.slu.v1.WLUResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.WLUResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.WLUResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.WLUResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentsList: jspb.Message.toObjectList(msg.getSegmentsList(),
    proto.speechly.slu.v1.WLUSegment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.WLUResponse}
 */
proto.speechly.slu.v1.WLUResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.WLUResponse;
  return proto.speechly.slu.v1.WLUResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.WLUResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.WLUResponse}
 */
proto.speechly.slu.v1.WLUResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechly.slu.v1.WLUSegment;
      reader.readMessage(value,proto.speechly.slu.v1.WLUSegment.deserializeBinaryFromReader);
      msg.addSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.WLUResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.WLUResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.WLUResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.speechly.slu.v1.WLUSegment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WLUSegment segments = 1;
 * @return {!Array<!proto.speechly.slu.v1.WLUSegment>}
 */
proto.speechly.slu.v1.WLUResponse.prototype.getSegmentsList = function() {
  return /** @type{!Array<!proto.speechly.slu.v1.WLUSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechly.slu.v1.WLUSegment, 1));
};


/**
 * @param {!Array<!proto.speechly.slu.v1.WLUSegment>} value
 * @return {!proto.speechly.slu.v1.WLUResponse} returns this
*/
proto.speechly.slu.v1.WLUResponse.prototype.setSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.speechly.slu.v1.WLUSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechly.slu.v1.WLUSegment}
 */
proto.speechly.slu.v1.WLUResponse.prototype.addSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.speechly.slu.v1.WLUSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.slu.v1.WLUResponse} returns this
 */
proto.speechly.slu.v1.WLUResponse.prototype.clearSegmentsList = function() {
  return this.setSegmentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechly.slu.v1.WLUSegment.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.WLUSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.WLUSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.WLUSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    proto.speechly.slu.v1.WLUToken.toObject, includeInstance),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.speechly.slu.v1.WLUEntity.toObject, includeInstance),
    intent: (f = msg.getIntent()) && proto.speechly.slu.v1.WLUIntent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.WLUSegment}
 */
proto.speechly.slu.v1.WLUSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.WLUSegment;
  return proto.speechly.slu.v1.WLUSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.WLUSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.WLUSegment}
 */
proto.speechly.slu.v1.WLUSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = new proto.speechly.slu.v1.WLUToken;
      reader.readMessage(value,proto.speechly.slu.v1.WLUToken.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 3:
      var value = new proto.speechly.slu.v1.WLUEntity;
      reader.readMessage(value,proto.speechly.slu.v1.WLUEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 4:
      var value = new proto.speechly.slu.v1.WLUIntent;
      reader.readMessage(value,proto.speechly.slu.v1.WLUIntent.deserializeBinaryFromReader);
      msg.setIntent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.WLUSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.WLUSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.WLUSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.speechly.slu.v1.WLUToken.serializeBinaryToWriter
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.speechly.slu.v1.WLUEntity.serializeBinaryToWriter
    );
  }
  f = message.getIntent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.speechly.slu.v1.WLUIntent.serializeBinaryToWriter
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.speechly.slu.v1.WLUSegment.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.WLUSegment} returns this
 */
proto.speechly.slu.v1.WLUSegment.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated WLUToken tokens = 2;
 * @return {!Array<!proto.speechly.slu.v1.WLUToken>}
 */
proto.speechly.slu.v1.WLUSegment.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.speechly.slu.v1.WLUToken>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechly.slu.v1.WLUToken, 2));
};


/**
 * @param {!Array<!proto.speechly.slu.v1.WLUToken>} value
 * @return {!proto.speechly.slu.v1.WLUSegment} returns this
*/
proto.speechly.slu.v1.WLUSegment.prototype.setTokensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.speechly.slu.v1.WLUToken=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechly.slu.v1.WLUToken}
 */
proto.speechly.slu.v1.WLUSegment.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.speechly.slu.v1.WLUToken, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.slu.v1.WLUSegment} returns this
 */
proto.speechly.slu.v1.WLUSegment.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * repeated WLUEntity entities = 3;
 * @return {!Array<!proto.speechly.slu.v1.WLUEntity>}
 */
proto.speechly.slu.v1.WLUSegment.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.speechly.slu.v1.WLUEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechly.slu.v1.WLUEntity, 3));
};


/**
 * @param {!Array<!proto.speechly.slu.v1.WLUEntity>} value
 * @return {!proto.speechly.slu.v1.WLUSegment} returns this
*/
proto.speechly.slu.v1.WLUSegment.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.speechly.slu.v1.WLUEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechly.slu.v1.WLUEntity}
 */
proto.speechly.slu.v1.WLUSegment.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.speechly.slu.v1.WLUEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.slu.v1.WLUSegment} returns this
 */
proto.speechly.slu.v1.WLUSegment.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional WLUIntent intent = 4;
 * @return {?proto.speechly.slu.v1.WLUIntent}
 */
proto.speechly.slu.v1.WLUSegment.prototype.getIntent = function() {
  return /** @type{?proto.speechly.slu.v1.WLUIntent} */ (
    jspb.Message.getWrapperField(this, proto.speechly.slu.v1.WLUIntent, 4));
};


/**
 * @param {?proto.speechly.slu.v1.WLUIntent|undefined} value
 * @return {!proto.speechly.slu.v1.WLUSegment} returns this
*/
proto.speechly.slu.v1.WLUSegment.prototype.setIntent = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechly.slu.v1.WLUSegment} returns this
 */
proto.speechly.slu.v1.WLUSegment.prototype.clearIntent = function() {
  return this.setIntent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechly.slu.v1.WLUSegment.prototype.hasIntent = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.WLUToken.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.WLUToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.WLUToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.WLUToken}
 */
proto.speechly.slu.v1.WLUToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.WLUToken;
  return proto.speechly.slu.v1.WLUToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.WLUToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.WLUToken}
 */
proto.speechly.slu.v1.WLUToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.WLUToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.WLUToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.WLUToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.speechly.slu.v1.WLUToken.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.WLUToken} returns this
 */
proto.speechly.slu.v1.WLUToken.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.speechly.slu.v1.WLUToken.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.WLUToken} returns this
 */
proto.speechly.slu.v1.WLUToken.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.WLUEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.WLUEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.WLUEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startPosition: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endPosition: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.WLUEntity}
 */
proto.speechly.slu.v1.WLUEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.WLUEntity;
  return proto.speechly.slu.v1.WLUEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.WLUEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.WLUEntity}
 */
proto.speechly.slu.v1.WLUEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartPosition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.WLUEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.WLUEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.WLUEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartPosition();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndPosition();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string entity = 1;
 * @return {string}
 */
proto.speechly.slu.v1.WLUEntity.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.WLUEntity} returns this
 */
proto.speechly.slu.v1.WLUEntity.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.speechly.slu.v1.WLUEntity.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.WLUEntity} returns this
 */
proto.speechly.slu.v1.WLUEntity.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 start_position = 3;
 * @return {number}
 */
proto.speechly.slu.v1.WLUEntity.prototype.getStartPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.WLUEntity} returns this
 */
proto.speechly.slu.v1.WLUEntity.prototype.setStartPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 end_position = 4;
 * @return {number}
 */
proto.speechly.slu.v1.WLUEntity.prototype.getEndPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.slu.v1.WLUEntity} returns this
 */
proto.speechly.slu.v1.WLUEntity.prototype.setEndPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.slu.v1.WLUIntent.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.slu.v1.WLUIntent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.slu.v1.WLUIntent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUIntent.toObject = function(includeInstance, msg) {
  var f, obj = {
    intent: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.slu.v1.WLUIntent}
 */
proto.speechly.slu.v1.WLUIntent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.slu.v1.WLUIntent;
  return proto.speechly.slu.v1.WLUIntent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.slu.v1.WLUIntent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.slu.v1.WLUIntent}
 */
proto.speechly.slu.v1.WLUIntent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.slu.v1.WLUIntent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.slu.v1.WLUIntent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.slu.v1.WLUIntent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.slu.v1.WLUIntent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string intent = 1;
 * @return {string}
 */
proto.speechly.slu.v1.WLUIntent.prototype.getIntent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.slu.v1.WLUIntent} returns this
 */
proto.speechly.slu.v1.WLUIntent.prototype.setIntent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.speechly.slu.v1);
