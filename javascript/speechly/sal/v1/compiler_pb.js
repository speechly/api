// source: speechly/sal/v1/compiler.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.speechly.sal.v1.AppSource', null, global);
goog.exportSymbol('proto.speechly.sal.v1.CompileResult', null, global);
goog.exportSymbol('proto.speechly.sal.v1.CompileResult.Result', null, global);
goog.exportSymbol('proto.speechly.sal.v1.LineReference', null, global);
goog.exportSymbol('proto.speechly.sal.v1.LineReference.Level', null, global);
goog.exportSymbol('proto.speechly.sal.v1.ValidateResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.sal.v1.AppSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.sal.v1.AppSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.sal.v1.AppSource.displayName = 'proto.speechly.sal.v1.AppSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.sal.v1.CompileResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechly.sal.v1.CompileResult.repeatedFields_, null);
};
goog.inherits(proto.speechly.sal.v1.CompileResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.sal.v1.CompileResult.displayName = 'proto.speechly.sal.v1.CompileResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.sal.v1.ValidateResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechly.sal.v1.ValidateResult.repeatedFields_, null);
};
goog.inherits(proto.speechly.sal.v1.ValidateResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.sal.v1.ValidateResult.displayName = 'proto.speechly.sal.v1.ValidateResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechly.sal.v1.LineReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechly.sal.v1.LineReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechly.sal.v1.LineReference.displayName = 'proto.speechly.sal.v1.LineReference';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.sal.v1.AppSource.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.sal.v1.AppSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.sal.v1.AppSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.AppSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    language: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataChunk: msg.getDataChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.sal.v1.AppSource}
 */
proto.speechly.sal.v1.AppSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.sal.v1.AppSource;
  return proto.speechly.sal.v1.AppSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.sal.v1.AppSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.sal.v1.AppSource}
 */
proto.speechly.sal.v1.AppSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.sal.v1.AppSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.sal.v1.AppSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.sal.v1.AppSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.AppSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string app_id = 1;
 * @return {string}
 */
proto.speechly.sal.v1.AppSource.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.sal.v1.AppSource} returns this
 */
proto.speechly.sal.v1.AppSource.prototype.setAppId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string language = 2;
 * @return {string}
 */
proto.speechly.sal.v1.AppSource.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.sal.v1.AppSource} returns this
 */
proto.speechly.sal.v1.AppSource.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes data_chunk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.speechly.sal.v1.AppSource.prototype.getDataChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data_chunk = 3;
 * This is a type-conversion wrapper around `getDataChunk()`
 * @return {string}
 */
proto.speechly.sal.v1.AppSource.prototype.getDataChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataChunk()));
};


/**
 * optional bytes data_chunk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataChunk()`
 * @return {!Uint8Array}
 */
proto.speechly.sal.v1.AppSource.prototype.getDataChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.speechly.sal.v1.AppSource} returns this
 */
proto.speechly.sal.v1.AppSource.prototype.setDataChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechly.sal.v1.CompileResult.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.sal.v1.CompileResult.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.sal.v1.CompileResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.sal.v1.CompileResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.CompileResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    templatesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.speechly.sal.v1.LineReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.sal.v1.CompileResult}
 */
proto.speechly.sal.v1.CompileResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.sal.v1.CompileResult;
  return proto.speechly.sal.v1.CompileResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.sal.v1.CompileResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.sal.v1.CompileResult}
 */
proto.speechly.sal.v1.CompileResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechly.sal.v1.CompileResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTemplates(value);
      break;
    case 3:
      var value = new proto.speechly.sal.v1.LineReference;
      reader.readMessage(value,proto.speechly.sal.v1.LineReference.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.sal.v1.CompileResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.sal.v1.CompileResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.sal.v1.CompileResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.CompileResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTemplatesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.speechly.sal.v1.LineReference.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.speechly.sal.v1.CompileResult.Result = {
  COMPILE_SUCCESS: 0,
  COMPILE_FAILURE: 1,
  COMPILE_WARNING: 2
};

/**
 * optional Result result = 1;
 * @return {!proto.speechly.sal.v1.CompileResult.Result}
 */
proto.speechly.sal.v1.CompileResult.prototype.getResult = function() {
  return /** @type {!proto.speechly.sal.v1.CompileResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechly.sal.v1.CompileResult.Result} value
 * @return {!proto.speechly.sal.v1.CompileResult} returns this
 */
proto.speechly.sal.v1.CompileResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string templates = 2;
 * @return {!Array<string>}
 */
proto.speechly.sal.v1.CompileResult.prototype.getTemplatesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.speechly.sal.v1.CompileResult} returns this
 */
proto.speechly.sal.v1.CompileResult.prototype.setTemplatesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.speechly.sal.v1.CompileResult} returns this
 */
proto.speechly.sal.v1.CompileResult.prototype.addTemplates = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.sal.v1.CompileResult} returns this
 */
proto.speechly.sal.v1.CompileResult.prototype.clearTemplatesList = function() {
  return this.setTemplatesList([]);
};


/**
 * repeated LineReference messages = 3;
 * @return {!Array<!proto.speechly.sal.v1.LineReference>}
 */
proto.speechly.sal.v1.CompileResult.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.speechly.sal.v1.LineReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechly.sal.v1.LineReference, 3));
};


/**
 * @param {!Array<!proto.speechly.sal.v1.LineReference>} value
 * @return {!proto.speechly.sal.v1.CompileResult} returns this
*/
proto.speechly.sal.v1.CompileResult.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.speechly.sal.v1.LineReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechly.sal.v1.LineReference}
 */
proto.speechly.sal.v1.CompileResult.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.speechly.sal.v1.LineReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.sal.v1.CompileResult} returns this
 */
proto.speechly.sal.v1.CompileResult.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechly.sal.v1.ValidateResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.sal.v1.ValidateResult.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.sal.v1.ValidateResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.sal.v1.ValidateResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.ValidateResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.speechly.sal.v1.LineReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.sal.v1.ValidateResult}
 */
proto.speechly.sal.v1.ValidateResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.sal.v1.ValidateResult;
  return proto.speechly.sal.v1.ValidateResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.sal.v1.ValidateResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.sal.v1.ValidateResult}
 */
proto.speechly.sal.v1.ValidateResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechly.sal.v1.LineReference;
      reader.readMessage(value,proto.speechly.sal.v1.LineReference.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.sal.v1.ValidateResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.sal.v1.ValidateResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.sal.v1.ValidateResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.ValidateResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.speechly.sal.v1.LineReference.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LineReference messages = 1;
 * @return {!Array<!proto.speechly.sal.v1.LineReference>}
 */
proto.speechly.sal.v1.ValidateResult.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.speechly.sal.v1.LineReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechly.sal.v1.LineReference, 1));
};


/**
 * @param {!Array<!proto.speechly.sal.v1.LineReference>} value
 * @return {!proto.speechly.sal.v1.ValidateResult} returns this
*/
proto.speechly.sal.v1.ValidateResult.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.speechly.sal.v1.LineReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechly.sal.v1.LineReference}
 */
proto.speechly.sal.v1.ValidateResult.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.speechly.sal.v1.LineReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechly.sal.v1.ValidateResult} returns this
 */
proto.speechly.sal.v1.ValidateResult.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechly.sal.v1.LineReference.prototype.toObject = function(opt_includeInstance) {
  return proto.speechly.sal.v1.LineReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechly.sal.v1.LineReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.LineReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    line: jspb.Message.getFieldWithDefault(msg, 1, 0),
    column: jspb.Message.getFieldWithDefault(msg, 2, 0),
    file: jspb.Message.getFieldWithDefault(msg, 3, ""),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    message: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechly.sal.v1.LineReference}
 */
proto.speechly.sal.v1.LineReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechly.sal.v1.LineReference;
  return proto.speechly.sal.v1.LineReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechly.sal.v1.LineReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechly.sal.v1.LineReference}
 */
proto.speechly.sal.v1.LineReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLine(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColumn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFile(value);
      break;
    case 4:
      var value = /** @type {!proto.speechly.sal.v1.LineReference.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechly.sal.v1.LineReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechly.sal.v1.LineReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechly.sal.v1.LineReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechly.sal.v1.LineReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLine();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.speechly.sal.v1.LineReference.Level = {
  LEVEL_NOTE: 0,
  LEVEL_WARNING: 1,
  LEVEL_ERROR: 2
};

/**
 * optional uint64 line = 1;
 * @return {number}
 */
proto.speechly.sal.v1.LineReference.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.sal.v1.LineReference} returns this
 */
proto.speechly.sal.v1.LineReference.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 column = 2;
 * @return {number}
 */
proto.speechly.sal.v1.LineReference.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechly.sal.v1.LineReference} returns this
 */
proto.speechly.sal.v1.LineReference.prototype.setColumn = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string file = 3;
 * @return {string}
 */
proto.speechly.sal.v1.LineReference.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.sal.v1.LineReference} returns this
 */
proto.speechly.sal.v1.LineReference.prototype.setFile = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Level level = 4;
 * @return {!proto.speechly.sal.v1.LineReference.Level}
 */
proto.speechly.sal.v1.LineReference.prototype.getLevel = function() {
  return /** @type {!proto.speechly.sal.v1.LineReference.Level} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.speechly.sal.v1.LineReference.Level} value
 * @return {!proto.speechly.sal.v1.LineReference} returns this
 */
proto.speechly.sal.v1.LineReference.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string message = 5;
 * @return {string}
 */
proto.speechly.sal.v1.LineReference.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechly.sal.v1.LineReference} returns this
 */
proto.speechly.sal.v1.LineReference.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.speechly.sal.v1);
