// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package salv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EvaluatorAPIClient is the client API for EvaluatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvaluatorAPIClient interface {
	// Performs recognition of a batch of texts with specified language.
	Texts(ctx context.Context, in *TextsRequest, opts ...grpc.CallOption) (*TextsResponse, error)
	// Performs recognition of a batch of texts with specified language
	// and evaluates it against given ground truth texts.
	EvalTexts(ctx context.Context, in *EvalTextsRequest, opts ...grpc.CallOption) (*EvalTextsResponse, error)
}

type evaluatorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEvaluatorAPIClient(cc grpc.ClientConnInterface) EvaluatorAPIClient {
	return &evaluatorAPIClient{cc}
}

func (c *evaluatorAPIClient) Texts(ctx context.Context, in *TextsRequest, opts ...grpc.CallOption) (*TextsResponse, error) {
	out := new(TextsResponse)
	err := c.cc.Invoke(ctx, "/speechly.sal.v1.EvaluatorAPI/Texts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatorAPIClient) EvalTexts(ctx context.Context, in *EvalTextsRequest, opts ...grpc.CallOption) (*EvalTextsResponse, error) {
	out := new(EvalTextsResponse)
	err := c.cc.Invoke(ctx, "/speechly.sal.v1.EvaluatorAPI/EvalTexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvaluatorAPIServer is the server API for EvaluatorAPI service.
// All implementations must embed UnimplementedEvaluatorAPIServer
// for forward compatibility
type EvaluatorAPIServer interface {
	// Performs recognition of a batch of texts with specified language.
	Texts(context.Context, *TextsRequest) (*TextsResponse, error)
	// Performs recognition of a batch of texts with specified language
	// and evaluates it against given ground truth texts.
	EvalTexts(context.Context, *EvalTextsRequest) (*EvalTextsResponse, error)
	mustEmbedUnimplementedEvaluatorAPIServer()
}

// UnimplementedEvaluatorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedEvaluatorAPIServer struct {
}

func (UnimplementedEvaluatorAPIServer) Texts(context.Context, *TextsRequest) (*TextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Texts not implemented")
}
func (UnimplementedEvaluatorAPIServer) EvalTexts(context.Context, *EvalTextsRequest) (*EvalTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalTexts not implemented")
}
func (UnimplementedEvaluatorAPIServer) mustEmbedUnimplementedEvaluatorAPIServer() {}

// UnsafeEvaluatorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvaluatorAPIServer will
// result in compilation errors.
type UnsafeEvaluatorAPIServer interface {
	mustEmbedUnimplementedEvaluatorAPIServer()
}

func RegisterEvaluatorAPIServer(s grpc.ServiceRegistrar, srv EvaluatorAPIServer) {
	s.RegisterService(&EvaluatorAPI_ServiceDesc, srv)
}

func _EvaluatorAPI_Texts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatorAPIServer).Texts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speechly.sal.v1.EvaluatorAPI/Texts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatorAPIServer).Texts(ctx, req.(*TextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatorAPI_EvalTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatorAPIServer).EvalTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speechly.sal.v1.EvaluatorAPI/EvalTexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatorAPIServer).EvalTexts(ctx, req.(*EvalTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EvaluatorAPI_ServiceDesc is the grpc.ServiceDesc for EvaluatorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvaluatorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechly.sal.v1.EvaluatorAPI",
	HandlerType: (*EvaluatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Texts",
			Handler:    _EvaluatorAPI_Texts_Handler,
		},
		{
			MethodName: "EvalTexts",
			Handler:    _EvaluatorAPI_EvalTexts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speechly/sal/v1/evaluator_api.proto",
}
