// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: speechly/sal/v1/compiler.proto

package salv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Content type options.
type AppSource_ContentType int32

const (
	AppSource_CONTENT_TYPE_UNSPECIFIED AppSource_ContentType = 0
	AppSource_CONTENT_TYPE_YAML        AppSource_ContentType = 1
	AppSource_CONTENT_TYPE_TAR         AppSource_ContentType = 2
)

// Enum value maps for AppSource_ContentType.
var (
	AppSource_ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNSPECIFIED",
		1: "CONTENT_TYPE_YAML",
		2: "CONTENT_TYPE_TAR",
	}
	AppSource_ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNSPECIFIED": 0,
		"CONTENT_TYPE_YAML":        1,
		"CONTENT_TYPE_TAR":         2,
	}
)

func (x AppSource_ContentType) Enum() *AppSource_ContentType {
	p := new(AppSource_ContentType)
	*p = x
	return p
}

func (x AppSource_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppSource_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_sal_v1_compiler_proto_enumTypes[0].Descriptor()
}

func (AppSource_ContentType) Type() protoreflect.EnumType {
	return &file_speechly_sal_v1_compiler_proto_enumTypes[0]
}

func (x AppSource_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppSource_ContentType.Descriptor instead.
func (AppSource_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{0, 0}
}

// Describes the status of result.
type CompileResult_Result int32

const (
	// Result has been successfully compiled.
	CompileResult_COMPILE_SUCCESS CompileResult_Result = 0
	// Result has failed to compile.
	CompileResult_COMPILE_FAILURE CompileResult_Result = 1
	// Result has been compiled, but with warnings.
	CompileResult_COMPILE_WARNING CompileResult_Result = 2
)

// Enum value maps for CompileResult_Result.
var (
	CompileResult_Result_name = map[int32]string{
		0: "COMPILE_SUCCESS",
		1: "COMPILE_FAILURE",
		2: "COMPILE_WARNING",
	}
	CompileResult_Result_value = map[string]int32{
		"COMPILE_SUCCESS": 0,
		"COMPILE_FAILURE": 1,
		"COMPILE_WARNING": 2,
	}
)

func (x CompileResult_Result) Enum() *CompileResult_Result {
	p := new(CompileResult_Result)
	*p = x
	return p
}

func (x CompileResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompileResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_sal_v1_compiler_proto_enumTypes[1].Descriptor()
}

func (CompileResult_Result) Type() protoreflect.EnumType {
	return &file_speechly_sal_v1_compiler_proto_enumTypes[1]
}

func (x CompileResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompileResult_Result.Descriptor instead.
func (CompileResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{2, 0}
}

// Describes the input format.
type ConvertRequest_InputFormat int32

const (
	// No input format or unknown format.
	ConvertRequest_FORMAT_UNKNOWN ConvertRequest_InputFormat = 0
	// Input is an Alexa configuration in JSON format.
	ConvertRequest_FORMAT_ALEXA ConvertRequest_InputFormat = 1
)

// Enum value maps for ConvertRequest_InputFormat.
var (
	ConvertRequest_InputFormat_name = map[int32]string{
		0: "FORMAT_UNKNOWN",
		1: "FORMAT_ALEXA",
	}
	ConvertRequest_InputFormat_value = map[string]int32{
		"FORMAT_UNKNOWN": 0,
		"FORMAT_ALEXA":   1,
	}
)

func (x ConvertRequest_InputFormat) Enum() *ConvertRequest_InputFormat {
	p := new(ConvertRequest_InputFormat)
	*p = x
	return p
}

func (x ConvertRequest_InputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConvertRequest_InputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_sal_v1_compiler_proto_enumTypes[2].Descriptor()
}

func (ConvertRequest_InputFormat) Type() protoreflect.EnumType {
	return &file_speechly_sal_v1_compiler_proto_enumTypes[2]
}

func (x ConvertRequest_InputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConvertRequest_InputFormat.Descriptor instead.
func (ConvertRequest_InputFormat) EnumDescriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{3, 0}
}

// Describes the conversion status.
type ConvertResult_Status int32

const (
	// Successful conversion without warnings.
	ConvertResult_CONVERT_SUCCESS ConvertResult_Status = 0
	// Successful conversion, but with warnings.
	ConvertResult_CONVERT_WARNINGS ConvertResult_Status = 1
	// Failed to convert.
	ConvertResult_CONVERT_FAILED ConvertResult_Status = 2
)

// Enum value maps for ConvertResult_Status.
var (
	ConvertResult_Status_name = map[int32]string{
		0: "CONVERT_SUCCESS",
		1: "CONVERT_WARNINGS",
		2: "CONVERT_FAILED",
	}
	ConvertResult_Status_value = map[string]int32{
		"CONVERT_SUCCESS":  0,
		"CONVERT_WARNINGS": 1,
		"CONVERT_FAILED":   2,
	}
)

func (x ConvertResult_Status) Enum() *ConvertResult_Status {
	p := new(ConvertResult_Status)
	*p = x
	return p
}

func (x ConvertResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConvertResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_sal_v1_compiler_proto_enumTypes[3].Descriptor()
}

func (ConvertResult_Status) Type() protoreflect.EnumType {
	return &file_speechly_sal_v1_compiler_proto_enumTypes[3]
}

func (x ConvertResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConvertResult_Status.Descriptor instead.
func (ConvertResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{4, 0}
}

// The level of the message.
type LineReference_Level int32

const (
	// A notice - for information only.
	LineReference_LEVEL_NOTE LineReference_Level = 0
	// A warning, does not fail compilation or validation, but should be addressed.
	LineReference_LEVEL_WARNING LineReference_Level = 1
	// An error, fails compilation and validation.
	LineReference_LEVEL_ERROR LineReference_Level = 2
)

// Enum value maps for LineReference_Level.
var (
	LineReference_Level_name = map[int32]string{
		0: "LEVEL_NOTE",
		1: "LEVEL_WARNING",
		2: "LEVEL_ERROR",
	}
	LineReference_Level_value = map[string]int32{
		"LEVEL_NOTE":    0,
		"LEVEL_WARNING": 1,
		"LEVEL_ERROR":   2,
	}
)

func (x LineReference_Level) Enum() *LineReference_Level {
	p := new(LineReference_Level)
	*p = x
	return p
}

func (x LineReference_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LineReference_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_sal_v1_compiler_proto_enumTypes[4].Descriptor()
}

func (LineReference_Level) Type() protoreflect.EnumType {
	return &file_speechly_sal_v1_compiler_proto_enumTypes[4]
}

func (x LineReference_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LineReference_Level.Descriptor instead.
func (LineReference_Level) EnumDescriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{6, 0}
}

// Contains a chunk of SAL source.
// This message is consumed by `Validate` and `ExtractSALSources` RPCs and
// as a part of `CompileRequest` and `ConvertResult`.
type AppSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of Speechly app to compile for.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The language of SAL as a BCP-47 language tag (e.g. "en-US").
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// Chunk of SAL source code.
	DataChunk []byte `protobuf:"bytes,3,opt,name=data_chunk,json=dataChunk,proto3" json:"data_chunk,omitempty"`
	// Optional content type of the SAL source.
	ContentType AppSource_ContentType `protobuf:"varint,4,opt,name=content_type,json=contentType,proto3,enum=speechly.sal.v1.AppSource_ContentType" json:"content_type,omitempty"`
}

func (x *AppSource) Reset() {
	*x = AppSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSource) ProtoMessage() {}

func (x *AppSource) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSource.ProtoReflect.Descriptor instead.
func (*AppSource) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{0}
}

func (x *AppSource) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppSource) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AppSource) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

func (x *AppSource) GetContentType() AppSource_ContentType {
	if x != nil {
		return x.ContentType
	}
	return AppSource_CONTENT_TYPE_UNSPECIFIED
}

// This message is consumed by `Compile` RPC
type CompileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A chunk of SAL source.
	AppSource *AppSource `protobuf:"bytes,1,opt,name=app_source,json=appSource,proto3" json:"app_source,omitempty"`
	// Number of examples to return:
	BatchSize int32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// Random seed for example sampling. Changing seed can give different output.
	RandomSeed int32 `protobuf:"varint,3,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
}

func (x *CompileRequest) Reset() {
	*x = CompileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileRequest) ProtoMessage() {}

func (x *CompileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileRequest.ProtoReflect.Descriptor instead.
func (*CompileRequest) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{1}
}

func (x *CompileRequest) GetAppSource() *AppSource {
	if x != nil {
		return x.AppSource
	}
	return nil
}

func (x *CompileRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *CompileRequest) GetRandomSeed() int32 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

// Top-level message sent by the server for the `Compile` method.
type CompileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of compilation.
	Result CompileResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=speechly.sal.v1.CompileResult_Result" json:"result,omitempty"`
	// (If the result was compiled) A list of compiled templates.
	Templates []string `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
	// (If the result failed or had warnings) A list of error / warning messages.
	Messages []*LineReference `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *CompileResult) Reset() {
	*x = CompileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileResult) ProtoMessage() {}

func (x *CompileResult) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileResult.ProtoReflect.Descriptor instead.
func (*CompileResult) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{2}
}

func (x *CompileResult) GetResult() CompileResult_Result {
	if x != nil {
		return x.Result
	}
	return CompileResult_COMPILE_SUCCESS
}

func (x *CompileResult) GetTemplates() []string {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *CompileResult) GetMessages() []*LineReference {
	if x != nil {
		return x.Messages
	}
	return nil
}

// This message is consumed by `Convert` RPC
type ConvertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format in which input configuration is supplied.
	InputFormat ConvertRequest_InputFormat `protobuf:"varint,1,opt,name=input_format,json=inputFormat,proto3,enum=speechly.sal.v1.ConvertRequest_InputFormat" json:"input_format,omitempty"`
	// Language of the input configuration.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// Chunk of input configuration.
	DataChunk []byte `protobuf:"bytes,3,opt,name=data_chunk,json=dataChunk,proto3" json:"data_chunk,omitempty"`
}

func (x *ConvertRequest) Reset() {
	*x = ConvertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertRequest) ProtoMessage() {}

func (x *ConvertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertRequest.ProtoReflect.Descriptor instead.
func (*ConvertRequest) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{3}
}

func (x *ConvertRequest) GetInputFormat() ConvertRequest_InputFormat {
	if x != nil {
		return x.InputFormat
	}
	return ConvertRequest_FORMAT_UNKNOWN
}

func (x *ConvertRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ConvertRequest) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

// Top-level message sent by the server for the `Convert` method.
type ConvertResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of conversion.
	Status ConvertResult_Status `protobuf:"varint,1,opt,name=status,proto3,enum=speechly.sal.v1.ConvertResult_Status" json:"status,omitempty"`
	// Warning message, empty unless status = CONVERT_WARNINGS.
	Warnings string `protobuf:"bytes,2,opt,name=warnings,proto3" json:"warnings,omitempty"`
	// The converted SAL configuration.
	Result *AppSource `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ConvertResult) Reset() {
	*x = ConvertResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertResult) ProtoMessage() {}

func (x *ConvertResult) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertResult.ProtoReflect.Descriptor instead.
func (*ConvertResult) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{4}
}

func (x *ConvertResult) GetStatus() ConvertResult_Status {
	if x != nil {
		return x.Status
	}
	return ConvertResult_CONVERT_SUCCESS
}

func (x *ConvertResult) GetWarnings() string {
	if x != nil {
		return x.Warnings
	}
	return ""
}

func (x *ConvertResult) GetResult() *AppSource {
	if x != nil {
		return x.Result
	}
	return nil
}

// Top-level message sent by the server for the `Validate` method.
type ValidateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of error / warning messages, may be empty if validation didn't find any issues.
	Messages []*LineReference `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ValidateResult) Reset() {
	*x = ValidateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResult) ProtoMessage() {}

func (x *ValidateResult) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResult.ProtoReflect.Descriptor instead.
func (*ValidateResult) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{5}
}

func (x *ValidateResult) GetMessages() []*LineReference {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Describes a message related to a line in SAL source code.
type LineReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The line in SAL source that this message refers to.
	Line uint64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// The column in SAL source that this message refers to.
	Column uint32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	// The file in SAL sources that this message refers to.
	File string `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	// The level of the message.
	Level LineReference_Level `protobuf:"varint,4,opt,name=level,proto3,enum=speechly.sal.v1.LineReference_Level" json:"level,omitempty"`
	// The contents of the message.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LineReference) Reset() {
	*x = LineReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineReference) ProtoMessage() {}

func (x *LineReference) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineReference.ProtoReflect.Descriptor instead.
func (*LineReference) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{6}
}

func (x *LineReference) GetLine() uint64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *LineReference) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *LineReference) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *LineReference) GetLevel() LineReference_Level {
	if x != nil {
		return x.Level
	}
	return LineReference_LEVEL_NOTE
}

func (x *LineReference) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Top-level message sent by the server for the `ExtractSALSources` method.
type ExtractSALSourcesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chunk of extracted SAL source code.
	DataChunk []byte `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk,proto3" json:"data_chunk,omitempty"`
}

func (x *ExtractSALSourcesResult) Reset() {
	*x = ExtractSALSourcesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_compiler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractSALSourcesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractSALSourcesResult) ProtoMessage() {}

func (x *ExtractSALSourcesResult) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_compiler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractSALSourcesResult.ProtoReflect.Descriptor instead.
func (*ExtractSALSourcesResult) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_compiler_proto_rawDescGZIP(), []int{7}
}

func (x *ExtractSALSourcesResult) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

var File_speechly_sal_v1_compiler_proto protoreflect.FileDescriptor

var file_speechly_sal_v1_compiler_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x73, 0x61, 0x6c, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x52, 0x10, 0x02, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x53, 0x65, 0x65, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c,
	0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79,
	0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x47, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d,
	0x50, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xd0, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x33, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x45, 0x58, 0x41, 0x10, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x47, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x4c, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e,
	0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x41, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x32, 0xd0, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x28, 0x01, 0x12, 0x49, 0x0a,
	0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79,
	0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x28, 0x01, 0x12, 0x5d, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x41, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x2e,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x28, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x41, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x28, 0x01, 0x42, 0x67, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x15, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x73, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x73,
	0x61, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x53, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x5c, 0x53, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speechly_sal_v1_compiler_proto_rawDescOnce sync.Once
	file_speechly_sal_v1_compiler_proto_rawDescData = file_speechly_sal_v1_compiler_proto_rawDesc
)

func file_speechly_sal_v1_compiler_proto_rawDescGZIP() []byte {
	file_speechly_sal_v1_compiler_proto_rawDescOnce.Do(func() {
		file_speechly_sal_v1_compiler_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_sal_v1_compiler_proto_rawDescData)
	})
	return file_speechly_sal_v1_compiler_proto_rawDescData
}

var file_speechly_sal_v1_compiler_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_speechly_sal_v1_compiler_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_speechly_sal_v1_compiler_proto_goTypes = []interface{}{
	(AppSource_ContentType)(0),      // 0: speechly.sal.v1.AppSource.ContentType
	(CompileResult_Result)(0),       // 1: speechly.sal.v1.CompileResult.Result
	(ConvertRequest_InputFormat)(0), // 2: speechly.sal.v1.ConvertRequest.InputFormat
	(ConvertResult_Status)(0),       // 3: speechly.sal.v1.ConvertResult.Status
	(LineReference_Level)(0),        // 4: speechly.sal.v1.LineReference.Level
	(*AppSource)(nil),               // 5: speechly.sal.v1.AppSource
	(*CompileRequest)(nil),          // 6: speechly.sal.v1.CompileRequest
	(*CompileResult)(nil),           // 7: speechly.sal.v1.CompileResult
	(*ConvertRequest)(nil),          // 8: speechly.sal.v1.ConvertRequest
	(*ConvertResult)(nil),           // 9: speechly.sal.v1.ConvertResult
	(*ValidateResult)(nil),          // 10: speechly.sal.v1.ValidateResult
	(*LineReference)(nil),           // 11: speechly.sal.v1.LineReference
	(*ExtractSALSourcesResult)(nil), // 12: speechly.sal.v1.ExtractSALSourcesResult
}
var file_speechly_sal_v1_compiler_proto_depIdxs = []int32{
	0,  // 0: speechly.sal.v1.AppSource.content_type:type_name -> speechly.sal.v1.AppSource.ContentType
	5,  // 1: speechly.sal.v1.CompileRequest.app_source:type_name -> speechly.sal.v1.AppSource
	1,  // 2: speechly.sal.v1.CompileResult.result:type_name -> speechly.sal.v1.CompileResult.Result
	11, // 3: speechly.sal.v1.CompileResult.messages:type_name -> speechly.sal.v1.LineReference
	2,  // 4: speechly.sal.v1.ConvertRequest.input_format:type_name -> speechly.sal.v1.ConvertRequest.InputFormat
	3,  // 5: speechly.sal.v1.ConvertResult.status:type_name -> speechly.sal.v1.ConvertResult.Status
	5,  // 6: speechly.sal.v1.ConvertResult.result:type_name -> speechly.sal.v1.AppSource
	11, // 7: speechly.sal.v1.ValidateResult.messages:type_name -> speechly.sal.v1.LineReference
	4,  // 8: speechly.sal.v1.LineReference.level:type_name -> speechly.sal.v1.LineReference.Level
	6,  // 9: speechly.sal.v1.Compiler.Compile:input_type -> speechly.sal.v1.CompileRequest
	5,  // 10: speechly.sal.v1.Compiler.Validate:input_type -> speechly.sal.v1.AppSource
	5,  // 11: speechly.sal.v1.Compiler.ExtractSALSources:input_type -> speechly.sal.v1.AppSource
	8,  // 12: speechly.sal.v1.Compiler.Convert:input_type -> speechly.sal.v1.ConvertRequest
	7,  // 13: speechly.sal.v1.Compiler.Compile:output_type -> speechly.sal.v1.CompileResult
	10, // 14: speechly.sal.v1.Compiler.Validate:output_type -> speechly.sal.v1.ValidateResult
	12, // 15: speechly.sal.v1.Compiler.ExtractSALSources:output_type -> speechly.sal.v1.ExtractSALSourcesResult
	9,  // 16: speechly.sal.v1.Compiler.Convert:output_type -> speechly.sal.v1.ConvertResult
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_speechly_sal_v1_compiler_proto_init() }
func file_speechly_sal_v1_compiler_proto_init() {
	if File_speechly_sal_v1_compiler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speechly_sal_v1_compiler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_compiler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_compiler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_compiler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_compiler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_compiler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_compiler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_compiler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractSALSourcesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_sal_v1_compiler_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speechly_sal_v1_compiler_proto_goTypes,
		DependencyIndexes: file_speechly_sal_v1_compiler_proto_depIdxs,
		EnumInfos:         file_speechly_sal_v1_compiler_proto_enumTypes,
		MessageInfos:      file_speechly_sal_v1_compiler_proto_msgTypes,
	}.Build()
	File_speechly_sal_v1_compiler_proto = out.File
	file_speechly_sal_v1_compiler_proto_rawDesc = nil
	file_speechly_sal_v1_compiler_proto_goTypes = nil
	file_speechly_sal_v1_compiler_proto_depIdxs = nil
}
