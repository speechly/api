// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: speechly/config/v1/config_api.proto

package configv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigAPI_GetProject_FullMethodName                  = "/speechly.config.v1.ConfigAPI/GetProject"
	ConfigAPI_CreateProject_FullMethodName               = "/speechly.config.v1.ConfigAPI/CreateProject"
	ConfigAPI_UpdateProject_FullMethodName               = "/speechly.config.v1.ConfigAPI/UpdateProject"
	ConfigAPI_GetProjectParticipants_FullMethodName      = "/speechly.config.v1.ConfigAPI/GetProjectParticipants"
	ConfigAPI_Invite_FullMethodName                      = "/speechly.config.v1.ConfigAPI/Invite"
	ConfigAPI_JoinProject_FullMethodName                 = "/speechly.config.v1.ConfigAPI/JoinProject"
	ConfigAPI_ListApps_FullMethodName                    = "/speechly.config.v1.ConfigAPI/ListApps"
	ConfigAPI_GetApp_FullMethodName                      = "/speechly.config.v1.ConfigAPI/GetApp"
	ConfigAPI_CreateApp_FullMethodName                   = "/speechly.config.v1.ConfigAPI/CreateApp"
	ConfigAPI_UpdateApp_FullMethodName                   = "/speechly.config.v1.ConfigAPI/UpdateApp"
	ConfigAPI_DeleteApp_FullMethodName                   = "/speechly.config.v1.ConfigAPI/DeleteApp"
	ConfigAPI_UploadTrainingData_FullMethodName          = "/speechly.config.v1.ConfigAPI/UploadTrainingData"
	ConfigAPI_DownloadCurrentTrainingData_FullMethodName = "/speechly.config.v1.ConfigAPI/DownloadCurrentTrainingData"
)

// ConfigAPIClient is the client API for ConfigAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigAPIClient interface {
	// Lists all current user projects.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// Creates a new project for current user.
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// Updates an existing project.
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// Lists all users with access to a project.
	GetProjectParticipants(ctx context.Context, in *GetProjectParticipantsRequest, opts ...grpc.CallOption) (*GetProjectParticipantsResponse, error)
	// Generates an invitation link for another user to join a project,
	// which can be used to call JoinProject.
	Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
	// Joins a project as a current user.
	// Requires a link generated with `Invite`.
	JoinProject(ctx context.Context, in *JoinProjectRequest, opts ...grpc.CallOption) (*JoinProjectResponse, error)
	// Lists all applications in a project.
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// Gets detailed information about an application.
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	// Creates a new application for current user.
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// Updates an existing application.
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// Deletes an existing application.
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error)
	// Uploads new training data for an application.
	// This will create and queue a new training job for that application.
	UploadTrainingData(ctx context.Context, opts ...grpc.CallOption) (ConfigAPI_UploadTrainingDataClient, error)
	// Downloads current training data for an application.
	DownloadCurrentTrainingData(ctx context.Context, in *DownloadCurrentTrainingDataRequest, opts ...grpc.CallOption) (ConfigAPI_DownloadCurrentTrainingDataClient, error)
}

type configAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigAPIClient(cc grpc.ClientConnInterface) ConfigAPIClient {
	return &configAPIClient{cc}
}

func (c *configAPIClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) GetProjectParticipants(ctx context.Context, in *GetProjectParticipantsRequest, opts ...grpc.CallOption) (*GetProjectParticipantsResponse, error) {
	out := new(GetProjectParticipantsResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_GetProjectParticipants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_Invite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) JoinProject(ctx context.Context, in *JoinProjectRequest, opts ...grpc.CallOption) (*JoinProjectResponse, error) {
	out := new(JoinProjectResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_JoinProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, ConfigAPI_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAPIClient) UploadTrainingData(ctx context.Context, opts ...grpc.CallOption) (ConfigAPI_UploadTrainingDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigAPI_ServiceDesc.Streams[0], ConfigAPI_UploadTrainingData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configAPIUploadTrainingDataClient{stream}
	return x, nil
}

type ConfigAPI_UploadTrainingDataClient interface {
	Send(*UploadTrainingDataRequest) error
	CloseAndRecv() (*UploadTrainingDataResponse, error)
	grpc.ClientStream
}

type configAPIUploadTrainingDataClient struct {
	grpc.ClientStream
}

func (x *configAPIUploadTrainingDataClient) Send(m *UploadTrainingDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configAPIUploadTrainingDataClient) CloseAndRecv() (*UploadTrainingDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadTrainingDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configAPIClient) DownloadCurrentTrainingData(ctx context.Context, in *DownloadCurrentTrainingDataRequest, opts ...grpc.CallOption) (ConfigAPI_DownloadCurrentTrainingDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigAPI_ServiceDesc.Streams[1], ConfigAPI_DownloadCurrentTrainingData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configAPIDownloadCurrentTrainingDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigAPI_DownloadCurrentTrainingDataClient interface {
	Recv() (*DownloadCurrentTrainingDataResponse, error)
	grpc.ClientStream
}

type configAPIDownloadCurrentTrainingDataClient struct {
	grpc.ClientStream
}

func (x *configAPIDownloadCurrentTrainingDataClient) Recv() (*DownloadCurrentTrainingDataResponse, error) {
	m := new(DownloadCurrentTrainingDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigAPIServer is the server API for ConfigAPI service.
// All implementations must embed UnimplementedConfigAPIServer
// for forward compatibility
type ConfigAPIServer interface {
	// Lists all current user projects.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// Creates a new project for current user.
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// Updates an existing project.
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// Lists all users with access to a project.
	GetProjectParticipants(context.Context, *GetProjectParticipantsRequest) (*GetProjectParticipantsResponse, error)
	// Generates an invitation link for another user to join a project,
	// which can be used to call JoinProject.
	Invite(context.Context, *InviteRequest) (*InviteResponse, error)
	// Joins a project as a current user.
	// Requires a link generated with `Invite`.
	JoinProject(context.Context, *JoinProjectRequest) (*JoinProjectResponse, error)
	// Lists all applications in a project.
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// Gets detailed information about an application.
	GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error)
	// Creates a new application for current user.
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// Updates an existing application.
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// Deletes an existing application.
	DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error)
	// Uploads new training data for an application.
	// This will create and queue a new training job for that application.
	UploadTrainingData(ConfigAPI_UploadTrainingDataServer) error
	// Downloads current training data for an application.
	DownloadCurrentTrainingData(*DownloadCurrentTrainingDataRequest, ConfigAPI_DownloadCurrentTrainingDataServer) error
	mustEmbedUnimplementedConfigAPIServer()
}

// UnimplementedConfigAPIServer must be embedded to have forward compatible implementations.
type UnimplementedConfigAPIServer struct {
}

func (UnimplementedConfigAPIServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedConfigAPIServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedConfigAPIServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedConfigAPIServer) GetProjectParticipants(context.Context, *GetProjectParticipantsRequest) (*GetProjectParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectParticipants not implemented")
}
func (UnimplementedConfigAPIServer) Invite(context.Context, *InviteRequest) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedConfigAPIServer) JoinProject(context.Context, *JoinProjectRequest) (*JoinProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinProject not implemented")
}
func (UnimplementedConfigAPIServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedConfigAPIServer) GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedConfigAPIServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedConfigAPIServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedConfigAPIServer) DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedConfigAPIServer) UploadTrainingData(ConfigAPI_UploadTrainingDataServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadTrainingData not implemented")
}
func (UnimplementedConfigAPIServer) DownloadCurrentTrainingData(*DownloadCurrentTrainingDataRequest, ConfigAPI_DownloadCurrentTrainingDataServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadCurrentTrainingData not implemented")
}
func (UnimplementedConfigAPIServer) mustEmbedUnimplementedConfigAPIServer() {}

// UnsafeConfigAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigAPIServer will
// result in compilation errors.
type UnsafeConfigAPIServer interface {
	mustEmbedUnimplementedConfigAPIServer()
}

func RegisterConfigAPIServer(s grpc.ServiceRegistrar, srv ConfigAPIServer) {
	s.RegisterService(&ConfigAPI_ServiceDesc, srv)
}

func _ConfigAPI_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_GetProjectParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).GetProjectParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_GetProjectParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).GetProjectParticipants(ctx, req.(*GetProjectParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_Invite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).Invite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_JoinProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).JoinProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_JoinProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).JoinProject(ctx, req.(*JoinProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAPI_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAPI_UploadTrainingData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigAPIServer).UploadTrainingData(&configAPIUploadTrainingDataServer{stream})
}

type ConfigAPI_UploadTrainingDataServer interface {
	SendAndClose(*UploadTrainingDataResponse) error
	Recv() (*UploadTrainingDataRequest, error)
	grpc.ServerStream
}

type configAPIUploadTrainingDataServer struct {
	grpc.ServerStream
}

func (x *configAPIUploadTrainingDataServer) SendAndClose(m *UploadTrainingDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configAPIUploadTrainingDataServer) Recv() (*UploadTrainingDataRequest, error) {
	m := new(UploadTrainingDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ConfigAPI_DownloadCurrentTrainingData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadCurrentTrainingDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigAPIServer).DownloadCurrentTrainingData(m, &configAPIDownloadCurrentTrainingDataServer{stream})
}

type ConfigAPI_DownloadCurrentTrainingDataServer interface {
	Send(*DownloadCurrentTrainingDataResponse) error
	grpc.ServerStream
}

type configAPIDownloadCurrentTrainingDataServer struct {
	grpc.ServerStream
}

func (x *configAPIDownloadCurrentTrainingDataServer) Send(m *DownloadCurrentTrainingDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigAPI_ServiceDesc is the grpc.ServiceDesc for ConfigAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechly.config.v1.ConfigAPI",
	HandlerType: (*ConfigAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _ConfigAPI_GetProject_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ConfigAPI_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ConfigAPI_UpdateProject_Handler,
		},
		{
			MethodName: "GetProjectParticipants",
			Handler:    _ConfigAPI_GetProjectParticipants_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _ConfigAPI_Invite_Handler,
		},
		{
			MethodName: "JoinProject",
			Handler:    _ConfigAPI_JoinProject_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _ConfigAPI_ListApps_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _ConfigAPI_GetApp_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _ConfigAPI_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _ConfigAPI_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _ConfigAPI_DeleteApp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadTrainingData",
			Handler:       _ConfigAPI_UploadTrainingData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadCurrentTrainingData",
			Handler:       _ConfigAPI_DownloadCurrentTrainingData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "speechly/config/v1/config_api.proto",
}
