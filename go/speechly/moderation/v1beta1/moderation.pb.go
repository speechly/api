// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: speechly/moderation/v1beta1/moderation.proto

package sluv1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the context where the moderated discussion took place.
type DiscourseContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for the voice channel, e.g. voice chat room, the utterance originates from
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The identifier of the person who spoke the utterance
	SpeakerId string `protobuf:"bytes,2,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	// A list of person identifiers who were presumed to hear the utterance
	ListenerIds []string `protobuf:"bytes,3,rep,name=listener_ids,json=listenerIds,proto3" json:"listener_ids,omitempty"`
	// Start time of the utterance
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time of the utterance
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *DiscourseContext) Reset() {
	*x = DiscourseContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscourseContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscourseContext) ProtoMessage() {}

func (x *DiscourseContext) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscourseContext.ProtoReflect.Descriptor instead.
func (*DiscourseContext) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_proto_rawDescGZIP(), []int{0}
}

func (x *DiscourseContext) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DiscourseContext) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *DiscourseContext) GetListenerIds() []string {
	if x != nil {
		return x.ListenerIds
	}
	return nil
}

func (x *DiscourseContext) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DiscourseContext) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Describes and identified label desbribing the content under moderation.
type ModerationLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label itself
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Confidence score. Value is between 0 and 1. The score should not be interpreted as probability.
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	// The value is true if the model flags the label as abusive, otherwise it's false.
	Flagged bool `protobuf:"varint,3,opt,name=flagged,proto3" json:"flagged,omitempty"`
}

func (x *ModerationLabel) Reset() {
	*x = ModerationLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModerationLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerationLabel) ProtoMessage() {}

func (x *ModerationLabel) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerationLabel.ProtoReflect.Descriptor instead.
func (*ModerationLabel) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_proto_rawDescGZIP(), []int{1}
}

func (x *ModerationLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ModerationLabel) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ModerationLabel) GetFlagged() bool {
	if x != nil {
		return x.Flagged
	}
	return false
}

// Describes the metadata of the audio to be moderated.
type AudioModerationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the model to be used for the moderation.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// The language of the utterance (as BCP-47 language code)
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Description of the context where the utterance was uttered.
	DiscourseContext *DiscourseContext `protobuf:"bytes,3,opt,name=discourse_context,json=discourseContext,proto3" json:"discourse_context,omitempty"`
}

func (x *AudioModerationConfig) Reset() {
	*x = AudioModerationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioModerationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioModerationConfig) ProtoMessage() {}

func (x *AudioModerationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioModerationConfig.ProtoReflect.Descriptor instead.
func (*AudioModerationConfig) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_proto_rawDescGZIP(), []int{2}
}

func (x *AudioModerationConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *AudioModerationConfig) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *AudioModerationConfig) GetDiscourseContext() *DiscourseContext {
	if x != nil {
		return x.DiscourseContext
	}
	return nil
}

// Describes the moderation results applying to a sub segment of the content under moderation.
type ModerationSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the segment
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Transcript of the content of the segment
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// The moderation labels
	Labels []*ModerationLabel `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	// Start time of the segment in milliseconds
	StartMs uint32 `protobuf:"varint,4,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	// End time of the segment in milliseconds
	EndMs uint32 `protobuf:"varint,5,opt,name=end_ms,json=endMs,proto3" json:"end_ms,omitempty"`
}

func (x *ModerationSegment) Reset() {
	*x = ModerationSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModerationSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerationSegment) ProtoMessage() {}

func (x *ModerationSegment) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerationSegment.ProtoReflect.Descriptor instead.
func (*ModerationSegment) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_proto_rawDescGZIP(), []int{3}
}

func (x *ModerationSegment) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ModerationSegment) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *ModerationSegment) GetLabels() []*ModerationLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ModerationSegment) GetStartMs() uint32 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *ModerationSegment) GetEndMs() uint32 {
	if x != nil {
		return x.EndMs
	}
	return 0
}

var File_speechly_moderation_v1beta1_moderation_proto protoreflect.FileDescriptor

var file_speechly_moderation_v1beta1_moderation_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a,
	0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x15, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x42, 0x9e, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0f, 0x4d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x73, 0x6c, 0x75, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x4d, 0x58, 0xaa, 0x02, 0x1b, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1b, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5c, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speechly_moderation_v1beta1_moderation_proto_rawDescOnce sync.Once
	file_speechly_moderation_v1beta1_moderation_proto_rawDescData = file_speechly_moderation_v1beta1_moderation_proto_rawDesc
)

func file_speechly_moderation_v1beta1_moderation_proto_rawDescGZIP() []byte {
	file_speechly_moderation_v1beta1_moderation_proto_rawDescOnce.Do(func() {
		file_speechly_moderation_v1beta1_moderation_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_moderation_v1beta1_moderation_proto_rawDescData)
	})
	return file_speechly_moderation_v1beta1_moderation_proto_rawDescData
}

var file_speechly_moderation_v1beta1_moderation_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_speechly_moderation_v1beta1_moderation_proto_goTypes = []interface{}{
	(*DiscourseContext)(nil),      // 0: speechly.moderation.v1beta1.DiscourseContext
	(*ModerationLabel)(nil),       // 1: speechly.moderation.v1beta1.ModerationLabel
	(*AudioModerationConfig)(nil), // 2: speechly.moderation.v1beta1.AudioModerationConfig
	(*ModerationSegment)(nil),     // 3: speechly.moderation.v1beta1.ModerationSegment
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_speechly_moderation_v1beta1_moderation_proto_depIdxs = []int32{
	4, // 0: speechly.moderation.v1beta1.DiscourseContext.start_time:type_name -> google.protobuf.Timestamp
	4, // 1: speechly.moderation.v1beta1.DiscourseContext.end_time:type_name -> google.protobuf.Timestamp
	0, // 2: speechly.moderation.v1beta1.AudioModerationConfig.discourse_context:type_name -> speechly.moderation.v1beta1.DiscourseContext
	1, // 3: speechly.moderation.v1beta1.ModerationSegment.labels:type_name -> speechly.moderation.v1beta1.ModerationLabel
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_speechly_moderation_v1beta1_moderation_proto_init() }
func file_speechly_moderation_v1beta1_moderation_proto_init() {
	if File_speechly_moderation_v1beta1_moderation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speechly_moderation_v1beta1_moderation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscourseContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModerationLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioModerationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModerationSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_moderation_v1beta1_moderation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_speechly_moderation_v1beta1_moderation_proto_goTypes,
		DependencyIndexes: file_speechly_moderation_v1beta1_moderation_proto_depIdxs,
		MessageInfos:      file_speechly_moderation_v1beta1_moderation_proto_msgTypes,
	}.Build()
	File_speechly_moderation_v1beta1_moderation_proto = out.File
	file_speechly_moderation_v1beta1_moderation_proto_rawDesc = nil
	file_speechly_moderation_v1beta1_moderation_proto_goTypes = nil
	file_speechly_moderation_v1beta1_moderation_proto_depIdxs = nil
}
