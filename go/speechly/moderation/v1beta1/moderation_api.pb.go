// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: speechly/moderation/v1beta1/moderation_api.proto

package sluv1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TextModerationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the model to be used for the moderation.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Transcript of the utterance to moderate
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Description of the context where the utterance was uttered.
	DiscourseContext *DiscourseContext `protobuf:"bytes,3,opt,name=discourse_context,json=discourseContext,proto3" json:"discourse_context,omitempty"`
	// The language of the utterance (as BCP-47 language code)
	LanguageCode string `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Audio context id corresponding to the text.
	AudioContextId string `protobuf:"bytes,5,opt,name=audio_context_id,json=audioContextId,proto3" json:"audio_context_id,omitempty"`
}

func (x *TextModerationRequest) Reset() {
	*x = TextModerationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextModerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextModerationRequest) ProtoMessage() {}

func (x *TextModerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextModerationRequest.ProtoReflect.Descriptor instead.
func (*TextModerationRequest) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_api_proto_rawDescGZIP(), []int{0}
}

func (x *TextModerationRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *TextModerationRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextModerationRequest) GetDiscourseContext() *DiscourseContext {
	if x != nil {
		return x.DiscourseContext
	}
	return nil
}

func (x *TextModerationRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *TextModerationRequest) GetAudioContextId() string {
	if x != nil {
		return x.AudioContextId
	}
	return ""
}

type TextModerationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*ModerationLabel `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *TextModerationResponse) Reset() {
	*x = TextModerationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextModerationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextModerationResponse) ProtoMessage() {}

func (x *TextModerationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextModerationResponse.ProtoReflect.Descriptor instead.
func (*TextModerationResponse) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_api_proto_rawDescGZIP(), []int{1}
}

func (x *TextModerationResponse) GetLabels() []*ModerationLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

type AudioModerationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamingRequest:
	//
	//	*AudioModerationRequest_Config
	//	*AudioModerationRequest_Audio
	StreamingRequest isAudioModerationRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
}

func (x *AudioModerationRequest) Reset() {
	*x = AudioModerationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioModerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioModerationRequest) ProtoMessage() {}

func (x *AudioModerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioModerationRequest.ProtoReflect.Descriptor instead.
func (*AudioModerationRequest) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_api_proto_rawDescGZIP(), []int{2}
}

func (m *AudioModerationRequest) GetStreamingRequest() isAudioModerationRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *AudioModerationRequest) GetConfig() *AudioModerationConfig {
	if x, ok := x.GetStreamingRequest().(*AudioModerationRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *AudioModerationRequest) GetAudio() []byte {
	if x, ok := x.GetStreamingRequest().(*AudioModerationRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isAudioModerationRequest_StreamingRequest interface {
	isAudioModerationRequest_StreamingRequest()
}

type AudioModerationRequest_Config struct {
	// Configuration related to the Audio Moderation request. Must be set on the first message.
	Config *AudioModerationConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type AudioModerationRequest_Audio struct {
	// Bytes of audio. Must be in a supported format, see https://docs.speechly.com/features/audio-formats
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*AudioModerationRequest_Config) isAudioModerationRequest_StreamingRequest() {}

func (*AudioModerationRequest_Audio) isAudioModerationRequest_StreamingRequest() {}

type AudioModerationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments []*ModerationSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *AudioModerationResponse) Reset() {
	*x = AudioModerationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioModerationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioModerationResponse) ProtoMessage() {}

func (x *AudioModerationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioModerationResponse.ProtoReflect.Descriptor instead.
func (*AudioModerationResponse) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_api_proto_rawDescGZIP(), []int{3}
}

func (x *AudioModerationResponse) GetSegments() []*ModerationSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type StreamingAudioModerationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamingRequest:
	//
	//	*StreamingAudioModerationRequest_Config
	//	*StreamingAudioModerationRequest_Audio
	StreamingRequest isStreamingAudioModerationRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
}

func (x *StreamingAudioModerationRequest) Reset() {
	*x = StreamingAudioModerationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAudioModerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAudioModerationRequest) ProtoMessage() {}

func (x *StreamingAudioModerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAudioModerationRequest.ProtoReflect.Descriptor instead.
func (*StreamingAudioModerationRequest) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_api_proto_rawDescGZIP(), []int{4}
}

func (m *StreamingAudioModerationRequest) GetStreamingRequest() isStreamingAudioModerationRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *StreamingAudioModerationRequest) GetConfig() *AudioModerationConfig {
	if x, ok := x.GetStreamingRequest().(*StreamingAudioModerationRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingAudioModerationRequest) GetAudio() []byte {
	if x, ok := x.GetStreamingRequest().(*StreamingAudioModerationRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingAudioModerationRequest_StreamingRequest interface {
	isStreamingAudioModerationRequest_StreamingRequest()
}

type StreamingAudioModerationRequest_Config struct {
	// Configuration related to the Audio Moderation request. Must be set on the first message.
	Config *AudioModerationConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingAudioModerationRequest_Audio struct {
	// Bytes of audio. Must be in a supported format, see https://docs.speechly.com/features/audio-formats
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingAudioModerationRequest_Config) isStreamingAudioModerationRequest_StreamingRequest() {}

func (*StreamingAudioModerationRequest_Audio) isStreamingAudioModerationRequest_StreamingRequest() {}

type StreamingAudioModerationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment *ModerationSegment `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *StreamingAudioModerationResponse) Reset() {
	*x = StreamingAudioModerationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAudioModerationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAudioModerationResponse) ProtoMessage() {}

func (x *StreamingAudioModerationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAudioModerationResponse.ProtoReflect.Descriptor instead.
func (*StreamingAudioModerationResponse) Descriptor() ([]byte, []int) {
	return file_speechly_moderation_v1beta1_moderation_api_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingAudioModerationResponse) GetSegment() *ModerationSegment {
	if x != nil {
		return x.Segment
	}
	return nil
}

var File_speechly_moderation_v1beta1_moderation_api_proto protoreflect.FileDescriptor

var file_speechly_moderation_v1beta1_moderation_api_proto_rawDesc = []byte{
	0x0a, 0x30, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a,
	0x2c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x01,
	0x0a, 0x15, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x22, 0x5e, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9c,
	0x01, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a,
	0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0xa8, 0x03, 0x0a, 0x0d,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x7e, 0x0a,
	0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x9b, 0x01,
	0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x0e, 0x54,
	0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa1, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x12, 0x4d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x26, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x73, 0x6c,
	0x75, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x4d, 0x58, 0xaa, 0x02,
	0x1b, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1b, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_speechly_moderation_v1beta1_moderation_api_proto_rawDescOnce sync.Once
	file_speechly_moderation_v1beta1_moderation_api_proto_rawDescData = file_speechly_moderation_v1beta1_moderation_api_proto_rawDesc
)

func file_speechly_moderation_v1beta1_moderation_api_proto_rawDescGZIP() []byte {
	file_speechly_moderation_v1beta1_moderation_api_proto_rawDescOnce.Do(func() {
		file_speechly_moderation_v1beta1_moderation_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_moderation_v1beta1_moderation_api_proto_rawDescData)
	})
	return file_speechly_moderation_v1beta1_moderation_api_proto_rawDescData
}

var file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_speechly_moderation_v1beta1_moderation_api_proto_goTypes = []interface{}{
	(*TextModerationRequest)(nil),            // 0: speechly.moderation.v1beta1.TextModerationRequest
	(*TextModerationResponse)(nil),           // 1: speechly.moderation.v1beta1.TextModerationResponse
	(*AudioModerationRequest)(nil),           // 2: speechly.moderation.v1beta1.AudioModerationRequest
	(*AudioModerationResponse)(nil),          // 3: speechly.moderation.v1beta1.AudioModerationResponse
	(*StreamingAudioModerationRequest)(nil),  // 4: speechly.moderation.v1beta1.StreamingAudioModerationRequest
	(*StreamingAudioModerationResponse)(nil), // 5: speechly.moderation.v1beta1.StreamingAudioModerationResponse
	(*DiscourseContext)(nil),                 // 6: speechly.moderation.v1beta1.DiscourseContext
	(*ModerationLabel)(nil),                  // 7: speechly.moderation.v1beta1.ModerationLabel
	(*AudioModerationConfig)(nil),            // 8: speechly.moderation.v1beta1.AudioModerationConfig
	(*ModerationSegment)(nil),                // 9: speechly.moderation.v1beta1.ModerationSegment
}
var file_speechly_moderation_v1beta1_moderation_api_proto_depIdxs = []int32{
	6, // 0: speechly.moderation.v1beta1.TextModerationRequest.discourse_context:type_name -> speechly.moderation.v1beta1.DiscourseContext
	7, // 1: speechly.moderation.v1beta1.TextModerationResponse.labels:type_name -> speechly.moderation.v1beta1.ModerationLabel
	8, // 2: speechly.moderation.v1beta1.AudioModerationRequest.config:type_name -> speechly.moderation.v1beta1.AudioModerationConfig
	9, // 3: speechly.moderation.v1beta1.AudioModerationResponse.segments:type_name -> speechly.moderation.v1beta1.ModerationSegment
	8, // 4: speechly.moderation.v1beta1.StreamingAudioModerationRequest.config:type_name -> speechly.moderation.v1beta1.AudioModerationConfig
	9, // 5: speechly.moderation.v1beta1.StreamingAudioModerationResponse.segment:type_name -> speechly.moderation.v1beta1.ModerationSegment
	2, // 6: speechly.moderation.v1beta1.ModerationAPI.AudioModeration:input_type -> speechly.moderation.v1beta1.AudioModerationRequest
	4, // 7: speechly.moderation.v1beta1.ModerationAPI.StreamingAudioModeration:input_type -> speechly.moderation.v1beta1.StreamingAudioModerationRequest
	0, // 8: speechly.moderation.v1beta1.ModerationAPI.TextModeration:input_type -> speechly.moderation.v1beta1.TextModerationRequest
	3, // 9: speechly.moderation.v1beta1.ModerationAPI.AudioModeration:output_type -> speechly.moderation.v1beta1.AudioModerationResponse
	5, // 10: speechly.moderation.v1beta1.ModerationAPI.StreamingAudioModeration:output_type -> speechly.moderation.v1beta1.StreamingAudioModerationResponse
	1, // 11: speechly.moderation.v1beta1.ModerationAPI.TextModeration:output_type -> speechly.moderation.v1beta1.TextModerationResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_speechly_moderation_v1beta1_moderation_api_proto_init() }
func file_speechly_moderation_v1beta1_moderation_api_proto_init() {
	if File_speechly_moderation_v1beta1_moderation_api_proto != nil {
		return
	}
	file_speechly_moderation_v1beta1_moderation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextModerationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextModerationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioModerationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioModerationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAudioModerationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAudioModerationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AudioModerationRequest_Config)(nil),
		(*AudioModerationRequest_Audio)(nil),
	}
	file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StreamingAudioModerationRequest_Config)(nil),
		(*StreamingAudioModerationRequest_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_moderation_v1beta1_moderation_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speechly_moderation_v1beta1_moderation_api_proto_goTypes,
		DependencyIndexes: file_speechly_moderation_v1beta1_moderation_api_proto_depIdxs,
		MessageInfos:      file_speechly_moderation_v1beta1_moderation_api_proto_msgTypes,
	}.Build()
	File_speechly_moderation_v1beta1_moderation_api_proto = out.File
	file_speechly_moderation_v1beta1_moderation_api_proto_rawDesc = nil
	file_speechly_moderation_v1beta1_moderation_api_proto_goTypes = nil
	file_speechly_moderation_v1beta1_moderation_api_proto_depIdxs = nil
}
