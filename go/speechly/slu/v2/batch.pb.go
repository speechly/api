// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: speechly/slu/v2/batch.proto

package sluv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The status of the operation.
type Operation_Status int32

const (
	// Default status is empty.
	Operation_STATUS_UNSPECIFIED Operation_Status = 0
	// The operation is queued for processing.
	Operation_STATUS_PENDING Operation_Status = 1
	// The operation is complete and transcript is available.
	Operation_STATUS_DONE Operation_Status = 2
	// The processing failed. Error reason is available.
	Operation_STATUS_ERROR Operation_Status = 3
)

// Enum value maps for Operation_Status.
var (
	Operation_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_DONE",
		3: "STATUS_ERROR",
	}
	Operation_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_PENDING":     1,
		"STATUS_DONE":        2,
		"STATUS_ERROR":       3,
	}
)

func (x Operation_Status) Enum() *Operation_Status {
	p := new(Operation_Status)
	*p = x
	return p
}

func (x Operation_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_slu_v2_batch_proto_enumTypes[0].Descriptor()
}

func (Operation_Status) Type() protoreflect.EnumType {
	return &file_speechly_slu_v2_batch_proto_enumTypes[0]
}

func (x Operation_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Status.Descriptor instead.
func (Operation_Status) EnumDescriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{4, 0}
}

// Contains a machine readable error type if the operation status is
// STATUS_ERROR.
type Operation_ErrorCode int32

const (
	// No error is set.
	Operation_ERROR_UNSPECIFIED Operation_ErrorCode = 0
	// The input was in a language that was not supported in this context.
	Operation_ERROR_UNSUPPORTED_LANGUAGE Operation_ErrorCode = 1
	// An internal error occurred.
	Operation_ERROR_INTERNAL Operation_ErrorCode = 2
	// Given parameters cannot be used to process the given input.
	Operation_ERROR_INVALID_PARAMETERS Operation_ErrorCode = 3
	// The source could not be read or understood.
	Operation_ERROR_INVALID_SOURCE Operation_ErrorCode = 4
	// The results could not be written to the destination.
	Operation_ERROR_INVALID_DESTINATION Operation_ErrorCode = 5
	// The provided audio was not in a supported format.
	Operation_ERROR_INVALID_AUDIO Operation_ErrorCode = 6
)

// Enum value maps for Operation_ErrorCode.
var (
	Operation_ErrorCode_name = map[int32]string{
		0: "ERROR_UNSPECIFIED",
		1: "ERROR_UNSUPPORTED_LANGUAGE",
		2: "ERROR_INTERNAL",
		3: "ERROR_INVALID_PARAMETERS",
		4: "ERROR_INVALID_SOURCE",
		5: "ERROR_INVALID_DESTINATION",
		6: "ERROR_INVALID_AUDIO",
	}
	Operation_ErrorCode_value = map[string]int32{
		"ERROR_UNSPECIFIED":          0,
		"ERROR_UNSUPPORTED_LANGUAGE": 1,
		"ERROR_INTERNAL":             2,
		"ERROR_INVALID_PARAMETERS":   3,
		"ERROR_INVALID_SOURCE":       4,
		"ERROR_INVALID_DESTINATION":  5,
		"ERROR_INVALID_AUDIO":        6,
	}
)

func (x Operation_ErrorCode) Enum() *Operation_ErrorCode {
	p := new(Operation_ErrorCode)
	*p = x
	return p
}

func (x Operation_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_slu_v2_batch_proto_enumTypes[1].Descriptor()
}

func (Operation_ErrorCode) Type() protoreflect.EnumType {
	return &file_speechly_slu_v2_batch_proto_enumTypes[1]
}

func (x Operation_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_ErrorCode.Descriptor instead.
func (Operation_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{4, 1}
}

// The possible types for the operation result.
type OperationResult_ResultType int32

const (
	// Result type is not set.
	OperationResult_RESULT_TYPE_UNSPECIFIED OperationResult_ResultType = 0
	// The actual words of the audio with no additional processing applied.
	OperationResult_RESULT_TYPE_TRANSCRIPT_LEXICAL OperationResult_ResultType = 1
	// The content of the audio formatted to be displayed on screen, with eg.
	// punctuation and capitalization included.
	OperationResult_RESULT_TYPE_TRANSCRIPT_DISPLAY OperationResult_ResultType = 2
	// The content of the audio translated to English.
	OperationResult_RESULT_TYPE_TRANSLATION OperationResult_ResultType = 3
)

// Enum value maps for OperationResult_ResultType.
var (
	OperationResult_ResultType_name = map[int32]string{
		0: "RESULT_TYPE_UNSPECIFIED",
		1: "RESULT_TYPE_TRANSCRIPT_LEXICAL",
		2: "RESULT_TYPE_TRANSCRIPT_DISPLAY",
		3: "RESULT_TYPE_TRANSLATION",
	}
	OperationResult_ResultType_value = map[string]int32{
		"RESULT_TYPE_UNSPECIFIED":        0,
		"RESULT_TYPE_TRANSCRIPT_LEXICAL": 1,
		"RESULT_TYPE_TRANSCRIPT_DISPLAY": 2,
		"RESULT_TYPE_TRANSLATION":        3,
	}
)

func (x OperationResult_ResultType) Enum() *OperationResult_ResultType {
	p := new(OperationResult_ResultType)
	*p = x
	return p
}

func (x OperationResult_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationResult_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_slu_v2_batch_proto_enumTypes[2].Descriptor()
}

func (OperationResult_ResultType) Type() protoreflect.EnumType {
	return &file_speechly_slu_v2_batch_proto_enumTypes[2]
}

func (x OperationResult_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationResult_ResultType.Descriptor instead.
func (OperationResult_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{5, 0}
}

// The HTTP method to use when accessing an HTTP resource.
type HttpResource_Method int32

const (
	// Method is not given, and default method is used for requests.
	// Data fetches use GET, and result sending POST.
	HttpResource_METHOD_UNSPECIFIED HttpResource_Method = 0
	// Use HTTP GET.
	HttpResource_METHOD_GET HttpResource_Method = 1
	// Use HTTP POST.
	HttpResource_METHOD_POST HttpResource_Method = 2
	// Use HTTP PUT.
	HttpResource_METHOD_PUT HttpResource_Method = 3
)

// Enum value maps for HttpResource_Method.
var (
	HttpResource_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "METHOD_GET",
		2: "METHOD_POST",
		3: "METHOD_PUT",
	}
	HttpResource_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
		"METHOD_GET":         1,
		"METHOD_POST":        2,
		"METHOD_PUT":         3,
	}
)

func (x HttpResource_Method) Enum() *HttpResource_Method {
	p := new(HttpResource_Method)
	*p = x
	return p
}

func (x HttpResource_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpResource_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_slu_v2_batch_proto_enumTypes[3].Descriptor()
}

func (HttpResource_Method) Type() protoreflect.EnumType {
	return &file_speechly_slu_v2_batch_proto_enumTypes[3]
}

func (x HttpResource_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpResource_Method.Descriptor instead.
func (HttpResource_Method) EnumDescriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{8, 0}
}

// Describes the processing options for the audio. Note that not all options are
// available for all languages or on all Payment Plans.
// If all options are left to default values, `transcribe` is set as default.
type BatchTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Results will include a transcription of the audio.
	// Optional, defaults to true.
	Transcribe bool `protobuf:"varint,1,opt,name=transcribe,proto3" json:"transcribe,omitempty"`
	// The processing should include translating the audio to English.
	// Optional, defaults to false.
	Translate bool `protobuf:"varint,2,opt,name=translate,proto3" json:"translate,omitempty"`
}

func (x *BatchTasks) Reset() {
	*x = BatchTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTasks) ProtoMessage() {}

func (x *BatchTasks) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTasks.ProtoReflect.Descriptor instead.
func (*BatchTasks) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{0}
}

func (x *BatchTasks) GetTranscribe() bool {
	if x != nil {
		return x.Transcribe
	}
	return false
}

func (x *BatchTasks) GetTranslate() bool {
	if x != nil {
		return x.Translate
	}
	return false
}

// Define the output formats for results. If all options are set as false,
// `display` is returned.
type BatchOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// return text formatted for display, ie. capitalized and punctuated.
	// Optional, defaults to false.
	Display bool `protobuf:"varint,1,opt,name=display,proto3" json:"display,omitempty"`
	// return lexical version of the transcript, ie. lower case and no
	// punctuation.
	// Optional, defaults to false.
	Lexical bool `protobuf:"varint,2,opt,name=lexical,proto3" json:"lexical,omitempty"`
	// return the token level transcription and time stamps for tokens.
	// Optional, defaults to false.
	Tokenized bool `protobuf:"varint,3,opt,name=tokenized,proto3" json:"tokenized,omitempty"`
}

func (x *BatchOutput) Reset() {
	*x = BatchOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutput) ProtoMessage() {}

func (x *BatchOutput) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutput.ProtoReflect.Descriptor instead.
func (*BatchOutput) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{1}
}

func (x *BatchOutput) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *BatchOutput) GetLexical() bool {
	if x != nil {
		return x.Lexical
	}
	return false
}

func (x *BatchOutput) GetTokenized() bool {
	if x != nil {
		return x.Tokenized
	}
	return false
}

// Describes the configuration options common for the input batch.
type BatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the language model to use when processing the audio.
	// Optional. If not provided, the model to use will be determined
	// from the login information or from language detection.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// The language(s) of the audio sent in the request as a BCP-47 language tag
	// (e.g. "en-US"). Defaults to the target application language(s).
	// Optional.
	LanguageCodes []string `protobuf:"bytes,2,rep,name=language_codes,json=languageCodes,proto3" json:"language_codes,omitempty"`
	// Reference id for a set of related operations. For example an identifier of
	// the source system.
	// Optional.
	BatchReference string `protobuf:"bytes,4,opt,name=batch_reference,json=batchReference,proto3" json:"batch_reference,omitempty"`
	// Priority for the operation. Operations are processed in the order they are
	// created, but higher priority operations are processed before the lower
	// priority operations.
	// Optional, defaults to 0 (normal priority).
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// Additional batch specific options.
	// Optional.
	Options []*Option `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *BatchConfig) Reset() {
	*x = BatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfig) ProtoMessage() {}

func (x *BatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConfig.ProtoReflect.Descriptor instead.
func (*BatchConfig) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{2}
}

func (x *BatchConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *BatchConfig) GetLanguageCodes() []string {
	if x != nil {
		return x.LanguageCodes
	}
	return nil
}

func (x *BatchConfig) GetBatchReference() string {
	if x != nil {
		return x.BatchReference
	}
	return ""
}

func (x *BatchConfig) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *BatchConfig) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

// Describes the configuration options unique to a single audio source.
type ProcessAudioSourceRequestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The locator to the source audio.
	// Required.
	SourceUrl string `protobuf:"bytes,1,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	// The locator to the result target. The payload will be `Operation` as JSON.
	// Optional.
	DestinationUrl string `protobuf:"bytes,2,opt,name=destination_url,json=destinationUrl,proto3" json:"destination_url,omitempty"`
	// HTTP endpoint to be notified on completion of the processing. The payload
	// will be `Operation` as JSON.
	// Optional.
	CompletionWebhook *HttpResource `protobuf:"bytes,3,opt,name=completion_webhook,json=completionWebhook,proto3" json:"completion_webhook,omitempty"`
	// Reference id for the operation. For example an identifier of the source
	// system.
	// Optional.
	Reference string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	// The device ID of the audio source, for example a microphone identifier as
	// UUID.
	// Optional.
	DeviceId string `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *ProcessAudioSourceRequestItem) Reset() {
	*x = ProcessAudioSourceRequestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAudioSourceRequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAudioSourceRequestItem) ProtoMessage() {}

func (x *ProcessAudioSourceRequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAudioSourceRequestItem.ProtoReflect.Descriptor instead.
func (*ProcessAudioSourceRequestItem) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessAudioSourceRequestItem) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *ProcessAudioSourceRequestItem) GetDestinationUrl() string {
	if x != nil {
		return x.DestinationUrl
	}
	return ""
}

func (x *ProcessAudioSourceRequestItem) GetCompletionWebhook() *HttpResource {
	if x != nil {
		return x.CompletionWebhook
	}
	return nil
}

func (x *ProcessAudioSourceRequestItem) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ProcessAudioSourceRequestItem) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// Describes a single batch operation.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the operation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The reference id of the operation, if given.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	// The id of the batch the operation belongs to.
	BatchId string `protobuf:"bytes,16,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The reference id of the operation, if given.
	BatchReference string `protobuf:"bytes,17,opt,name=batch_reference,json=batchReference,proto3" json:"batch_reference,omitempty"`
	// The current status of the operation.
	Status Operation_Status `protobuf:"varint,3,opt,name=status,proto3,enum=speechly.slu.v2.Operation_Status" json:"status,omitempty"`
	// The language code of the detected language.
	LanguageCode string `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// The application context for the operation.
	AppId string `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// If the operation status is STATUS_DONE and the destination is not set,
	// the results of the processing.
	Result []*OperationResult `protobuf:"bytes,6,rep,name=result,proto3" json:"result,omitempty"`
	// The duration of the audio.
	Duration *durationpb.Duration `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// Machine-readable status for the operation.
	// Only set if operation status is STATUS_ERROR.
	ErrorCode Operation_ErrorCode `protobuf:"varint,18,opt,name=error_code,json=errorCode,proto3,enum=speechly.slu.v2.Operation_ErrorCode" json:"error_code,omitempty"`
	// Contains a human readable description of the error.
	// Only set if operation status is STATUS_ERROR.
	ErrorDescription string `protobuf:"bytes,19,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// The locator to the source audio.
	SourceUrl string `protobuf:"bytes,20,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	// The locator to the result target.
	DestinationUrl string `protobuf:"bytes,21,opt,name=destination_url,json=destinationUrl,proto3" json:"destination_url,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{4}
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Operation) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Operation) GetBatchReference() string {
	if x != nil {
		return x.BatchReference
	}
	return ""
}

func (x *Operation) GetStatus() Operation_Status {
	if x != nil {
		return x.Status
	}
	return Operation_STATUS_UNSPECIFIED
}

func (x *Operation) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *Operation) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Operation) GetResult() []*OperationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Operation) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Operation) GetErrorCode() Operation_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return Operation_ERROR_UNSPECIFIED
}

func (x *Operation) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *Operation) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Operation) GetDestinationUrl() string {
	if x != nil {
		return x.DestinationUrl
	}
	return ""
}

// Describes the results of the processing that took place.
type OperationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of this result.
	Type OperationResult_ResultType `protobuf:"varint,1,opt,name=type,proto3,enum=speechly.slu.v2.OperationResult_ResultType" json:"type,omitempty"`
	// The textual representation of the results.
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// The tokenized representation of the result. Only available if requested in
	// the `ProcessingConfiguration`.
	Tokens []*Token `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *OperationResult) Reset() {
	*x = OperationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResult) ProtoMessage() {}

func (x *OperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResult.ProtoReflect.Descriptor instead.
func (*OperationResult) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{5}
}

func (x *OperationResult) GetType() OperationResult_ResultType {
	if x != nil {
		return x.Type
	}
	return OperationResult_RESULT_TYPE_UNSPECIFIED
}

func (x *OperationResult) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *OperationResult) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

// Describes a single meaningful unit of speech. In languages that use spaces to
// separate words, closely maps to those words.
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token described.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The position of the token in the whole phrase, zero-based.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The end time of the token in the audio, in milliseconds from the beginning
	// of the audio.
	StartTime int32 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the token in the audio, in milliseconds from the beginning
	// of the audio.
	EndTime int32 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{6}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Token) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Token) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Token) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// Generic option to change the default behaviour of the SLU. Available options
// are different per project context.
type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the option to be set.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The values to set the option to.
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{7}
}

func (x *Option) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Option) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Describes full properties of an HTTP endpoint.
type HttpResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the endpoint (protocol://server/path)
	// Required.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// method to use in connection.
	// Optional.
	Method HttpResource_Method `protobuf:"varint,2,opt,name=method,proto3,enum=speechly.slu.v2.HttpResource_Method" json:"method,omitempty"`
	// Possible additional headers to include in the connection.
	// Optional.
	Headers []*HttpResource_Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *HttpResource) Reset() {
	*x = HttpResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResource) ProtoMessage() {}

func (x *HttpResource) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResource.ProtoReflect.Descriptor instead.
func (*HttpResource) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{8}
}

func (x *HttpResource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpResource) GetMethod() HttpResource_Method {
	if x != nil {
		return x.Method
	}
	return HttpResource_METHOD_UNSPECIFIED
}

func (x *HttpResource) GetHeaders() []*HttpResource_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

// A single header value in an HTTP request.
type HttpResource_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the header to set in request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the given header in request.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HttpResource_Header) Reset() {
	*x = HttpResource_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v2_batch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResource_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResource_Header) ProtoMessage() {}

func (x *HttpResource_Header) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v2_batch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResource_Header.ProtoReflect.Descriptor instead.
func (*HttpResource_Header) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v2_batch_proto_rawDescGZIP(), []int{8, 0}
}

func (x *HttpResource_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpResource_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_speechly_slu_v2_batch_proto protoreflect.FileDescriptor

var file_speechly_slu_v2_batch_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x73, 0x6c, 0x75, 0x2f, 0x76,
	0x32, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a,
	0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x0b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73,
	0x6c, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x4c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc1, 0x06, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76,
	0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e,
	0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x57, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x06, 0x22, 0xa7, 0x02, 0x0a,
	0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79,
	0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x4c, 0x45, 0x58, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x6d, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x32, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x03, 0x42,
	0x64, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e,
	0x73, 0x6c, 0x75, 0x2e, 0x76, 0x32, 0x42, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x15, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x73,
	0x6c, 0x75, 0x2f, 0x76, 0x32, 0x3b, 0x73, 0x6c, 0x75, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x53, 0x53,
	0x58, 0xaa, 0x02, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x53, 0x6c, 0x75,
	0x2e, 0x56, 0x32, 0xca, 0x02, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x5c, 0x53,
	0x6c, 0x75, 0x5c, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speechly_slu_v2_batch_proto_rawDescOnce sync.Once
	file_speechly_slu_v2_batch_proto_rawDescData = file_speechly_slu_v2_batch_proto_rawDesc
)

func file_speechly_slu_v2_batch_proto_rawDescGZIP() []byte {
	file_speechly_slu_v2_batch_proto_rawDescOnce.Do(func() {
		file_speechly_slu_v2_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_slu_v2_batch_proto_rawDescData)
	})
	return file_speechly_slu_v2_batch_proto_rawDescData
}

var file_speechly_slu_v2_batch_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_speechly_slu_v2_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_speechly_slu_v2_batch_proto_goTypes = []interface{}{
	(Operation_Status)(0),                 // 0: speechly.slu.v2.Operation.Status
	(Operation_ErrorCode)(0),              // 1: speechly.slu.v2.Operation.ErrorCode
	(OperationResult_ResultType)(0),       // 2: speechly.slu.v2.OperationResult.ResultType
	(HttpResource_Method)(0),              // 3: speechly.slu.v2.HttpResource.Method
	(*BatchTasks)(nil),                    // 4: speechly.slu.v2.BatchTasks
	(*BatchOutput)(nil),                   // 5: speechly.slu.v2.BatchOutput
	(*BatchConfig)(nil),                   // 6: speechly.slu.v2.BatchConfig
	(*ProcessAudioSourceRequestItem)(nil), // 7: speechly.slu.v2.ProcessAudioSourceRequestItem
	(*Operation)(nil),                     // 8: speechly.slu.v2.Operation
	(*OperationResult)(nil),               // 9: speechly.slu.v2.OperationResult
	(*Token)(nil),                         // 10: speechly.slu.v2.Token
	(*Option)(nil),                        // 11: speechly.slu.v2.Option
	(*HttpResource)(nil),                  // 12: speechly.slu.v2.HttpResource
	(*HttpResource_Header)(nil),           // 13: speechly.slu.v2.HttpResource.Header
	(*durationpb.Duration)(nil),           // 14: google.protobuf.Duration
}
var file_speechly_slu_v2_batch_proto_depIdxs = []int32{
	11, // 0: speechly.slu.v2.BatchConfig.options:type_name -> speechly.slu.v2.Option
	12, // 1: speechly.slu.v2.ProcessAudioSourceRequestItem.completion_webhook:type_name -> speechly.slu.v2.HttpResource
	0,  // 2: speechly.slu.v2.Operation.status:type_name -> speechly.slu.v2.Operation.Status
	9,  // 3: speechly.slu.v2.Operation.result:type_name -> speechly.slu.v2.OperationResult
	14, // 4: speechly.slu.v2.Operation.duration:type_name -> google.protobuf.Duration
	1,  // 5: speechly.slu.v2.Operation.error_code:type_name -> speechly.slu.v2.Operation.ErrorCode
	2,  // 6: speechly.slu.v2.OperationResult.type:type_name -> speechly.slu.v2.OperationResult.ResultType
	10, // 7: speechly.slu.v2.OperationResult.tokens:type_name -> speechly.slu.v2.Token
	3,  // 8: speechly.slu.v2.HttpResource.method:type_name -> speechly.slu.v2.HttpResource.Method
	13, // 9: speechly.slu.v2.HttpResource.headers:type_name -> speechly.slu.v2.HttpResource.Header
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_speechly_slu_v2_batch_proto_init() }
func file_speechly_slu_v2_batch_proto_init() {
	if File_speechly_slu_v2_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speechly_slu_v2_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAudioSourceRequestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v2_batch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResource_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_slu_v2_batch_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_speechly_slu_v2_batch_proto_goTypes,
		DependencyIndexes: file_speechly_slu_v2_batch_proto_depIdxs,
		EnumInfos:         file_speechly_slu_v2_batch_proto_enumTypes,
		MessageInfos:      file_speechly_slu_v2_batch_proto_msgTypes,
	}.Build()
	File_speechly_slu_v2_batch_proto = out.File
	file_speechly_slu_v2_batch_proto_rawDesc = nil
	file_speechly_slu_v2_batch_proto_goTypes = nil
	file_speechly_slu_v2_batch_proto_depIdxs = nil
}
