// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: speechly/slu/v1/batch_api.proto

package sluv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BatchAPI_ProcessAudio_FullMethodName = "/speechly.slu.v1.BatchAPI/ProcessAudio"
	BatchAPI_QueryStatus_FullMethodName  = "/speechly.slu.v1.BatchAPI/QueryStatus"
)

// BatchAPIClient is the client API for BatchAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchAPIClient interface {
	// Create a new background SLU operation for a single audio source.
	// An audio source can be
	//   - audio chunks sent via repeated ProcessAudioRequests, or
	//   - URI of a file, reachable from the API
	//     The response includes an `id` that is used to match the operation to the
	//     results. A `reference` identifier can also be set.
	//     The destination can be a webhook URL, in which case the results are posted
	//     there when they are ready. The payload is an instance of `Operation`.
	ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (BatchAPI_ProcessAudioClient, error)
	// Query the status of a given batch operation.
	// If the `ProcessAudioRequest` did not define a `results_uri` as a
	// destination, the results are returned in the `QueryStatusResponse`.
	QueryStatus(ctx context.Context, in *QueryStatusRequest, opts ...grpc.CallOption) (*QueryStatusResponse, error)
}

type batchAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchAPIClient(cc grpc.ClientConnInterface) BatchAPIClient {
	return &batchAPIClient{cc}
}

func (c *batchAPIClient) ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (BatchAPI_ProcessAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &BatchAPI_ServiceDesc.Streams[0], BatchAPI_ProcessAudio_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &batchAPIProcessAudioClient{stream}
	return x, nil
}

type BatchAPI_ProcessAudioClient interface {
	Send(*ProcessAudioRequest) error
	CloseAndRecv() (*ProcessAudioResponse, error)
	grpc.ClientStream
}

type batchAPIProcessAudioClient struct {
	grpc.ClientStream
}

func (x *batchAPIProcessAudioClient) Send(m *ProcessAudioRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batchAPIProcessAudioClient) CloseAndRecv() (*ProcessAudioResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProcessAudioResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *batchAPIClient) QueryStatus(ctx context.Context, in *QueryStatusRequest, opts ...grpc.CallOption) (*QueryStatusResponse, error) {
	out := new(QueryStatusResponse)
	err := c.cc.Invoke(ctx, BatchAPI_QueryStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchAPIServer is the server API for BatchAPI service.
// All implementations must embed UnimplementedBatchAPIServer
// for forward compatibility
type BatchAPIServer interface {
	// Create a new background SLU operation for a single audio source.
	// An audio source can be
	//   - audio chunks sent via repeated ProcessAudioRequests, or
	//   - URI of a file, reachable from the API
	//     The response includes an `id` that is used to match the operation to the
	//     results. A `reference` identifier can also be set.
	//     The destination can be a webhook URL, in which case the results are posted
	//     there when they are ready. The payload is an instance of `Operation`.
	ProcessAudio(BatchAPI_ProcessAudioServer) error
	// Query the status of a given batch operation.
	// If the `ProcessAudioRequest` did not define a `results_uri` as a
	// destination, the results are returned in the `QueryStatusResponse`.
	QueryStatus(context.Context, *QueryStatusRequest) (*QueryStatusResponse, error)
	mustEmbedUnimplementedBatchAPIServer()
}

// UnimplementedBatchAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBatchAPIServer struct {
}

func (UnimplementedBatchAPIServer) ProcessAudio(BatchAPI_ProcessAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessAudio not implemented")
}
func (UnimplementedBatchAPIServer) QueryStatus(context.Context, *QueryStatusRequest) (*QueryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatus not implemented")
}
func (UnimplementedBatchAPIServer) mustEmbedUnimplementedBatchAPIServer() {}

// UnsafeBatchAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchAPIServer will
// result in compilation errors.
type UnsafeBatchAPIServer interface {
	mustEmbedUnimplementedBatchAPIServer()
}

func RegisterBatchAPIServer(s grpc.ServiceRegistrar, srv BatchAPIServer) {
	s.RegisterService(&BatchAPI_ServiceDesc, srv)
}

func _BatchAPI_ProcessAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatchAPIServer).ProcessAudio(&batchAPIProcessAudioServer{stream})
}

type BatchAPI_ProcessAudioServer interface {
	SendAndClose(*ProcessAudioResponse) error
	Recv() (*ProcessAudioRequest, error)
	grpc.ServerStream
}

type batchAPIProcessAudioServer struct {
	grpc.ServerStream
}

func (x *batchAPIProcessAudioServer) SendAndClose(m *ProcessAudioResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batchAPIProcessAudioServer) Recv() (*ProcessAudioRequest, error) {
	m := new(ProcessAudioRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BatchAPI_QueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchAPIServer).QueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchAPI_QueryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchAPIServer).QueryStatus(ctx, req.(*QueryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchAPI_ServiceDesc is the grpc.ServiceDesc for BatchAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechly.slu.v1.BatchAPI",
	HandlerType: (*BatchAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryStatus",
			Handler:    _BatchAPI_QueryStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessAudio",
			Handler:       _BatchAPI_ProcessAudio_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "speechly/slu/v1/batch_api.proto",
}
