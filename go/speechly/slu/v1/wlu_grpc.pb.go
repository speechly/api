// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: speechly/slu/v1/wlu.proto

package sluv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WLUClient is the client API for WLU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WLUClient interface {
	// Performs recognition of a text with specified language.
	Text(ctx context.Context, in *WLURequest, opts ...grpc.CallOption) (*WLUResponse, error)
	// Performs recognition of a batch of texts with specified language.
	Texts(ctx context.Context, in *TextsRequest, opts ...grpc.CallOption) (*TextsResponse, error)
}

type wLUClient struct {
	cc grpc.ClientConnInterface
}

func NewWLUClient(cc grpc.ClientConnInterface) WLUClient {
	return &wLUClient{cc}
}

func (c *wLUClient) Text(ctx context.Context, in *WLURequest, opts ...grpc.CallOption) (*WLUResponse, error) {
	out := new(WLUResponse)
	err := c.cc.Invoke(ctx, "/speechly.slu.v1.WLU/Text", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wLUClient) Texts(ctx context.Context, in *TextsRequest, opts ...grpc.CallOption) (*TextsResponse, error) {
	out := new(TextsResponse)
	err := c.cc.Invoke(ctx, "/speechly.slu.v1.WLU/Texts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WLUServer is the server API for WLU service.
// All implementations must embed UnimplementedWLUServer
// for forward compatibility
type WLUServer interface {
	// Performs recognition of a text with specified language.
	Text(context.Context, *WLURequest) (*WLUResponse, error)
	// Performs recognition of a batch of texts with specified language.
	Texts(context.Context, *TextsRequest) (*TextsResponse, error)
	mustEmbedUnimplementedWLUServer()
}

// UnimplementedWLUServer must be embedded to have forward compatible implementations.
type UnimplementedWLUServer struct {
}

func (UnimplementedWLUServer) Text(context.Context, *WLURequest) (*WLUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Text not implemented")
}
func (UnimplementedWLUServer) Texts(context.Context, *TextsRequest) (*TextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Texts not implemented")
}
func (UnimplementedWLUServer) mustEmbedUnimplementedWLUServer() {}

// UnsafeWLUServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WLUServer will
// result in compilation errors.
type UnsafeWLUServer interface {
	mustEmbedUnimplementedWLUServer()
}

func RegisterWLUServer(s grpc.ServiceRegistrar, srv WLUServer) {
	s.RegisterService(&WLU_ServiceDesc, srv)
}

func _WLU_Text_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WLURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WLUServer).Text(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speechly.slu.v1.WLU/Text",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WLUServer).Text(ctx, req.(*WLURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WLU_Texts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WLUServer).Texts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speechly.slu.v1.WLU/Texts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WLUServer).Texts(ctx, req.(*TextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WLU_ServiceDesc is the grpc.ServiceDesc for WLU service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WLU_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechly.slu.v1.WLU",
	HandlerType: (*WLUServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Text",
			Handler:    _WLU_Text_Handler,
		},
		{
			MethodName: "Texts",
			Handler:    _WLU_Texts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speechly/slu/v1/wlu.proto",
}
