// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: speechly/slu/v1/batch_api.proto

package sluv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The encoding of the audio data sent in the stream.
type AudioConfiguration_Encoding int32

const (
	AudioConfiguration_ENCODING_INVALID AudioConfiguration_Encoding = 0
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	AudioConfiguration_ENCODING_LINEAR16 AudioConfiguration_Encoding = 1
)

// Enum value maps for AudioConfiguration_Encoding.
var (
	AudioConfiguration_Encoding_name = map[int32]string{
		0: "ENCODING_INVALID",
		1: "ENCODING_LINEAR16",
	}
	AudioConfiguration_Encoding_value = map[string]int32{
		"ENCODING_INVALID":  0,
		"ENCODING_LINEAR16": 1,
	}
)

func (x AudioConfiguration_Encoding) Enum() *AudioConfiguration_Encoding {
	p := new(AudioConfiguration_Encoding)
	*p = x
	return p
}

func (x AudioConfiguration_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioConfiguration_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_slu_v1_batch_api_proto_enumTypes[0].Descriptor()
}

func (AudioConfiguration_Encoding) Type() protoreflect.EnumType {
	return &file_speechly_slu_v1_batch_api_proto_enumTypes[0]
}

func (x AudioConfiguration_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioConfiguration_Encoding.Descriptor instead.
func (AudioConfiguration_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{4, 0}
}

// The status of the operation.
type Operation_Status int32

const (
	Operation_STATUS_INVALID    Operation_Status = 0
	Operation_STATUS_QUEUED     Operation_Status = 1
	Operation_STATUS_PROCESSING Operation_Status = 2
	Operation_STATUS_DONE       Operation_Status = 3
	Operation_STATUS_ERROR      Operation_Status = 4
)

// Enum value maps for Operation_Status.
var (
	Operation_Status_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "STATUS_QUEUED",
		2: "STATUS_PROCESSING",
		3: "STATUS_DONE",
		4: "STATUS_ERROR",
	}
	Operation_Status_value = map[string]int32{
		"STATUS_INVALID":    0,
		"STATUS_QUEUED":     1,
		"STATUS_PROCESSING": 2,
		"STATUS_DONE":       3,
		"STATUS_ERROR":      4,
	}
)

func (x Operation_Status) Enum() *Operation_Status {
	p := new(Operation_Status)
	*p = x
	return p
}

func (x Operation_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_slu_v1_batch_api_proto_enumTypes[1].Descriptor()
}

func (Operation_Status) Type() protoreflect.EnumType {
	return &file_speechly_slu_v1_batch_api_proto_enumTypes[1]
}

func (x Operation_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Status.Descriptor instead.
func (Operation_Status) EnumDescriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{5, 0}
}

// If sending a stream of `ProcessAudioRequest` messages, the first one must
// contain the `AudioConfiguration` for the audio data. The `config` is ignored
// in the following messages.
type ProcessAudioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The processing context, Speechly application ID.
	// Required.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Audio configuration.
	// Required.
	Config *AudioConfiguration `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// The data (audio) source for the operation.
	//
	// Types that are assignable to Source:
	//	*ProcessAudioRequest_Audio
	//	*ProcessAudioRequest_Uri
	Source isProcessAudioRequest_Source `protobuf_oneof:"source"`
	// The target for the results of the operation.
	//
	// Types that are assignable to Destination:
	//	*ProcessAudioRequest_ResultsUri
	Destination isProcessAudioRequest_Destination `protobuf_oneof:"destination"`
	// Reference id for the operation. For example an identifier of the source
	// system.
	// Optional.
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	// Additional operation specific options.
	// Optional.
	Options []*Option `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *ProcessAudioRequest) Reset() {
	*x = ProcessAudioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAudioRequest) ProtoMessage() {}

func (x *ProcessAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAudioRequest.ProtoReflect.Descriptor instead.
func (*ProcessAudioRequest) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessAudioRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ProcessAudioRequest) GetConfig() *AudioConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (m *ProcessAudioRequest) GetSource() isProcessAudioRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ProcessAudioRequest) GetAudio() []byte {
	if x, ok := x.GetSource().(*ProcessAudioRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

func (x *ProcessAudioRequest) GetUri() string {
	if x, ok := x.GetSource().(*ProcessAudioRequest_Uri); ok {
		return x.Uri
	}
	return ""
}

func (m *ProcessAudioRequest) GetDestination() isProcessAudioRequest_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *ProcessAudioRequest) GetResultsUri() string {
	if x, ok := x.GetDestination().(*ProcessAudioRequest_ResultsUri); ok {
		return x.ResultsUri
	}
	return ""
}

func (x *ProcessAudioRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ProcessAudioRequest) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type isProcessAudioRequest_Source interface {
	isProcessAudioRequest_Source()
}

type ProcessAudioRequest_Audio struct {
	// Raw audio data.
	Audio []byte `protobuf:"bytes,3,opt,name=audio,proto3,oneof"`
}

type ProcessAudioRequest_Uri struct {
	// URI of audio data.
	Uri string `protobuf:"bytes,4,opt,name=uri,proto3,oneof"`
}

func (*ProcessAudioRequest_Audio) isProcessAudioRequest_Source() {}

func (*ProcessAudioRequest_Uri) isProcessAudioRequest_Source() {}

type isProcessAudioRequest_Destination interface {
	isProcessAudioRequest_Destination()
}

type ProcessAudioRequest_ResultsUri struct {
	// The results JSON will be posted to the given URI. If not given, the
	// results must be fetched using `QueryStatus`.
	// Optional.
	ResultsUri string `protobuf:"bytes,5,opt,name=results_uri,json=resultsUri,proto3,oneof"`
}

func (*ProcessAudioRequest_ResultsUri) isProcessAudioRequest_Destination() {}

type ProcessAudioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The details of the created operation.
	Operation *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ProcessAudioResponse) Reset() {
	*x = ProcessAudioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAudioResponse) ProtoMessage() {}

func (x *ProcessAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAudioResponse.ProtoReflect.Descriptor instead.
func (*ProcessAudioResponse) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessAudioResponse) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Query the status of an operation. Either `id` or `reference` must be given.
type QueryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of an audio processing operation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference ID of an operation.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *QueryStatusRequest) Reset() {
	*x = QueryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatusRequest) ProtoMessage() {}

func (x *QueryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryStatusRequest) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{2}
}

func (x *QueryStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryStatusRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type QueryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The details of the audio processing operation.
	Operation *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *QueryStatusResponse) Reset() {
	*x = QueryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatusResponse) ProtoMessage() {}

func (x *QueryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryStatusResponse) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{3}
}

func (x *QueryStatusResponse) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Describes the audio content of the batch operation.
type AudioConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoding of the audio data sent in the stream.
	// Required.
	Encoding AudioConfiguration_Encoding `protobuf:"varint,1,opt,name=encoding,proto3,enum=speechly.slu.v1.AudioConfiguration_Encoding" json:"encoding,omitempty"`
	// The number of channels in the input audio data.
	// Required.
	Channels int32 `protobuf:"varint,2,opt,name=channels,proto3" json:"channels,omitempty"`
	// Sample rate in Hertz of the audio data sent in the stream (e.g. 16000).
	// Required.
	SampleRateHertz int32 `protobuf:"varint,3,opt,name=sample_rate_hertz,json=sampleRateHertz,proto3" json:"sample_rate_hertz,omitempty"`
	// The language(s) of the audio sent in the stream as a BCP-47 language tag
	// (e.g. "en-US"). Defaults to the target application language.
	// Optional.
	LanguageCodes []string `protobuf:"bytes,4,rep,name=language_codes,json=languageCodes,proto3" json:"language_codes,omitempty"`
}

func (x *AudioConfiguration) Reset() {
	*x = AudioConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioConfiguration) ProtoMessage() {}

func (x *AudioConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioConfiguration.ProtoReflect.Descriptor instead.
func (*AudioConfiguration) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{4}
}

func (x *AudioConfiguration) GetEncoding() AudioConfiguration_Encoding {
	if x != nil {
		return x.Encoding
	}
	return AudioConfiguration_ENCODING_INVALID
}

func (x *AudioConfiguration) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *AudioConfiguration) GetSampleRateHertz() int32 {
	if x != nil {
		return x.SampleRateHertz
	}
	return 0
}

func (x *AudioConfiguration) GetLanguageCodes() []string {
	if x != nil {
		return x.LanguageCodes
	}
	return nil
}

// Describes a single batch operation.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the operation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The reference id of the operation, if given.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	// The current status of the operation.
	Status Operation_Status `protobuf:"varint,3,opt,name=status,proto3,enum=speechly.slu.v1.Operation_Status" json:"status,omitempty"`
	// The language code of the detected language.
	LanguageCode string `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// The application context for the operation.
	AppId string `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The device or microphone id for the audio, if applicable.
	DeviceId string `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// If the operation status is STATUS_DONE and the destination is not set,
	// the results of the operation.
	Transcripts []*Transcript `protobuf:"bytes,7,rep,name=transcripts,proto3" json:"transcripts,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{5}
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Operation) GetStatus() Operation_Status {
	if x != nil {
		return x.Status
	}
	return Operation_STATUS_INVALID
}

func (x *Operation) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *Operation) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Operation) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Operation) GetTranscripts() []*Transcript {
	if x != nil {
		return x.Transcripts
	}
	return nil
}

// Describes an SLU transcript.
// A transcript is a speech-to-text element of the phrase, i.e. a word
// recognised from the audio.
type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The word recongised from the audio.
	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	// The position of the word in the whole phrase, zero-based.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The end time of the word in the audio, in milliseconds from the beginning
	// of the audio.
	StartTime int32 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the word in the audio, in milliseconds from the beginning
	// of the audio.
	EndTime int32 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{6}
}

func (x *Transcript) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Transcript) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transcript) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Transcript) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// Option to change the default behaviour of the SLU.
type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the option to be set.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The values to set the option to.
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_slu_v1_batch_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_speechly_slu_v1_batch_api_proto_rawDescGZIP(), []int{7}
}

func (x *Option) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Option) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_speechly_slu_v1_batch_api_proto protoreflect.FileDescriptor

var file_speechly_slu_v1_batch_api_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x73, 0x6c, 0x75, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e,
	0x76, 0x31, 0x22, 0xa2, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x55, 0x72, 0x69, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c,
	0x75, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4f, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86,
	0x02, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x72, 0x74, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x48, 0x65, 0x72, 0x74, 0x7a, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x37,
	0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x41, 0x52, 0x31, 0x36, 0x10, 0x01, 0x22, 0xf7, 0x02, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73,
	0x6c, 0x75, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x22, 0x70, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xc3, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x50, 0x49, 0x12, 0x5d, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x24, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c,
	0x75, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x12, 0x58, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79,
	0x2e, 0x73, 0x6c, 0x75, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x67, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x6c, 0x75, 0x2e,
	0x76, 0x31, 0x42, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x15, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x73, 0x6c,
	0x75, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x6c, 0x75, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58,
	0xaa, 0x02, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x53, 0x6c, 0x75, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x5c, 0x53, 0x6c,
	0x75, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speechly_slu_v1_batch_api_proto_rawDescOnce sync.Once
	file_speechly_slu_v1_batch_api_proto_rawDescData = file_speechly_slu_v1_batch_api_proto_rawDesc
)

func file_speechly_slu_v1_batch_api_proto_rawDescGZIP() []byte {
	file_speechly_slu_v1_batch_api_proto_rawDescOnce.Do(func() {
		file_speechly_slu_v1_batch_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_slu_v1_batch_api_proto_rawDescData)
	})
	return file_speechly_slu_v1_batch_api_proto_rawDescData
}

var file_speechly_slu_v1_batch_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_speechly_slu_v1_batch_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_speechly_slu_v1_batch_api_proto_goTypes = []interface{}{
	(AudioConfiguration_Encoding)(0), // 0: speechly.slu.v1.AudioConfiguration.Encoding
	(Operation_Status)(0),            // 1: speechly.slu.v1.Operation.Status
	(*ProcessAudioRequest)(nil),      // 2: speechly.slu.v1.ProcessAudioRequest
	(*ProcessAudioResponse)(nil),     // 3: speechly.slu.v1.ProcessAudioResponse
	(*QueryStatusRequest)(nil),       // 4: speechly.slu.v1.QueryStatusRequest
	(*QueryStatusResponse)(nil),      // 5: speechly.slu.v1.QueryStatusResponse
	(*AudioConfiguration)(nil),       // 6: speechly.slu.v1.AudioConfiguration
	(*Operation)(nil),                // 7: speechly.slu.v1.Operation
	(*Transcript)(nil),               // 8: speechly.slu.v1.Transcript
	(*Option)(nil),                   // 9: speechly.slu.v1.Option
}
var file_speechly_slu_v1_batch_api_proto_depIdxs = []int32{
	6, // 0: speechly.slu.v1.ProcessAudioRequest.config:type_name -> speechly.slu.v1.AudioConfiguration
	9, // 1: speechly.slu.v1.ProcessAudioRequest.options:type_name -> speechly.slu.v1.Option
	7, // 2: speechly.slu.v1.ProcessAudioResponse.operation:type_name -> speechly.slu.v1.Operation
	7, // 3: speechly.slu.v1.QueryStatusResponse.operation:type_name -> speechly.slu.v1.Operation
	0, // 4: speechly.slu.v1.AudioConfiguration.encoding:type_name -> speechly.slu.v1.AudioConfiguration.Encoding
	1, // 5: speechly.slu.v1.Operation.status:type_name -> speechly.slu.v1.Operation.Status
	8, // 6: speechly.slu.v1.Operation.transcripts:type_name -> speechly.slu.v1.Transcript
	2, // 7: speechly.slu.v1.BatchAPI.ProcessAudio:input_type -> speechly.slu.v1.ProcessAudioRequest
	4, // 8: speechly.slu.v1.BatchAPI.QueryStatus:input_type -> speechly.slu.v1.QueryStatusRequest
	3, // 9: speechly.slu.v1.BatchAPI.ProcessAudio:output_type -> speechly.slu.v1.ProcessAudioResponse
	5, // 10: speechly.slu.v1.BatchAPI.QueryStatus:output_type -> speechly.slu.v1.QueryStatusResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_speechly_slu_v1_batch_api_proto_init() }
func file_speechly_slu_v1_batch_api_proto_init() {
	if File_speechly_slu_v1_batch_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speechly_slu_v1_batch_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAudioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v1_batch_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAudioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v1_batch_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v1_batch_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v1_batch_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v1_batch_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v1_batch_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_slu_v1_batch_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_speechly_slu_v1_batch_api_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProcessAudioRequest_Audio)(nil),
		(*ProcessAudioRequest_Uri)(nil),
		(*ProcessAudioRequest_ResultsUri)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_slu_v1_batch_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speechly_slu_v1_batch_api_proto_goTypes,
		DependencyIndexes: file_speechly_slu_v1_batch_api_proto_depIdxs,
		EnumInfos:         file_speechly_slu_v1_batch_api_proto_enumTypes,
		MessageInfos:      file_speechly_slu_v1_batch_api_proto_msgTypes,
	}.Build()
	File_speechly_slu_v1_batch_api_proto = out.File
	file_speechly_slu_v1_batch_api_proto_rawDesc = nil
	file_speechly_slu_v1_batch_api_proto_goTypes = nil
	file_speechly_slu_v1_batch_api_proto_depIdxs = nil
}
