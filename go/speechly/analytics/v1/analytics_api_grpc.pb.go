// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package analyticsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsAPIClient is the client API for AnalyticsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsAPIClient interface {
	// Get a summary of utterances for a given time period.
	UtteranceStatistics(ctx context.Context, in *UtteranceStatisticsRequest, opts ...grpc.CallOption) (*UtteranceStatisticsResponse, error)
}

type analyticsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsAPIClient(cc grpc.ClientConnInterface) AnalyticsAPIClient {
	return &analyticsAPIClient{cc}
}

func (c *analyticsAPIClient) UtteranceStatistics(ctx context.Context, in *UtteranceStatisticsRequest, opts ...grpc.CallOption) (*UtteranceStatisticsResponse, error) {
	out := new(UtteranceStatisticsResponse)
	err := c.cc.Invoke(ctx, "/speechly.analytics.v1.AnalyticsAPI/UtteranceStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsAPIServer is the server API for AnalyticsAPI service.
// All implementations must embed UnimplementedAnalyticsAPIServer
// for forward compatibility
type AnalyticsAPIServer interface {
	// Get a summary of utterances for a given time period.
	UtteranceStatistics(context.Context, *UtteranceStatisticsRequest) (*UtteranceStatisticsResponse, error)
	mustEmbedUnimplementedAnalyticsAPIServer()
}

// UnimplementedAnalyticsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsAPIServer struct {
}

func (UnimplementedAnalyticsAPIServer) UtteranceStatistics(context.Context, *UtteranceStatisticsRequest) (*UtteranceStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UtteranceStatistics not implemented")
}
func (UnimplementedAnalyticsAPIServer) mustEmbedUnimplementedAnalyticsAPIServer() {}

// UnsafeAnalyticsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsAPIServer will
// result in compilation errors.
type UnsafeAnalyticsAPIServer interface {
	mustEmbedUnimplementedAnalyticsAPIServer()
}

func RegisterAnalyticsAPIServer(s grpc.ServiceRegistrar, srv AnalyticsAPIServer) {
	s.RegisterService(&AnalyticsAPI_ServiceDesc, srv)
}

func _AnalyticsAPI_UtteranceStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtteranceStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsAPIServer).UtteranceStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speechly.analytics.v1.AnalyticsAPI/UtteranceStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsAPIServer).UtteranceStatistics(ctx, req.(*UtteranceStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsAPI_ServiceDesc is the grpc.ServiceDesc for AnalyticsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechly.analytics.v1.AnalyticsAPI",
	HandlerType: (*AnalyticsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UtteranceStatistics",
			Handler:    _AnalyticsAPI_UtteranceStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speechly/analytics/v1/analytics_api.proto",
}
