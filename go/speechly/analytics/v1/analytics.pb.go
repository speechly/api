// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: speechly/analytics/v1/analytics.proto

package analyticsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Aggregation granularity.
type Aggregation int32

const (
	Aggregation_AGGREGATION_INVALID Aggregation = 0
	Aggregation_AGGREGATION_MONTHLY Aggregation = 1
	Aggregation_AGGREGATION_DAILY   Aggregation = 2
	Aggregation_AGGREGATION_HOURLY  Aggregation = 3
)

// Enum value maps for Aggregation.
var (
	Aggregation_name = map[int32]string{
		0: "AGGREGATION_INVALID",
		1: "AGGREGATION_MONTHLY",
		2: "AGGREGATION_DAILY",
		3: "AGGREGATION_HOURLY",
	}
	Aggregation_value = map[string]int32{
		"AGGREGATION_INVALID": 0,
		"AGGREGATION_MONTHLY": 1,
		"AGGREGATION_DAILY":   2,
		"AGGREGATION_HOURLY":  3,
	}
)

func (x Aggregation) Enum() *Aggregation {
	p := new(Aggregation)
	*p = x
	return p
}

func (x Aggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_analytics_v1_analytics_proto_enumTypes[0].Descriptor()
}

func (Aggregation) Type() protoreflect.EnumType {
	return &file_speechly_analytics_v1_analytics_proto_enumTypes[0]
}

func (x Aggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregation.Descriptor instead.
func (Aggregation) EnumDescriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{0}
}

// The various types of processing that can be applied to the audio.
type ProcessingType int32

const (
	ProcessingType_PROCESSING_TYPE_INVALID                 ProcessingType = 0
	ProcessingType_PROCESSING_TYPE_TRANSCRIPTION           ProcessingType = 1
	ProcessingType_PROCESSING_TYPE_NLU                     ProcessingType = 2
	ProcessingType_PROCESSING_TYPE_LANGUAGE_DETECTION      ProcessingType = 3
	ProcessingType_PROCESSING_TYPE_VAD                     ProcessingType = 4
	ProcessingType_PROCESSING_TYPE_TRANSLATION             ProcessingType = 5
	ProcessingType_PROCESSING_TYPE_AUDIO_EVENT_DETECTION   ProcessingType = 6
	ProcessingType_PROCESSING_TYPE_TONE_OF_VOICE_LABELLING ProcessingType = 7
	ProcessingType_PROCESSING_TYPE_SHALLOW_FUSION          ProcessingType = 8
)

// Enum value maps for ProcessingType.
var (
	ProcessingType_name = map[int32]string{
		0: "PROCESSING_TYPE_INVALID",
		1: "PROCESSING_TYPE_TRANSCRIPTION",
		2: "PROCESSING_TYPE_NLU",
		3: "PROCESSING_TYPE_LANGUAGE_DETECTION",
		4: "PROCESSING_TYPE_VAD",
		5: "PROCESSING_TYPE_TRANSLATION",
		6: "PROCESSING_TYPE_AUDIO_EVENT_DETECTION",
		7: "PROCESSING_TYPE_TONE_OF_VOICE_LABELLING",
		8: "PROCESSING_TYPE_SHALLOW_FUSION",
	}
	ProcessingType_value = map[string]int32{
		"PROCESSING_TYPE_INVALID":                 0,
		"PROCESSING_TYPE_TRANSCRIPTION":           1,
		"PROCESSING_TYPE_NLU":                     2,
		"PROCESSING_TYPE_LANGUAGE_DETECTION":      3,
		"PROCESSING_TYPE_VAD":                     4,
		"PROCESSING_TYPE_TRANSLATION":             5,
		"PROCESSING_TYPE_AUDIO_EVENT_DETECTION":   6,
		"PROCESSING_TYPE_TONE_OF_VOICE_LABELLING": 7,
		"PROCESSING_TYPE_SHALLOW_FUSION":          8,
	}
)

func (x ProcessingType) Enum() *ProcessingType {
	p := new(ProcessingType)
	*p = x
	return p
}

func (x ProcessingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessingType) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_analytics_v1_analytics_proto_enumTypes[1].Descriptor()
}

func (ProcessingType) Type() protoreflect.EnumType {
	return &file_speechly_analytics_v1_analytics_proto_enumTypes[1]
}

func (x ProcessingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessingType.Descriptor instead.
func (ProcessingType) EnumDescriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{1}
}

// Single row of statistics response.
type UtteranceStatisticsPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_id or empty, if aggregating over project.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// ISO-formatted UTC timestamp of the start time of the period.
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Count (sum) of utterances in the current period.
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// Total duration of the utterances in the current period.
	UtterancesSeconds int32 `protobuf:"varint,5,opt,name=utterances_seconds,json=utterancesSeconds,proto3" json:"utterances_seconds,omitempty"`
	// Total duration of annotated utterances in the current period.
	AnnotatedSeconds int32 `protobuf:"varint,6,opt,name=annotated_seconds,json=annotatedSeconds,proto3" json:"annotated_seconds,omitempty"`
	// project_id or empty, if specifying a project.
	ProjectId string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// the id of the model used, if applicable.
	ModelId string `protobuf:"bytes,8,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (x *UtteranceStatisticsPeriod) Reset() {
	*x = UtteranceStatisticsPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtteranceStatisticsPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtteranceStatisticsPeriod) ProtoMessage() {}

func (x *UtteranceStatisticsPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtteranceStatisticsPeriod.ProtoReflect.Descriptor instead.
func (*UtteranceStatisticsPeriod) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *UtteranceStatisticsPeriod) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UtteranceStatisticsPeriod) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UtteranceStatisticsPeriod) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UtteranceStatisticsPeriod) GetUtterancesSeconds() int32 {
	if x != nil {
		return x.UtterancesSeconds
	}
	return 0
}

func (x *UtteranceStatisticsPeriod) GetAnnotatedSeconds() int32 {
	if x != nil {
		return x.AnnotatedSeconds
	}
	return 0
}

func (x *UtteranceStatisticsPeriod) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UtteranceStatisticsPeriod) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

// A single utterances recognized by Speechly API.
type Utterance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ASR transcript of the utterance.
	Transcript string `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// The SAL-annotated transcript of the utterance.
	Annotated string `protobuf:"bytes,2,opt,name=annotated,proto3" json:"annotated,omitempty"`
	// ISO-formatted UTC date of the utterance.
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Utterance) Reset() {
	*x = Utterance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utterance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utterance) ProtoMessage() {}

func (x *Utterance) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utterance.ProtoReflect.Descriptor instead.
func (*Utterance) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{1}
}

func (x *Utterance) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *Utterance) GetAnnotated() string {
	if x != nil {
		return x.Annotated
	}
	return ""
}

func (x *Utterance) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// Information about the on-device decoder.
type DecoderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the Speechly on-device decoder.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Number of utterances the decoder has transcribed.
	UtteranceCount int32 `protobuf:"varint,2,opt,name=utterance_count,json=utteranceCount,proto3" json:"utterance_count,omitempty"`
	// Cumulative sum of the utterance length in seconds for the decoder.
	TotalSecondsTranscribed int32 `protobuf:"varint,3,opt,name=total_seconds_transcribed,json=totalSecondsTranscribed,proto3" json:"total_seconds_transcribed,omitempty"`
}

func (x *DecoderInfo) Reset() {
	*x = DecoderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecoderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecoderInfo) ProtoMessage() {}

func (x *DecoderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecoderInfo.ProtoReflect.Descriptor instead.
func (*DecoderInfo) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *DecoderInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DecoderInfo) GetUtteranceCount() int32 {
	if x != nil {
		return x.UtteranceCount
	}
	return 0
}

func (x *DecoderInfo) GetTotalSecondsTranscribed() int32 {
	if x != nil {
		return x.TotalSecondsTranscribed
	}
	return 0
}

// Specifies what processing has been applied to an utterance.
type ProcessingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The processing types that were applied
	ProcessingTypes []ProcessingType `protobuf:"varint,1,rep,packed,name=processing_types,json=processingTypes,proto3,enum=speechly.analytics.v1.ProcessingType" json:"processing_types,omitempty"`
	// id of the model that was used for processing
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (x *ProcessingInfo) Reset() {
	*x = ProcessingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingInfo) ProtoMessage() {}

func (x *ProcessingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingInfo.ProtoReflect.Descriptor instead.
func (*ProcessingInfo) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessingInfo) GetProcessingTypes() []ProcessingType {
	if x != nil {
		return x.ProcessingTypes
	}
	return nil
}

func (x *ProcessingInfo) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

// A single time series entry for moderation statistics.
type ModerationStatisticsPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// period start time
	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// if grouping by users, the user id, or "OTHER"
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// total amount of moderation events for this period.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// total amount of flagged events.
	Flagged int32 `protobuf:"varint,4,opt,name=flagged,proto3" json:"flagged,omitempty"`
	// total amount of not flagged (OK) events for this period.
	NotFlagged int32 `protobuf:"varint,5,opt,name=not_flagged,json=notFlagged,proto3" json:"not_flagged,omitempty"`
	// amount of moderation decisions made.
	Decisions int32 `protobuf:"varint,6,opt,name=decisions,proto3" json:"decisions,omitempty"`
}

func (x *ModerationStatisticsPeriod) Reset() {
	*x = ModerationStatisticsPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModerationStatisticsPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerationStatisticsPeriod) ProtoMessage() {}

func (x *ModerationStatisticsPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerationStatisticsPeriod.ProtoReflect.Descriptor instead.
func (*ModerationStatisticsPeriod) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{4}
}

func (x *ModerationStatisticsPeriod) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ModerationStatisticsPeriod) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ModerationStatisticsPeriod) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModerationStatisticsPeriod) GetFlagged() int32 {
	if x != nil {
		return x.Flagged
	}
	return 0
}

func (x *ModerationStatisticsPeriod) GetNotFlagged() int32 {
	if x != nil {
		return x.NotFlagged
	}
	return 0
}

func (x *ModerationStatisticsPeriod) GetDecisions() int32 {
	if x != nil {
		return x.Decisions
	}
	return 0
}

// A single time series entry for user statistics.
type UserStatisticsPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime    string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ActiveUsers  int32  `protobuf:"varint,2,opt,name=active_users,json=activeUsers,proto3" json:"active_users,omitempty"`
	ToxicUsers   int32  `protobuf:"varint,3,opt,name=toxic_users,json=toxicUsers,proto3" json:"toxic_users,omitempty"`
	ExposedUsers int32  `protobuf:"varint,4,opt,name=exposed_users,json=exposedUsers,proto3" json:"exposed_users,omitempty"`
}

func (x *UserStatisticsPeriod) Reset() {
	*x = UserStatisticsPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatisticsPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatisticsPeriod) ProtoMessage() {}

func (x *UserStatisticsPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatisticsPeriod.ProtoReflect.Descriptor instead.
func (*UserStatisticsPeriod) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_proto_rawDescGZIP(), []int{5}
}

func (x *UserStatisticsPeriod) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UserStatisticsPeriod) GetActiveUsers() int32 {
	if x != nil {
		return x.ActiveUsers
	}
	return 0
}

func (x *UserStatisticsPeriod) GetToxicUsers() int32 {
	if x != nil {
		return x.ToxicUsers
	}
	return 0
}

func (x *UserStatisticsPeriod) GetExposedUsers() int32 {
	if x != nil {
		return x.ExposedUsers
	}
	return 0
}

var File_speechly_analytics_v1_analytics_proto protoreflect.FileDescriptor

var file_speechly_analytics_v1_analytics_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c,
	0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xfd,
	0x01, 0x0a, 0x19, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x5d,
	0x0a, 0x09, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x1a,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x78, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x78, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x2a, 0x6e, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c,
	0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59,
	0x10, 0x03, 0x2a, 0xc7, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4c, 0x55, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x44, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x42, 0x86, 0x01, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x53, 0x41, 0x58, 0xaa, 0x02, 0x15, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x5c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speechly_analytics_v1_analytics_proto_rawDescOnce sync.Once
	file_speechly_analytics_v1_analytics_proto_rawDescData = file_speechly_analytics_v1_analytics_proto_rawDesc
)

func file_speechly_analytics_v1_analytics_proto_rawDescGZIP() []byte {
	file_speechly_analytics_v1_analytics_proto_rawDescOnce.Do(func() {
		file_speechly_analytics_v1_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_analytics_v1_analytics_proto_rawDescData)
	})
	return file_speechly_analytics_v1_analytics_proto_rawDescData
}

var file_speechly_analytics_v1_analytics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_speechly_analytics_v1_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_speechly_analytics_v1_analytics_proto_goTypes = []interface{}{
	(Aggregation)(0),                   // 0: speechly.analytics.v1.Aggregation
	(ProcessingType)(0),                // 1: speechly.analytics.v1.ProcessingType
	(*UtteranceStatisticsPeriod)(nil),  // 2: speechly.analytics.v1.UtteranceStatisticsPeriod
	(*Utterance)(nil),                  // 3: speechly.analytics.v1.Utterance
	(*DecoderInfo)(nil),                // 4: speechly.analytics.v1.DecoderInfo
	(*ProcessingInfo)(nil),             // 5: speechly.analytics.v1.ProcessingInfo
	(*ModerationStatisticsPeriod)(nil), // 6: speechly.analytics.v1.ModerationStatisticsPeriod
	(*UserStatisticsPeriod)(nil),       // 7: speechly.analytics.v1.UserStatisticsPeriod
}
var file_speechly_analytics_v1_analytics_proto_depIdxs = []int32{
	1, // 0: speechly.analytics.v1.ProcessingInfo.processing_types:type_name -> speechly.analytics.v1.ProcessingType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_speechly_analytics_v1_analytics_proto_init() }
func file_speechly_analytics_v1_analytics_proto_init() {
	if File_speechly_analytics_v1_analytics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speechly_analytics_v1_analytics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtteranceStatisticsPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utterance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecoderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModerationStatisticsPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatisticsPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_analytics_v1_analytics_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_speechly_analytics_v1_analytics_proto_goTypes,
		DependencyIndexes: file_speechly_analytics_v1_analytics_proto_depIdxs,
		EnumInfos:         file_speechly_analytics_v1_analytics_proto_enumTypes,
		MessageInfos:      file_speechly_analytics_v1_analytics_proto_msgTypes,
	}.Build()
	File_speechly_analytics_v1_analytics_proto = out.File
	file_speechly_analytics_v1_analytics_proto_rawDesc = nil
	file_speechly_analytics_v1_analytics_proto_goTypes = nil
	file_speechly_analytics_v1_analytics_proto_depIdxs = nil
}
