// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: speechly/analytics/v1/analytics_api.proto

package analyticsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The scope of the returned items.
type UtteranceStatisticsRequest_Scope int32

const (
	UtteranceStatisticsRequest_SCOPE_INVALID UtteranceStatisticsRequest_Scope = 0
	// Include only utterance data.
	UtteranceStatisticsRequest_SCOPE_UTTERANCES UtteranceStatisticsRequest_Scope = 1
	// Include annotated data.
	UtteranceStatisticsRequest_SCOPE_ANNOTATIONS UtteranceStatisticsRequest_Scope = 2
	// Include both utterance and annotated data.
	UtteranceStatisticsRequest_SCOPE_ALL UtteranceStatisticsRequest_Scope = 3
)

// Enum value maps for UtteranceStatisticsRequest_Scope.
var (
	UtteranceStatisticsRequest_Scope_name = map[int32]string{
		0: "SCOPE_INVALID",
		1: "SCOPE_UTTERANCES",
		2: "SCOPE_ANNOTATIONS",
		3: "SCOPE_ALL",
	}
	UtteranceStatisticsRequest_Scope_value = map[string]int32{
		"SCOPE_INVALID":     0,
		"SCOPE_UTTERANCES":  1,
		"SCOPE_ANNOTATIONS": 2,
		"SCOPE_ALL":         3,
	}
)

func (x UtteranceStatisticsRequest_Scope) Enum() *UtteranceStatisticsRequest_Scope {
	p := new(UtteranceStatisticsRequest_Scope)
	*p = x
	return p
}

func (x UtteranceStatisticsRequest_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UtteranceStatisticsRequest_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_analytics_v1_analytics_api_proto_enumTypes[0].Descriptor()
}

func (UtteranceStatisticsRequest_Scope) Type() protoreflect.EnumType {
	return &file_speechly_analytics_v1_analytics_api_proto_enumTypes[0]
}

func (x UtteranceStatisticsRequest_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UtteranceStatisticsRequest_Scope.Descriptor instead.
func (UtteranceStatisticsRequest_Scope) EnumDescriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP(), []int{0, 0}
}

// Includes keys for the UtteranceStatistics method.
// If no keys are given, the token's project is used.
// Token needs to have access to the given app / project.
type UtteranceStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit statistics to a single app_id.
	// Default is none, returning statistics for all apps in the project.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Amount of days to include in the result.
	// Default is 14 days.
	Days int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
	// Scope of returned data.
	// Default is UTTERANCES.
	Scope UtteranceStatisticsRequest_Scope `protobuf:"varint,3,opt,name=scope,proto3,enum=speechly.analytics.v1.UtteranceStatisticsRequest_Scope" json:"scope,omitempty"`
	// Aggregation of the data.
	// Default is DAILY
	Aggregation Aggregation `protobuf:"varint,4,opt,name=aggregation,proto3,enum=speechly.analytics.v1.Aggregation" json:"aggregation,omitempty"`
	// Start of requested statistics period.
	// Default is 15 days ago.
	// Must be YYYY-mm-DD formatted string if given.
	StartDate string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// End of requested statistics period.
	// Default is 1 day ago, resulting in two full weeks.
	// Must be YYYY-mm-DD formatted string if given.
	EndDate string `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *UtteranceStatisticsRequest) Reset() {
	*x = UtteranceStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtteranceStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtteranceStatisticsRequest) ProtoMessage() {}

func (x *UtteranceStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtteranceStatisticsRequest.ProtoReflect.Descriptor instead.
func (*UtteranceStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP(), []int{0}
}

func (x *UtteranceStatisticsRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UtteranceStatisticsRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *UtteranceStatisticsRequest) GetScope() UtteranceStatisticsRequest_Scope {
	if x != nil {
		return x.Scope
	}
	return UtteranceStatisticsRequest_SCOPE_INVALID
}

func (x *UtteranceStatisticsRequest) GetAggregation() Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Aggregation_AGGREGATION_INVALID
}

func (x *UtteranceStatisticsRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UtteranceStatisticsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Contains a list of statistics entries for utterances, based on the requested scope.
type UtteranceStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start of this statistics period.
	// YYYY-mm-DD formatted string.
	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// End of this statistics period.
	// YYYY-mm-DD formatted string.
	EndDate string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Time period length.
	Aggregation Aggregation `protobuf:"varint,3,opt,name=aggregation,proto3,enum=speechly.analytics.v1.Aggregation" json:"aggregation,omitempty"`
	// Aggregated results.
	Items []*UtteranceStatisticsPeriod `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	// Amount of utterances in this response
	TotalUtterances int32 `protobuf:"varint,5,opt,name=total_utterances,json=totalUtterances,proto3" json:"total_utterances,omitempty"`
	// Total duration of utterances in seconds.
	TotalDurationSeconds int32 `protobuf:"varint,6,opt,name=total_duration_seconds,json=totalDurationSeconds,proto3" json:"total_duration_seconds,omitempty"`
	// Total duration of annotated utterances in seconds.
	TotalAnnotatedSeconds int32 `protobuf:"varint,7,opt,name=total_annotated_seconds,json=totalAnnotatedSeconds,proto3" json:"total_annotated_seconds,omitempty"`
}

func (x *UtteranceStatisticsResponse) Reset() {
	*x = UtteranceStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtteranceStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtteranceStatisticsResponse) ProtoMessage() {}

func (x *UtteranceStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtteranceStatisticsResponse.ProtoReflect.Descriptor instead.
func (*UtteranceStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP(), []int{1}
}

func (x *UtteranceStatisticsResponse) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UtteranceStatisticsResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *UtteranceStatisticsResponse) GetAggregation() Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Aggregation_AGGREGATION_INVALID
}

func (x *UtteranceStatisticsResponse) GetItems() []*UtteranceStatisticsPeriod {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UtteranceStatisticsResponse) GetTotalUtterances() int32 {
	if x != nil {
		return x.TotalUtterances
	}
	return 0
}

func (x *UtteranceStatisticsResponse) GetTotalDurationSeconds() int32 {
	if x != nil {
		return x.TotalDurationSeconds
	}
	return 0
}

func (x *UtteranceStatisticsResponse) GetTotalAnnotatedSeconds() int32 {
	if x != nil {
		return x.TotalAnnotatedSeconds
	}
	return 0
}

type UtterancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The app_id to show the utterances for.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *UtterancesRequest) Reset() {
	*x = UtterancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtterancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtterancesRequest) ProtoMessage() {}

func (x *UtterancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtterancesRequest.ProtoReflect.Descriptor instead.
func (*UtterancesRequest) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP(), []int{2}
}

func (x *UtterancesRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type UtterancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sample of utterances.
	Utterances []*Utterance `protobuf:"bytes,1,rep,name=utterances,proto3" json:"utterances,omitempty"`
}

func (x *UtterancesResponse) Reset() {
	*x = UtterancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtterancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtterancesResponse) ProtoMessage() {}

func (x *UtterancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtterancesResponse.ProtoReflect.Descriptor instead.
func (*UtterancesResponse) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP(), []int{3}
}

func (x *UtterancesResponse) GetUtterances() []*Utterance {
	if x != nil {
		return x.Utterances
	}
	return nil
}

// A single data point of an utterance recognized by Speechly On Device.
type RegisterUtteranceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// device_id of the utterance.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Length of the recognized utterance in seconds.
	UtteranceLengthSeconds string `protobuf:"bytes,3,opt,name=utterance_length_seconds,json=utteranceLengthSeconds,proto3" json:"utterance_length_seconds,omitempty"`
	// Length of the recognized utterance in characters.
	UtteranceLengthChars string `protobuf:"bytes,4,opt,name=utterance_length_chars,json=utteranceLengthChars,proto3" json:"utterance_length_chars,omitempty"`
	// Information about the on-device decoder.
	DecoderInfo *DecoderInfo `protobuf:"bytes,5,opt,name=decoder_info,json=decoderInfo,proto3" json:"decoder_info,omitempty"`
}

func (x *RegisterUtteranceRequest) Reset() {
	*x = RegisterUtteranceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUtteranceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUtteranceRequest) ProtoMessage() {}

func (x *RegisterUtteranceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUtteranceRequest.ProtoReflect.Descriptor instead.
func (*RegisterUtteranceRequest) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterUtteranceRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RegisterUtteranceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RegisterUtteranceRequest) GetUtteranceLengthSeconds() string {
	if x != nil {
		return x.UtteranceLengthSeconds
	}
	return ""
}

func (x *RegisterUtteranceRequest) GetUtteranceLengthChars() string {
	if x != nil {
		return x.UtteranceLengthChars
	}
	return ""
}

func (x *RegisterUtteranceRequest) GetDecoderInfo() *DecoderInfo {
	if x != nil {
		return x.DecoderInfo
	}
	return nil
}

type RegisterUtteranceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterUtteranceResponse) Reset() {
	*x = RegisterUtteranceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUtteranceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUtteranceResponse) ProtoMessage() {}

func (x *RegisterUtteranceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_analytics_v1_analytics_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUtteranceResponse.ProtoReflect.Descriptor instead.
func (*RegisterUtteranceResponse) Descriptor() ([]byte, []int) {
	return file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP(), []int{5}
}

var File_speechly_analytics_v1_analytics_api_proto protoreflect.FileDescriptor

var file_speechly_analytics_v1_analytics_api_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x25, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x02, 0x0a, 0x1a, 0x55, 0x74,
	0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x56, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x54, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0xfe, 0x02, 0x0a, 0x1b, 0x55,
	0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x11, 0x55,
	0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x12, 0x55, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x0a, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x85, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x73,
	0x12, 0x45, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c,
	0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe7, 0x02, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x50, 0x49, 0x12, 0x7c, 0x0a, 0x13, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x31, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x74, 0x74,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x89,
	0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x21, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x41, 0x58, 0xaa, 0x02, 0x15, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x15, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x5c, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_speechly_analytics_v1_analytics_api_proto_rawDescOnce sync.Once
	file_speechly_analytics_v1_analytics_api_proto_rawDescData = file_speechly_analytics_v1_analytics_api_proto_rawDesc
)

func file_speechly_analytics_v1_analytics_api_proto_rawDescGZIP() []byte {
	file_speechly_analytics_v1_analytics_api_proto_rawDescOnce.Do(func() {
		file_speechly_analytics_v1_analytics_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_analytics_v1_analytics_api_proto_rawDescData)
	})
	return file_speechly_analytics_v1_analytics_api_proto_rawDescData
}

var file_speechly_analytics_v1_analytics_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_speechly_analytics_v1_analytics_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_speechly_analytics_v1_analytics_api_proto_goTypes = []interface{}{
	(UtteranceStatisticsRequest_Scope)(0), // 0: speechly.analytics.v1.UtteranceStatisticsRequest.Scope
	(*UtteranceStatisticsRequest)(nil),    // 1: speechly.analytics.v1.UtteranceStatisticsRequest
	(*UtteranceStatisticsResponse)(nil),   // 2: speechly.analytics.v1.UtteranceStatisticsResponse
	(*UtterancesRequest)(nil),             // 3: speechly.analytics.v1.UtterancesRequest
	(*UtterancesResponse)(nil),            // 4: speechly.analytics.v1.UtterancesResponse
	(*RegisterUtteranceRequest)(nil),      // 5: speechly.analytics.v1.RegisterUtteranceRequest
	(*RegisterUtteranceResponse)(nil),     // 6: speechly.analytics.v1.RegisterUtteranceResponse
	(Aggregation)(0),                      // 7: speechly.analytics.v1.Aggregation
	(*UtteranceStatisticsPeriod)(nil),     // 8: speechly.analytics.v1.UtteranceStatisticsPeriod
	(*Utterance)(nil),                     // 9: speechly.analytics.v1.Utterance
	(*DecoderInfo)(nil),                   // 10: speechly.analytics.v1.DecoderInfo
}
var file_speechly_analytics_v1_analytics_api_proto_depIdxs = []int32{
	0,  // 0: speechly.analytics.v1.UtteranceStatisticsRequest.scope:type_name -> speechly.analytics.v1.UtteranceStatisticsRequest.Scope
	7,  // 1: speechly.analytics.v1.UtteranceStatisticsRequest.aggregation:type_name -> speechly.analytics.v1.Aggregation
	7,  // 2: speechly.analytics.v1.UtteranceStatisticsResponse.aggregation:type_name -> speechly.analytics.v1.Aggregation
	8,  // 3: speechly.analytics.v1.UtteranceStatisticsResponse.items:type_name -> speechly.analytics.v1.UtteranceStatisticsPeriod
	9,  // 4: speechly.analytics.v1.UtterancesResponse.utterances:type_name -> speechly.analytics.v1.Utterance
	10, // 5: speechly.analytics.v1.RegisterUtteranceRequest.decoder_info:type_name -> speechly.analytics.v1.DecoderInfo
	1,  // 6: speechly.analytics.v1.AnalyticsAPI.UtteranceStatistics:input_type -> speechly.analytics.v1.UtteranceStatisticsRequest
	3,  // 7: speechly.analytics.v1.AnalyticsAPI.Utterances:input_type -> speechly.analytics.v1.UtterancesRequest
	5,  // 8: speechly.analytics.v1.AnalyticsAPI.RegisterUtterance:input_type -> speechly.analytics.v1.RegisterUtteranceRequest
	2,  // 9: speechly.analytics.v1.AnalyticsAPI.UtteranceStatistics:output_type -> speechly.analytics.v1.UtteranceStatisticsResponse
	4,  // 10: speechly.analytics.v1.AnalyticsAPI.Utterances:output_type -> speechly.analytics.v1.UtterancesResponse
	6,  // 11: speechly.analytics.v1.AnalyticsAPI.RegisterUtterance:output_type -> speechly.analytics.v1.RegisterUtteranceResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_speechly_analytics_v1_analytics_api_proto_init() }
func file_speechly_analytics_v1_analytics_api_proto_init() {
	if File_speechly_analytics_v1_analytics_api_proto != nil {
		return
	}
	file_speechly_analytics_v1_analytics_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_speechly_analytics_v1_analytics_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtteranceStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtteranceStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtterancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtterancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUtteranceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_analytics_v1_analytics_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUtteranceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_analytics_v1_analytics_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speechly_analytics_v1_analytics_api_proto_goTypes,
		DependencyIndexes: file_speechly_analytics_v1_analytics_api_proto_depIdxs,
		EnumInfos:         file_speechly_analytics_v1_analytics_api_proto_enumTypes,
		MessageInfos:      file_speechly_analytics_v1_analytics_api_proto_msgTypes,
	}.Build()
	File_speechly_analytics_v1_analytics_api_proto = out.File
	file_speechly_analytics_v1_analytics_api_proto_rawDesc = nil
	file_speechly_analytics_v1_analytics_api_proto_goTypes = nil
	file_speechly_analytics_v1_analytics_api_proto_depIdxs = nil
}
