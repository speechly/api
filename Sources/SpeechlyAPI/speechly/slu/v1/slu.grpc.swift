//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: speechly/slu/v1/slu.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Service that implements Speechly SLU (Spoken Language Understanding) API (https://speechly.com/docs/api/slu).
///
/// To use this service you MUST use an access token from Speechly Identity API (https://speechly.com/docs/api/identity).
/// The token MUST be passed in gRPC metadata with "Authorization" key and Bearer $ACCESS_TOKEN" as value, e.g. in Go:
///
/// ctx := context.Background()
/// ctx = metadata.AppendToOutgoingContext(ctx, "Authorization", "Bearer "+accessToken)
/// stream, err := speechlySLUClient.Stream(ctx)
///
/// Usage: instantiate `Speechly_Slu_V1_SLUClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Slu_V1_SLUClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Slu_V1_SLUClientInterceptorFactoryProtocol? { get }

  func stream(
    callOptions: CallOptions?,
    handler: @escaping (Speechly_Slu_V1_SLUResponse) -> Void
  ) -> BidirectionalStreamingCall<Speechly_Slu_V1_SLURequest, Speechly_Slu_V1_SLUResponse>
}

extension Speechly_Slu_V1_SLUClientProtocol {
  public var serviceName: String {
    return "speechly.slu.v1.SLU"
  }

  /// Performs bidirectional streaming speech recognition: receive results while sending audio.
  ///
  /// First request MUST be an SLUConfig message with the configuration that describes the audio format being sent.
  ///
  /// This RPC can handle multiple logical audio segments with the use of SLUEvent_START and SLUEvent_STOP messages,
  /// which are used to indicate the beginning and the end of a segment.
  ///
  /// A typical call timeline will look like this:
  ///
  /// 1. Client starts the RPC.
  /// 2. Client sends SLUConfig message with audio configuration.
  /// 3. Client sends SLUEvent_START.
  /// 4. Client sends audio and receives responses from the server.
  /// 5. Client sends SLUEvent_STOP.
  /// 6. Client sends SLUEvent_START.
  /// 7. Client sends audio and receives responses from the server.
  /// 8. Client sends SLUEvent_STOP.
  /// 9. Client closes the stream and receives responses from the server until EOF is received.
  ///
  /// NB: the client does not have to wait until the server acknowledges the start / stop events,
  /// this is done asynchronously. The client can deduplicate responses based on the audio context ID,
  /// which will be present in every response message.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func stream(
    callOptions: CallOptions? = nil,
    handler: @escaping (Speechly_Slu_V1_SLUResponse) -> Void
  ) -> BidirectionalStreamingCall<Speechly_Slu_V1_SLURequest, Speechly_Slu_V1_SLUResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/speechly.slu.v1.SLU/Stream",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Speechly_Slu_V1_SLUClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'stream'.
  func makeStreamInterceptors() -> [ClientInterceptor<Speechly_Slu_V1_SLURequest, Speechly_Slu_V1_SLUResponse>]
}

public final class Speechly_Slu_V1_SLUClient: Speechly_Slu_V1_SLUClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Slu_V1_SLUClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.slu.v1.SLU service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V1_SLUClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service that implements Speechly SLU (Spoken Language Understanding) API (https://speechly.com/docs/api/slu).
///
/// To use this service you MUST use an access token from Speechly Identity API (https://speechly.com/docs/api/identity).
/// The token MUST be passed in gRPC metadata with "Authorization" key and Bearer $ACCESS_TOKEN" as value, e.g. in Go:
///
/// ctx := context.Background()
/// ctx = metadata.AppendToOutgoingContext(ctx, "Authorization", "Bearer "+accessToken)
/// stream, err := speechlySLUClient.Stream(ctx)
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Slu_V1_SLUProvider: CallHandlerProvider {
  var interceptors: Speechly_Slu_V1_SLUServerInterceptorFactoryProtocol? { get }

  /// Performs bidirectional streaming speech recognition: receive results while sending audio.
  ///
  /// First request MUST be an SLUConfig message with the configuration that describes the audio format being sent.
  ///
  /// This RPC can handle multiple logical audio segments with the use of SLUEvent_START and SLUEvent_STOP messages,
  /// which are used to indicate the beginning and the end of a segment.
  ///
  /// A typical call timeline will look like this:
  ///
  /// 1. Client starts the RPC.
  /// 2. Client sends SLUConfig message with audio configuration.
  /// 3. Client sends SLUEvent_START.
  /// 4. Client sends audio and receives responses from the server.
  /// 5. Client sends SLUEvent_STOP.
  /// 6. Client sends SLUEvent_START.
  /// 7. Client sends audio and receives responses from the server.
  /// 8. Client sends SLUEvent_STOP.
  /// 9. Client closes the stream and receives responses from the server until EOF is received.
  ///
  /// NB: the client does not have to wait until the server acknowledges the start / stop events,
  /// this is done asynchronously. The client can deduplicate responses based on the audio context ID,
  /// which will be present in every response message.
  func stream(context: StreamingResponseCallContext<Speechly_Slu_V1_SLUResponse>) -> EventLoopFuture<(StreamEvent<Speechly_Slu_V1_SLURequest>) -> Void>
}

extension Speechly_Slu_V1_SLUProvider {
  public var serviceName: Substring { return "speechly.slu.v1.SLU" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Stream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V1_SLURequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V1_SLUResponse>(),
        interceptors: self.interceptors?.makeStreamInterceptors() ?? [],
        observerFactory: self.stream(context:)
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Slu_V1_SLUServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'stream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamInterceptors() -> [ServerInterceptor<Speechly_Slu_V1_SLURequest, Speechly_Slu_V1_SLUResponse>]
}
