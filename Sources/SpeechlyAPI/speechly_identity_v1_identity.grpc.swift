//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: speechly/identity/v1/identity.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Speechly Identity API is used for creating access tokens for the Speechly APIs.
///
/// Usage: instantiate `Speechly_Identity_V1_IdentityClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Identity_V1_IdentityClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol? { get }

  func login(
    _ request: Speechly_Identity_V1_LoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Identity_V1_LoginRequest, Speechly_Identity_V1_LoginResponse>
}

extension Speechly_Identity_V1_IdentityClientProtocol {
  public var serviceName: String {
    return "speechly.identity.v1.Identity"
  }

  /// Performs a login of specific Speechly application.
  /// Returns an access token, that can be used to access Speechly SLU API.
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func login(
    _ request: Speechly_Identity_V1_LoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Identity_V1_LoginRequest, Speechly_Identity_V1_LoginResponse> {
    return self.makeUnaryCall(
      path: Speechly_Identity_V1_IdentityClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Speechly_Identity_V1_IdentityClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Speechly_Identity_V1_IdentityNIOClient")
public final class Speechly_Identity_V1_IdentityClient: Speechly_Identity_V1_IdentityClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the speechly.identity.v1.Identity service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Speechly_Identity_V1_IdentityNIOClient: Speechly_Identity_V1_IdentityClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.identity.v1.Identity service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Speechly Identity API is used for creating access tokens for the Speechly APIs.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Identity_V1_IdentityAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol? { get }

  func makeLoginCall(
    _ request: Speechly_Identity_V1_LoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Identity_V1_LoginRequest, Speechly_Identity_V1_LoginResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Identity_V1_IdentityAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Identity_V1_IdentityClientMetadata.serviceDescriptor
  }

  public var interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeLoginCall(
    _ request: Speechly_Identity_V1_LoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Identity_V1_LoginRequest, Speechly_Identity_V1_LoginResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Identity_V1_IdentityClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Identity_V1_IdentityAsyncClientProtocol {
  public func login(
    _ request: Speechly_Identity_V1_LoginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Identity_V1_LoginResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Identity_V1_IdentityClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Speechly_Identity_V1_IdentityAsyncClient: Speechly_Identity_V1_IdentityAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Speechly_Identity_V1_IdentityClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeLoginInterceptors() -> [ClientInterceptor<Speechly_Identity_V1_LoginRequest, Speechly_Identity_V1_LoginResponse>]
}

public enum Speechly_Identity_V1_IdentityClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Identity",
    fullName: "speechly.identity.v1.Identity",
    methods: [
      Speechly_Identity_V1_IdentityClientMetadata.Methods.login,
    ]
  )

  public enum Methods {
    public static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/speechly.identity.v1.Identity/Login",
      type: GRPCCallType.unary
    )
  }
}

/// Speechly Identity API is used for creating access tokens for the Speechly APIs.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Identity_V1_IdentityProvider: CallHandlerProvider {
  var interceptors: Speechly_Identity_V1_IdentityServerInterceptorFactoryProtocol? { get }

  /// Performs a login of specific Speechly application.
  /// Returns an access token, that can be used to access Speechly SLU API.
  func login(request: Speechly_Identity_V1_LoginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Identity_V1_LoginResponse>
}

extension Speechly_Identity_V1_IdentityProvider {
  public var serviceName: Substring {
    return Speechly_Identity_V1_IdentityServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Login":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Identity_V1_LoginRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Identity_V1_LoginResponse>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        userFunction: self.login(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Speechly Identity API is used for creating access tokens for the Speechly APIs.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Identity_V1_IdentityAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Identity_V1_IdentityServerInterceptorFactoryProtocol? { get }

  /// Performs a login of specific Speechly application.
  /// Returns an access token, that can be used to access Speechly SLU API.
  func login(
    request: Speechly_Identity_V1_LoginRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Identity_V1_LoginResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Identity_V1_IdentityAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Identity_V1_IdentityServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Speechly_Identity_V1_IdentityServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Speechly_Identity_V1_IdentityServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Login":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Identity_V1_LoginRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Identity_V1_LoginResponse>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        wrapping: { try await self.login(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Identity_V1_IdentityServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'login'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoginInterceptors() -> [ServerInterceptor<Speechly_Identity_V1_LoginRequest, Speechly_Identity_V1_LoginResponse>]
}

public enum Speechly_Identity_V1_IdentityServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Identity",
    fullName: "speechly.identity.v1.Identity",
    methods: [
      Speechly_Identity_V1_IdentityServerMetadata.Methods.login,
    ]
  )

  public enum Methods {
    public static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/speechly.identity.v1.Identity/Login",
      type: GRPCCallType.unary
    )
  }
}
