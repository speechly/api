// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: speechly/moderation/v1beta1/moderation_api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Speechly_Moderation_V1beta1_TextModerationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The identity of the model to be used for the moderation.
  public var modelID: String = String()

  /// Transcript of the utterance to moderate
  public var text: String = String()

  /// Description of the context where the utterance was uttered.
  public var discourseContext: Speechly_Moderation_V1beta1_DiscourseContext {
    get {return _discourseContext ?? Speechly_Moderation_V1beta1_DiscourseContext()}
    set {_discourseContext = newValue}
  }
  /// Returns true if `discourseContext` has been explicitly set.
  public var hasDiscourseContext: Bool {return self._discourseContext != nil}
  /// Clears the value of `discourseContext`. Subsequent reads from it will return its default value.
  public mutating func clearDiscourseContext() {self._discourseContext = nil}

  /// The language of the utterance (as BCP-47 language code)
  public var languageCode: String = String()

  /// Audio context id corresponding to the text.
  public var audioContextID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _discourseContext: Speechly_Moderation_V1beta1_DiscourseContext? = nil
}

public struct Speechly_Moderation_V1beta1_TextModerationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var labels: [Speechly_Moderation_V1beta1_ModerationLabel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Speechly_Moderation_V1beta1_AudioModerationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var streamingRequest: Speechly_Moderation_V1beta1_AudioModerationRequest.OneOf_StreamingRequest? = nil

  /// Configuration related to the Audio Moderation request. Must be set on the first message.
  public var config: Speechly_Moderation_V1beta1_AudioModerationConfig {
    get {
      if case .config(let v)? = streamingRequest {return v}
      return Speechly_Moderation_V1beta1_AudioModerationConfig()
    }
    set {streamingRequest = .config(newValue)}
  }

  /// Bytes of audio. Must be in a supported format, see https://docs.speechly.com/features/audio-formats
  public var audio: Data {
    get {
      if case .audio(let v)? = streamingRequest {return v}
      return Data()
    }
    set {streamingRequest = .audio(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_StreamingRequest: Equatable {
    /// Configuration related to the Audio Moderation request. Must be set on the first message.
    case config(Speechly_Moderation_V1beta1_AudioModerationConfig)
    /// Bytes of audio. Must be in a supported format, see https://docs.speechly.com/features/audio-formats
    case audio(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Speechly_Moderation_V1beta1_AudioModerationRequest.OneOf_StreamingRequest, rhs: Speechly_Moderation_V1beta1_AudioModerationRequest.OneOf_StreamingRequest) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.config, .config): return {
        guard case .config(let l) = lhs, case .config(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.audio, .audio): return {
        guard case .audio(let l) = lhs, case .audio(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Speechly_Moderation_V1beta1_AudioModerationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var segments: [Speechly_Moderation_V1beta1_ModerationSegment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Speechly_Moderation_V1beta1_StreamingAudioModerationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var streamingRequest: Speechly_Moderation_V1beta1_StreamingAudioModerationRequest.OneOf_StreamingRequest? = nil

  /// Configuration related to the Audio Moderation request. Must be set on the first message.
  public var config: Speechly_Moderation_V1beta1_AudioModerationConfig {
    get {
      if case .config(let v)? = streamingRequest {return v}
      return Speechly_Moderation_V1beta1_AudioModerationConfig()
    }
    set {streamingRequest = .config(newValue)}
  }

  /// Bytes of audio. Must be in a supported format, see https://docs.speechly.com/features/audio-formats
  public var audio: Data {
    get {
      if case .audio(let v)? = streamingRequest {return v}
      return Data()
    }
    set {streamingRequest = .audio(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_StreamingRequest: Equatable {
    /// Configuration related to the Audio Moderation request. Must be set on the first message.
    case config(Speechly_Moderation_V1beta1_AudioModerationConfig)
    /// Bytes of audio. Must be in a supported format, see https://docs.speechly.com/features/audio-formats
    case audio(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Speechly_Moderation_V1beta1_StreamingAudioModerationRequest.OneOf_StreamingRequest, rhs: Speechly_Moderation_V1beta1_StreamingAudioModerationRequest.OneOf_StreamingRequest) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.config, .config): return {
        guard case .config(let l) = lhs, case .config(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.audio, .audio): return {
        guard case .audio(let l) = lhs, case .audio(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Speechly_Moderation_V1beta1_StreamingAudioModerationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var segment: Speechly_Moderation_V1beta1_ModerationSegment {
    get {return _segment ?? Speechly_Moderation_V1beta1_ModerationSegment()}
    set {_segment = newValue}
  }
  /// Returns true if `segment` has been explicitly set.
  public var hasSegment: Bool {return self._segment != nil}
  /// Clears the value of `segment`. Subsequent reads from it will return its default value.
  public mutating func clearSegment() {self._segment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _segment: Speechly_Moderation_V1beta1_ModerationSegment? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Speechly_Moderation_V1beta1_TextModerationRequest: @unchecked Sendable {}
extension Speechly_Moderation_V1beta1_TextModerationResponse: @unchecked Sendable {}
extension Speechly_Moderation_V1beta1_AudioModerationRequest: @unchecked Sendable {}
extension Speechly_Moderation_V1beta1_AudioModerationRequest.OneOf_StreamingRequest: @unchecked Sendable {}
extension Speechly_Moderation_V1beta1_AudioModerationResponse: @unchecked Sendable {}
extension Speechly_Moderation_V1beta1_StreamingAudioModerationRequest: @unchecked Sendable {}
extension Speechly_Moderation_V1beta1_StreamingAudioModerationRequest.OneOf_StreamingRequest: @unchecked Sendable {}
extension Speechly_Moderation_V1beta1_StreamingAudioModerationResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "speechly.moderation.v1beta1"

extension Speechly_Moderation_V1beta1_TextModerationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextModerationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "model_id"),
    2: .same(proto: "text"),
    3: .standard(proto: "discourse_context"),
    4: .standard(proto: "language_code"),
    5: .standard(proto: "audio_context_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.modelID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._discourseContext) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.audioContextID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try { if let v = self._discourseContext {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 4)
    }
    if !self.audioContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.audioContextID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Moderation_V1beta1_TextModerationRequest, rhs: Speechly_Moderation_V1beta1_TextModerationRequest) -> Bool {
    if lhs.modelID != rhs.modelID {return false}
    if lhs.text != rhs.text {return false}
    if lhs._discourseContext != rhs._discourseContext {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.audioContextID != rhs.audioContextID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Moderation_V1beta1_TextModerationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextModerationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.labels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.labels, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Moderation_V1beta1_TextModerationResponse, rhs: Speechly_Moderation_V1beta1_TextModerationResponse) -> Bool {
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Moderation_V1beta1_AudioModerationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AudioModerationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .same(proto: "audio"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Speechly_Moderation_V1beta1_AudioModerationConfig?
        var hadOneofValue = false
        if let current = self.streamingRequest {
          hadOneofValue = true
          if case .config(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.streamingRequest = .config(v)
        }
      }()
      case 2: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.streamingRequest != nil {try decoder.handleConflictingOneOf()}
          self.streamingRequest = .audio(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.streamingRequest {
    case .config?: try {
      guard case .config(let v)? = self.streamingRequest else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .audio?: try {
      guard case .audio(let v)? = self.streamingRequest else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Moderation_V1beta1_AudioModerationRequest, rhs: Speechly_Moderation_V1beta1_AudioModerationRequest) -> Bool {
    if lhs.streamingRequest != rhs.streamingRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Moderation_V1beta1_AudioModerationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AudioModerationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "segments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.segments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Moderation_V1beta1_AudioModerationResponse, rhs: Speechly_Moderation_V1beta1_AudioModerationResponse) -> Bool {
    if lhs.segments != rhs.segments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Moderation_V1beta1_StreamingAudioModerationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingAudioModerationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .same(proto: "audio"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Speechly_Moderation_V1beta1_AudioModerationConfig?
        var hadOneofValue = false
        if let current = self.streamingRequest {
          hadOneofValue = true
          if case .config(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.streamingRequest = .config(v)
        }
      }()
      case 2: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.streamingRequest != nil {try decoder.handleConflictingOneOf()}
          self.streamingRequest = .audio(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.streamingRequest {
    case .config?: try {
      guard case .config(let v)? = self.streamingRequest else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .audio?: try {
      guard case .audio(let v)? = self.streamingRequest else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Moderation_V1beta1_StreamingAudioModerationRequest, rhs: Speechly_Moderation_V1beta1_StreamingAudioModerationRequest) -> Bool {
    if lhs.streamingRequest != rhs.streamingRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Moderation_V1beta1_StreamingAudioModerationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingAudioModerationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "segment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._segment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._segment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Moderation_V1beta1_StreamingAudioModerationResponse, rhs: Speechly_Moderation_V1beta1_StreamingAudioModerationResponse) -> Bool {
    if lhs._segment != rhs._segment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
