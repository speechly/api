//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: speechly/moderation/v1beta1/moderation_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Run Speechly Moderation API with streamable audio content or text content.
///
/// Usage: instantiate `Speechly_Moderation_V1beta1_ModerationAPIClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Moderation_V1beta1_ModerationAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Moderation_V1beta1_ModerationAPIClientInterceptorFactoryProtocol? { get }

  func audioModeration(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Speechly_Moderation_V1beta1_AudioModerationRequest, Speechly_Moderation_V1beta1_AudioModerationResponse>

  func streamingAudioModeration(
    callOptions: CallOptions?,
    handler: @escaping (Speechly_Moderation_V1beta1_StreamingAudioModerationResponse) -> Void
  ) -> BidirectionalStreamingCall<Speechly_Moderation_V1beta1_StreamingAudioModerationRequest, Speechly_Moderation_V1beta1_StreamingAudioModerationResponse>

  func textModeration(
    _ request: Speechly_Moderation_V1beta1_TextModerationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Moderation_V1beta1_TextModerationRequest, Speechly_Moderation_V1beta1_TextModerationResponse>
}

extension Speechly_Moderation_V1beta1_ModerationAPIClientProtocol {
  public var serviceName: String {
    return "speechly.moderation.v1beta1.ModerationAPI"
  }

  /// Stream audio to be moderated and receive all results once whole audio has been processed.
  /// The discourse context may be described for improved performance.
  /// Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func audioModeration(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Speechly_Moderation_V1beta1_AudioModerationRequest, Speechly_Moderation_V1beta1_AudioModerationResponse> {
    return self.makeClientStreamingCall(
      path: "/speechly.moderation.v1beta1.ModerationAPI/AudioModeration",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAudioModerationInterceptors() ?? []
    )
  }

  /// Stream audio to be moderated and receive results for identified segments as soon results as possible.
  /// The discourse context may be described for improved performance.
  /// Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamingAudioModeration(
    callOptions: CallOptions? = nil,
    handler: @escaping (Speechly_Moderation_V1beta1_StreamingAudioModerationResponse) -> Void
  ) -> BidirectionalStreamingCall<Speechly_Moderation_V1beta1_StreamingAudioModerationRequest, Speechly_Moderation_V1beta1_StreamingAudioModerationResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/speechly.moderation.v1beta1.ModerationAPI/StreamingAudioModeration",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamingAudioModerationInterceptors() ?? [],
      handler: handler
    )
  }

  /// Moderate a text utterance.
  /// The discourse context may be described for improved performance.
  /// The related audio may be identified using `audio_context_id`.
  ///
  /// - Parameters:
  ///   - request: Request to send to TextModeration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func textModeration(
    _ request: Speechly_Moderation_V1beta1_TextModerationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Moderation_V1beta1_TextModerationRequest, Speechly_Moderation_V1beta1_TextModerationResponse> {
    return self.makeUnaryCall(
      path: "/speechly.moderation.v1beta1.ModerationAPI/TextModeration",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTextModerationInterceptors() ?? []
    )
  }
}

public protocol Speechly_Moderation_V1beta1_ModerationAPIClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'audioModeration'.
  func makeAudioModerationInterceptors() -> [ClientInterceptor<Speechly_Moderation_V1beta1_AudioModerationRequest, Speechly_Moderation_V1beta1_AudioModerationResponse>]

  /// - Returns: Interceptors to use when invoking 'streamingAudioModeration'.
  func makeStreamingAudioModerationInterceptors() -> [ClientInterceptor<Speechly_Moderation_V1beta1_StreamingAudioModerationRequest, Speechly_Moderation_V1beta1_StreamingAudioModerationResponse>]

  /// - Returns: Interceptors to use when invoking 'textModeration'.
  func makeTextModerationInterceptors() -> [ClientInterceptor<Speechly_Moderation_V1beta1_TextModerationRequest, Speechly_Moderation_V1beta1_TextModerationResponse>]
}

public final class Speechly_Moderation_V1beta1_ModerationAPIClient: Speechly_Moderation_V1beta1_ModerationAPIClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Moderation_V1beta1_ModerationAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.moderation.v1beta1.ModerationAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Moderation_V1beta1_ModerationAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Run Speechly Moderation API with streamable audio content or text content.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Moderation_V1beta1_ModerationAPIProvider: CallHandlerProvider {
  var interceptors: Speechly_Moderation_V1beta1_ModerationAPIServerInterceptorFactoryProtocol? { get }

  /// Stream audio to be moderated and receive all results once whole audio has been processed.
  /// The discourse context may be described for improved performance.
  /// Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
  func audioModeration(context: UnaryResponseCallContext<Speechly_Moderation_V1beta1_AudioModerationResponse>) -> EventLoopFuture<(StreamEvent<Speechly_Moderation_V1beta1_AudioModerationRequest>) -> Void>

  /// Stream audio to be moderated and receive results for identified segments as soon results as possible.
  /// The discourse context may be described for improved performance.
  /// Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
  func streamingAudioModeration(context: StreamingResponseCallContext<Speechly_Moderation_V1beta1_StreamingAudioModerationResponse>) -> EventLoopFuture<(StreamEvent<Speechly_Moderation_V1beta1_StreamingAudioModerationRequest>) -> Void>

  /// Moderate a text utterance.
  /// The discourse context may be described for improved performance.
  /// The related audio may be identified using `audio_context_id`.
  func textModeration(request: Speechly_Moderation_V1beta1_TextModerationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Moderation_V1beta1_TextModerationResponse>
}

extension Speechly_Moderation_V1beta1_ModerationAPIProvider {
  public var serviceName: Substring { return "speechly.moderation.v1beta1.ModerationAPI" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AudioModeration":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Moderation_V1beta1_AudioModerationRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Moderation_V1beta1_AudioModerationResponse>(),
        interceptors: self.interceptors?.makeAudioModerationInterceptors() ?? [],
        observerFactory: self.audioModeration(context:)
      )

    case "StreamingAudioModeration":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Moderation_V1beta1_StreamingAudioModerationRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Moderation_V1beta1_StreamingAudioModerationResponse>(),
        interceptors: self.interceptors?.makeStreamingAudioModerationInterceptors() ?? [],
        observerFactory: self.streamingAudioModeration(context:)
      )

    case "TextModeration":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Moderation_V1beta1_TextModerationRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Moderation_V1beta1_TextModerationResponse>(),
        interceptors: self.interceptors?.makeTextModerationInterceptors() ?? [],
        userFunction: self.textModeration(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Moderation_V1beta1_ModerationAPIServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'audioModeration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAudioModerationInterceptors() -> [ServerInterceptor<Speechly_Moderation_V1beta1_AudioModerationRequest, Speechly_Moderation_V1beta1_AudioModerationResponse>]

  /// - Returns: Interceptors to use when handling 'streamingAudioModeration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamingAudioModerationInterceptors() -> [ServerInterceptor<Speechly_Moderation_V1beta1_StreamingAudioModerationRequest, Speechly_Moderation_V1beta1_StreamingAudioModerationResponse>]

  /// - Returns: Interceptors to use when handling 'textModeration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTextModerationInterceptors() -> [ServerInterceptor<Speechly_Moderation_V1beta1_TextModerationRequest, Speechly_Moderation_V1beta1_TextModerationResponse>]
}
