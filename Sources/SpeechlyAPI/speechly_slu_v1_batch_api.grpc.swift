//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: speechly/slu/v1/batch_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Run SLU operations on audio sources without actively waiting the results.
///
/// Usage: instantiate `Speechly_Slu_V1_BatchAPIClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Slu_V1_BatchAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Slu_V1_BatchAPIClientInterceptorFactoryProtocol? { get }

  func processAudio(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Speechly_Slu_V1_ProcessAudioRequest, Speechly_Slu_V1_ProcessAudioResponse>

  func queryStatus(
    _ request: Speechly_Slu_V1_QueryStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Slu_V1_QueryStatusRequest, Speechly_Slu_V1_QueryStatusResponse>
}

extension Speechly_Slu_V1_BatchAPIClientProtocol {
  public var serviceName: String {
    return "speechly.slu.v1.BatchAPI"
  }

  /// Create a new background SLU operation for a single audio source.
  /// An audio source can be
  ///  - audio chunks sent via repeated ProcessAudioRequests, or
  ///  - URI of a file, reachable from the API
  ///  The response includes an `id` that is used to match the operation to the
  ///  results. A `reference` identifier can also be set.
  ///  The destination can be a webhook URL, in which case the results are posted
  ///  there when they are ready. The payload is an instance of `Operation`.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func processAudio(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Speechly_Slu_V1_ProcessAudioRequest, Speechly_Slu_V1_ProcessAudioResponse> {
    return self.makeClientStreamingCall(
      path: "/speechly.slu.v1.BatchAPI/ProcessAudio",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessAudioInterceptors() ?? []
    )
  }

  /// Query the status of a given batch operation.
  /// If the `ProcessAudioRequest` did not define a `results_uri` as a
  /// destination, the results are returned in the `QueryStatusResponse`.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryStatus(
    _ request: Speechly_Slu_V1_QueryStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Slu_V1_QueryStatusRequest, Speechly_Slu_V1_QueryStatusResponse> {
    return self.makeUnaryCall(
      path: "/speechly.slu.v1.BatchAPI/QueryStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryStatusInterceptors() ?? []
    )
  }
}

public protocol Speechly_Slu_V1_BatchAPIClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'processAudio'.
  func makeProcessAudioInterceptors() -> [ClientInterceptor<Speechly_Slu_V1_ProcessAudioRequest, Speechly_Slu_V1_ProcessAudioResponse>]

  /// - Returns: Interceptors to use when invoking 'queryStatus'.
  func makeQueryStatusInterceptors() -> [ClientInterceptor<Speechly_Slu_V1_QueryStatusRequest, Speechly_Slu_V1_QueryStatusResponse>]
}

public final class Speechly_Slu_V1_BatchAPIClient: Speechly_Slu_V1_BatchAPIClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Slu_V1_BatchAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.slu.v1.BatchAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V1_BatchAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Run SLU operations on audio sources without actively waiting the results.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Slu_V1_BatchAPIProvider: CallHandlerProvider {
  var interceptors: Speechly_Slu_V1_BatchAPIServerInterceptorFactoryProtocol? { get }

  /// Create a new background SLU operation for a single audio source.
  /// An audio source can be
  ///  - audio chunks sent via repeated ProcessAudioRequests, or
  ///  - URI of a file, reachable from the API
  ///  The response includes an `id` that is used to match the operation to the
  ///  results. A `reference` identifier can also be set.
  ///  The destination can be a webhook URL, in which case the results are posted
  ///  there when they are ready. The payload is an instance of `Operation`.
  func processAudio(context: UnaryResponseCallContext<Speechly_Slu_V1_ProcessAudioResponse>) -> EventLoopFuture<(StreamEvent<Speechly_Slu_V1_ProcessAudioRequest>) -> Void>

  /// Query the status of a given batch operation.
  /// If the `ProcessAudioRequest` did not define a `results_uri` as a
  /// destination, the results are returned in the `QueryStatusResponse`.
  func queryStatus(request: Speechly_Slu_V1_QueryStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Slu_V1_QueryStatusResponse>
}

extension Speechly_Slu_V1_BatchAPIProvider {
  public var serviceName: Substring { return "speechly.slu.v1.BatchAPI" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ProcessAudio":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V1_ProcessAudioRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V1_ProcessAudioResponse>(),
        interceptors: self.interceptors?.makeProcessAudioInterceptors() ?? [],
        observerFactory: self.processAudio(context:)
      )

    case "QueryStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V1_QueryStatusRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V1_QueryStatusResponse>(),
        interceptors: self.interceptors?.makeQueryStatusInterceptors() ?? [],
        userFunction: self.queryStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Slu_V1_BatchAPIServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'processAudio'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProcessAudioInterceptors() -> [ServerInterceptor<Speechly_Slu_V1_ProcessAudioRequest, Speechly_Slu_V1_ProcessAudioResponse>]

  /// - Returns: Interceptors to use when handling 'queryStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryStatusInterceptors() -> [ServerInterceptor<Speechly_Slu_V1_QueryStatusRequest, Speechly_Slu_V1_QueryStatusResponse>]
}
