//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: speechly/slu/v2/batch_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Run Speechly Batch API operations on audio sources without actively waiting
/// the results.
///
/// Usage: instantiate `Speechly_Slu_V2_BatchAPIClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Slu_V2_BatchAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol? { get }

  func processAudioSource(
    _ request: Speechly_Slu_V2_ProcessAudioSourceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Slu_V2_ProcessAudioSourceRequest, Speechly_Slu_V2_ProcessAudioSourceResponse>

  func queryStatus(
    _ request: Speechly_Slu_V2_QueryStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Slu_V2_QueryStatusRequest, Speechly_Slu_V2_QueryStatusResponse>
}

extension Speechly_Slu_V2_BatchAPIClientProtocol {
  public var serviceName: String {
    return "speechly.slu.v2.BatchAPI"
  }

  /// Create a new background Speechly Batch API operation for a one or more
  /// audio sources. Audio sources must be URIs of a files, reachable from the
  /// API The response includes an `id` that is used to match the operation to
  /// the results. A `reference` identifier can also be set. Also a
  /// `batch_reference` can be set to mark that multiple audio sources form a
  /// logical batch. In that case, the response will include a `batch_id`.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProcessAudioSource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func processAudioSource(
    _ request: Speechly_Slu_V2_ProcessAudioSourceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Slu_V2_ProcessAudioSourceRequest, Speechly_Slu_V2_ProcessAudioSourceResponse> {
    return self.makeUnaryCall(
      path: Speechly_Slu_V2_BatchAPIClientMetadata.Methods.processAudioSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessAudioSourceInterceptors() ?? []
    )
  }

  /// Query the status of given operations.
  /// If the `ProcessAudioSourceRequest` did not define a `destination` or
  /// `completion_webhook` as a destination, the results are returned in the
  /// `QueryStatusResponse`.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryStatus(
    _ request: Speechly_Slu_V2_QueryStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Slu_V2_QueryStatusRequest, Speechly_Slu_V2_QueryStatusResponse> {
    return self.makeUnaryCall(
      path: Speechly_Slu_V2_BatchAPIClientMetadata.Methods.queryStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryStatusInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Speechly_Slu_V2_BatchAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Speechly_Slu_V2_BatchAPINIOClient")
public final class Speechly_Slu_V2_BatchAPIClient: Speechly_Slu_V2_BatchAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the speechly.slu.v2.BatchAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Speechly_Slu_V2_BatchAPINIOClient: Speechly_Slu_V2_BatchAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.slu.v2.BatchAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Run Speechly Batch API operations on audio sources without actively waiting
/// the results.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Slu_V2_BatchAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol? { get }

  func makeProcessAudioSourceCall(
    _ request: Speechly_Slu_V2_ProcessAudioSourceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V2_ProcessAudioSourceRequest, Speechly_Slu_V2_ProcessAudioSourceResponse>

  func makeQueryStatusCall(
    _ request: Speechly_Slu_V2_QueryStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V2_QueryStatusRequest, Speechly_Slu_V2_QueryStatusResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Slu_V2_BatchAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Slu_V2_BatchAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeProcessAudioSourceCall(
    _ request: Speechly_Slu_V2_ProcessAudioSourceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V2_ProcessAudioSourceRequest, Speechly_Slu_V2_ProcessAudioSourceResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Slu_V2_BatchAPIClientMetadata.Methods.processAudioSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessAudioSourceInterceptors() ?? []
    )
  }

  public func makeQueryStatusCall(
    _ request: Speechly_Slu_V2_QueryStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V2_QueryStatusRequest, Speechly_Slu_V2_QueryStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Slu_V2_BatchAPIClientMetadata.Methods.queryStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Slu_V2_BatchAPIAsyncClientProtocol {
  public func processAudioSource(
    _ request: Speechly_Slu_V2_ProcessAudioSourceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Slu_V2_ProcessAudioSourceResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Slu_V2_BatchAPIClientMetadata.Methods.processAudioSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessAudioSourceInterceptors() ?? []
    )
  }

  public func queryStatus(
    _ request: Speechly_Slu_V2_QueryStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Slu_V2_QueryStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Slu_V2_BatchAPIClientMetadata.Methods.queryStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Speechly_Slu_V2_BatchAPIAsyncClient: Speechly_Slu_V2_BatchAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Speechly_Slu_V2_BatchAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'processAudioSource'.
  func makeProcessAudioSourceInterceptors() -> [ClientInterceptor<Speechly_Slu_V2_ProcessAudioSourceRequest, Speechly_Slu_V2_ProcessAudioSourceResponse>]

  /// - Returns: Interceptors to use when invoking 'queryStatus'.
  func makeQueryStatusInterceptors() -> [ClientInterceptor<Speechly_Slu_V2_QueryStatusRequest, Speechly_Slu_V2_QueryStatusResponse>]
}

public enum Speechly_Slu_V2_BatchAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BatchAPI",
    fullName: "speechly.slu.v2.BatchAPI",
    methods: [
      Speechly_Slu_V2_BatchAPIClientMetadata.Methods.processAudioSource,
      Speechly_Slu_V2_BatchAPIClientMetadata.Methods.queryStatus,
    ]
  )

  public enum Methods {
    public static let processAudioSource = GRPCMethodDescriptor(
      name: "ProcessAudioSource",
      path: "/speechly.slu.v2.BatchAPI/ProcessAudioSource",
      type: GRPCCallType.unary
    )

    public static let queryStatus = GRPCMethodDescriptor(
      name: "QueryStatus",
      path: "/speechly.slu.v2.BatchAPI/QueryStatus",
      type: GRPCCallType.unary
    )
  }
}

/// Run Speechly Batch API operations on audio sources without actively waiting
/// the results.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Slu_V2_BatchAPIProvider: CallHandlerProvider {
  var interceptors: Speechly_Slu_V2_BatchAPIServerInterceptorFactoryProtocol? { get }

  /// Create a new background Speechly Batch API operation for a one or more
  /// audio sources. Audio sources must be URIs of a files, reachable from the
  /// API The response includes an `id` that is used to match the operation to
  /// the results. A `reference` identifier can also be set. Also a
  /// `batch_reference` can be set to mark that multiple audio sources form a
  /// logical batch. In that case, the response will include a `batch_id`.
  func processAudioSource(request: Speechly_Slu_V2_ProcessAudioSourceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Slu_V2_ProcessAudioSourceResponse>

  /// Query the status of given operations.
  /// If the `ProcessAudioSourceRequest` did not define a `destination` or
  /// `completion_webhook` as a destination, the results are returned in the
  /// `QueryStatusResponse`.
  func queryStatus(request: Speechly_Slu_V2_QueryStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Slu_V2_QueryStatusResponse>
}

extension Speechly_Slu_V2_BatchAPIProvider {
  public var serviceName: Substring {
    return Speechly_Slu_V2_BatchAPIServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ProcessAudioSource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V2_ProcessAudioSourceRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V2_ProcessAudioSourceResponse>(),
        interceptors: self.interceptors?.makeProcessAudioSourceInterceptors() ?? [],
        userFunction: self.processAudioSource(request:context:)
      )

    case "QueryStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V2_QueryStatusRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V2_QueryStatusResponse>(),
        interceptors: self.interceptors?.makeQueryStatusInterceptors() ?? [],
        userFunction: self.queryStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Run Speechly Batch API operations on audio sources without actively waiting
/// the results.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Slu_V2_BatchAPIAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Slu_V2_BatchAPIServerInterceptorFactoryProtocol? { get }

  /// Create a new background Speechly Batch API operation for a one or more
  /// audio sources. Audio sources must be URIs of a files, reachable from the
  /// API The response includes an `id` that is used to match the operation to
  /// the results. A `reference` identifier can also be set. Also a
  /// `batch_reference` can be set to mark that multiple audio sources form a
  /// logical batch. In that case, the response will include a `batch_id`.
  func processAudioSource(
    request: Speechly_Slu_V2_ProcessAudioSourceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Slu_V2_ProcessAudioSourceResponse

  /// Query the status of given operations.
  /// If the `ProcessAudioSourceRequest` did not define a `destination` or
  /// `completion_webhook` as a destination, the results are returned in the
  /// `QueryStatusResponse`.
  func queryStatus(
    request: Speechly_Slu_V2_QueryStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Slu_V2_QueryStatusResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Slu_V2_BatchAPIAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Slu_V2_BatchAPIServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Speechly_Slu_V2_BatchAPIServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Speechly_Slu_V2_BatchAPIServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ProcessAudioSource":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V2_ProcessAudioSourceRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V2_ProcessAudioSourceResponse>(),
        interceptors: self.interceptors?.makeProcessAudioSourceInterceptors() ?? [],
        wrapping: { try await self.processAudioSource(request: $0, context: $1) }
      )

    case "QueryStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V2_QueryStatusRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V2_QueryStatusResponse>(),
        interceptors: self.interceptors?.makeQueryStatusInterceptors() ?? [],
        wrapping: { try await self.queryStatus(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Slu_V2_BatchAPIServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'processAudioSource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProcessAudioSourceInterceptors() -> [ServerInterceptor<Speechly_Slu_V2_ProcessAudioSourceRequest, Speechly_Slu_V2_ProcessAudioSourceResponse>]

  /// - Returns: Interceptors to use when handling 'queryStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryStatusInterceptors() -> [ServerInterceptor<Speechly_Slu_V2_QueryStatusRequest, Speechly_Slu_V2_QueryStatusResponse>]
}

public enum Speechly_Slu_V2_BatchAPIServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BatchAPI",
    fullName: "speechly.slu.v2.BatchAPI",
    methods: [
      Speechly_Slu_V2_BatchAPIServerMetadata.Methods.processAudioSource,
      Speechly_Slu_V2_BatchAPIServerMetadata.Methods.queryStatus,
    ]
  )

  public enum Methods {
    public static let processAudioSource = GRPCMethodDescriptor(
      name: "ProcessAudioSource",
      path: "/speechly.slu.v2.BatchAPI/ProcessAudioSource",
      type: GRPCCallType.unary
    )

    public static let queryStatus = GRPCMethodDescriptor(
      name: "QueryStatus",
      path: "/speechly.slu.v2.BatchAPI/QueryStatus",
      type: GRPCCallType.unary
    )
  }
}
