// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: speechly/slu/v1/batch.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Describes the audio content of the batch operation.
public struct Speechly_Slu_V1_AudioConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The encoding of the audio data sent in the stream.
  /// Required.
  public var encoding: Speechly_Slu_V1_AudioConfiguration.Encoding = .invalid

  /// The number of channels in the input audio data.
  /// Required.
  public var channels: Int32 = 0

  /// Sample rate in Hertz of the audio data sent in the stream (e.g. 16000).
  /// Required.
  public var sampleRateHertz: Int32 = 0

  /// The language(s) of the audio sent in the stream as a BCP-47 language tag
  /// (e.g. "en-US"). Defaults to the target application language.
  /// Optional.
  public var languageCodes: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The encoding of the audio data sent in the stream.
  public enum Encoding: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case invalid // = 0

    /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
    case linear16 // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .invalid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .linear16
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .linear16: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Speechly_Slu_V1_AudioConfiguration.Encoding: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Speechly_Slu_V1_AudioConfiguration.Encoding] = [
    .invalid,
    .linear16,
  ]
}

#endif  // swift(>=4.2)

/// Describes full properties of an HTTP endpoint.
public struct Speechly_Slu_V1_HttpResource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// URL of the endpoint (protocol://server/path)
  /// Required.
  public var url: String = String()

  /// method to use in connection.
  /// Required.
  public var method: Speechly_Slu_V1_HttpResource.Method = .invalid

  /// Possible additional headers to include in the connection.
  /// Optional.
  public var headers: [Speechly_Slu_V1_HttpResource.Header] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The HTTP method to use.
  public enum Method: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case invalid // = 0
    case get // = 1
    case post // = 2
    case put // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .invalid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .get
      case 2: self = .post
      case 3: self = .put
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .get: return 1
      case .post: return 2
      case .put: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A single header value.
  public struct Header {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String = String()

    public var value: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Speechly_Slu_V1_HttpResource.Method: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Speechly_Slu_V1_HttpResource.Method] = [
    .invalid,
    .get,
    .post,
    .put,
  ]
}

#endif  // swift(>=4.2)

/// Describes a single batch operation.
public struct Speechly_Slu_V1_Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the operation.
  public var id: String = String()

  /// The reference id of the operation, if given.
  public var reference: String = String()

  /// The current status of the operation.
  public var status: Speechly_Slu_V1_Operation.Status = .invalid

  /// The language code of the detected language.
  public var languageCode: String = String()

  /// The application context for the operation.
  public var appID: String = String()

  /// The device or microphone id for the audio, if applicable.
  public var deviceID: String = String()

  /// If the operation status is STATUS_DONE and the destination is not set,
  /// the results of the operation.
  public var transcripts: [Speechly_Slu_V1_Transcript] = []

  /// Contains a description of the error if the operation status is STATUS_ERROR.
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The status of the operation.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case invalid // = 0
    case queued // = 1
    case processing // = 2
    case done // = 3
    case error // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .invalid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .queued
      case 2: self = .processing
      case 3: self = .done
      case 4: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .queued: return 1
      case .processing: return 2
      case .done: return 3
      case .error: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Speechly_Slu_V1_Operation.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Speechly_Slu_V1_Operation.Status] = [
    .invalid,
    .queued,
    .processing,
    .done,
    .error,
  ]
}

#endif  // swift(>=4.2)

/// Describes an SLU transcript.
/// A transcript is a speech-to-text element of the phrase, i.e. a word
/// recognised from the audio.
public struct Speechly_Slu_V1_Transcript {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The word recongised from the audio.
  public var word: String = String()

  /// The position of the word in the whole phrase, zero-based.
  public var index: Int32 = 0

  /// The end time of the word in the audio, in milliseconds from the beginning
  /// of the audio.
  public var startTime: Int32 = 0

  /// The end time of the word in the audio, in milliseconds from the beginning
  /// of the audio.
  public var endTime: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Option to change the default behaviour of the SLU.
public struct Speechly_Slu_V1_Option {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The key of the option to be set.
  public var key: String = String()

  /// The values to set the option to.
  public var value: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Speechly_Slu_V1_AudioConfiguration: @unchecked Sendable {}
extension Speechly_Slu_V1_AudioConfiguration.Encoding: @unchecked Sendable {}
extension Speechly_Slu_V1_HttpResource: @unchecked Sendable {}
extension Speechly_Slu_V1_HttpResource.Method: @unchecked Sendable {}
extension Speechly_Slu_V1_HttpResource.Header: @unchecked Sendable {}
extension Speechly_Slu_V1_Operation: @unchecked Sendable {}
extension Speechly_Slu_V1_Operation.Status: @unchecked Sendable {}
extension Speechly_Slu_V1_Transcript: @unchecked Sendable {}
extension Speechly_Slu_V1_Option: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "speechly.slu.v1"

extension Speechly_Slu_V1_AudioConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AudioConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoding"),
    2: .same(proto: "channels"),
    3: .standard(proto: "sample_rate_hertz"),
    4: .standard(proto: "language_codes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.encoding) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.channels) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.sampleRateHertz) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.languageCodes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.encoding != .invalid {
      try visitor.visitSingularEnumField(value: self.encoding, fieldNumber: 1)
    }
    if self.channels != 0 {
      try visitor.visitSingularInt32Field(value: self.channels, fieldNumber: 2)
    }
    if self.sampleRateHertz != 0 {
      try visitor.visitSingularInt32Field(value: self.sampleRateHertz, fieldNumber: 3)
    }
    if !self.languageCodes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.languageCodes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Slu_V1_AudioConfiguration, rhs: Speechly_Slu_V1_AudioConfiguration) -> Bool {
    if lhs.encoding != rhs.encoding {return false}
    if lhs.channels != rhs.channels {return false}
    if lhs.sampleRateHertz != rhs.sampleRateHertz {return false}
    if lhs.languageCodes != rhs.languageCodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Slu_V1_AudioConfiguration.Encoding: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENCODING_INVALID"),
    1: .same(proto: "ENCODING_LINEAR16"),
  ]
}

extension Speechly_Slu_V1_HttpResource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HttpResource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "method"),
    3: .same(proto: "headers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.headers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.method != .invalid {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 2)
    }
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Slu_V1_HttpResource, rhs: Speechly_Slu_V1_HttpResource) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.method != rhs.method {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Slu_V1_HttpResource.Method: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "METHOD_INVALID"),
    1: .same(proto: "METHOD_GET"),
    2: .same(proto: "METHOD_POST"),
    3: .same(proto: "METHOD_PUT"),
  ]
}

extension Speechly_Slu_V1_HttpResource.Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Speechly_Slu_V1_HttpResource.protoMessageName + ".Header"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Slu_V1_HttpResource.Header, rhs: Speechly_Slu_V1_HttpResource.Header) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Slu_V1_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "reference"),
    3: .same(proto: "status"),
    4: .standard(proto: "language_code"),
    5: .standard(proto: "app_id"),
    6: .standard(proto: "device_id"),
    7: .same(proto: "transcripts"),
    8: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reference) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.transcripts) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.reference.isEmpty {
      try visitor.visitSingularStringField(value: self.reference, fieldNumber: 2)
    }
    if self.status != .invalid {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 4)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 5)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 6)
    }
    if !self.transcripts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transcripts, fieldNumber: 7)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Slu_V1_Operation, rhs: Speechly_Slu_V1_Operation) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.reference != rhs.reference {return false}
    if lhs.status != rhs.status {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.transcripts != rhs.transcripts {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Slu_V1_Operation.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_INVALID"),
    1: .same(proto: "STATUS_QUEUED"),
    2: .same(proto: "STATUS_PROCESSING"),
    3: .same(proto: "STATUS_DONE"),
    4: .same(proto: "STATUS_ERROR"),
  ]
}

extension Speechly_Slu_V1_Transcript: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transcript"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "word"),
    2: .same(proto: "index"),
    3: .standard(proto: "start_time"),
    4: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.word) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.startTime) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.word.isEmpty {
      try visitor.visitSingularStringField(value: self.word, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 2)
    }
    if self.startTime != 0 {
      try visitor.visitSingularInt32Field(value: self.startTime, fieldNumber: 3)
    }
    if self.endTime != 0 {
      try visitor.visitSingularInt32Field(value: self.endTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Slu_V1_Transcript, rhs: Speechly_Slu_V1_Transcript) -> Bool {
    if lhs.word != rhs.word {return false}
    if lhs.index != rhs.index {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Slu_V1_Option: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Option"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitRepeatedStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Slu_V1_Option, rhs: Speechly_Slu_V1_Option) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
