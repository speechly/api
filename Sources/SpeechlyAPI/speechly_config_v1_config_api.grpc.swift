//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: speechly/config/v1/config_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Service that implements Speechly Configuration API (https://speechly.com/docs/api/configuration).
///
/// The service requires a Speechly token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
///
/// The token acts as a proxy for the user who has generated it,
/// i.e. all operations are performed with that user as a subject.
///
/// Usage: instantiate `Speechly_Config_V1_ConfigAPIClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Config_V1_ConfigAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Config_V1_ConfigAPIClientInterceptorFactoryProtocol? { get }

  func getProject(
    _ request: Speechly_Config_V1_GetProjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_GetProjectRequest, Speechly_Config_V1_GetProjectResponse>

  func createProject(
    _ request: Speechly_Config_V1_CreateProjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_CreateProjectRequest, Speechly_Config_V1_CreateProjectResponse>

  func updateProject(
    _ request: Speechly_Config_V1_UpdateProjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_UpdateProjectRequest, Speechly_Config_V1_UpdateProjectResponse>

  func getProjectParticipants(
    _ request: Speechly_Config_V1_GetProjectParticipantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_GetProjectParticipantsRequest, Speechly_Config_V1_GetProjectParticipantsResponse>

  func invite(
    _ request: Speechly_Config_V1_InviteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_InviteRequest, Speechly_Config_V1_InviteResponse>

  func joinProject(
    _ request: Speechly_Config_V1_JoinProjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_JoinProjectRequest, Speechly_Config_V1_JoinProjectResponse>

  func listApps(
    _ request: Speechly_Config_V1_ListAppsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_ListAppsRequest, Speechly_Config_V1_ListAppsResponse>

  func getApp(
    _ request: Speechly_Config_V1_GetAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_GetAppRequest, Speechly_Config_V1_GetAppResponse>

  func createApp(
    _ request: Speechly_Config_V1_CreateAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_CreateAppRequest, Speechly_Config_V1_CreateAppResponse>

  func updateApp(
    _ request: Speechly_Config_V1_UpdateAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_UpdateAppRequest, Speechly_Config_V1_UpdateAppResponse>

  func deleteApp(
    _ request: Speechly_Config_V1_DeleteAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Config_V1_DeleteAppRequest, Speechly_Config_V1_DeleteAppResponse>

  func uploadTrainingData(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Speechly_Config_V1_UploadTrainingDataRequest, Speechly_Config_V1_UploadTrainingDataResponse>

  func downloadCurrentTrainingData(
    _ request: Speechly_Config_V1_DownloadCurrentTrainingDataRequest,
    callOptions: CallOptions?,
    handler: @escaping (Speechly_Config_V1_DownloadCurrentTrainingDataResponse) -> Void
  ) -> ServerStreamingCall<Speechly_Config_V1_DownloadCurrentTrainingDataRequest, Speechly_Config_V1_DownloadCurrentTrainingDataResponse>
}

extension Speechly_Config_V1_ConfigAPIClientProtocol {
  public var serviceName: String {
    return "speechly.config.v1.ConfigAPI"
  }

  /// Lists all current user projects.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getProject(
    _ request: Speechly_Config_V1_GetProjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_GetProjectRequest, Speechly_Config_V1_GetProjectResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/GetProject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProjectInterceptors() ?? []
    )
  }

  /// Creates a new project for current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateProject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createProject(
    _ request: Speechly_Config_V1_CreateProjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_CreateProjectRequest, Speechly_Config_V1_CreateProjectResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/CreateProject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProjectInterceptors() ?? []
    )
  }

  /// Updates an existing project.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateProject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateProject(
    _ request: Speechly_Config_V1_UpdateProjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_UpdateProjectRequest, Speechly_Config_V1_UpdateProjectResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/UpdateProject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProjectInterceptors() ?? []
    )
  }

  /// Lists all users with access to a project.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProjectParticipants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getProjectParticipants(
    _ request: Speechly_Config_V1_GetProjectParticipantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_GetProjectParticipantsRequest, Speechly_Config_V1_GetProjectParticipantsResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/GetProjectParticipants",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProjectParticipantsInterceptors() ?? []
    )
  }

  /// Generates an invitation link for another user to join a project,
  /// which can be used to call JoinProject.
  ///
  /// - Parameters:
  ///   - request: Request to send to Invite.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func invite(
    _ request: Speechly_Config_V1_InviteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_InviteRequest, Speechly_Config_V1_InviteResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/Invite",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInviteInterceptors() ?? []
    )
  }

  /// Joins a project as a current user.
  /// Requires a link generated with `Invite`.
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinProject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func joinProject(
    _ request: Speechly_Config_V1_JoinProjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_JoinProjectRequest, Speechly_Config_V1_JoinProjectResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/JoinProject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinProjectInterceptors() ?? []
    )
  }

  /// Lists all applications in a project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListApps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listApps(
    _ request: Speechly_Config_V1_ListAppsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_ListAppsRequest, Speechly_Config_V1_ListAppsResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/ListApps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAppsInterceptors() ?? []
    )
  }

  /// Gets detailed information about an application.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getApp(
    _ request: Speechly_Config_V1_GetAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_GetAppRequest, Speechly_Config_V1_GetAppResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/GetApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppInterceptors() ?? []
    )
  }

  /// Creates a new application for current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createApp(
    _ request: Speechly_Config_V1_CreateAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_CreateAppRequest, Speechly_Config_V1_CreateAppResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/CreateApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAppInterceptors() ?? []
    )
  }

  /// Updates an existing application.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateApp(
    _ request: Speechly_Config_V1_UpdateAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_UpdateAppRequest, Speechly_Config_V1_UpdateAppResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/UpdateApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAppInterceptors() ?? []
    )
  }

  /// Deletes an existing application.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteApp(
    _ request: Speechly_Config_V1_DeleteAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Config_V1_DeleteAppRequest, Speechly_Config_V1_DeleteAppResponse> {
    return self.makeUnaryCall(
      path: "/speechly.config.v1.ConfigAPI/DeleteApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAppInterceptors() ?? []
    )
  }

  /// Uploads new training data for an application.
  /// This will create and queue a new training job for that application.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func uploadTrainingData(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Speechly_Config_V1_UploadTrainingDataRequest, Speechly_Config_V1_UploadTrainingDataResponse> {
    return self.makeClientStreamingCall(
      path: "/speechly.config.v1.ConfigAPI/UploadTrainingData",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadTrainingDataInterceptors() ?? []
    )
  }

  /// Downloads current training data for an application.
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadCurrentTrainingData.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func downloadCurrentTrainingData(
    _ request: Speechly_Config_V1_DownloadCurrentTrainingDataRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Speechly_Config_V1_DownloadCurrentTrainingDataResponse) -> Void
  ) -> ServerStreamingCall<Speechly_Config_V1_DownloadCurrentTrainingDataRequest, Speechly_Config_V1_DownloadCurrentTrainingDataResponse> {
    return self.makeServerStreamingCall(
      path: "/speechly.config.v1.ConfigAPI/DownloadCurrentTrainingData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadCurrentTrainingDataInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Speechly_Config_V1_ConfigAPIClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getProject'.
  func makeGetProjectInterceptors() -> [ClientInterceptor<Speechly_Config_V1_GetProjectRequest, Speechly_Config_V1_GetProjectResponse>]

  /// - Returns: Interceptors to use when invoking 'createProject'.
  func makeCreateProjectInterceptors() -> [ClientInterceptor<Speechly_Config_V1_CreateProjectRequest, Speechly_Config_V1_CreateProjectResponse>]

  /// - Returns: Interceptors to use when invoking 'updateProject'.
  func makeUpdateProjectInterceptors() -> [ClientInterceptor<Speechly_Config_V1_UpdateProjectRequest, Speechly_Config_V1_UpdateProjectResponse>]

  /// - Returns: Interceptors to use when invoking 'getProjectParticipants'.
  func makeGetProjectParticipantsInterceptors() -> [ClientInterceptor<Speechly_Config_V1_GetProjectParticipantsRequest, Speechly_Config_V1_GetProjectParticipantsResponse>]

  /// - Returns: Interceptors to use when invoking 'invite'.
  func makeInviteInterceptors() -> [ClientInterceptor<Speechly_Config_V1_InviteRequest, Speechly_Config_V1_InviteResponse>]

  /// - Returns: Interceptors to use when invoking 'joinProject'.
  func makeJoinProjectInterceptors() -> [ClientInterceptor<Speechly_Config_V1_JoinProjectRequest, Speechly_Config_V1_JoinProjectResponse>]

  /// - Returns: Interceptors to use when invoking 'listApps'.
  func makeListAppsInterceptors() -> [ClientInterceptor<Speechly_Config_V1_ListAppsRequest, Speechly_Config_V1_ListAppsResponse>]

  /// - Returns: Interceptors to use when invoking 'getApp'.
  func makeGetAppInterceptors() -> [ClientInterceptor<Speechly_Config_V1_GetAppRequest, Speechly_Config_V1_GetAppResponse>]

  /// - Returns: Interceptors to use when invoking 'createApp'.
  func makeCreateAppInterceptors() -> [ClientInterceptor<Speechly_Config_V1_CreateAppRequest, Speechly_Config_V1_CreateAppResponse>]

  /// - Returns: Interceptors to use when invoking 'updateApp'.
  func makeUpdateAppInterceptors() -> [ClientInterceptor<Speechly_Config_V1_UpdateAppRequest, Speechly_Config_V1_UpdateAppResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteApp'.
  func makeDeleteAppInterceptors() -> [ClientInterceptor<Speechly_Config_V1_DeleteAppRequest, Speechly_Config_V1_DeleteAppResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadTrainingData'.
  func makeUploadTrainingDataInterceptors() -> [ClientInterceptor<Speechly_Config_V1_UploadTrainingDataRequest, Speechly_Config_V1_UploadTrainingDataResponse>]

  /// - Returns: Interceptors to use when invoking 'downloadCurrentTrainingData'.
  func makeDownloadCurrentTrainingDataInterceptors() -> [ClientInterceptor<Speechly_Config_V1_DownloadCurrentTrainingDataRequest, Speechly_Config_V1_DownloadCurrentTrainingDataResponse>]
}

public final class Speechly_Config_V1_ConfigAPIClient: Speechly_Config_V1_ConfigAPIClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Config_V1_ConfigAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.config.v1.ConfigAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Config_V1_ConfigAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service that implements Speechly Configuration API (https://speechly.com/docs/api/configuration).
///
/// The service requires a Speechly token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
///
/// The token acts as a proxy for the user who has generated it,
/// i.e. all operations are performed with that user as a subject.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Config_V1_ConfigAPIProvider: CallHandlerProvider {
  var interceptors: Speechly_Config_V1_ConfigAPIServerInterceptorFactoryProtocol? { get }

  /// Lists all current user projects.
  func getProject(request: Speechly_Config_V1_GetProjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_GetProjectResponse>

  /// Creates a new project for current user.
  func createProject(request: Speechly_Config_V1_CreateProjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_CreateProjectResponse>

  /// Updates an existing project.
  func updateProject(request: Speechly_Config_V1_UpdateProjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_UpdateProjectResponse>

  /// Lists all users with access to a project.
  func getProjectParticipants(request: Speechly_Config_V1_GetProjectParticipantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_GetProjectParticipantsResponse>

  /// Generates an invitation link for another user to join a project,
  /// which can be used to call JoinProject.
  func invite(request: Speechly_Config_V1_InviteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_InviteResponse>

  /// Joins a project as a current user.
  /// Requires a link generated with `Invite`.
  func joinProject(request: Speechly_Config_V1_JoinProjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_JoinProjectResponse>

  /// Lists all applications in a project.
  func listApps(request: Speechly_Config_V1_ListAppsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_ListAppsResponse>

  /// Gets detailed information about an application.
  func getApp(request: Speechly_Config_V1_GetAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_GetAppResponse>

  /// Creates a new application for current user.
  func createApp(request: Speechly_Config_V1_CreateAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_CreateAppResponse>

  /// Updates an existing application.
  func updateApp(request: Speechly_Config_V1_UpdateAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_UpdateAppResponse>

  /// Deletes an existing application.
  func deleteApp(request: Speechly_Config_V1_DeleteAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Config_V1_DeleteAppResponse>

  /// Uploads new training data for an application.
  /// This will create and queue a new training job for that application.
  func uploadTrainingData(context: UnaryResponseCallContext<Speechly_Config_V1_UploadTrainingDataResponse>) -> EventLoopFuture<(StreamEvent<Speechly_Config_V1_UploadTrainingDataRequest>) -> Void>

  /// Downloads current training data for an application.
  func downloadCurrentTrainingData(request: Speechly_Config_V1_DownloadCurrentTrainingDataRequest, context: StreamingResponseCallContext<Speechly_Config_V1_DownloadCurrentTrainingDataResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Speechly_Config_V1_ConfigAPIProvider {
  public var serviceName: Substring { return "speechly.config.v1.ConfigAPI" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetProject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_GetProjectRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_GetProjectResponse>(),
        interceptors: self.interceptors?.makeGetProjectInterceptors() ?? [],
        userFunction: self.getProject(request:context:)
      )

    case "CreateProject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_CreateProjectRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_CreateProjectResponse>(),
        interceptors: self.interceptors?.makeCreateProjectInterceptors() ?? [],
        userFunction: self.createProject(request:context:)
      )

    case "UpdateProject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_UpdateProjectRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_UpdateProjectResponse>(),
        interceptors: self.interceptors?.makeUpdateProjectInterceptors() ?? [],
        userFunction: self.updateProject(request:context:)
      )

    case "GetProjectParticipants":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_GetProjectParticipantsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_GetProjectParticipantsResponse>(),
        interceptors: self.interceptors?.makeGetProjectParticipantsInterceptors() ?? [],
        userFunction: self.getProjectParticipants(request:context:)
      )

    case "Invite":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_InviteRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_InviteResponse>(),
        interceptors: self.interceptors?.makeInviteInterceptors() ?? [],
        userFunction: self.invite(request:context:)
      )

    case "JoinProject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_JoinProjectRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_JoinProjectResponse>(),
        interceptors: self.interceptors?.makeJoinProjectInterceptors() ?? [],
        userFunction: self.joinProject(request:context:)
      )

    case "ListApps":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_ListAppsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_ListAppsResponse>(),
        interceptors: self.interceptors?.makeListAppsInterceptors() ?? [],
        userFunction: self.listApps(request:context:)
      )

    case "GetApp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_GetAppRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_GetAppResponse>(),
        interceptors: self.interceptors?.makeGetAppInterceptors() ?? [],
        userFunction: self.getApp(request:context:)
      )

    case "CreateApp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_CreateAppRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_CreateAppResponse>(),
        interceptors: self.interceptors?.makeCreateAppInterceptors() ?? [],
        userFunction: self.createApp(request:context:)
      )

    case "UpdateApp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_UpdateAppRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_UpdateAppResponse>(),
        interceptors: self.interceptors?.makeUpdateAppInterceptors() ?? [],
        userFunction: self.updateApp(request:context:)
      )

    case "DeleteApp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_DeleteAppRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_DeleteAppResponse>(),
        interceptors: self.interceptors?.makeDeleteAppInterceptors() ?? [],
        userFunction: self.deleteApp(request:context:)
      )

    case "UploadTrainingData":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_UploadTrainingDataRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_UploadTrainingDataResponse>(),
        interceptors: self.interceptors?.makeUploadTrainingDataInterceptors() ?? [],
        observerFactory: self.uploadTrainingData(context:)
      )

    case "DownloadCurrentTrainingData":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Config_V1_DownloadCurrentTrainingDataRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Config_V1_DownloadCurrentTrainingDataResponse>(),
        interceptors: self.interceptors?.makeDownloadCurrentTrainingDataInterceptors() ?? [],
        userFunction: self.downloadCurrentTrainingData(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Config_V1_ConfigAPIServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getProject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProjectInterceptors() -> [ServerInterceptor<Speechly_Config_V1_GetProjectRequest, Speechly_Config_V1_GetProjectResponse>]

  /// - Returns: Interceptors to use when handling 'createProject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateProjectInterceptors() -> [ServerInterceptor<Speechly_Config_V1_CreateProjectRequest, Speechly_Config_V1_CreateProjectResponse>]

  /// - Returns: Interceptors to use when handling 'updateProject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateProjectInterceptors() -> [ServerInterceptor<Speechly_Config_V1_UpdateProjectRequest, Speechly_Config_V1_UpdateProjectResponse>]

  /// - Returns: Interceptors to use when handling 'getProjectParticipants'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProjectParticipantsInterceptors() -> [ServerInterceptor<Speechly_Config_V1_GetProjectParticipantsRequest, Speechly_Config_V1_GetProjectParticipantsResponse>]

  /// - Returns: Interceptors to use when handling 'invite'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInviteInterceptors() -> [ServerInterceptor<Speechly_Config_V1_InviteRequest, Speechly_Config_V1_InviteResponse>]

  /// - Returns: Interceptors to use when handling 'joinProject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinProjectInterceptors() -> [ServerInterceptor<Speechly_Config_V1_JoinProjectRequest, Speechly_Config_V1_JoinProjectResponse>]

  /// - Returns: Interceptors to use when handling 'listApps'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListAppsInterceptors() -> [ServerInterceptor<Speechly_Config_V1_ListAppsRequest, Speechly_Config_V1_ListAppsResponse>]

  /// - Returns: Interceptors to use when handling 'getApp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppInterceptors() -> [ServerInterceptor<Speechly_Config_V1_GetAppRequest, Speechly_Config_V1_GetAppResponse>]

  /// - Returns: Interceptors to use when handling 'createApp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAppInterceptors() -> [ServerInterceptor<Speechly_Config_V1_CreateAppRequest, Speechly_Config_V1_CreateAppResponse>]

  /// - Returns: Interceptors to use when handling 'updateApp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAppInterceptors() -> [ServerInterceptor<Speechly_Config_V1_UpdateAppRequest, Speechly_Config_V1_UpdateAppResponse>]

  /// - Returns: Interceptors to use when handling 'deleteApp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAppInterceptors() -> [ServerInterceptor<Speechly_Config_V1_DeleteAppRequest, Speechly_Config_V1_DeleteAppResponse>]

  /// - Returns: Interceptors to use when handling 'uploadTrainingData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadTrainingDataInterceptors() -> [ServerInterceptor<Speechly_Config_V1_UploadTrainingDataRequest, Speechly_Config_V1_UploadTrainingDataResponse>]

  /// - Returns: Interceptors to use when handling 'downloadCurrentTrainingData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadCurrentTrainingDataInterceptors() -> [ServerInterceptor<Speechly_Config_V1_DownloadCurrentTrainingDataRequest, Speechly_Config_V1_DownloadCurrentTrainingDataResponse>]
}
