// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: speechly/config/v1/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BaseModel describes the base model that is used as basis for adaptation.
public struct Speechly_Config_V1_BaseModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The human readable name of the base model
  public var name: String = String()

  /// The alias of the model used in the config file
  public var alias: String = String()

  /// Does the model allow downloading on-device model bundles
  public var isDownloadable: Bool = false

  /// Can the model be used in streaming applications
  public var isStreamable: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Speechly_Config_V1_BaseModel: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "speechly.config.v1"

extension Speechly_Config_V1_BaseModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BaseModel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "alias"),
    3: .standard(proto: "is_downloadable"),
    4: .standard(proto: "is_streamable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.alias) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isDownloadable) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isStreamable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.alias.isEmpty {
      try visitor.visitSingularStringField(value: self.alias, fieldNumber: 2)
    }
    if self.isDownloadable != false {
      try visitor.visitSingularBoolField(value: self.isDownloadable, fieldNumber: 3)
    }
    if self.isStreamable != false {
      try visitor.visitSingularBoolField(value: self.isStreamable, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Config_V1_BaseModel, rhs: Speechly_Config_V1_BaseModel) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.alias != rhs.alias {return false}
    if lhs.isDownloadable != rhs.isDownloadable {return false}
    if lhs.isStreamable != rhs.isStreamable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
