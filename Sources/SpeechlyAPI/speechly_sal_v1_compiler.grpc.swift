//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: speechly/sal/v1/compiler.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The Speechly Compiler API is used for validating and compiling Speechly Annotation Language source files.
///
/// The service requires a Speechly API token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
///
/// The token acts as a proxy for the user who has generated it,
/// i.e. all operations are performed with that user as a subject.
///
/// Usage: instantiate `Speechly_Sal_V1_CompilerClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Sal_V1_CompilerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol? { get }

  func compile(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Speechly_Sal_V1_CompileRequest, Speechly_Sal_V1_CompileResult>

  func validate(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ValidateResult>

  func extractSALSources(
    callOptions: CallOptions?,
    handler: @escaping (Speechly_Sal_V1_ExtractSALSourcesResult) -> Void
  ) -> BidirectionalStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ExtractSALSourcesResult>

  func convert(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Speechly_Sal_V1_ConvertRequest, Speechly_Sal_V1_ConvertResult>
}

extension Speechly_Sal_V1_CompilerClientProtocol {
  public var serviceName: String {
    return "speechly.sal.v1.Compiler"
  }

  /// Compiles the SAL source and returns compiled templates and / or any compilation errors and warnings.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func compile(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Speechly_Sal_V1_CompileRequest, Speechly_Sal_V1_CompileResult> {
    return self.makeClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.compile.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompileInterceptors() ?? []
    )
  }

  /// Validates the SAL source and returns compilation notices / warnings and errors, if any.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func validate(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ValidateResult> {
    return self.makeClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.validate.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateInterceptors() ?? []
    )
  }

  /// Extracts raw, not compiled SAL templates from the SAL source.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func extractSALSources(
    callOptions: CallOptions? = nil,
    handler: @escaping (Speechly_Sal_V1_ExtractSALSourcesResult) -> Void
  ) -> BidirectionalStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ExtractSALSourcesResult> {
    return self.makeBidirectionalStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.extractSALSources.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExtractSALSourcesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Converts an input configuration (e.g. Alexa) to SAL format
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func convert(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Speechly_Sal_V1_ConvertRequest, Speechly_Sal_V1_ConvertResult> {
    return self.makeClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.convert.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Speechly_Sal_V1_CompilerClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Speechly_Sal_V1_CompilerNIOClient")
public final class Speechly_Sal_V1_CompilerClient: Speechly_Sal_V1_CompilerClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the speechly.sal.v1.Compiler service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Speechly_Sal_V1_CompilerNIOClient: Speechly_Sal_V1_CompilerClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.sal.v1.Compiler service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The Speechly Compiler API is used for validating and compiling Speechly Annotation Language source files.
///
/// The service requires a Speechly API token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
///
/// The token acts as a proxy for the user who has generated it,
/// i.e. all operations are performed with that user as a subject.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Sal_V1_CompilerAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol? { get }

  func makeCompileCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Speechly_Sal_V1_CompileRequest, Speechly_Sal_V1_CompileResult>

  func makeValidateCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ValidateResult>

  func makeExtractSalsourcesCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ExtractSALSourcesResult>

  func makeConvertCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Speechly_Sal_V1_ConvertRequest, Speechly_Sal_V1_ConvertResult>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Sal_V1_CompilerAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Sal_V1_CompilerClientMetadata.serviceDescriptor
  }

  public var interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCompileCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Speechly_Sal_V1_CompileRequest, Speechly_Sal_V1_CompileResult> {
    return self.makeAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.compile.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompileInterceptors() ?? []
    )
  }

  public func makeValidateCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ValidateResult> {
    return self.makeAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.validate.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateInterceptors() ?? []
    )
  }

  public func makeExtractSalsourcesCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ExtractSALSourcesResult> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.extractSALSources.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExtractSALSourcesInterceptors() ?? []
    )
  }

  public func makeConvertCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Speechly_Sal_V1_ConvertRequest, Speechly_Sal_V1_ConvertResult> {
    return self.makeAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.convert.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Sal_V1_CompilerAsyncClientProtocol {
  public func compile<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Sal_V1_CompileResult where RequestStream: Sequence, RequestStream.Element == Speechly_Sal_V1_CompileRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.compile.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompileInterceptors() ?? []
    )
  }

  public func compile<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Sal_V1_CompileResult where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Speechly_Sal_V1_CompileRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.compile.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompileInterceptors() ?? []
    )
  }

  public func validate<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Sal_V1_ValidateResult where RequestStream: Sequence, RequestStream.Element == Speechly_Sal_V1_AppSource {
    return try await self.performAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.validate.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateInterceptors() ?? []
    )
  }

  public func validate<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Sal_V1_ValidateResult where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Speechly_Sal_V1_AppSource {
    return try await self.performAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.validate.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateInterceptors() ?? []
    )
  }

  public func extractSALSources<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Speechly_Sal_V1_ExtractSALSourcesResult> where RequestStream: Sequence, RequestStream.Element == Speechly_Sal_V1_AppSource {
    return self.performAsyncBidirectionalStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.extractSALSources.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExtractSALSourcesInterceptors() ?? []
    )
  }

  public func extractSALSources<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Speechly_Sal_V1_ExtractSALSourcesResult> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Speechly_Sal_V1_AppSource {
    return self.performAsyncBidirectionalStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.extractSALSources.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExtractSALSourcesInterceptors() ?? []
    )
  }

  public func convert<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Sal_V1_ConvertResult where RequestStream: Sequence, RequestStream.Element == Speechly_Sal_V1_ConvertRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.convert.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertInterceptors() ?? []
    )
  }

  public func convert<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Sal_V1_ConvertResult where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Speechly_Sal_V1_ConvertRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Speechly_Sal_V1_CompilerClientMetadata.Methods.convert.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Speechly_Sal_V1_CompilerAsyncClient: Speechly_Sal_V1_CompilerAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Speechly_Sal_V1_CompilerClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'compile'.
  func makeCompileInterceptors() -> [ClientInterceptor<Speechly_Sal_V1_CompileRequest, Speechly_Sal_V1_CompileResult>]

  /// - Returns: Interceptors to use when invoking 'validate'.
  func makeValidateInterceptors() -> [ClientInterceptor<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ValidateResult>]

  /// - Returns: Interceptors to use when invoking 'extractSALSources'.
  func makeExtractSALSourcesInterceptors() -> [ClientInterceptor<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ExtractSALSourcesResult>]

  /// - Returns: Interceptors to use when invoking 'convert'.
  func makeConvertInterceptors() -> [ClientInterceptor<Speechly_Sal_V1_ConvertRequest, Speechly_Sal_V1_ConvertResult>]
}

public enum Speechly_Sal_V1_CompilerClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Compiler",
    fullName: "speechly.sal.v1.Compiler",
    methods: [
      Speechly_Sal_V1_CompilerClientMetadata.Methods.compile,
      Speechly_Sal_V1_CompilerClientMetadata.Methods.validate,
      Speechly_Sal_V1_CompilerClientMetadata.Methods.extractSALSources,
      Speechly_Sal_V1_CompilerClientMetadata.Methods.convert,
    ]
  )

  public enum Methods {
    public static let compile = GRPCMethodDescriptor(
      name: "Compile",
      path: "/speechly.sal.v1.Compiler/Compile",
      type: GRPCCallType.clientStreaming
    )

    public static let validate = GRPCMethodDescriptor(
      name: "Validate",
      path: "/speechly.sal.v1.Compiler/Validate",
      type: GRPCCallType.clientStreaming
    )

    public static let extractSALSources = GRPCMethodDescriptor(
      name: "ExtractSALSources",
      path: "/speechly.sal.v1.Compiler/ExtractSALSources",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let convert = GRPCMethodDescriptor(
      name: "Convert",
      path: "/speechly.sal.v1.Compiler/Convert",
      type: GRPCCallType.clientStreaming
    )
  }
}

/// The Speechly Compiler API is used for validating and compiling Speechly Annotation Language source files.
///
/// The service requires a Speechly API token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
///
/// The token acts as a proxy for the user who has generated it,
/// i.e. all operations are performed with that user as a subject.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Sal_V1_CompilerProvider: CallHandlerProvider {
  var interceptors: Speechly_Sal_V1_CompilerServerInterceptorFactoryProtocol? { get }

  /// Compiles the SAL source and returns compiled templates and / or any compilation errors and warnings.
  func compile(context: UnaryResponseCallContext<Speechly_Sal_V1_CompileResult>) -> EventLoopFuture<(StreamEvent<Speechly_Sal_V1_CompileRequest>) -> Void>

  /// Validates the SAL source and returns compilation notices / warnings and errors, if any.
  func validate(context: UnaryResponseCallContext<Speechly_Sal_V1_ValidateResult>) -> EventLoopFuture<(StreamEvent<Speechly_Sal_V1_AppSource>) -> Void>

  /// Extracts raw, not compiled SAL templates from the SAL source.
  func extractSALSources(context: StreamingResponseCallContext<Speechly_Sal_V1_ExtractSALSourcesResult>) -> EventLoopFuture<(StreamEvent<Speechly_Sal_V1_AppSource>) -> Void>

  /// Converts an input configuration (e.g. Alexa) to SAL format
  func convert(context: UnaryResponseCallContext<Speechly_Sal_V1_ConvertResult>) -> EventLoopFuture<(StreamEvent<Speechly_Sal_V1_ConvertRequest>) -> Void>
}

extension Speechly_Sal_V1_CompilerProvider {
  public var serviceName: Substring {
    return Speechly_Sal_V1_CompilerServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Compile":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_CompileRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_CompileResult>(),
        interceptors: self.interceptors?.makeCompileInterceptors() ?? [],
        observerFactory: self.compile(context:)
      )

    case "Validate":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_AppSource>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_ValidateResult>(),
        interceptors: self.interceptors?.makeValidateInterceptors() ?? [],
        observerFactory: self.validate(context:)
      )

    case "ExtractSALSources":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_AppSource>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_ExtractSALSourcesResult>(),
        interceptors: self.interceptors?.makeExtractSALSourcesInterceptors() ?? [],
        observerFactory: self.extractSALSources(context:)
      )

    case "Convert":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_ConvertRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_ConvertResult>(),
        interceptors: self.interceptors?.makeConvertInterceptors() ?? [],
        observerFactory: self.convert(context:)
      )

    default:
      return nil
    }
  }
}

/// The Speechly Compiler API is used for validating and compiling Speechly Annotation Language source files.
///
/// The service requires a Speechly API token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
///
/// The token acts as a proxy for the user who has generated it,
/// i.e. all operations are performed with that user as a subject.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Sal_V1_CompilerAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Sal_V1_CompilerServerInterceptorFactoryProtocol? { get }

  /// Compiles the SAL source and returns compiled templates and / or any compilation errors and warnings.
  func compile(
    requestStream: GRPCAsyncRequestStream<Speechly_Sal_V1_CompileRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Sal_V1_CompileResult

  /// Validates the SAL source and returns compilation notices / warnings and errors, if any.
  func validate(
    requestStream: GRPCAsyncRequestStream<Speechly_Sal_V1_AppSource>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Sal_V1_ValidateResult

  /// Extracts raw, not compiled SAL templates from the SAL source.
  func extractSALSources(
    requestStream: GRPCAsyncRequestStream<Speechly_Sal_V1_AppSource>,
    responseStream: GRPCAsyncResponseStreamWriter<Speechly_Sal_V1_ExtractSALSourcesResult>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Converts an input configuration (e.g. Alexa) to SAL format
  func convert(
    requestStream: GRPCAsyncRequestStream<Speechly_Sal_V1_ConvertRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Sal_V1_ConvertResult
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Sal_V1_CompilerAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Sal_V1_CompilerServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Speechly_Sal_V1_CompilerServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Speechly_Sal_V1_CompilerServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Compile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_CompileRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_CompileResult>(),
        interceptors: self.interceptors?.makeCompileInterceptors() ?? [],
        wrapping: { try await self.compile(requestStream: $0, context: $1) }
      )

    case "Validate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_AppSource>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_ValidateResult>(),
        interceptors: self.interceptors?.makeValidateInterceptors() ?? [],
        wrapping: { try await self.validate(requestStream: $0, context: $1) }
      )

    case "ExtractSALSources":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_AppSource>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_ExtractSALSourcesResult>(),
        interceptors: self.interceptors?.makeExtractSALSourcesInterceptors() ?? [],
        wrapping: { try await self.extractSALSources(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "Convert":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Sal_V1_ConvertRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Sal_V1_ConvertResult>(),
        interceptors: self.interceptors?.makeConvertInterceptors() ?? [],
        wrapping: { try await self.convert(requestStream: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Sal_V1_CompilerServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'compile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCompileInterceptors() -> [ServerInterceptor<Speechly_Sal_V1_CompileRequest, Speechly_Sal_V1_CompileResult>]

  /// - Returns: Interceptors to use when handling 'validate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidateInterceptors() -> [ServerInterceptor<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ValidateResult>]

  /// - Returns: Interceptors to use when handling 'extractSALSources'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExtractSALSourcesInterceptors() -> [ServerInterceptor<Speechly_Sal_V1_AppSource, Speechly_Sal_V1_ExtractSALSourcesResult>]

  /// - Returns: Interceptors to use when handling 'convert'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConvertInterceptors() -> [ServerInterceptor<Speechly_Sal_V1_ConvertRequest, Speechly_Sal_V1_ConvertResult>]
}

public enum Speechly_Sal_V1_CompilerServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Compiler",
    fullName: "speechly.sal.v1.Compiler",
    methods: [
      Speechly_Sal_V1_CompilerServerMetadata.Methods.compile,
      Speechly_Sal_V1_CompilerServerMetadata.Methods.validate,
      Speechly_Sal_V1_CompilerServerMetadata.Methods.extractSALSources,
      Speechly_Sal_V1_CompilerServerMetadata.Methods.convert,
    ]
  )

  public enum Methods {
    public static let compile = GRPCMethodDescriptor(
      name: "Compile",
      path: "/speechly.sal.v1.Compiler/Compile",
      type: GRPCCallType.clientStreaming
    )

    public static let validate = GRPCMethodDescriptor(
      name: "Validate",
      path: "/speechly.sal.v1.Compiler/Validate",
      type: GRPCCallType.clientStreaming
    )

    public static let extractSALSources = GRPCMethodDescriptor(
      name: "ExtractSALSources",
      path: "/speechly.sal.v1.Compiler/ExtractSALSources",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let convert = GRPCMethodDescriptor(
      name: "Convert",
      path: "/speechly.sal.v1.Compiler/Convert",
      type: GRPCCallType.clientStreaming
    )
  }
}
