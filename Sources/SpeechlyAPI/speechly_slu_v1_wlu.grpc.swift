//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: speechly/slu/v1/wlu.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service that implements Speechly WLU (Written Language Understanding).
///
/// To use this service you MUST use an access token from Speechly Identity API.
/// The token MUST be passed in gRPC metadata with `Authorization` key and `Bearer ACCESS_TOKEN` as value, e.g. in Go:
///
/// ```
/// ctx := context.Background()
/// ctx = metadata.AppendToOutgoingContext(ctx, "Authorization", "Bearer "+accessToken)
/// res, err := speechlyWLUClient.Text(ctx, req)
/// ```
///
/// Usage: instantiate `Speechly_Slu_V1_WLUClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Slu_V1_WLUClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol? { get }

  func text(
    _ request: Speechly_Slu_V1_WLURequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Slu_V1_WLURequest, Speechly_Slu_V1_WLUResponse>

  func texts(
    _ request: Speechly_Slu_V1_TextsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Slu_V1_TextsRequest, Speechly_Slu_V1_TextsResponse>
}

extension Speechly_Slu_V1_WLUClientProtocol {
  public var serviceName: String {
    return "speechly.slu.v1.WLU"
  }

  /// Performs recognition of a text with specified language.
  ///
  /// - Parameters:
  ///   - request: Request to send to Text.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func text(
    _ request: Speechly_Slu_V1_WLURequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Slu_V1_WLURequest, Speechly_Slu_V1_WLUResponse> {
    return self.makeUnaryCall(
      path: Speechly_Slu_V1_WLUClientMetadata.Methods.text.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTextInterceptors() ?? []
    )
  }

  /// Performs recognition of a batch of texts with specified language.
  ///
  /// - Parameters:
  ///   - request: Request to send to Texts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func texts(
    _ request: Speechly_Slu_V1_TextsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Slu_V1_TextsRequest, Speechly_Slu_V1_TextsResponse> {
    return self.makeUnaryCall(
      path: Speechly_Slu_V1_WLUClientMetadata.Methods.texts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTextsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Speechly_Slu_V1_WLUClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Speechly_Slu_V1_WLUNIOClient")
public final class Speechly_Slu_V1_WLUClient: Speechly_Slu_V1_WLUClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the speechly.slu.v1.WLU service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Speechly_Slu_V1_WLUNIOClient: Speechly_Slu_V1_WLUClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.slu.v1.WLU service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service that implements Speechly WLU (Written Language Understanding).
///
/// To use this service you MUST use an access token from Speechly Identity API.
/// The token MUST be passed in gRPC metadata with `Authorization` key and `Bearer ACCESS_TOKEN` as value, e.g. in Go:
///
/// ```
/// ctx := context.Background()
/// ctx = metadata.AppendToOutgoingContext(ctx, "Authorization", "Bearer "+accessToken)
/// res, err := speechlyWLUClient.Text(ctx, req)
/// ```
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Slu_V1_WLUAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol? { get }

  func makeTextCall(
    _ request: Speechly_Slu_V1_WLURequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V1_WLURequest, Speechly_Slu_V1_WLUResponse>

  func makeTextsCall(
    _ request: Speechly_Slu_V1_TextsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V1_TextsRequest, Speechly_Slu_V1_TextsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Slu_V1_WLUAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Slu_V1_WLUClientMetadata.serviceDescriptor
  }

  public var interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeTextCall(
    _ request: Speechly_Slu_V1_WLURequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V1_WLURequest, Speechly_Slu_V1_WLUResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Slu_V1_WLUClientMetadata.Methods.text.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTextInterceptors() ?? []
    )
  }

  public func makeTextsCall(
    _ request: Speechly_Slu_V1_TextsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Slu_V1_TextsRequest, Speechly_Slu_V1_TextsResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Slu_V1_WLUClientMetadata.Methods.texts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTextsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Slu_V1_WLUAsyncClientProtocol {
  public func text(
    _ request: Speechly_Slu_V1_WLURequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Slu_V1_WLUResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Slu_V1_WLUClientMetadata.Methods.text.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTextInterceptors() ?? []
    )
  }

  public func texts(
    _ request: Speechly_Slu_V1_TextsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Slu_V1_TextsResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Slu_V1_WLUClientMetadata.Methods.texts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTextsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Speechly_Slu_V1_WLUAsyncClient: Speechly_Slu_V1_WLUAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Speechly_Slu_V1_WLUClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'text'.
  func makeTextInterceptors() -> [ClientInterceptor<Speechly_Slu_V1_WLURequest, Speechly_Slu_V1_WLUResponse>]

  /// - Returns: Interceptors to use when invoking 'texts'.
  func makeTextsInterceptors() -> [ClientInterceptor<Speechly_Slu_V1_TextsRequest, Speechly_Slu_V1_TextsResponse>]
}

public enum Speechly_Slu_V1_WLUClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WLU",
    fullName: "speechly.slu.v1.WLU",
    methods: [
      Speechly_Slu_V1_WLUClientMetadata.Methods.text,
      Speechly_Slu_V1_WLUClientMetadata.Methods.texts,
    ]
  )

  public enum Methods {
    public static let text = GRPCMethodDescriptor(
      name: "Text",
      path: "/speechly.slu.v1.WLU/Text",
      type: GRPCCallType.unary
    )

    public static let texts = GRPCMethodDescriptor(
      name: "Texts",
      path: "/speechly.slu.v1.WLU/Texts",
      type: GRPCCallType.unary
    )
  }
}

/// Service that implements Speechly WLU (Written Language Understanding).
///
/// To use this service you MUST use an access token from Speechly Identity API.
/// The token MUST be passed in gRPC metadata with `Authorization` key and `Bearer ACCESS_TOKEN` as value, e.g. in Go:
///
/// ```
/// ctx := context.Background()
/// ctx = metadata.AppendToOutgoingContext(ctx, "Authorization", "Bearer "+accessToken)
/// res, err := speechlyWLUClient.Text(ctx, req)
/// ```
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Slu_V1_WLUProvider: CallHandlerProvider {
  var interceptors: Speechly_Slu_V1_WLUServerInterceptorFactoryProtocol? { get }

  /// Performs recognition of a text with specified language.
  func text(request: Speechly_Slu_V1_WLURequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Slu_V1_WLUResponse>

  /// Performs recognition of a batch of texts with specified language.
  func texts(request: Speechly_Slu_V1_TextsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Slu_V1_TextsResponse>
}

extension Speechly_Slu_V1_WLUProvider {
  public var serviceName: Substring {
    return Speechly_Slu_V1_WLUServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Text":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V1_WLURequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V1_WLUResponse>(),
        interceptors: self.interceptors?.makeTextInterceptors() ?? [],
        userFunction: self.text(request:context:)
      )

    case "Texts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V1_TextsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V1_TextsResponse>(),
        interceptors: self.interceptors?.makeTextsInterceptors() ?? [],
        userFunction: self.texts(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service that implements Speechly WLU (Written Language Understanding).
///
/// To use this service you MUST use an access token from Speechly Identity API.
/// The token MUST be passed in gRPC metadata with `Authorization` key and `Bearer ACCESS_TOKEN` as value, e.g. in Go:
///
/// ```
/// ctx := context.Background()
/// ctx = metadata.AppendToOutgoingContext(ctx, "Authorization", "Bearer "+accessToken)
/// res, err := speechlyWLUClient.Text(ctx, req)
/// ```
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Slu_V1_WLUAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Slu_V1_WLUServerInterceptorFactoryProtocol? { get }

  /// Performs recognition of a text with specified language.
  func text(
    request: Speechly_Slu_V1_WLURequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Slu_V1_WLUResponse

  /// Performs recognition of a batch of texts with specified language.
  func texts(
    request: Speechly_Slu_V1_TextsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Slu_V1_TextsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Slu_V1_WLUAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Slu_V1_WLUServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Speechly_Slu_V1_WLUServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Speechly_Slu_V1_WLUServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Text":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V1_WLURequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V1_WLUResponse>(),
        interceptors: self.interceptors?.makeTextInterceptors() ?? [],
        wrapping: { try await self.text(request: $0, context: $1) }
      )

    case "Texts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Slu_V1_TextsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Slu_V1_TextsResponse>(),
        interceptors: self.interceptors?.makeTextsInterceptors() ?? [],
        wrapping: { try await self.texts(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Slu_V1_WLUServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'text'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTextInterceptors() -> [ServerInterceptor<Speechly_Slu_V1_WLURequest, Speechly_Slu_V1_WLUResponse>]

  /// - Returns: Interceptors to use when handling 'texts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTextsInterceptors() -> [ServerInterceptor<Speechly_Slu_V1_TextsRequest, Speechly_Slu_V1_TextsResponse>]
}

public enum Speechly_Slu_V1_WLUServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WLU",
    fullName: "speechly.slu.v1.WLU",
    methods: [
      Speechly_Slu_V1_WLUServerMetadata.Methods.text,
      Speechly_Slu_V1_WLUServerMetadata.Methods.texts,
    ]
  )

  public enum Methods {
    public static let text = GRPCMethodDescriptor(
      name: "Text",
      path: "/speechly.slu.v1.WLU/Text",
      type: GRPCCallType.unary
    )

    public static let texts = GRPCMethodDescriptor(
      name: "Texts",
      path: "/speechly.slu.v1.WLU/Texts",
      type: GRPCCallType.unary
    )
  }
}
