// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: speechly/analytics/v1/analytics_api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Includes keys for the UtteranceStatistics method.
/// If no keys are given, the token's project is used.
/// Token needs to have access to the given app / project.
public struct Speechly_Analytics_V1_UtteranceStatisticsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Limit statistics to a single app_id.
  /// Default is none, returning statistics for all apps in the project.
  public var appID: String = String()

  /// Amount of days to include in the result.
  /// Default is 14 days.
  public var days: Int32 = 0

  /// Scope of returned data.
  /// Default is UTTERANCES.
  public var scope: Speechly_Analytics_V1_UtteranceStatisticsRequest.Scope = .invalid

  /// Aggregation of the data.
  /// Default is DAILY
  public var aggregation: Speechly_Analytics_V1_Aggregation = .invalid

  /// Start of requested statistics period.
  /// Default is 15 days ago.
  /// Must be YYYY-mm-DD formatted string if given.
  public var startDate: String = String()

  /// End of requested statistics period.
  /// Default is 1 day ago, resulting in two full weeks.
  /// Must be YYYY-mm-DD formatted string if given.
  public var endDate: String = String()

  /// Limit statisticts to a single project_id
  /// Default is none, returning statistics for the project in the given scope.
  public var projectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The scope of the returned items.
  public enum Scope: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case invalid // = 0

    /// Include only utterance data.
    case utterances // = 1

    /// Include annotated data.
    case annotations // = 2

    /// Include both utterance and annotated data.
    case all // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .invalid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .utterances
      case 2: self = .annotations
      case 3: self = .all
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .utterances: return 1
      case .annotations: return 2
      case .all: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Speechly_Analytics_V1_UtteranceStatisticsRequest.Scope: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Speechly_Analytics_V1_UtteranceStatisticsRequest.Scope] = [
    .invalid,
    .utterances,
    .annotations,
    .all,
  ]
}

#endif  // swift(>=4.2)

/// Contains a list of statistics entries for utterances, based on the requested
/// scope.
public struct Speechly_Analytics_V1_UtteranceStatisticsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Start of this statistics period.
  /// YYYY-mm-DD formatted string.
  public var startDate: String = String()

  /// End of this statistics period.
  /// YYYY-mm-DD formatted string.
  public var endDate: String = String()

  /// Time period length.
  public var aggregation: Speechly_Analytics_V1_Aggregation = .invalid

  /// Aggregated results.
  public var items: [Speechly_Analytics_V1_UtteranceStatisticsPeriod] = []

  /// Amount of utterances in this response
  public var totalUtterances: Int32 = 0

  /// Total duration of utterances in seconds.
  public var totalDurationSeconds: Int32 = 0

  /// Total duration of annotated utterances in seconds.
  public var totalAnnotatedSeconds: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Speechly_Analytics_V1_UtterancesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The app_id to show the utterances for.
  public var appID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Speechly_Analytics_V1_UtterancesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sample of utterances.
  public var utterances: [Speechly_Analytics_V1_Utterance] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A single data point of an utterance recognized by Speechly On Device or Speechly On Premise.
public struct Speechly_Analytics_V1_RegisterUtteranceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id of the application the operation belongs to
  public var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  /// device_id of the utterance.
  public var deviceID: String {
    get {return _storage._deviceID}
    set {_uniqueStorage()._deviceID = newValue}
  }

  /// Length of the recognized utterance in seconds.
  public var utteranceLengthSeconds: Int32 {
    get {return _storage._utteranceLengthSeconds}
    set {_uniqueStorage()._utteranceLengthSeconds = newValue}
  }

  /// Length of the recognized utterance in characters.
  public var utteranceLengthChars: Int32 {
    get {return _storage._utteranceLengthChars}
    set {_uniqueStorage()._utteranceLengthChars = newValue}
  }

  /// Information about the on-device decoder.
  public var decoderInfo: Speechly_Analytics_V1_DecoderInfo {
    get {return _storage._decoderInfo ?? Speechly_Analytics_V1_DecoderInfo()}
    set {_uniqueStorage()._decoderInfo = newValue}
  }
  /// Returns true if `decoderInfo` has been explicitly set.
  public var hasDecoderInfo: Bool {return _storage._decoderInfo != nil}
  /// Clears the value of `decoderInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDecoderInfo() {_uniqueStorage()._decoderInfo = nil}

  /// When the processing was initially requested.
  public var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  public var hasCreatedTime: Bool {return _storage._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedTime() {_uniqueStorage()._createdTime = nil}

  /// When the processing was finished.
  public var finishedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._finishedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._finishedTime = newValue}
  }
  /// Returns true if `finishedTime` has been explicitly set.
  public var hasFinishedTime: Bool {return _storage._finishedTime != nil}
  /// Clears the value of `finishedTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishedTime() {_uniqueStorage()._finishedTime = nil}

  /// The status of the processing.
  public var status: Speechly_Analytics_V1_RegisterUtteranceRequest.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// batch api operation id of the utterance
  public var operationID: String {
    get {return _storage._operationID}
    set {_uniqueStorage()._operationID = newValue}
  }

  /// id of the batch the operation belongs to
  public var batchID: String {
    get {return _storage._batchID}
    set {_uniqueStorage()._batchID = newValue}
  }

  /// id of the project the operation belongs to
  public var projectID: String {
    get {return _storage._projectID}
    set {_uniqueStorage()._projectID = newValue}
  }

  /// language of the utterance (BCP-47)
  public var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  /// Information about the processing applied to the utterance
  public var processingInfo: Speechly_Analytics_V1_ProcessingInfo {
    get {return _storage._processingInfo ?? Speechly_Analytics_V1_ProcessingInfo()}
    set {_uniqueStorage()._processingInfo = newValue}
  }
  /// Returns true if `processingInfo` has been explicitly set.
  public var hasProcessingInfo: Bool {return _storage._processingInfo != nil}
  /// Clears the value of `processingInfo`. Subsequent reads from it will return its default value.
  public mutating func clearProcessingInfo() {_uniqueStorage()._processingInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The status of the processing.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default status is empty
    case invalid // = 0

    /// Processing completed successfully.
    case success // = 1

    /// The processing failed.
    case error // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .invalid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .success
      case 2: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .success: return 1
      case .error: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Speechly_Analytics_V1_RegisterUtteranceRequest.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Speechly_Analytics_V1_RegisterUtteranceRequest.Status] = [
    .invalid,
    .success,
    .error,
  ]
}

#endif  // swift(>=4.2)

/// Default empty response.
public struct Speechly_Analytics_V1_RegisterUtteranceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Register multiple utterances in the same request.
public struct Speechly_Analytics_V1_RegisterUtterancesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var requests: [Speechly_Analytics_V1_RegisterUtteranceRequest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Speechly_Analytics_V1_RegisterUtterancesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request time series statistics about moderation events.
public struct Speechly_Analytics_V1_ModerationStatisticsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the project to return statistics for.
  /// Required when there are multiple projects to choose from.
  public var projectID: String = String()

  /// Limit statistics to a single app_id.
  /// Default is none, returning statistics for the project in scope.
  public var appID: String = String()

  /// Start of requested statistics period.
  /// Default is 15 days ago.
  /// Must be YYYY-mm-DD formatted string if given.
  public var startDate: String = String()

  /// End of requested statistics period.
  /// Default is 1 day ago, resulting in two full weeks.
  /// Must be YYYY-mm-DD formatted string if given.
  public var endDate: String = String()

  /// Aggregation of the data.
  /// Default is DAILY
  public var aggregation: Speechly_Analytics_V1_Aggregation = .invalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Contains the time series data for moderation events.
public struct Speechly_Analytics_V1_ModerationStatisticsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var projectID: String = String()

  public var appID: String = String()

  /// Start of this statistics period.
  /// YYYY-mm-DD formatted string.
  public var startDate: String = String()

  /// End of this statistics period.
  /// YYYY-mm-DD formatted string.
  public var endDate: String = String()

  /// Time period length.
  public var aggregation: Speechly_Analytics_V1_Aggregation = .invalid

  /// Aggregated results.
  public var items: [Speechly_Analytics_V1_ModerationStatisticsPeriod] = []

  /// Total number of events in this response.
  public var totalEvents: Int32 = 0

  /// Total number of flagged events in this response.
  public var totalFlagged: Int32 = 0

  /// Total number of non-flagged (OK) events in this response.
  public var totalNotFlagged: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for getting user statistics.
public struct Speechly_Analytics_V1_UserStatisticsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Contains the user statistics requested.
public struct Speechly_Analytics_V1_UserStatisticsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Speechly_Analytics_V1_UtteranceStatisticsRequest: @unchecked Sendable {}
extension Speechly_Analytics_V1_UtteranceStatisticsRequest.Scope: @unchecked Sendable {}
extension Speechly_Analytics_V1_UtteranceStatisticsResponse: @unchecked Sendable {}
extension Speechly_Analytics_V1_UtterancesRequest: @unchecked Sendable {}
extension Speechly_Analytics_V1_UtterancesResponse: @unchecked Sendable {}
extension Speechly_Analytics_V1_RegisterUtteranceRequest: @unchecked Sendable {}
extension Speechly_Analytics_V1_RegisterUtteranceRequest.Status: @unchecked Sendable {}
extension Speechly_Analytics_V1_RegisterUtteranceResponse: @unchecked Sendable {}
extension Speechly_Analytics_V1_RegisterUtterancesRequest: @unchecked Sendable {}
extension Speechly_Analytics_V1_RegisterUtterancesResponse: @unchecked Sendable {}
extension Speechly_Analytics_V1_ModerationStatisticsRequest: @unchecked Sendable {}
extension Speechly_Analytics_V1_ModerationStatisticsResponse: @unchecked Sendable {}
extension Speechly_Analytics_V1_UserStatisticsRequest: @unchecked Sendable {}
extension Speechly_Analytics_V1_UserStatisticsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "speechly.analytics.v1"

extension Speechly_Analytics_V1_UtteranceStatisticsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UtteranceStatisticsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .same(proto: "days"),
    3: .same(proto: "scope"),
    4: .same(proto: "aggregation"),
    5: .standard(proto: "start_date"),
    6: .standard(proto: "end_date"),
    7: .standard(proto: "project_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.days) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.scope) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.aggregation) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.startDate) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.endDate) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if self.days != 0 {
      try visitor.visitSingularInt32Field(value: self.days, fieldNumber: 2)
    }
    if self.scope != .invalid {
      try visitor.visitSingularEnumField(value: self.scope, fieldNumber: 3)
    }
    if self.aggregation != .invalid {
      try visitor.visitSingularEnumField(value: self.aggregation, fieldNumber: 4)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 5)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 6)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_UtteranceStatisticsRequest, rhs: Speechly_Analytics_V1_UtteranceStatisticsRequest) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.days != rhs.days {return false}
    if lhs.scope != rhs.scope {return false}
    if lhs.aggregation != rhs.aggregation {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_UtteranceStatisticsRequest.Scope: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SCOPE_INVALID"),
    1: .same(proto: "SCOPE_UTTERANCES"),
    2: .same(proto: "SCOPE_ANNOTATIONS"),
    3: .same(proto: "SCOPE_ALL"),
  ]
}

extension Speechly_Analytics_V1_UtteranceStatisticsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UtteranceStatisticsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_date"),
    2: .standard(proto: "end_date"),
    3: .same(proto: "aggregation"),
    4: .same(proto: "items"),
    5: .standard(proto: "total_utterances"),
    6: .standard(proto: "total_duration_seconds"),
    7: .standard(proto: "total_annotated_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.startDate) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.endDate) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.aggregation) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.totalUtterances) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.totalDurationSeconds) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.totalAnnotatedSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 1)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 2)
    }
    if self.aggregation != .invalid {
      try visitor.visitSingularEnumField(value: self.aggregation, fieldNumber: 3)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 4)
    }
    if self.totalUtterances != 0 {
      try visitor.visitSingularInt32Field(value: self.totalUtterances, fieldNumber: 5)
    }
    if self.totalDurationSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.totalDurationSeconds, fieldNumber: 6)
    }
    if self.totalAnnotatedSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.totalAnnotatedSeconds, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_UtteranceStatisticsResponse, rhs: Speechly_Analytics_V1_UtteranceStatisticsResponse) -> Bool {
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.aggregation != rhs.aggregation {return false}
    if lhs.items != rhs.items {return false}
    if lhs.totalUtterances != rhs.totalUtterances {return false}
    if lhs.totalDurationSeconds != rhs.totalDurationSeconds {return false}
    if lhs.totalAnnotatedSeconds != rhs.totalAnnotatedSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_UtterancesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UtterancesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_UtterancesRequest, rhs: Speechly_Analytics_V1_UtterancesRequest) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_UtterancesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UtterancesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "utterances"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.utterances) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.utterances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.utterances, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_UtterancesResponse, rhs: Speechly_Analytics_V1_UtterancesResponse) -> Bool {
    if lhs.utterances != rhs.utterances {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_RegisterUtteranceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterUtteranceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "device_id"),
    3: .standard(proto: "utterance_length_seconds"),
    4: .standard(proto: "utterance_length_chars"),
    5: .standard(proto: "decoder_info"),
    6: .standard(proto: "created_time"),
    7: .standard(proto: "finished_time"),
    8: .same(proto: "status"),
    9: .standard(proto: "operation_id"),
    10: .standard(proto: "batch_id"),
    11: .standard(proto: "project_id"),
    12: .same(proto: "language"),
    13: .standard(proto: "processing_info"),
  ]

  fileprivate class _StorageClass {
    var _appID: String = String()
    var _deviceID: String = String()
    var _utteranceLengthSeconds: Int32 = 0
    var _utteranceLengthChars: Int32 = 0
    var _decoderInfo: Speechly_Analytics_V1_DecoderInfo? = nil
    var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _finishedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _status: Speechly_Analytics_V1_RegisterUtteranceRequest.Status = .invalid
    var _operationID: String = String()
    var _batchID: String = String()
    var _projectID: String = String()
    var _language: String = String()
    var _processingInfo: Speechly_Analytics_V1_ProcessingInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _appID = source._appID
      _deviceID = source._deviceID
      _utteranceLengthSeconds = source._utteranceLengthSeconds
      _utteranceLengthChars = source._utteranceLengthChars
      _decoderInfo = source._decoderInfo
      _createdTime = source._createdTime
      _finishedTime = source._finishedTime
      _status = source._status
      _operationID = source._operationID
      _batchID = source._batchID
      _projectID = source._projectID
      _language = source._language
      _processingInfo = source._processingInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._appID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._deviceID) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._utteranceLengthSeconds) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._utteranceLengthChars) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._decoderInfo) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._createdTime) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._finishedTime) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._operationID) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._batchID) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._projectID) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._processingInfo) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 1)
      }
      if !_storage._deviceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceID, fieldNumber: 2)
      }
      if _storage._utteranceLengthSeconds != 0 {
        try visitor.visitSingularInt32Field(value: _storage._utteranceLengthSeconds, fieldNumber: 3)
      }
      if _storage._utteranceLengthChars != 0 {
        try visitor.visitSingularInt32Field(value: _storage._utteranceLengthChars, fieldNumber: 4)
      }
      try { if let v = _storage._decoderInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._createdTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._finishedTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._status != .invalid {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 8)
      }
      if !_storage._operationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operationID, fieldNumber: 9)
      }
      if !_storage._batchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._batchID, fieldNumber: 10)
      }
      if !_storage._projectID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectID, fieldNumber: 11)
      }
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 12)
      }
      try { if let v = _storage._processingInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_RegisterUtteranceRequest, rhs: Speechly_Analytics_V1_RegisterUtteranceRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._deviceID != rhs_storage._deviceID {return false}
        if _storage._utteranceLengthSeconds != rhs_storage._utteranceLengthSeconds {return false}
        if _storage._utteranceLengthChars != rhs_storage._utteranceLengthChars {return false}
        if _storage._decoderInfo != rhs_storage._decoderInfo {return false}
        if _storage._createdTime != rhs_storage._createdTime {return false}
        if _storage._finishedTime != rhs_storage._finishedTime {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._operationID != rhs_storage._operationID {return false}
        if _storage._batchID != rhs_storage._batchID {return false}
        if _storage._projectID != rhs_storage._projectID {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._processingInfo != rhs_storage._processingInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_RegisterUtteranceRequest.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_INVALID"),
    1: .same(proto: "STATUS_SUCCESS"),
    2: .same(proto: "STATUS_ERROR"),
  ]
}

extension Speechly_Analytics_V1_RegisterUtteranceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterUtteranceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_RegisterUtteranceResponse, rhs: Speechly_Analytics_V1_RegisterUtteranceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_RegisterUtterancesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterUtterancesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.requests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_RegisterUtterancesRequest, rhs: Speechly_Analytics_V1_RegisterUtterancesRequest) -> Bool {
    if lhs.requests != rhs.requests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_RegisterUtterancesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterUtterancesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_RegisterUtterancesResponse, rhs: Speechly_Analytics_V1_RegisterUtterancesResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_ModerationStatisticsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModerationStatisticsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "start_date"),
    4: .standard(proto: "end_date"),
    5: .same(proto: "aggregation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.startDate) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.endDate) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.aggregation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 2)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 3)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 4)
    }
    if self.aggregation != .invalid {
      try visitor.visitSingularEnumField(value: self.aggregation, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_ModerationStatisticsRequest, rhs: Speechly_Analytics_V1_ModerationStatisticsRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.aggregation != rhs.aggregation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_ModerationStatisticsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModerationStatisticsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "start_date"),
    4: .standard(proto: "end_date"),
    5: .same(proto: "aggregation"),
    6: .same(proto: "items"),
    7: .standard(proto: "total_events"),
    8: .standard(proto: "total_flagged"),
    9: .standard(proto: "total_not_flagged"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.startDate) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.endDate) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.aggregation) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.totalEvents) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.totalFlagged) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.totalNotFlagged) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 2)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 3)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 4)
    }
    if self.aggregation != .invalid {
      try visitor.visitSingularEnumField(value: self.aggregation, fieldNumber: 5)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 6)
    }
    if self.totalEvents != 0 {
      try visitor.visitSingularInt32Field(value: self.totalEvents, fieldNumber: 7)
    }
    if self.totalFlagged != 0 {
      try visitor.visitSingularInt32Field(value: self.totalFlagged, fieldNumber: 8)
    }
    if self.totalNotFlagged != 0 {
      try visitor.visitSingularInt32Field(value: self.totalNotFlagged, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_ModerationStatisticsResponse, rhs: Speechly_Analytics_V1_ModerationStatisticsResponse) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.aggregation != rhs.aggregation {return false}
    if lhs.items != rhs.items {return false}
    if lhs.totalEvents != rhs.totalEvents {return false}
    if lhs.totalFlagged != rhs.totalFlagged {return false}
    if lhs.totalNotFlagged != rhs.totalNotFlagged {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_UserStatisticsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserStatisticsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_UserStatisticsRequest, rhs: Speechly_Analytics_V1_UserStatisticsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Speechly_Analytics_V1_UserStatisticsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserStatisticsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speechly_Analytics_V1_UserStatisticsResponse, rhs: Speechly_Analytics_V1_UserStatisticsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
