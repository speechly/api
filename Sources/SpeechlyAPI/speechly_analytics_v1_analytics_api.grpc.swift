//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: speechly/analytics/v1/analytics_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Speechly Analytics API contains methods to get accumulated access data
/// for given apps and/or projects.
///
/// Usage: instantiate `Speechly_Analytics_V1_AnalyticsAPIClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Analytics_V1_AnalyticsAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? { get }

  func utteranceStatistics(
    _ request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse>

  func utterances(
    _ request: Speechly_Analytics_V1_UtterancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse>

  func registerUtterance(
    _ request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse>

  func registerUtterances(
    _ request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse>

  func moderationStatistics(
    _ request: Speechly_Analytics_V1_ModerationStatisticsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_ModerationStatisticsRequest, Speechly_Analytics_V1_ModerationStatisticsResponse>

  func userStatistics(
    _ request: Speechly_Analytics_V1_UserStatisticsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_UserStatisticsRequest, Speechly_Analytics_V1_UserStatisticsResponse>
}

extension Speechly_Analytics_V1_AnalyticsAPIClientProtocol {
  public var serviceName: String {
    return "speechly.analytics.v1.AnalyticsAPI"
  }

  /// Get a summary of utterances for a given time period.
  ///
  /// - Parameters:
  ///   - request: Request to send to UtteranceStatistics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func utteranceStatistics(
    _ request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse> {
    return self.makeUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utteranceStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtteranceStatisticsInterceptors() ?? []
    )
  }

  /// Get a sample of recent utterances.
  ///
  /// - Parameters:
  ///   - request: Request to send to Utterances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func utterances(
    _ request: Speechly_Analytics_V1_UtterancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse> {
    return self.makeUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utterances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtterancesInterceptors() ?? []
    )
  }

  /// Register a data point of an on-device or on-premise utterance.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterUtterance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerUtterance(
    _ request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse> {
    return self.makeUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtteranceInterceptors() ?? []
    )
  }

  /// Register multiple utterances in a single request.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterUtterances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerUtterances(
    _ request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse> {
    return self.makeUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtterancesInterceptors() ?? []
    )
  }

  /// Get moderation event statistics for a project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModerationStatistics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moderationStatistics(
    _ request: Speechly_Analytics_V1_ModerationStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_ModerationStatisticsRequest, Speechly_Analytics_V1_ModerationStatisticsResponse> {
    return self.makeUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.moderationStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModerationStatisticsInterceptors() ?? []
    )
  }

  /// Get statistics about user behaviour.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserStatistics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userStatistics(
    _ request: Speechly_Analytics_V1_UserStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_UserStatisticsRequest, Speechly_Analytics_V1_UserStatisticsResponse> {
    return self.makeUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.userStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserStatisticsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Speechly_Analytics_V1_AnalyticsAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Speechly_Analytics_V1_AnalyticsAPINIOClient")
public final class Speechly_Analytics_V1_AnalyticsAPIClient: Speechly_Analytics_V1_AnalyticsAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the speechly.analytics.v1.AnalyticsAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Speechly_Analytics_V1_AnalyticsAPINIOClient: Speechly_Analytics_V1_AnalyticsAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.analytics.v1.AnalyticsAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Speechly Analytics API contains methods to get accumulated access data
/// for given apps and/or projects.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Analytics_V1_AnalyticsAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? { get }

  func makeUtteranceStatisticsCall(
    _ request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse>

  func makeUtterancesCall(
    _ request: Speechly_Analytics_V1_UtterancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse>

  func makeRegisterUtteranceCall(
    _ request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse>

  func makeRegisterUtterancesCall(
    _ request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse>

  func makeModerationStatisticsCall(
    _ request: Speechly_Analytics_V1_ModerationStatisticsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_ModerationStatisticsRequest, Speechly_Analytics_V1_ModerationStatisticsResponse>

  func makeUserStatisticsCall(
    _ request: Speechly_Analytics_V1_UserStatisticsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_UserStatisticsRequest, Speechly_Analytics_V1_UserStatisticsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Analytics_V1_AnalyticsAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Analytics_V1_AnalyticsAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeUtteranceStatisticsCall(
    _ request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utteranceStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtteranceStatisticsInterceptors() ?? []
    )
  }

  public func makeUtterancesCall(
    _ request: Speechly_Analytics_V1_UtterancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utterances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtterancesInterceptors() ?? []
    )
  }

  public func makeRegisterUtteranceCall(
    _ request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtteranceInterceptors() ?? []
    )
  }

  public func makeRegisterUtterancesCall(
    _ request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtterancesInterceptors() ?? []
    )
  }

  public func makeModerationStatisticsCall(
    _ request: Speechly_Analytics_V1_ModerationStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_ModerationStatisticsRequest, Speechly_Analytics_V1_ModerationStatisticsResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.moderationStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModerationStatisticsInterceptors() ?? []
    )
  }

  public func makeUserStatisticsCall(
    _ request: Speechly_Analytics_V1_UserStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Speechly_Analytics_V1_UserStatisticsRequest, Speechly_Analytics_V1_UserStatisticsResponse> {
    return self.makeAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.userStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserStatisticsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Analytics_V1_AnalyticsAPIAsyncClientProtocol {
  public func utteranceStatistics(
    _ request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Analytics_V1_UtteranceStatisticsResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utteranceStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtteranceStatisticsInterceptors() ?? []
    )
  }

  public func utterances(
    _ request: Speechly_Analytics_V1_UtterancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Analytics_V1_UtterancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utterances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtterancesInterceptors() ?? []
    )
  }

  public func registerUtterance(
    _ request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Analytics_V1_RegisterUtteranceResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtteranceInterceptors() ?? []
    )
  }

  public func registerUtterances(
    _ request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Analytics_V1_RegisterUtterancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtterancesInterceptors() ?? []
    )
  }

  public func moderationStatistics(
    _ request: Speechly_Analytics_V1_ModerationStatisticsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Analytics_V1_ModerationStatisticsResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.moderationStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModerationStatisticsInterceptors() ?? []
    )
  }

  public func userStatistics(
    _ request: Speechly_Analytics_V1_UserStatisticsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Speechly_Analytics_V1_UserStatisticsResponse {
    return try await self.performAsyncUnaryCall(
      path: Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.userStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserStatisticsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Speechly_Analytics_V1_AnalyticsAPIAsyncClient: Speechly_Analytics_V1_AnalyticsAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'utteranceStatistics'.
  func makeUtteranceStatisticsInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse>]

  /// - Returns: Interceptors to use when invoking 'utterances'.
  func makeUtterancesInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse>]

  /// - Returns: Interceptors to use when invoking 'registerUtterance'.
  func makeRegisterUtteranceInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse>]

  /// - Returns: Interceptors to use when invoking 'registerUtterances'.
  func makeRegisterUtterancesInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse>]

  /// - Returns: Interceptors to use when invoking 'moderationStatistics'.
  func makeModerationStatisticsInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_ModerationStatisticsRequest, Speechly_Analytics_V1_ModerationStatisticsResponse>]

  /// - Returns: Interceptors to use when invoking 'userStatistics'.
  func makeUserStatisticsInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_UserStatisticsRequest, Speechly_Analytics_V1_UserStatisticsResponse>]
}

public enum Speechly_Analytics_V1_AnalyticsAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AnalyticsAPI",
    fullName: "speechly.analytics.v1.AnalyticsAPI",
    methods: [
      Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utteranceStatistics,
      Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.utterances,
      Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterance,
      Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.registerUtterances,
      Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.moderationStatistics,
      Speechly_Analytics_V1_AnalyticsAPIClientMetadata.Methods.userStatistics,
    ]
  )

  public enum Methods {
    public static let utteranceStatistics = GRPCMethodDescriptor(
      name: "UtteranceStatistics",
      path: "/speechly.analytics.v1.AnalyticsAPI/UtteranceStatistics",
      type: GRPCCallType.unary
    )

    public static let utterances = GRPCMethodDescriptor(
      name: "Utterances",
      path: "/speechly.analytics.v1.AnalyticsAPI/Utterances",
      type: GRPCCallType.unary
    )

    public static let registerUtterance = GRPCMethodDescriptor(
      name: "RegisterUtterance",
      path: "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterance",
      type: GRPCCallType.unary
    )

    public static let registerUtterances = GRPCMethodDescriptor(
      name: "RegisterUtterances",
      path: "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterances",
      type: GRPCCallType.unary
    )

    public static let moderationStatistics = GRPCMethodDescriptor(
      name: "ModerationStatistics",
      path: "/speechly.analytics.v1.AnalyticsAPI/ModerationStatistics",
      type: GRPCCallType.unary
    )

    public static let userStatistics = GRPCMethodDescriptor(
      name: "UserStatistics",
      path: "/speechly.analytics.v1.AnalyticsAPI/UserStatistics",
      type: GRPCCallType.unary
    )
  }
}

/// Speechly Analytics API contains methods to get accumulated access data
/// for given apps and/or projects.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Analytics_V1_AnalyticsAPIProvider: CallHandlerProvider {
  var interceptors: Speechly_Analytics_V1_AnalyticsAPIServerInterceptorFactoryProtocol? { get }

  /// Get a summary of utterances for a given time period.
  func utteranceStatistics(request: Speechly_Analytics_V1_UtteranceStatisticsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_UtteranceStatisticsResponse>

  /// Get a sample of recent utterances.
  func utterances(request: Speechly_Analytics_V1_UtterancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_UtterancesResponse>

  /// Register a data point of an on-device or on-premise utterance.
  func registerUtterance(request: Speechly_Analytics_V1_RegisterUtteranceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_RegisterUtteranceResponse>

  /// Register multiple utterances in a single request.
  func registerUtterances(request: Speechly_Analytics_V1_RegisterUtterancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_RegisterUtterancesResponse>

  /// Get moderation event statistics for a project.
  func moderationStatistics(request: Speechly_Analytics_V1_ModerationStatisticsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_ModerationStatisticsResponse>

  /// Get statistics about user behaviour.
  func userStatistics(request: Speechly_Analytics_V1_UserStatisticsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_UserStatisticsResponse>
}

extension Speechly_Analytics_V1_AnalyticsAPIProvider {
  public var serviceName: Substring {
    return Speechly_Analytics_V1_AnalyticsAPIServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UtteranceStatistics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UtteranceStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UtteranceStatisticsResponse>(),
        interceptors: self.interceptors?.makeUtteranceStatisticsInterceptors() ?? [],
        userFunction: self.utteranceStatistics(request:context:)
      )

    case "Utterances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UtterancesRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UtterancesResponse>(),
        interceptors: self.interceptors?.makeUtterancesInterceptors() ?? [],
        userFunction: self.utterances(request:context:)
      )

    case "RegisterUtterance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_RegisterUtteranceRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_RegisterUtteranceResponse>(),
        interceptors: self.interceptors?.makeRegisterUtteranceInterceptors() ?? [],
        userFunction: self.registerUtterance(request:context:)
      )

    case "RegisterUtterances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_RegisterUtterancesRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_RegisterUtterancesResponse>(),
        interceptors: self.interceptors?.makeRegisterUtterancesInterceptors() ?? [],
        userFunction: self.registerUtterances(request:context:)
      )

    case "ModerationStatistics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_ModerationStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_ModerationStatisticsResponse>(),
        interceptors: self.interceptors?.makeModerationStatisticsInterceptors() ?? [],
        userFunction: self.moderationStatistics(request:context:)
      )

    case "UserStatistics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UserStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UserStatisticsResponse>(),
        interceptors: self.interceptors?.makeUserStatisticsInterceptors() ?? [],
        userFunction: self.userStatistics(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Speechly Analytics API contains methods to get accumulated access data
/// for given apps and/or projects.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Speechly_Analytics_V1_AnalyticsAPIAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Speechly_Analytics_V1_AnalyticsAPIServerInterceptorFactoryProtocol? { get }

  /// Get a summary of utterances for a given time period.
  func utteranceStatistics(
    request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Analytics_V1_UtteranceStatisticsResponse

  /// Get a sample of recent utterances.
  func utterances(
    request: Speechly_Analytics_V1_UtterancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Analytics_V1_UtterancesResponse

  /// Register a data point of an on-device or on-premise utterance.
  func registerUtterance(
    request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Analytics_V1_RegisterUtteranceResponse

  /// Register multiple utterances in a single request.
  func registerUtterances(
    request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Analytics_V1_RegisterUtterancesResponse

  /// Get moderation event statistics for a project.
  func moderationStatistics(
    request: Speechly_Analytics_V1_ModerationStatisticsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Analytics_V1_ModerationStatisticsResponse

  /// Get statistics about user behaviour.
  func userStatistics(
    request: Speechly_Analytics_V1_UserStatisticsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Speechly_Analytics_V1_UserStatisticsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Speechly_Analytics_V1_AnalyticsAPIAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Speechly_Analytics_V1_AnalyticsAPIServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Speechly_Analytics_V1_AnalyticsAPIServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Speechly_Analytics_V1_AnalyticsAPIServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UtteranceStatistics":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UtteranceStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UtteranceStatisticsResponse>(),
        interceptors: self.interceptors?.makeUtteranceStatisticsInterceptors() ?? [],
        wrapping: { try await self.utteranceStatistics(request: $0, context: $1) }
      )

    case "Utterances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UtterancesRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UtterancesResponse>(),
        interceptors: self.interceptors?.makeUtterancesInterceptors() ?? [],
        wrapping: { try await self.utterances(request: $0, context: $1) }
      )

    case "RegisterUtterance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_RegisterUtteranceRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_RegisterUtteranceResponse>(),
        interceptors: self.interceptors?.makeRegisterUtteranceInterceptors() ?? [],
        wrapping: { try await self.registerUtterance(request: $0, context: $1) }
      )

    case "RegisterUtterances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_RegisterUtterancesRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_RegisterUtterancesResponse>(),
        interceptors: self.interceptors?.makeRegisterUtterancesInterceptors() ?? [],
        wrapping: { try await self.registerUtterances(request: $0, context: $1) }
      )

    case "ModerationStatistics":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_ModerationStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_ModerationStatisticsResponse>(),
        interceptors: self.interceptors?.makeModerationStatisticsInterceptors() ?? [],
        wrapping: { try await self.moderationStatistics(request: $0, context: $1) }
      )

    case "UserStatistics":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UserStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UserStatisticsResponse>(),
        interceptors: self.interceptors?.makeUserStatisticsInterceptors() ?? [],
        wrapping: { try await self.userStatistics(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Analytics_V1_AnalyticsAPIServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'utteranceStatistics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUtteranceStatisticsInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse>]

  /// - Returns: Interceptors to use when handling 'utterances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUtterancesInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse>]

  /// - Returns: Interceptors to use when handling 'registerUtterance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterUtteranceInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse>]

  /// - Returns: Interceptors to use when handling 'registerUtterances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterUtterancesInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse>]

  /// - Returns: Interceptors to use when handling 'moderationStatistics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModerationStatisticsInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_ModerationStatisticsRequest, Speechly_Analytics_V1_ModerationStatisticsResponse>]

  /// - Returns: Interceptors to use when handling 'userStatistics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserStatisticsInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_UserStatisticsRequest, Speechly_Analytics_V1_UserStatisticsResponse>]
}

public enum Speechly_Analytics_V1_AnalyticsAPIServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AnalyticsAPI",
    fullName: "speechly.analytics.v1.AnalyticsAPI",
    methods: [
      Speechly_Analytics_V1_AnalyticsAPIServerMetadata.Methods.utteranceStatistics,
      Speechly_Analytics_V1_AnalyticsAPIServerMetadata.Methods.utterances,
      Speechly_Analytics_V1_AnalyticsAPIServerMetadata.Methods.registerUtterance,
      Speechly_Analytics_V1_AnalyticsAPIServerMetadata.Methods.registerUtterances,
      Speechly_Analytics_V1_AnalyticsAPIServerMetadata.Methods.moderationStatistics,
      Speechly_Analytics_V1_AnalyticsAPIServerMetadata.Methods.userStatistics,
    ]
  )

  public enum Methods {
    public static let utteranceStatistics = GRPCMethodDescriptor(
      name: "UtteranceStatistics",
      path: "/speechly.analytics.v1.AnalyticsAPI/UtteranceStatistics",
      type: GRPCCallType.unary
    )

    public static let utterances = GRPCMethodDescriptor(
      name: "Utterances",
      path: "/speechly.analytics.v1.AnalyticsAPI/Utterances",
      type: GRPCCallType.unary
    )

    public static let registerUtterance = GRPCMethodDescriptor(
      name: "RegisterUtterance",
      path: "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterance",
      type: GRPCCallType.unary
    )

    public static let registerUtterances = GRPCMethodDescriptor(
      name: "RegisterUtterances",
      path: "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterances",
      type: GRPCCallType.unary
    )

    public static let moderationStatistics = GRPCMethodDescriptor(
      name: "ModerationStatistics",
      path: "/speechly.analytics.v1.AnalyticsAPI/ModerationStatistics",
      type: GRPCCallType.unary
    )

    public static let userStatistics = GRPCMethodDescriptor(
      name: "UserStatistics",
      path: "/speechly.analytics.v1.AnalyticsAPI/UserStatistics",
      type: GRPCCallType.unary
    )
  }
}
