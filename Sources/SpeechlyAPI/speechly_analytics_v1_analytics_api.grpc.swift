//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: speechly/analytics/v1/analytics_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Speechly Analytics API contains methods to get accumulated access data
/// for given apps and/or projects.
///
/// Usage: instantiate `Speechly_Analytics_V1_AnalyticsAPIClient`, then call methods of this protocol to make API calls.
public protocol Speechly_Analytics_V1_AnalyticsAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? { get }

  func utteranceStatistics(
    _ request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse>

  func utterances(
    _ request: Speechly_Analytics_V1_UtterancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse>

  func registerUtterance(
    _ request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse>

  func registerUtterances(
    _ request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse>
}

extension Speechly_Analytics_V1_AnalyticsAPIClientProtocol {
  public var serviceName: String {
    return "speechly.analytics.v1.AnalyticsAPI"
  }

  /// Get a summary of utterances for a given time period.
  ///
  /// - Parameters:
  ///   - request: Request to send to UtteranceStatistics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func utteranceStatistics(
    _ request: Speechly_Analytics_V1_UtteranceStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse> {
    return self.makeUnaryCall(
      path: "/speechly.analytics.v1.AnalyticsAPI/UtteranceStatistics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtteranceStatisticsInterceptors() ?? []
    )
  }

  /// Get a sample of recent utterances.
  ///
  /// - Parameters:
  ///   - request: Request to send to Utterances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func utterances(
    _ request: Speechly_Analytics_V1_UtterancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse> {
    return self.makeUnaryCall(
      path: "/speechly.analytics.v1.AnalyticsAPI/Utterances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtterancesInterceptors() ?? []
    )
  }

  /// Register a data point of an on-device or on-premise utterance.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterUtterance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerUtterance(
    _ request: Speechly_Analytics_V1_RegisterUtteranceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse> {
    return self.makeUnaryCall(
      path: "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtteranceInterceptors() ?? []
    )
  }

  /// Register multiple utterances in a single request.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterUtterances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerUtterances(
    _ request: Speechly_Analytics_V1_RegisterUtterancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse> {
    return self.makeUnaryCall(
      path: "/speechly.analytics.v1.AnalyticsAPI/RegisterUtterances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUtterancesInterceptors() ?? []
    )
  }
}

public protocol Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'utteranceStatistics'.
  func makeUtteranceStatisticsInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse>]

  /// - Returns: Interceptors to use when invoking 'utterances'.
  func makeUtterancesInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse>]

  /// - Returns: Interceptors to use when invoking 'registerUtterance'.
  func makeRegisterUtteranceInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse>]

  /// - Returns: Interceptors to use when invoking 'registerUtterances'.
  func makeRegisterUtterancesInterceptors() -> [ClientInterceptor<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse>]
}

public final class Speechly_Analytics_V1_AnalyticsAPIClient: Speechly_Analytics_V1_AnalyticsAPIClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the speechly.analytics.v1.AnalyticsAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechly_Analytics_V1_AnalyticsAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Speechly Analytics API contains methods to get accumulated access data
/// for given apps and/or projects.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Speechly_Analytics_V1_AnalyticsAPIProvider: CallHandlerProvider {
  var interceptors: Speechly_Analytics_V1_AnalyticsAPIServerInterceptorFactoryProtocol? { get }

  /// Get a summary of utterances for a given time period.
  func utteranceStatistics(request: Speechly_Analytics_V1_UtteranceStatisticsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_UtteranceStatisticsResponse>

  /// Get a sample of recent utterances.
  func utterances(request: Speechly_Analytics_V1_UtterancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_UtterancesResponse>

  /// Register a data point of an on-device or on-premise utterance.
  func registerUtterance(request: Speechly_Analytics_V1_RegisterUtteranceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_RegisterUtteranceResponse>

  /// Register multiple utterances in a single request.
  func registerUtterances(request: Speechly_Analytics_V1_RegisterUtterancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Speechly_Analytics_V1_RegisterUtterancesResponse>
}

extension Speechly_Analytics_V1_AnalyticsAPIProvider {
  public var serviceName: Substring { return "speechly.analytics.v1.AnalyticsAPI" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UtteranceStatistics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UtteranceStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UtteranceStatisticsResponse>(),
        interceptors: self.interceptors?.makeUtteranceStatisticsInterceptors() ?? [],
        userFunction: self.utteranceStatistics(request:context:)
      )

    case "Utterances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_UtterancesRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_UtterancesResponse>(),
        interceptors: self.interceptors?.makeUtterancesInterceptors() ?? [],
        userFunction: self.utterances(request:context:)
      )

    case "RegisterUtterance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_RegisterUtteranceRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_RegisterUtteranceResponse>(),
        interceptors: self.interceptors?.makeRegisterUtteranceInterceptors() ?? [],
        userFunction: self.registerUtterance(request:context:)
      )

    case "RegisterUtterances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechly_Analytics_V1_RegisterUtterancesRequest>(),
        responseSerializer: ProtobufSerializer<Speechly_Analytics_V1_RegisterUtterancesResponse>(),
        interceptors: self.interceptors?.makeRegisterUtterancesInterceptors() ?? [],
        userFunction: self.registerUtterances(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Speechly_Analytics_V1_AnalyticsAPIServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'utteranceStatistics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUtteranceStatisticsInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_UtteranceStatisticsRequest, Speechly_Analytics_V1_UtteranceStatisticsResponse>]

  /// - Returns: Interceptors to use when handling 'utterances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUtterancesInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_UtterancesRequest, Speechly_Analytics_V1_UtterancesResponse>]

  /// - Returns: Interceptors to use when handling 'registerUtterance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterUtteranceInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_RegisterUtteranceRequest, Speechly_Analytics_V1_RegisterUtteranceResponse>]

  /// - Returns: Interceptors to use when handling 'registerUtterances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterUtterancesInterceptors() -> [ServerInterceptor<Speechly_Analytics_V1_RegisterUtterancesRequest, Speechly_Analytics_V1_RegisterUtterancesResponse>]
}
