syntax = "proto3";

package speechly.identity.v2;

option csharp_namespace = "Speechly.Identity.V2";
option go_package = "speechly/identity/v2;identityv2";
option java_multiple_files = true;
option java_outer_classname = "IdentityApiProto";
option java_package = "com.speechly.identity.v2";
option objc_class_prefix = "SIX";
option php_namespace = "Speechly\\Identity\\V2";

import "speechly/identity/v2/identity.proto";
import "google/api/annotations.proto";

// Speechly Identity API is used for creating access tokens for the Speechly APIs.
service IdentityAPI {
  // Performs a login of specific Speechly application.
  // Returns an access token which can be used to access thee Speechly API.
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      get : "/identity/login/v2"
    };
  };

}

// Top-level message sent by the client for the `Login` method.
message LoginRequest {
  // A unique end-user device identifier.
  // Must be a `UUID`.
  // Required.
  string device_id = 1;
  oneof scope {
    // Login scope application: use the given application context for all utterances.
    ApplicationScope application = 2;
    // Login scope project: define the target application per utterance.
    // The target applications must be located in the same project.
    ProjectScope project = 3;
  }
}

// Top-level message returned by the server for the `Login` method.
message LoginResponse {
  // Access token which can used for the Speechly API.
  // The token is a JSON Web Token and includes all standard claims, as well as custom ones.
  // The token has expiration, so you should check whether it has expired before using it.
  // It is safe to cache the token for future use until its expiration date.
  string token = 1;
  // Amount of seconds the returned token is valid.
  uint32 valid_for_s = 2;
  // Token expiration time in seconds after 1970-01-01 ("unix time").
  uint64 expires_at_epoch = 3;
  // ISO-formatted UTC timestamp of the expiration time of the returned token.
  string expires_at = 4;
}
