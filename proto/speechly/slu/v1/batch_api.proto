syntax = "proto3";

package speechly.slu.v1;

option csharp_namespace = "Speechly.Slu.V1";
option go_package = "speechly/slu/v1;sluv1";
option java_multiple_files = true;
option java_outer_classname = "BatchApiProto";
option java_package = "com.speechly.slu.v1";
option objc_class_prefix = "SSX";
option php_namespace = "Speechly\\Slu\\V1";

import "speechly/slu/v1/batch.proto";

// Run SLU operations on audio sources without actively waiting the results.
service BatchAPI {
  // Create a new background SLU operation for a single audio source.
  // An audio source can be
  //  - audio chunks sent via repeated ProcessAudioRequests, or
  //  - URI of a file, reachable from the API
  //  The response includes an `id` that is used to match the operation to the
  //  results. A `reference` identifier can also be set.
  //  The destination can be a webhook URL, in which case the results are posted
  //  there when they are ready. The payload is an instance of `Operation`.
  rpc ProcessAudio(stream ProcessAudioRequest) returns (ProcessAudioResponse);
  // Query the status of a given batch operation.
  // If the `ProcessAudioRequest` did not define a `results_uri` as a
  // destination, the results are returned in the `QueryStatusResponse`.
  rpc QueryStatus(QueryStatusRequest) returns (QueryStatusResponse);
}

// If sending a stream of `ProcessAudioRequest` messages, the first one must
// contain the `AudioConfiguration` for the audio data. The `config` is ignored
// in the following messages.
message ProcessAudioRequest {
  // The processing context, Speechly application ID.
  // Required.
  string app_id = 1;
  // The device ID of the audio source, for example a microphone
  // identifier as UUID.
  // Optional.
  string device_id = 8;
  // Audio configuration.
  // Required.
  AudioConfiguration config = 2;

  // The data (audio) source for the operation.
  // Required.
  oneof source {
    // Raw audio data.
    bytes audio = 3;
    // URI of audio data. Can be http or GCS.
    string uri = 4;
    // Detailed HTTP source data.
    HttpResource http_source = 9;
  }

  // The target for the results of the operation. If not given, the results
  // must be fetched using `QueryStatus`.
  // Optional.
  oneof destination {
    // Basic HTTP POST destination.
    // The payload will be `Operation` as JSON.
    string results_uri = 5;
    // A more fine-grained result target, supporting HTTP method and HTTP headers.
    // The payload will be `Operation` as JSON.
    HttpResource http_result = 10;
  }

  // Reference id for the operation. For example an identifier of the source
  // system.
  // Optional.
  string reference = 6;

  // Additional operation specific options.
  // Optional.
  repeated Option options = 7;
}

message ProcessAudioResponse {
  // The details of the created operation.
  Operation operation = 1;
}

// Query the status of an operation. Either `id` or `reference` must be given.
message QueryStatusRequest {
  // ID of an audio processing operation.
  string id = 1;
  // Reference ID of an operation.
  string reference = 2;
}

message QueryStatusResponse {
  // The details of the audio processing operation.
  Operation operation = 1;
}
