syntax = "proto3";

package speechly.slu.v1;

option csharp_namespace = "Speechly.Slu.V1";
option go_package = "speechly/slu/v1;sluv1";
option java_multiple_files = true;
option java_outer_classname = "BatchProto";
option java_package = "com.speechly.slu.v1";
option objc_class_prefix = "SSX";
option php_namespace = "Speechly\\Slu\\V1";

// Describes the audio content of the batch operation.
message AudioConfiguration {
  // The encoding of the audio data sent in the stream.
  enum Encoding {
    ENCODING_INVALID = 0;
    // Uncompressed 16-bit signed little-endian samples (Linear PCM).
    ENCODING_LINEAR16 = 1;
  }
  // The encoding of the audio data sent in the stream.
  // Required.
  Encoding encoding = 1;
  // The number of channels in the input audio data.
  // Required.
  int32 channels = 2;
  // Sample rate in Hertz of the audio data sent in the stream (e.g. 16000).
  // Required.
  int32 sample_rate_hertz = 3;
  // The language(s) of the audio sent in the stream as a BCP-47 language tag
  // (e.g. "en-US"). Defaults to the target application language.
  // Optional.
  repeated string language_codes = 4;
}

// Describes full properties of an HTTP endpoint.
message HttpResource {
  // The HTTP method to use.
  enum Method {
    METHOD_INVALID = 0;
    METHOD_GET = 1;
    METHOD_POST = 2;
    METHOD_PUT = 3;
  }
  // A single header value.
  message Header {
    string name = 1;
    string value = 2;
  }
  // URL of the endpoint (protocol://server/path)
  // Required.
  string url = 1;
  // method to use in connection.
  // Required.
  Method method = 2;
  // Possible additional headers to include in the connection.
  // Optional.
  repeated Header headers = 3;
}

// Describes a single batch operation.
message Operation {
  // The status of the operation.
  enum Status {
    STATUS_INVALID = 0;
    STATUS_QUEUED = 1;
    STATUS_PROCESSING = 2;
    STATUS_DONE = 3;
    STATUS_ERROR = 4;
  }
  // The id of the operation.
  string id = 1;
  // The reference id of the operation, if given.
  string reference = 2;
  // The current status of the operation.
  Status status = 3;
  // The language code of the detected language.
  string language_code = 4;
  // The application context for the operation.
  string app_id = 5;
  // The device or microphone id for the audio, if applicable.
  string device_id = 6;
  // If the operation status is STATUS_DONE and the destination is not set,
  // the results of the operation.
  repeated Transcript transcripts = 7;
  // Contains a description of the error if the operation status is STATUS_ERROR.
  string error = 8;
}

// Describes an SLU transcript.
// A transcript is a speech-to-text element of the phrase, i.e. a word
// recognised from the audio.
message Transcript {
  // The word recongised from the audio.
  string word = 1;
  // The position of the word in the whole phrase, zero-based.
  int32 index = 2;
  // The end time of the word in the audio, in milliseconds from the beginning
  // of the audio.
  int32 start_time = 3;
  // The end time of the word in the audio, in milliseconds from the beginning
  // of the audio.
  int32 end_time = 4;
}

// Option to change the default behaviour of the SLU.
message Option {
  // The key of the option to be set.
  string key = 1;
  // The values to set the option to.
  repeated string value = 2;
}
