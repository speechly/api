syntax = "proto3";

package speechly.slu.v2beta1;

option csharp_namespace = "Speechly.Slu.V2beta1";
option go_package = "speechly/slu/v2beta1;sluv2beta1";
option java_multiple_files = true;
option java_outer_classname = "BatchApiProto";
option java_package = "com.speechly.slu.v2beta1";
option objc_class_prefix = "SSX";
option php_namespace = "Speechly\\Slu\\V2beta1";

import "speechly/slu/v2beta1/batch.proto";

// Run SLU operations on audio sources without actively waiting the results.
service BatchAPI {
  // Create a new background SLU operation for a one or more audio sources.
  // Audio sources must be URIs of a files, reachable from the API
  //  The response includes an `id` that is used to match the operation to the
  //  results. A `reference` identifier can also be set.
  //  Also a `batch_reference` can be set to mark that multiple audio sources form a logical batch. In that case,
  //  the response will include a `batch_id`.
  //  The destination can be a webhook URL, in which case the results are posted
  //  there when they are ready. The payload is an instance of `Operation`.
  rpc ProcessAudioSource(stream ProcessAudioSourceRequest) returns (ProcessAudioSourceResponse);

  // Query the status of given batch operations.
  // If the `ProcessAudioSourceRequest` did not define a `destination` as a
  // destination, the results are returned in the `QueryStatusResponse`.
  rpc QueryStatus(QueryStatusRequest) returns (QueryStatusResponse);
}

message ProcessAudioSourceRequest {
  ProcessAudioBatchConfig config = 1;
  repeated ProcessAudioSourceRequestItem source = 2;
}

message ProcessAudioSourceResponse {
  // The details of the created operations.
  repeated Operation operation = 3;
}

// Query the status of an operation. At least one of these must be given.
message QueryStatusRequest {
  // ID of an audio processing operation.
  repeated string operation_ids = 1;
  // Reference ID of an operation.
  repeated string references = 2;

  // ID of an audio processing batch.
  string batch_id = 4;
  // Reference ID of a batch.
  string batch_reference = 5;
}

message QueryStatusResponse {
  // The details of the audio processing operation.
  repeated Operation operation = 1;
}



