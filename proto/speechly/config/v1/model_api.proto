syntax = "proto3";

package speechly.config.v1;

option csharp_namespace = "Speechly.Config.V1";
option go_package = "speechly/config/v1;configv1";
option java_multiple_files = true;
option java_outer_classname = "ModelApiProto";
option java_package = "com.speechly.config.v1";
option objc_class_prefix = "SCX";
option php_namespace = "Speechly\\Config\\V1";

import "speechly/config/v1/model.proto";

// Speechly Model API provides operations related to the on-device models.
//
// The service requires a Speechly token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
//
// The token acts as a proxy for the user who has generated it,
// i.e. all operations are performed with that user as a subject.
service ModelAPI {
  // Downloads a model bundle for on-device use.
  rpc DownloadModel(DownloadModelRequest) returns (stream DownloadModelResponse);
  // List the base models available for use as basis in training.
  rpc ListBaseModels(ListBaseModelsRequest) returns (ListBaseModelsResponse);
  // List supported languages.
  rpc ListLanguages(ListLanguagesRequest) returns (ListLanguagesResponse);
}

// Top-level message sent by the client for the `DownloadModel` method.
message DownloadModelRequest {
  // The machine learning architecture that the model is compatible with.
  enum ModelArchitecture {
    MODEL_ARCHITECTURE_INVALID = 0;
    MODEL_ARCHITECTURE_ORT = 1;
    MODEL_ARCHITECTURE_COREML = 2;
    MODEL_ARCHITECTURE_TFLITE = 3;
  }
  // The ID of the app to fetch.
  string app_id = 1;
  // The config ID to fetch, defaults to the latest configuration.
  string config_id = 2;
  // What ML architecture should the model use.
  ModelArchitecture model_architecture = 3;
}

// Top-level message sent by the server for the `DownloadModel` method.
message DownloadModelResponse {
  // Model data payload.
  bytes chunk = 1;
}

// Top-level message sent by the client for the `ListBaseModels` method.
message ListBaseModelsRequest {
  string project_id = 1;
  string language = 2;
}

// Top-level message sent by the server for the `ListBaseModels` method.
message ListBaseModelsResponse {
  // Names of the available base models
  repeated BaseModel model = 1;
}

// Top-level message to list the available languages in the API.
message ListLanguagesRequest {}

// Response for the language listing request, listing available languages.
message ListLanguagesResponse {
  // Language contains language code (ISO 639-1) and name of language.
  message Language {
    string code = 1;
    string name = 2;
  }
  repeated Language languages = 1;
}
