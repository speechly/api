syntax = "proto3";

package speechly.sal.v1;

option csharp_namespace = "Speechly.Sal.V1";
option go_package = "speechly/sal/v1;salv1";
option java_multiple_files = true;
option java_outer_classname = "CompilerProto";
option java_package = "com.speechly.sal.v1";
option objc_class_prefix = "SSX";
option php_namespace = "Speechly\\Sal\\V1";

// The Speechly Compiler API is used for validating and compiling Speechly Annotation Language source files.
//
// The service requires a Speechly API token, which is obtained from Speechly Dashboard (https://speechly.com/dashboard).
//
// The token acts as a proxy for the user who has generated it,
// i.e. all operations are performed with that user as a subject.
service Compiler {
  // Compiles the SAL source and returns compiled templates and / or any compilation errors and warnings.
  rpc Compile(stream CompileRequest) returns (CompileResult);
  // Validates the SAL source and returns compilation notices / warnings and errors, if any.
  rpc Validate(stream AppSource) returns (ValidateResult);
  // Extracts raw, not compiled SAL templates from the SAL source.
  rpc ExtractSALSources(stream AppSource) returns (stream ExtractSALSourcesResult);
  // Converts an input configuration (e.g. Alexa) to SAL format
  rpc Convert(stream ConvertRequest) returns (ConvertResult);
}

// Contains a chunk of SAL source.
// This message is consumed by `Validate` and `ExtractSALSources` RPCs and
// as a part of `CompileRequest` and `ConvertResult`.
message AppSource {
  // The ID of Speechly app to compile for.
  string app_id = 1;
  // The language of SAL as a BCP-47 language tag (e.g. "en-US").
  string language = 2;
  // Chunk of SAL source code.
  bytes data_chunk = 3;
  // Content type options.
  enum ContentType {
    CONTENT_TYPE_UNSPECIFIED = 0;
    CONTENT_TYPE_YAML = 1;
    CONTENT_TYPE_TAR = 2;
  }
  // Optional content type of the SAL source.
  ContentType content_type = 4;
}

// This message is consumed by `Compile` RPC
message CompileRequest {
  // A chunk of SAL source.
  AppSource app_source = 1;
  // Number of examples to return:
  int32 batch_size = 2;
  // Random seed for example sampling. Changing seed can give different output.
  int32 random_seed = 3;
}

// Top-level message sent by the server for the `Compile` method.
message CompileResult {
  // Describes the status of result.
  enum Result {
    // Result has been successfully compiled.
    COMPILE_SUCCESS = 0;
    // Result has failed to compile.
    COMPILE_FAILURE = 1;
    // Result has been compiled, but with warnings.
    COMPILE_WARNING = 2;
  }
  // The status of compilation.
  Result result = 1;
  // (If the result was compiled) A list of compiled templates.
  repeated string templates = 2;
  // (If the result failed or had warnings) A list of error / warning messages.
  repeated LineReference messages = 3;
}

// This message is consumed by `Convert` RPC
message ConvertRequest {
  // Describes the input format.
  enum InputFormat {
    // No input format or unknown format.
    FORMAT_UNKNOWN = 0;
    // Input is an Alexa configuration in JSON format.
    FORMAT_ALEXA = 1;
  }
  // Format in which input configuration is supplied.
  InputFormat input_format = 1;
  // Language of the input configuration.
  string language = 2;
  // Chunk of input configuration.
  bytes data_chunk = 3;
}

// Top-level message sent by the server for the `Convert` method.
message ConvertResult {
  // Describes the conversion status.
  enum Status {
    // Successful conversion without warnings.
    CONVERT_SUCCESS = 0;
    // Successful conversion, but with warnings.
    CONVERT_WARNINGS = 1;
    // Failed to convert.
    CONVERT_FAILED = 2;
  }
  // Status of conversion.
  Status status = 1;
  // Warning message, empty unless status = CONVERT_WARNINGS.
  string warnings = 2;
  // The converted SAL configuration.
  AppSource result = 3;
}

// Top-level message sent by the server for the `Validate` method.
message ValidateResult {
  // A list of error / warning messages, may be empty if validation didn't find any issues.
  repeated LineReference messages = 1;
}

// Describes a message related to a line in SAL source code.
message LineReference {
  // The level of the message.
  enum Level {
    // A notice - for information only.
    LEVEL_NOTE = 0;
    // A warning, does not fail compilation or validation, but should be addressed.
    LEVEL_WARNING = 1;
    // An error, fails compilation and validation.
    LEVEL_ERROR = 2;
  }
  // The line in SAL source that this message refers to.
  uint64 line = 1;
  // The column in SAL source that this message refers to.
  uint32 column = 2;
  // The file in SAL sources that this message refers to.
  string file = 3;
  // The level of the message.
  Level level = 4;
  // The contents of the message.
  string message = 5;
}

// Top-level message sent by the server for the `ExtractSALSources` method.
message ExtractSALSourcesResult {
  // Chunk of extracted SAL source code.
  bytes data_chunk = 1;
}
